
cmwx1zzabz_0xx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efd4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c9c  0800f094  0800f094  0001f094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fd30  0800fd30  0001fd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fd38  0800fd38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fd3c  0800fd3c  0001fd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000154  20000000  0800fd40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000018dc  20000154  0800fe94  00020154  2**2
                  ALLOC
  8 ._user_heap_stack 00000800  20001a30  0800fe94  00021a30  2**0
                  ALLOC
  9 .ARM.attributes 00000028  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0003e2ab  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000ade8  00000000  00000000  0005e46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000020f8  00000000  00000000  00069258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002473  00000000  00000000  0006b350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00021575  00000000  00000000  0006d7c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003ff23  00000000  00000000  0008ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000b0434  00000000  00000000  000cec5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006480  00000000  00000000  0017f090  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00010f7c  00000000  00000000  00185510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000145  00000000  00000000  0019648c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000154 	.word	0x20000154
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f07c 	.word	0x0800f07c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000158 	.word	0x20000158
 8000104:	0800f07c 	.word	0x0800f07c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_sqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5609      	ldrsb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f8f0 	bl	8000450 <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__divsi3>:
 800027c:	4603      	mov	r3, r0
 800027e:	430b      	orrs	r3, r1
 8000280:	d47f      	bmi.n	8000382 <__divsi3+0x106>
 8000282:	2200      	movs	r2, #0
 8000284:	0843      	lsrs	r3, r0, #1
 8000286:	428b      	cmp	r3, r1
 8000288:	d374      	bcc.n	8000374 <__divsi3+0xf8>
 800028a:	0903      	lsrs	r3, r0, #4
 800028c:	428b      	cmp	r3, r1
 800028e:	d35f      	bcc.n	8000350 <__divsi3+0xd4>
 8000290:	0a03      	lsrs	r3, r0, #8
 8000292:	428b      	cmp	r3, r1
 8000294:	d344      	bcc.n	8000320 <__divsi3+0xa4>
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d328      	bcc.n	80002ee <__divsi3+0x72>
 800029c:	0c03      	lsrs	r3, r0, #16
 800029e:	428b      	cmp	r3, r1
 80002a0:	d30d      	bcc.n	80002be <__divsi3+0x42>
 80002a2:	22ff      	movs	r2, #255	; 0xff
 80002a4:	0209      	lsls	r1, r1, #8
 80002a6:	ba12      	rev	r2, r2
 80002a8:	0c03      	lsrs	r3, r0, #16
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d302      	bcc.n	80002b4 <__divsi3+0x38>
 80002ae:	1212      	asrs	r2, r2, #8
 80002b0:	0209      	lsls	r1, r1, #8
 80002b2:	d065      	beq.n	8000380 <__divsi3+0x104>
 80002b4:	0b03      	lsrs	r3, r0, #12
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d319      	bcc.n	80002ee <__divsi3+0x72>
 80002ba:	e000      	b.n	80002be <__divsi3+0x42>
 80002bc:	0a09      	lsrs	r1, r1, #8
 80002be:	0bc3      	lsrs	r3, r0, #15
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x4c>
 80002c4:	03cb      	lsls	r3, r1, #15
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0b83      	lsrs	r3, r0, #14
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x58>
 80002d0:	038b      	lsls	r3, r1, #14
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0b43      	lsrs	r3, r0, #13
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x64>
 80002dc:	034b      	lsls	r3, r1, #13
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0b03      	lsrs	r3, r0, #12
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0x70>
 80002e8:	030b      	lsls	r3, r1, #12
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	0ac3      	lsrs	r3, r0, #11
 80002f0:	428b      	cmp	r3, r1
 80002f2:	d301      	bcc.n	80002f8 <__divsi3+0x7c>
 80002f4:	02cb      	lsls	r3, r1, #11
 80002f6:	1ac0      	subs	r0, r0, r3
 80002f8:	4152      	adcs	r2, r2
 80002fa:	0a83      	lsrs	r3, r0, #10
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x88>
 8000300:	028b      	lsls	r3, r1, #10
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0a43      	lsrs	r3, r0, #9
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x94>
 800030c:	024b      	lsls	r3, r1, #9
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0a03      	lsrs	r3, r0, #8
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0xa0>
 8000318:	020b      	lsls	r3, r1, #8
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	d2cd      	bcs.n	80002bc <__divsi3+0x40>
 8000320:	09c3      	lsrs	r3, r0, #7
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xae>
 8000326:	01cb      	lsls	r3, r1, #7
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0983      	lsrs	r3, r0, #6
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xba>
 8000332:	018b      	lsls	r3, r1, #6
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0943      	lsrs	r3, r0, #5
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xc6>
 800033e:	014b      	lsls	r3, r1, #5
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d301      	bcc.n	800034e <__divsi3+0xd2>
 800034a:	010b      	lsls	r3, r1, #4
 800034c:	1ac0      	subs	r0, r0, r3
 800034e:	4152      	adcs	r2, r2
 8000350:	08c3      	lsrs	r3, r0, #3
 8000352:	428b      	cmp	r3, r1
 8000354:	d301      	bcc.n	800035a <__divsi3+0xde>
 8000356:	00cb      	lsls	r3, r1, #3
 8000358:	1ac0      	subs	r0, r0, r3
 800035a:	4152      	adcs	r2, r2
 800035c:	0883      	lsrs	r3, r0, #2
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xea>
 8000362:	008b      	lsls	r3, r1, #2
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0843      	lsrs	r3, r0, #1
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xf6>
 800036e:	004b      	lsls	r3, r1, #1
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	1a41      	subs	r1, r0, r1
 8000376:	d200      	bcs.n	800037a <__divsi3+0xfe>
 8000378:	4601      	mov	r1, r0
 800037a:	4152      	adcs	r2, r2
 800037c:	4610      	mov	r0, r2
 800037e:	4770      	bx	lr
 8000380:	e05d      	b.n	800043e <__divsi3+0x1c2>
 8000382:	0fca      	lsrs	r2, r1, #31
 8000384:	d000      	beq.n	8000388 <__divsi3+0x10c>
 8000386:	4249      	negs	r1, r1
 8000388:	1003      	asrs	r3, r0, #32
 800038a:	d300      	bcc.n	800038e <__divsi3+0x112>
 800038c:	4240      	negs	r0, r0
 800038e:	4053      	eors	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	469c      	mov	ip, r3
 8000394:	0903      	lsrs	r3, r0, #4
 8000396:	428b      	cmp	r3, r1
 8000398:	d32d      	bcc.n	80003f6 <__divsi3+0x17a>
 800039a:	0a03      	lsrs	r3, r0, #8
 800039c:	428b      	cmp	r3, r1
 800039e:	d312      	bcc.n	80003c6 <__divsi3+0x14a>
 80003a0:	22fc      	movs	r2, #252	; 0xfc
 80003a2:	0189      	lsls	r1, r1, #6
 80003a4:	ba12      	rev	r2, r2
 80003a6:	0a03      	lsrs	r3, r0, #8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d30c      	bcc.n	80003c6 <__divsi3+0x14a>
 80003ac:	0189      	lsls	r1, r1, #6
 80003ae:	1192      	asrs	r2, r2, #6
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d308      	bcc.n	80003c6 <__divsi3+0x14a>
 80003b4:	0189      	lsls	r1, r1, #6
 80003b6:	1192      	asrs	r2, r2, #6
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d304      	bcc.n	80003c6 <__divsi3+0x14a>
 80003bc:	0189      	lsls	r1, r1, #6
 80003be:	d03a      	beq.n	8000436 <__divsi3+0x1ba>
 80003c0:	1192      	asrs	r2, r2, #6
 80003c2:	e000      	b.n	80003c6 <__divsi3+0x14a>
 80003c4:	0989      	lsrs	r1, r1, #6
 80003c6:	09c3      	lsrs	r3, r0, #7
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x154>
 80003cc:	01cb      	lsls	r3, r1, #7
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0983      	lsrs	r3, r0, #6
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x160>
 80003d8:	018b      	lsls	r3, r1, #6
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	0943      	lsrs	r3, r0, #5
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d301      	bcc.n	80003e8 <__divsi3+0x16c>
 80003e4:	014b      	lsls	r3, r1, #5
 80003e6:	1ac0      	subs	r0, r0, r3
 80003e8:	4152      	adcs	r2, r2
 80003ea:	0903      	lsrs	r3, r0, #4
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x178>
 80003f0:	010b      	lsls	r3, r1, #4
 80003f2:	1ac0      	subs	r0, r0, r3
 80003f4:	4152      	adcs	r2, r2
 80003f6:	08c3      	lsrs	r3, r0, #3
 80003f8:	428b      	cmp	r3, r1
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x184>
 80003fc:	00cb      	lsls	r3, r1, #3
 80003fe:	1ac0      	subs	r0, r0, r3
 8000400:	4152      	adcs	r2, r2
 8000402:	0883      	lsrs	r3, r0, #2
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x190>
 8000408:	008b      	lsls	r3, r1, #2
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	d2d9      	bcs.n	80003c4 <__divsi3+0x148>
 8000410:	0843      	lsrs	r3, r0, #1
 8000412:	428b      	cmp	r3, r1
 8000414:	d301      	bcc.n	800041a <__divsi3+0x19e>
 8000416:	004b      	lsls	r3, r1, #1
 8000418:	1ac0      	subs	r0, r0, r3
 800041a:	4152      	adcs	r2, r2
 800041c:	1a41      	subs	r1, r0, r1
 800041e:	d200      	bcs.n	8000422 <__divsi3+0x1a6>
 8000420:	4601      	mov	r1, r0
 8000422:	4663      	mov	r3, ip
 8000424:	4152      	adcs	r2, r2
 8000426:	105b      	asrs	r3, r3, #1
 8000428:	4610      	mov	r0, r2
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x1b4>
 800042c:	4240      	negs	r0, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d500      	bpl.n	8000434 <__divsi3+0x1b8>
 8000432:	4249      	negs	r1, r1
 8000434:	4770      	bx	lr
 8000436:	4663      	mov	r3, ip
 8000438:	105b      	asrs	r3, r3, #1
 800043a:	d300      	bcc.n	800043e <__divsi3+0x1c2>
 800043c:	4240      	negs	r0, r0
 800043e:	b501      	push	{r0, lr}
 8000440:	2000      	movs	r0, #0
 8000442:	f000 f805 	bl	8000450 <__aeabi_idiv0>
 8000446:	bd02      	pop	{r1, pc}

08000448 <__aeabi_idivmod>:
 8000448:	2900      	cmp	r1, #0
 800044a:	d0f8      	beq.n	800043e <__divsi3+0x1c2>
 800044c:	e716      	b.n	800027c <__divsi3>
 800044e:	4770      	bx	lr

08000450 <__aeabi_idiv0>:
 8000450:	4770      	bx	lr
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__aeabi_cdrcmple>:
 8000454:	4684      	mov	ip, r0
 8000456:	0010      	movs	r0, r2
 8000458:	4662      	mov	r2, ip
 800045a:	468c      	mov	ip, r1
 800045c:	0019      	movs	r1, r3
 800045e:	4663      	mov	r3, ip
 8000460:	e000      	b.n	8000464 <__aeabi_cdcmpeq>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_cdcmpeq>:
 8000464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000466:	f001 fac7 	bl	80019f8 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	d401      	bmi.n	8000472 <__aeabi_cdcmpeq+0xe>
 800046e:	2100      	movs	r1, #0
 8000470:	42c8      	cmn	r0, r1
 8000472:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000474 <__aeabi_dcmpeq>:
 8000474:	b510      	push	{r4, lr}
 8000476:	f001 fa17 	bl	80018a8 <__eqdf2>
 800047a:	4240      	negs	r0, r0
 800047c:	3001      	adds	r0, #1
 800047e:	bd10      	pop	{r4, pc}

08000480 <__aeabi_dcmplt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 fab9 	bl	80019f8 <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	db01      	blt.n	800048e <__aeabi_dcmplt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmple>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 faaf 	bl	80019f8 <__ledf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dd01      	ble.n	80004a2 <__aeabi_dcmple+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpgt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 fa3f 	bl	800192c <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dc01      	bgt.n	80004b6 <__aeabi_dcmpgt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_dcmpge>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f001 fa35 	bl	800192c <__gedf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	da01      	bge.n	80004ca <__aeabi_dcmpge+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			; (mov r8, r8)

080004d0 <__aeabi_cfrcmple>:
 80004d0:	4684      	mov	ip, r0
 80004d2:	0008      	movs	r0, r1
 80004d4:	4661      	mov	r1, ip
 80004d6:	e7ff      	b.n	80004d8 <__aeabi_cfcmpeq>

080004d8 <__aeabi_cfcmpeq>:
 80004d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004da:	f000 faeb 	bl	8000ab4 <__lesf2>
 80004de:	2800      	cmp	r0, #0
 80004e0:	d401      	bmi.n	80004e6 <__aeabi_cfcmpeq+0xe>
 80004e2:	2100      	movs	r1, #0
 80004e4:	42c8      	cmn	r0, r1
 80004e6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004e8 <__aeabi_fcmpeq>:
 80004e8:	b510      	push	{r4, lr}
 80004ea:	f000 fa77 	bl	80009dc <__eqsf2>
 80004ee:	4240      	negs	r0, r0
 80004f0:	3001      	adds	r0, #1
 80004f2:	bd10      	pop	{r4, pc}

080004f4 <__aeabi_fcmplt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fadd 	bl	8000ab4 <__lesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	db01      	blt.n	8000502 <__aeabi_fcmplt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			; (mov r8, r8)

08000508 <__aeabi_fcmple>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fad3 	bl	8000ab4 <__lesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	dd01      	ble.n	8000516 <__aeabi_fcmple+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			; (mov r8, r8)

0800051c <__aeabi_fcmpgt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fa83 	bl	8000a28 <__gesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	dc01      	bgt.n	800052a <__aeabi_fcmpgt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			; (mov r8, r8)

08000530 <__aeabi_fcmpge>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fa79 	bl	8000a28 <__gesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	da01      	bge.n	800053e <__aeabi_fcmpge+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			; (mov r8, r8)

08000544 <__aeabi_uldivmod>:
 8000544:	2b00      	cmp	r3, #0
 8000546:	d111      	bne.n	800056c <__aeabi_uldivmod+0x28>
 8000548:	2a00      	cmp	r2, #0
 800054a:	d10f      	bne.n	800056c <__aeabi_uldivmod+0x28>
 800054c:	2900      	cmp	r1, #0
 800054e:	d100      	bne.n	8000552 <__aeabi_uldivmod+0xe>
 8000550:	2800      	cmp	r0, #0
 8000552:	d002      	beq.n	800055a <__aeabi_uldivmod+0x16>
 8000554:	2100      	movs	r1, #0
 8000556:	43c9      	mvns	r1, r1
 8000558:	0008      	movs	r0, r1
 800055a:	b407      	push	{r0, r1, r2}
 800055c:	4802      	ldr	r0, [pc, #8]	; (8000568 <__aeabi_uldivmod+0x24>)
 800055e:	a102      	add	r1, pc, #8	; (adr r1, 8000568 <__aeabi_uldivmod+0x24>)
 8000560:	1840      	adds	r0, r0, r1
 8000562:	9002      	str	r0, [sp, #8]
 8000564:	bd03      	pop	{r0, r1, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	fffffee9 	.word	0xfffffee9
 800056c:	b403      	push	{r0, r1}
 800056e:	4668      	mov	r0, sp
 8000570:	b501      	push	{r0, lr}
 8000572:	9802      	ldr	r0, [sp, #8]
 8000574:	f000 f84c 	bl	8000610 <__udivmoddi4>
 8000578:	9b01      	ldr	r3, [sp, #4]
 800057a:	469e      	mov	lr, r3
 800057c:	b002      	add	sp, #8
 800057e:	bc0c      	pop	{r2, r3}
 8000580:	4770      	bx	lr
 8000582:	46c0      	nop			; (mov r8, r8)

08000584 <__aeabi_lmul>:
 8000584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000586:	46ce      	mov	lr, r9
 8000588:	4699      	mov	r9, r3
 800058a:	0c03      	lsrs	r3, r0, #16
 800058c:	469c      	mov	ip, r3
 800058e:	0413      	lsls	r3, r2, #16
 8000590:	4647      	mov	r7, r8
 8000592:	0c1b      	lsrs	r3, r3, #16
 8000594:	001d      	movs	r5, r3
 8000596:	000e      	movs	r6, r1
 8000598:	4661      	mov	r1, ip
 800059a:	0404      	lsls	r4, r0, #16
 800059c:	0c24      	lsrs	r4, r4, #16
 800059e:	b580      	push	{r7, lr}
 80005a0:	0007      	movs	r7, r0
 80005a2:	0c10      	lsrs	r0, r2, #16
 80005a4:	434b      	muls	r3, r1
 80005a6:	4365      	muls	r5, r4
 80005a8:	4341      	muls	r1, r0
 80005aa:	4360      	muls	r0, r4
 80005ac:	0c2c      	lsrs	r4, r5, #16
 80005ae:	18c0      	adds	r0, r0, r3
 80005b0:	1820      	adds	r0, r4, r0
 80005b2:	468c      	mov	ip, r1
 80005b4:	4283      	cmp	r3, r0
 80005b6:	d903      	bls.n	80005c0 <__aeabi_lmul+0x3c>
 80005b8:	2380      	movs	r3, #128	; 0x80
 80005ba:	025b      	lsls	r3, r3, #9
 80005bc:	4698      	mov	r8, r3
 80005be:	44c4      	add	ip, r8
 80005c0:	4649      	mov	r1, r9
 80005c2:	4379      	muls	r1, r7
 80005c4:	4356      	muls	r6, r2
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	042d      	lsls	r5, r5, #16
 80005ca:	0c2d      	lsrs	r5, r5, #16
 80005cc:	1989      	adds	r1, r1, r6
 80005ce:	4463      	add	r3, ip
 80005d0:	0400      	lsls	r0, r0, #16
 80005d2:	1940      	adds	r0, r0, r5
 80005d4:	18c9      	adds	r1, r1, r3
 80005d6:	bcc0      	pop	{r6, r7}
 80005d8:	46b9      	mov	r9, r7
 80005da:	46b0      	mov	r8, r6
 80005dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__aeabi_f2uiz>:
 80005e0:	219e      	movs	r1, #158	; 0x9e
 80005e2:	b510      	push	{r4, lr}
 80005e4:	05c9      	lsls	r1, r1, #23
 80005e6:	1c04      	adds	r4, r0, #0
 80005e8:	f7ff ffa2 	bl	8000530 <__aeabi_fcmpge>
 80005ec:	2800      	cmp	r0, #0
 80005ee:	d103      	bne.n	80005f8 <__aeabi_f2uiz+0x18>
 80005f0:	1c20      	adds	r0, r4, #0
 80005f2:	f000 fd91 	bl	8001118 <__aeabi_f2iz>
 80005f6:	bd10      	pop	{r4, pc}
 80005f8:	219e      	movs	r1, #158	; 0x9e
 80005fa:	1c20      	adds	r0, r4, #0
 80005fc:	05c9      	lsls	r1, r1, #23
 80005fe:	f000 fbeb 	bl	8000dd8 <__aeabi_fsub>
 8000602:	f000 fd89 	bl	8001118 <__aeabi_f2iz>
 8000606:	2380      	movs	r3, #128	; 0x80
 8000608:	061b      	lsls	r3, r3, #24
 800060a:	469c      	mov	ip, r3
 800060c:	4460      	add	r0, ip
 800060e:	e7f2      	b.n	80005f6 <__aeabi_f2uiz+0x16>

08000610 <__udivmoddi4>:
 8000610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000612:	4657      	mov	r7, sl
 8000614:	464e      	mov	r6, r9
 8000616:	4645      	mov	r5, r8
 8000618:	46de      	mov	lr, fp
 800061a:	b5e0      	push	{r5, r6, r7, lr}
 800061c:	0004      	movs	r4, r0
 800061e:	000d      	movs	r5, r1
 8000620:	4692      	mov	sl, r2
 8000622:	4699      	mov	r9, r3
 8000624:	b083      	sub	sp, #12
 8000626:	428b      	cmp	r3, r1
 8000628:	d830      	bhi.n	800068c <__udivmoddi4+0x7c>
 800062a:	d02d      	beq.n	8000688 <__udivmoddi4+0x78>
 800062c:	4649      	mov	r1, r9
 800062e:	4650      	mov	r0, sl
 8000630:	f001 fae2 	bl	8001bf8 <__clzdi2>
 8000634:	0029      	movs	r1, r5
 8000636:	0006      	movs	r6, r0
 8000638:	0020      	movs	r0, r4
 800063a:	f001 fadd 	bl	8001bf8 <__clzdi2>
 800063e:	1a33      	subs	r3, r6, r0
 8000640:	4698      	mov	r8, r3
 8000642:	3b20      	subs	r3, #32
 8000644:	d434      	bmi.n	80006b0 <__udivmoddi4+0xa0>
 8000646:	469b      	mov	fp, r3
 8000648:	4653      	mov	r3, sl
 800064a:	465a      	mov	r2, fp
 800064c:	4093      	lsls	r3, r2
 800064e:	4642      	mov	r2, r8
 8000650:	001f      	movs	r7, r3
 8000652:	4653      	mov	r3, sl
 8000654:	4093      	lsls	r3, r2
 8000656:	001e      	movs	r6, r3
 8000658:	42af      	cmp	r7, r5
 800065a:	d83b      	bhi.n	80006d4 <__udivmoddi4+0xc4>
 800065c:	42af      	cmp	r7, r5
 800065e:	d100      	bne.n	8000662 <__udivmoddi4+0x52>
 8000660:	e079      	b.n	8000756 <__udivmoddi4+0x146>
 8000662:	465b      	mov	r3, fp
 8000664:	1ba4      	subs	r4, r4, r6
 8000666:	41bd      	sbcs	r5, r7
 8000668:	2b00      	cmp	r3, #0
 800066a:	da00      	bge.n	800066e <__udivmoddi4+0x5e>
 800066c:	e076      	b.n	800075c <__udivmoddi4+0x14c>
 800066e:	2200      	movs	r2, #0
 8000670:	2300      	movs	r3, #0
 8000672:	9200      	str	r2, [sp, #0]
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	465a      	mov	r2, fp
 800067a:	4093      	lsls	r3, r2
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2301      	movs	r3, #1
 8000680:	4642      	mov	r2, r8
 8000682:	4093      	lsls	r3, r2
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	e029      	b.n	80006dc <__udivmoddi4+0xcc>
 8000688:	4282      	cmp	r2, r0
 800068a:	d9cf      	bls.n	800062c <__udivmoddi4+0x1c>
 800068c:	2200      	movs	r2, #0
 800068e:	2300      	movs	r3, #0
 8000690:	9200      	str	r2, [sp, #0]
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <__udivmoddi4+0x8e>
 800069a:	601c      	str	r4, [r3, #0]
 800069c:	605d      	str	r5, [r3, #4]
 800069e:	9800      	ldr	r0, [sp, #0]
 80006a0:	9901      	ldr	r1, [sp, #4]
 80006a2:	b003      	add	sp, #12
 80006a4:	bcf0      	pop	{r4, r5, r6, r7}
 80006a6:	46bb      	mov	fp, r7
 80006a8:	46b2      	mov	sl, r6
 80006aa:	46a9      	mov	r9, r5
 80006ac:	46a0      	mov	r8, r4
 80006ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006b0:	4642      	mov	r2, r8
 80006b2:	469b      	mov	fp, r3
 80006b4:	2320      	movs	r3, #32
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	4652      	mov	r2, sl
 80006ba:	40da      	lsrs	r2, r3
 80006bc:	4641      	mov	r1, r8
 80006be:	0013      	movs	r3, r2
 80006c0:	464a      	mov	r2, r9
 80006c2:	408a      	lsls	r2, r1
 80006c4:	0017      	movs	r7, r2
 80006c6:	4642      	mov	r2, r8
 80006c8:	431f      	orrs	r7, r3
 80006ca:	4653      	mov	r3, sl
 80006cc:	4093      	lsls	r3, r2
 80006ce:	001e      	movs	r6, r3
 80006d0:	42af      	cmp	r7, r5
 80006d2:	d9c3      	bls.n	800065c <__udivmoddi4+0x4c>
 80006d4:	2200      	movs	r2, #0
 80006d6:	2300      	movs	r3, #0
 80006d8:	9200      	str	r2, [sp, #0]
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	4643      	mov	r3, r8
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0d8      	beq.n	8000694 <__udivmoddi4+0x84>
 80006e2:	07fb      	lsls	r3, r7, #31
 80006e4:	0872      	lsrs	r2, r6, #1
 80006e6:	431a      	orrs	r2, r3
 80006e8:	4646      	mov	r6, r8
 80006ea:	087b      	lsrs	r3, r7, #1
 80006ec:	e00e      	b.n	800070c <__udivmoddi4+0xfc>
 80006ee:	42ab      	cmp	r3, r5
 80006f0:	d101      	bne.n	80006f6 <__udivmoddi4+0xe6>
 80006f2:	42a2      	cmp	r2, r4
 80006f4:	d80c      	bhi.n	8000710 <__udivmoddi4+0x100>
 80006f6:	1aa4      	subs	r4, r4, r2
 80006f8:	419d      	sbcs	r5, r3
 80006fa:	2001      	movs	r0, #1
 80006fc:	1924      	adds	r4, r4, r4
 80006fe:	416d      	adcs	r5, r5
 8000700:	2100      	movs	r1, #0
 8000702:	3e01      	subs	r6, #1
 8000704:	1824      	adds	r4, r4, r0
 8000706:	414d      	adcs	r5, r1
 8000708:	2e00      	cmp	r6, #0
 800070a:	d006      	beq.n	800071a <__udivmoddi4+0x10a>
 800070c:	42ab      	cmp	r3, r5
 800070e:	d9ee      	bls.n	80006ee <__udivmoddi4+0xde>
 8000710:	3e01      	subs	r6, #1
 8000712:	1924      	adds	r4, r4, r4
 8000714:	416d      	adcs	r5, r5
 8000716:	2e00      	cmp	r6, #0
 8000718:	d1f8      	bne.n	800070c <__udivmoddi4+0xfc>
 800071a:	9800      	ldr	r0, [sp, #0]
 800071c:	9901      	ldr	r1, [sp, #4]
 800071e:	465b      	mov	r3, fp
 8000720:	1900      	adds	r0, r0, r4
 8000722:	4169      	adcs	r1, r5
 8000724:	2b00      	cmp	r3, #0
 8000726:	db24      	blt.n	8000772 <__udivmoddi4+0x162>
 8000728:	002b      	movs	r3, r5
 800072a:	465a      	mov	r2, fp
 800072c:	4644      	mov	r4, r8
 800072e:	40d3      	lsrs	r3, r2
 8000730:	002a      	movs	r2, r5
 8000732:	40e2      	lsrs	r2, r4
 8000734:	001c      	movs	r4, r3
 8000736:	465b      	mov	r3, fp
 8000738:	0015      	movs	r5, r2
 800073a:	2b00      	cmp	r3, #0
 800073c:	db2a      	blt.n	8000794 <__udivmoddi4+0x184>
 800073e:	0026      	movs	r6, r4
 8000740:	409e      	lsls	r6, r3
 8000742:	0033      	movs	r3, r6
 8000744:	0026      	movs	r6, r4
 8000746:	4647      	mov	r7, r8
 8000748:	40be      	lsls	r6, r7
 800074a:	0032      	movs	r2, r6
 800074c:	1a80      	subs	r0, r0, r2
 800074e:	4199      	sbcs	r1, r3
 8000750:	9000      	str	r0, [sp, #0]
 8000752:	9101      	str	r1, [sp, #4]
 8000754:	e79e      	b.n	8000694 <__udivmoddi4+0x84>
 8000756:	42a3      	cmp	r3, r4
 8000758:	d8bc      	bhi.n	80006d4 <__udivmoddi4+0xc4>
 800075a:	e782      	b.n	8000662 <__udivmoddi4+0x52>
 800075c:	4642      	mov	r2, r8
 800075e:	2320      	movs	r3, #32
 8000760:	2100      	movs	r1, #0
 8000762:	1a9b      	subs	r3, r3, r2
 8000764:	2200      	movs	r2, #0
 8000766:	9100      	str	r1, [sp, #0]
 8000768:	9201      	str	r2, [sp, #4]
 800076a:	2201      	movs	r2, #1
 800076c:	40da      	lsrs	r2, r3
 800076e:	9201      	str	r2, [sp, #4]
 8000770:	e785      	b.n	800067e <__udivmoddi4+0x6e>
 8000772:	4642      	mov	r2, r8
 8000774:	2320      	movs	r3, #32
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	002a      	movs	r2, r5
 800077a:	4646      	mov	r6, r8
 800077c:	409a      	lsls	r2, r3
 800077e:	0023      	movs	r3, r4
 8000780:	40f3      	lsrs	r3, r6
 8000782:	4644      	mov	r4, r8
 8000784:	4313      	orrs	r3, r2
 8000786:	002a      	movs	r2, r5
 8000788:	40e2      	lsrs	r2, r4
 800078a:	001c      	movs	r4, r3
 800078c:	465b      	mov	r3, fp
 800078e:	0015      	movs	r5, r2
 8000790:	2b00      	cmp	r3, #0
 8000792:	dad4      	bge.n	800073e <__udivmoddi4+0x12e>
 8000794:	4642      	mov	r2, r8
 8000796:	002f      	movs	r7, r5
 8000798:	2320      	movs	r3, #32
 800079a:	0026      	movs	r6, r4
 800079c:	4097      	lsls	r7, r2
 800079e:	1a9b      	subs	r3, r3, r2
 80007a0:	40de      	lsrs	r6, r3
 80007a2:	003b      	movs	r3, r7
 80007a4:	4333      	orrs	r3, r6
 80007a6:	e7cd      	b.n	8000744 <__udivmoddi4+0x134>

080007a8 <__aeabi_fdiv>:
 80007a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007aa:	464f      	mov	r7, r9
 80007ac:	4646      	mov	r6, r8
 80007ae:	46d6      	mov	lr, sl
 80007b0:	0245      	lsls	r5, r0, #9
 80007b2:	b5c0      	push	{r6, r7, lr}
 80007b4:	0047      	lsls	r7, r0, #1
 80007b6:	1c0c      	adds	r4, r1, #0
 80007b8:	0a6d      	lsrs	r5, r5, #9
 80007ba:	0e3f      	lsrs	r7, r7, #24
 80007bc:	0fc6      	lsrs	r6, r0, #31
 80007be:	2f00      	cmp	r7, #0
 80007c0:	d100      	bne.n	80007c4 <__aeabi_fdiv+0x1c>
 80007c2:	e06f      	b.n	80008a4 <__aeabi_fdiv+0xfc>
 80007c4:	2fff      	cmp	r7, #255	; 0xff
 80007c6:	d100      	bne.n	80007ca <__aeabi_fdiv+0x22>
 80007c8:	e074      	b.n	80008b4 <__aeabi_fdiv+0x10c>
 80007ca:	2300      	movs	r3, #0
 80007cc:	2280      	movs	r2, #128	; 0x80
 80007ce:	4699      	mov	r9, r3
 80007d0:	469a      	mov	sl, r3
 80007d2:	00ed      	lsls	r5, r5, #3
 80007d4:	04d2      	lsls	r2, r2, #19
 80007d6:	4315      	orrs	r5, r2
 80007d8:	3f7f      	subs	r7, #127	; 0x7f
 80007da:	0263      	lsls	r3, r4, #9
 80007dc:	0a5b      	lsrs	r3, r3, #9
 80007de:	4698      	mov	r8, r3
 80007e0:	0063      	lsls	r3, r4, #1
 80007e2:	0e1b      	lsrs	r3, r3, #24
 80007e4:	0fe4      	lsrs	r4, r4, #31
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d04d      	beq.n	8000886 <__aeabi_fdiv+0xde>
 80007ea:	2bff      	cmp	r3, #255	; 0xff
 80007ec:	d045      	beq.n	800087a <__aeabi_fdiv+0xd2>
 80007ee:	4642      	mov	r2, r8
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	00d2      	lsls	r2, r2, #3
 80007f4:	04c9      	lsls	r1, r1, #19
 80007f6:	4311      	orrs	r1, r2
 80007f8:	4688      	mov	r8, r1
 80007fa:	2200      	movs	r2, #0
 80007fc:	3b7f      	subs	r3, #127	; 0x7f
 80007fe:	0031      	movs	r1, r6
 8000800:	1aff      	subs	r7, r7, r3
 8000802:	464b      	mov	r3, r9
 8000804:	4061      	eors	r1, r4
 8000806:	b2c9      	uxtb	r1, r1
 8000808:	2b0f      	cmp	r3, #15
 800080a:	d900      	bls.n	800080e <__aeabi_fdiv+0x66>
 800080c:	e0b8      	b.n	8000980 <__aeabi_fdiv+0x1d8>
 800080e:	4870      	ldr	r0, [pc, #448]	; (80009d0 <__aeabi_fdiv+0x228>)
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	58c3      	ldr	r3, [r0, r3]
 8000814:	469f      	mov	pc, r3
 8000816:	2300      	movs	r3, #0
 8000818:	4698      	mov	r8, r3
 800081a:	0026      	movs	r6, r4
 800081c:	4645      	mov	r5, r8
 800081e:	4692      	mov	sl, r2
 8000820:	4653      	mov	r3, sl
 8000822:	2b02      	cmp	r3, #2
 8000824:	d100      	bne.n	8000828 <__aeabi_fdiv+0x80>
 8000826:	e08d      	b.n	8000944 <__aeabi_fdiv+0x19c>
 8000828:	2b03      	cmp	r3, #3
 800082a:	d100      	bne.n	800082e <__aeabi_fdiv+0x86>
 800082c:	e0a1      	b.n	8000972 <__aeabi_fdiv+0x1ca>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d018      	beq.n	8000864 <__aeabi_fdiv+0xbc>
 8000832:	003b      	movs	r3, r7
 8000834:	337f      	adds	r3, #127	; 0x7f
 8000836:	2b00      	cmp	r3, #0
 8000838:	dd6d      	ble.n	8000916 <__aeabi_fdiv+0x16e>
 800083a:	076a      	lsls	r2, r5, #29
 800083c:	d004      	beq.n	8000848 <__aeabi_fdiv+0xa0>
 800083e:	220f      	movs	r2, #15
 8000840:	402a      	ands	r2, r5
 8000842:	2a04      	cmp	r2, #4
 8000844:	d000      	beq.n	8000848 <__aeabi_fdiv+0xa0>
 8000846:	3504      	adds	r5, #4
 8000848:	012a      	lsls	r2, r5, #4
 800084a:	d503      	bpl.n	8000854 <__aeabi_fdiv+0xac>
 800084c:	4b61      	ldr	r3, [pc, #388]	; (80009d4 <__aeabi_fdiv+0x22c>)
 800084e:	401d      	ands	r5, r3
 8000850:	003b      	movs	r3, r7
 8000852:	3380      	adds	r3, #128	; 0x80
 8000854:	2bfe      	cmp	r3, #254	; 0xfe
 8000856:	dd00      	ble.n	800085a <__aeabi_fdiv+0xb2>
 8000858:	e074      	b.n	8000944 <__aeabi_fdiv+0x19c>
 800085a:	01aa      	lsls	r2, r5, #6
 800085c:	0a52      	lsrs	r2, r2, #9
 800085e:	b2d8      	uxtb	r0, r3
 8000860:	e002      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000862:	000e      	movs	r6, r1
 8000864:	2000      	movs	r0, #0
 8000866:	2200      	movs	r2, #0
 8000868:	05c0      	lsls	r0, r0, #23
 800086a:	07f6      	lsls	r6, r6, #31
 800086c:	4310      	orrs	r0, r2
 800086e:	4330      	orrs	r0, r6
 8000870:	bce0      	pop	{r5, r6, r7}
 8000872:	46ba      	mov	sl, r7
 8000874:	46b1      	mov	r9, r6
 8000876:	46a8      	mov	r8, r5
 8000878:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800087a:	4643      	mov	r3, r8
 800087c:	2b00      	cmp	r3, #0
 800087e:	d13f      	bne.n	8000900 <__aeabi_fdiv+0x158>
 8000880:	2202      	movs	r2, #2
 8000882:	3fff      	subs	r7, #255	; 0xff
 8000884:	e003      	b.n	800088e <__aeabi_fdiv+0xe6>
 8000886:	4643      	mov	r3, r8
 8000888:	2b00      	cmp	r3, #0
 800088a:	d12d      	bne.n	80008e8 <__aeabi_fdiv+0x140>
 800088c:	2201      	movs	r2, #1
 800088e:	0031      	movs	r1, r6
 8000890:	464b      	mov	r3, r9
 8000892:	4061      	eors	r1, r4
 8000894:	b2c9      	uxtb	r1, r1
 8000896:	4313      	orrs	r3, r2
 8000898:	2b0f      	cmp	r3, #15
 800089a:	d838      	bhi.n	800090e <__aeabi_fdiv+0x166>
 800089c:	484e      	ldr	r0, [pc, #312]	; (80009d8 <__aeabi_fdiv+0x230>)
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	58c3      	ldr	r3, [r0, r3]
 80008a2:	469f      	mov	pc, r3
 80008a4:	2d00      	cmp	r5, #0
 80008a6:	d113      	bne.n	80008d0 <__aeabi_fdiv+0x128>
 80008a8:	2304      	movs	r3, #4
 80008aa:	4699      	mov	r9, r3
 80008ac:	3b03      	subs	r3, #3
 80008ae:	2700      	movs	r7, #0
 80008b0:	469a      	mov	sl, r3
 80008b2:	e792      	b.n	80007da <__aeabi_fdiv+0x32>
 80008b4:	2d00      	cmp	r5, #0
 80008b6:	d105      	bne.n	80008c4 <__aeabi_fdiv+0x11c>
 80008b8:	2308      	movs	r3, #8
 80008ba:	4699      	mov	r9, r3
 80008bc:	3b06      	subs	r3, #6
 80008be:	27ff      	movs	r7, #255	; 0xff
 80008c0:	469a      	mov	sl, r3
 80008c2:	e78a      	b.n	80007da <__aeabi_fdiv+0x32>
 80008c4:	230c      	movs	r3, #12
 80008c6:	4699      	mov	r9, r3
 80008c8:	3b09      	subs	r3, #9
 80008ca:	27ff      	movs	r7, #255	; 0xff
 80008cc:	469a      	mov	sl, r3
 80008ce:	e784      	b.n	80007da <__aeabi_fdiv+0x32>
 80008d0:	0028      	movs	r0, r5
 80008d2:	f001 f973 	bl	8001bbc <__clzsi2>
 80008d6:	2776      	movs	r7, #118	; 0x76
 80008d8:	1f43      	subs	r3, r0, #5
 80008da:	409d      	lsls	r5, r3
 80008dc:	2300      	movs	r3, #0
 80008de:	427f      	negs	r7, r7
 80008e0:	4699      	mov	r9, r3
 80008e2:	469a      	mov	sl, r3
 80008e4:	1a3f      	subs	r7, r7, r0
 80008e6:	e778      	b.n	80007da <__aeabi_fdiv+0x32>
 80008e8:	4640      	mov	r0, r8
 80008ea:	f001 f967 	bl	8001bbc <__clzsi2>
 80008ee:	4642      	mov	r2, r8
 80008f0:	1f43      	subs	r3, r0, #5
 80008f2:	409a      	lsls	r2, r3
 80008f4:	2376      	movs	r3, #118	; 0x76
 80008f6:	425b      	negs	r3, r3
 80008f8:	4690      	mov	r8, r2
 80008fa:	1a1b      	subs	r3, r3, r0
 80008fc:	2200      	movs	r2, #0
 80008fe:	e77e      	b.n	80007fe <__aeabi_fdiv+0x56>
 8000900:	2303      	movs	r3, #3
 8000902:	464a      	mov	r2, r9
 8000904:	431a      	orrs	r2, r3
 8000906:	4691      	mov	r9, r2
 8000908:	33fc      	adds	r3, #252	; 0xfc
 800090a:	2203      	movs	r2, #3
 800090c:	e777      	b.n	80007fe <__aeabi_fdiv+0x56>
 800090e:	000e      	movs	r6, r1
 8000910:	20ff      	movs	r0, #255	; 0xff
 8000912:	2200      	movs	r2, #0
 8000914:	e7a8      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000916:	2201      	movs	r2, #1
 8000918:	1ad3      	subs	r3, r2, r3
 800091a:	2b1b      	cmp	r3, #27
 800091c:	dca2      	bgt.n	8000864 <__aeabi_fdiv+0xbc>
 800091e:	379e      	adds	r7, #158	; 0x9e
 8000920:	002a      	movs	r2, r5
 8000922:	40bd      	lsls	r5, r7
 8000924:	40da      	lsrs	r2, r3
 8000926:	1e6b      	subs	r3, r5, #1
 8000928:	419d      	sbcs	r5, r3
 800092a:	4315      	orrs	r5, r2
 800092c:	076a      	lsls	r2, r5, #29
 800092e:	d004      	beq.n	800093a <__aeabi_fdiv+0x192>
 8000930:	220f      	movs	r2, #15
 8000932:	402a      	ands	r2, r5
 8000934:	2a04      	cmp	r2, #4
 8000936:	d000      	beq.n	800093a <__aeabi_fdiv+0x192>
 8000938:	3504      	adds	r5, #4
 800093a:	016a      	lsls	r2, r5, #5
 800093c:	d544      	bpl.n	80009c8 <__aeabi_fdiv+0x220>
 800093e:	2001      	movs	r0, #1
 8000940:	2200      	movs	r2, #0
 8000942:	e791      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000944:	20ff      	movs	r0, #255	; 0xff
 8000946:	2200      	movs	r2, #0
 8000948:	e78e      	b.n	8000868 <__aeabi_fdiv+0xc0>
 800094a:	2280      	movs	r2, #128	; 0x80
 800094c:	2600      	movs	r6, #0
 800094e:	20ff      	movs	r0, #255	; 0xff
 8000950:	03d2      	lsls	r2, r2, #15
 8000952:	e789      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000954:	2300      	movs	r3, #0
 8000956:	4698      	mov	r8, r3
 8000958:	2280      	movs	r2, #128	; 0x80
 800095a:	03d2      	lsls	r2, r2, #15
 800095c:	4215      	tst	r5, r2
 800095e:	d008      	beq.n	8000972 <__aeabi_fdiv+0x1ca>
 8000960:	4643      	mov	r3, r8
 8000962:	4213      	tst	r3, r2
 8000964:	d105      	bne.n	8000972 <__aeabi_fdiv+0x1ca>
 8000966:	431a      	orrs	r2, r3
 8000968:	0252      	lsls	r2, r2, #9
 800096a:	0026      	movs	r6, r4
 800096c:	20ff      	movs	r0, #255	; 0xff
 800096e:	0a52      	lsrs	r2, r2, #9
 8000970:	e77a      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000972:	2280      	movs	r2, #128	; 0x80
 8000974:	03d2      	lsls	r2, r2, #15
 8000976:	432a      	orrs	r2, r5
 8000978:	0252      	lsls	r2, r2, #9
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	0a52      	lsrs	r2, r2, #9
 800097e:	e773      	b.n	8000868 <__aeabi_fdiv+0xc0>
 8000980:	4642      	mov	r2, r8
 8000982:	016b      	lsls	r3, r5, #5
 8000984:	0155      	lsls	r5, r2, #5
 8000986:	42ab      	cmp	r3, r5
 8000988:	d21a      	bcs.n	80009c0 <__aeabi_fdiv+0x218>
 800098a:	201b      	movs	r0, #27
 800098c:	2200      	movs	r2, #0
 800098e:	3f01      	subs	r7, #1
 8000990:	2601      	movs	r6, #1
 8000992:	001c      	movs	r4, r3
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	005b      	lsls	r3, r3, #1
 8000998:	2c00      	cmp	r4, #0
 800099a:	db01      	blt.n	80009a0 <__aeabi_fdiv+0x1f8>
 800099c:	429d      	cmp	r5, r3
 800099e:	d801      	bhi.n	80009a4 <__aeabi_fdiv+0x1fc>
 80009a0:	1b5b      	subs	r3, r3, r5
 80009a2:	4332      	orrs	r2, r6
 80009a4:	3801      	subs	r0, #1
 80009a6:	2800      	cmp	r0, #0
 80009a8:	d1f3      	bne.n	8000992 <__aeabi_fdiv+0x1ea>
 80009aa:	1e58      	subs	r0, r3, #1
 80009ac:	4183      	sbcs	r3, r0
 80009ae:	4313      	orrs	r3, r2
 80009b0:	001d      	movs	r5, r3
 80009b2:	003b      	movs	r3, r7
 80009b4:	337f      	adds	r3, #127	; 0x7f
 80009b6:	000e      	movs	r6, r1
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dd00      	ble.n	80009be <__aeabi_fdiv+0x216>
 80009bc:	e73d      	b.n	800083a <__aeabi_fdiv+0x92>
 80009be:	e7aa      	b.n	8000916 <__aeabi_fdiv+0x16e>
 80009c0:	201a      	movs	r0, #26
 80009c2:	2201      	movs	r2, #1
 80009c4:	1b5b      	subs	r3, r3, r5
 80009c6:	e7e3      	b.n	8000990 <__aeabi_fdiv+0x1e8>
 80009c8:	01aa      	lsls	r2, r5, #6
 80009ca:	2000      	movs	r0, #0
 80009cc:	0a52      	lsrs	r2, r2, #9
 80009ce:	e74b      	b.n	8000868 <__aeabi_fdiv+0xc0>
 80009d0:	0800f6c8 	.word	0x0800f6c8
 80009d4:	f7ffffff 	.word	0xf7ffffff
 80009d8:	0800f708 	.word	0x0800f708

080009dc <__eqsf2>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	0042      	lsls	r2, r0, #1
 80009e0:	0245      	lsls	r5, r0, #9
 80009e2:	024e      	lsls	r6, r1, #9
 80009e4:	004c      	lsls	r4, r1, #1
 80009e6:	0fc3      	lsrs	r3, r0, #31
 80009e8:	0a6d      	lsrs	r5, r5, #9
 80009ea:	2001      	movs	r0, #1
 80009ec:	0e12      	lsrs	r2, r2, #24
 80009ee:	0a76      	lsrs	r6, r6, #9
 80009f0:	0e24      	lsrs	r4, r4, #24
 80009f2:	0fc9      	lsrs	r1, r1, #31
 80009f4:	2aff      	cmp	r2, #255	; 0xff
 80009f6:	d006      	beq.n	8000a06 <__eqsf2+0x2a>
 80009f8:	2cff      	cmp	r4, #255	; 0xff
 80009fa:	d003      	beq.n	8000a04 <__eqsf2+0x28>
 80009fc:	42a2      	cmp	r2, r4
 80009fe:	d101      	bne.n	8000a04 <__eqsf2+0x28>
 8000a00:	42b5      	cmp	r5, r6
 8000a02:	d006      	beq.n	8000a12 <__eqsf2+0x36>
 8000a04:	bd70      	pop	{r4, r5, r6, pc}
 8000a06:	2d00      	cmp	r5, #0
 8000a08:	d1fc      	bne.n	8000a04 <__eqsf2+0x28>
 8000a0a:	2cff      	cmp	r4, #255	; 0xff
 8000a0c:	d1fa      	bne.n	8000a04 <__eqsf2+0x28>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d1f8      	bne.n	8000a04 <__eqsf2+0x28>
 8000a12:	428b      	cmp	r3, r1
 8000a14:	d006      	beq.n	8000a24 <__eqsf2+0x48>
 8000a16:	2001      	movs	r0, #1
 8000a18:	2a00      	cmp	r2, #0
 8000a1a:	d1f3      	bne.n	8000a04 <__eqsf2+0x28>
 8000a1c:	0028      	movs	r0, r5
 8000a1e:	1e43      	subs	r3, r0, #1
 8000a20:	4198      	sbcs	r0, r3
 8000a22:	e7ef      	b.n	8000a04 <__eqsf2+0x28>
 8000a24:	2000      	movs	r0, #0
 8000a26:	e7ed      	b.n	8000a04 <__eqsf2+0x28>

08000a28 <__gesf2>:
 8000a28:	b570      	push	{r4, r5, r6, lr}
 8000a2a:	0042      	lsls	r2, r0, #1
 8000a2c:	0245      	lsls	r5, r0, #9
 8000a2e:	024e      	lsls	r6, r1, #9
 8000a30:	004c      	lsls	r4, r1, #1
 8000a32:	0fc3      	lsrs	r3, r0, #31
 8000a34:	0a6d      	lsrs	r5, r5, #9
 8000a36:	0e12      	lsrs	r2, r2, #24
 8000a38:	0a76      	lsrs	r6, r6, #9
 8000a3a:	0e24      	lsrs	r4, r4, #24
 8000a3c:	0fc8      	lsrs	r0, r1, #31
 8000a3e:	2aff      	cmp	r2, #255	; 0xff
 8000a40:	d01b      	beq.n	8000a7a <__gesf2+0x52>
 8000a42:	2cff      	cmp	r4, #255	; 0xff
 8000a44:	d00e      	beq.n	8000a64 <__gesf2+0x3c>
 8000a46:	2a00      	cmp	r2, #0
 8000a48:	d11b      	bne.n	8000a82 <__gesf2+0x5a>
 8000a4a:	2c00      	cmp	r4, #0
 8000a4c:	d101      	bne.n	8000a52 <__gesf2+0x2a>
 8000a4e:	2e00      	cmp	r6, #0
 8000a50:	d01c      	beq.n	8000a8c <__gesf2+0x64>
 8000a52:	2d00      	cmp	r5, #0
 8000a54:	d00c      	beq.n	8000a70 <__gesf2+0x48>
 8000a56:	4283      	cmp	r3, r0
 8000a58:	d01c      	beq.n	8000a94 <__gesf2+0x6c>
 8000a5a:	2102      	movs	r1, #2
 8000a5c:	1e58      	subs	r0, r3, #1
 8000a5e:	4008      	ands	r0, r1
 8000a60:	3801      	subs	r0, #1
 8000a62:	bd70      	pop	{r4, r5, r6, pc}
 8000a64:	2e00      	cmp	r6, #0
 8000a66:	d122      	bne.n	8000aae <__gesf2+0x86>
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d1f4      	bne.n	8000a56 <__gesf2+0x2e>
 8000a6c:	2d00      	cmp	r5, #0
 8000a6e:	d1f2      	bne.n	8000a56 <__gesf2+0x2e>
 8000a70:	2800      	cmp	r0, #0
 8000a72:	d1f6      	bne.n	8000a62 <__gesf2+0x3a>
 8000a74:	2001      	movs	r0, #1
 8000a76:	4240      	negs	r0, r0
 8000a78:	e7f3      	b.n	8000a62 <__gesf2+0x3a>
 8000a7a:	2d00      	cmp	r5, #0
 8000a7c:	d117      	bne.n	8000aae <__gesf2+0x86>
 8000a7e:	2cff      	cmp	r4, #255	; 0xff
 8000a80:	d0f0      	beq.n	8000a64 <__gesf2+0x3c>
 8000a82:	2c00      	cmp	r4, #0
 8000a84:	d1e7      	bne.n	8000a56 <__gesf2+0x2e>
 8000a86:	2e00      	cmp	r6, #0
 8000a88:	d1e5      	bne.n	8000a56 <__gesf2+0x2e>
 8000a8a:	e7e6      	b.n	8000a5a <__gesf2+0x32>
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	2d00      	cmp	r5, #0
 8000a90:	d0e7      	beq.n	8000a62 <__gesf2+0x3a>
 8000a92:	e7e2      	b.n	8000a5a <__gesf2+0x32>
 8000a94:	42a2      	cmp	r2, r4
 8000a96:	dc05      	bgt.n	8000aa4 <__gesf2+0x7c>
 8000a98:	dbea      	blt.n	8000a70 <__gesf2+0x48>
 8000a9a:	42b5      	cmp	r5, r6
 8000a9c:	d802      	bhi.n	8000aa4 <__gesf2+0x7c>
 8000a9e:	d3e7      	bcc.n	8000a70 <__gesf2+0x48>
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	e7de      	b.n	8000a62 <__gesf2+0x3a>
 8000aa4:	4243      	negs	r3, r0
 8000aa6:	4158      	adcs	r0, r3
 8000aa8:	0040      	lsls	r0, r0, #1
 8000aaa:	3801      	subs	r0, #1
 8000aac:	e7d9      	b.n	8000a62 <__gesf2+0x3a>
 8000aae:	2002      	movs	r0, #2
 8000ab0:	4240      	negs	r0, r0
 8000ab2:	e7d6      	b.n	8000a62 <__gesf2+0x3a>

08000ab4 <__lesf2>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	0042      	lsls	r2, r0, #1
 8000ab8:	0245      	lsls	r5, r0, #9
 8000aba:	024e      	lsls	r6, r1, #9
 8000abc:	004c      	lsls	r4, r1, #1
 8000abe:	0fc3      	lsrs	r3, r0, #31
 8000ac0:	0a6d      	lsrs	r5, r5, #9
 8000ac2:	0e12      	lsrs	r2, r2, #24
 8000ac4:	0a76      	lsrs	r6, r6, #9
 8000ac6:	0e24      	lsrs	r4, r4, #24
 8000ac8:	0fc8      	lsrs	r0, r1, #31
 8000aca:	2aff      	cmp	r2, #255	; 0xff
 8000acc:	d00b      	beq.n	8000ae6 <__lesf2+0x32>
 8000ace:	2cff      	cmp	r4, #255	; 0xff
 8000ad0:	d00d      	beq.n	8000aee <__lesf2+0x3a>
 8000ad2:	2a00      	cmp	r2, #0
 8000ad4:	d11f      	bne.n	8000b16 <__lesf2+0x62>
 8000ad6:	2c00      	cmp	r4, #0
 8000ad8:	d116      	bne.n	8000b08 <__lesf2+0x54>
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d114      	bne.n	8000b08 <__lesf2+0x54>
 8000ade:	2000      	movs	r0, #0
 8000ae0:	2d00      	cmp	r5, #0
 8000ae2:	d010      	beq.n	8000b06 <__lesf2+0x52>
 8000ae4:	e009      	b.n	8000afa <__lesf2+0x46>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	d10c      	bne.n	8000b04 <__lesf2+0x50>
 8000aea:	2cff      	cmp	r4, #255	; 0xff
 8000aec:	d113      	bne.n	8000b16 <__lesf2+0x62>
 8000aee:	2e00      	cmp	r6, #0
 8000af0:	d108      	bne.n	8000b04 <__lesf2+0x50>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d008      	beq.n	8000b08 <__lesf2+0x54>
 8000af6:	4283      	cmp	r3, r0
 8000af8:	d012      	beq.n	8000b20 <__lesf2+0x6c>
 8000afa:	2102      	movs	r1, #2
 8000afc:	1e58      	subs	r0, r3, #1
 8000afe:	4008      	ands	r0, r1
 8000b00:	3801      	subs	r0, #1
 8000b02:	e000      	b.n	8000b06 <__lesf2+0x52>
 8000b04:	2002      	movs	r0, #2
 8000b06:	bd70      	pop	{r4, r5, r6, pc}
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d1f4      	bne.n	8000af6 <__lesf2+0x42>
 8000b0c:	2800      	cmp	r0, #0
 8000b0e:	d1fa      	bne.n	8000b06 <__lesf2+0x52>
 8000b10:	2001      	movs	r0, #1
 8000b12:	4240      	negs	r0, r0
 8000b14:	e7f7      	b.n	8000b06 <__lesf2+0x52>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d1ed      	bne.n	8000af6 <__lesf2+0x42>
 8000b1a:	2e00      	cmp	r6, #0
 8000b1c:	d1eb      	bne.n	8000af6 <__lesf2+0x42>
 8000b1e:	e7ec      	b.n	8000afa <__lesf2+0x46>
 8000b20:	42a2      	cmp	r2, r4
 8000b22:	dc05      	bgt.n	8000b30 <__lesf2+0x7c>
 8000b24:	dbf2      	blt.n	8000b0c <__lesf2+0x58>
 8000b26:	42b5      	cmp	r5, r6
 8000b28:	d802      	bhi.n	8000b30 <__lesf2+0x7c>
 8000b2a:	d3ef      	bcc.n	8000b0c <__lesf2+0x58>
 8000b2c:	2000      	movs	r0, #0
 8000b2e:	e7ea      	b.n	8000b06 <__lesf2+0x52>
 8000b30:	4243      	negs	r3, r0
 8000b32:	4158      	adcs	r0, r3
 8000b34:	0040      	lsls	r0, r0, #1
 8000b36:	3801      	subs	r0, #1
 8000b38:	e7e5      	b.n	8000b06 <__lesf2+0x52>
 8000b3a:	46c0      	nop			; (mov r8, r8)

08000b3c <__aeabi_fmul>:
 8000b3c:	0243      	lsls	r3, r0, #9
 8000b3e:	0a5b      	lsrs	r3, r3, #9
 8000b40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b42:	464f      	mov	r7, r9
 8000b44:	4646      	mov	r6, r8
 8000b46:	4699      	mov	r9, r3
 8000b48:	46d6      	mov	lr, sl
 8000b4a:	0fc3      	lsrs	r3, r0, #31
 8000b4c:	0045      	lsls	r5, r0, #1
 8000b4e:	4698      	mov	r8, r3
 8000b50:	b5c0      	push	{r6, r7, lr}
 8000b52:	464b      	mov	r3, r9
 8000b54:	1c0f      	adds	r7, r1, #0
 8000b56:	0e2d      	lsrs	r5, r5, #24
 8000b58:	d100      	bne.n	8000b5c <__aeabi_fmul+0x20>
 8000b5a:	e0cb      	b.n	8000cf4 <__aeabi_fmul+0x1b8>
 8000b5c:	2dff      	cmp	r5, #255	; 0xff
 8000b5e:	d100      	bne.n	8000b62 <__aeabi_fmul+0x26>
 8000b60:	e0cf      	b.n	8000d02 <__aeabi_fmul+0x1c6>
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	00db      	lsls	r3, r3, #3
 8000b66:	04d2      	lsls	r2, r2, #19
 8000b68:	431a      	orrs	r2, r3
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	4691      	mov	r9, r2
 8000b6e:	2600      	movs	r6, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	3d7f      	subs	r5, #127	; 0x7f
 8000b74:	027c      	lsls	r4, r7, #9
 8000b76:	007b      	lsls	r3, r7, #1
 8000b78:	0a64      	lsrs	r4, r4, #9
 8000b7a:	0e1b      	lsrs	r3, r3, #24
 8000b7c:	0fff      	lsrs	r7, r7, #31
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d100      	bne.n	8000b84 <__aeabi_fmul+0x48>
 8000b82:	e0a9      	b.n	8000cd8 <__aeabi_fmul+0x19c>
 8000b84:	2bff      	cmp	r3, #255	; 0xff
 8000b86:	d011      	beq.n	8000bac <__aeabi_fmul+0x70>
 8000b88:	2280      	movs	r2, #128	; 0x80
 8000b8a:	00e4      	lsls	r4, r4, #3
 8000b8c:	04d2      	lsls	r2, r2, #19
 8000b8e:	4314      	orrs	r4, r2
 8000b90:	4642      	mov	r2, r8
 8000b92:	3b7f      	subs	r3, #127	; 0x7f
 8000b94:	195b      	adds	r3, r3, r5
 8000b96:	407a      	eors	r2, r7
 8000b98:	2000      	movs	r0, #0
 8000b9a:	b2d2      	uxtb	r2, r2
 8000b9c:	1c5d      	adds	r5, r3, #1
 8000b9e:	2e0a      	cmp	r6, #10
 8000ba0:	dd13      	ble.n	8000bca <__aeabi_fmul+0x8e>
 8000ba2:	003a      	movs	r2, r7
 8000ba4:	2e0b      	cmp	r6, #11
 8000ba6:	d047      	beq.n	8000c38 <__aeabi_fmul+0xfc>
 8000ba8:	4647      	mov	r7, r8
 8000baa:	e03f      	b.n	8000c2c <__aeabi_fmul+0xf0>
 8000bac:	002b      	movs	r3, r5
 8000bae:	33ff      	adds	r3, #255	; 0xff
 8000bb0:	2c00      	cmp	r4, #0
 8000bb2:	d11e      	bne.n	8000bf2 <__aeabi_fmul+0xb6>
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	4316      	orrs	r6, r2
 8000bb8:	4642      	mov	r2, r8
 8000bba:	3501      	adds	r5, #1
 8000bbc:	407a      	eors	r2, r7
 8000bbe:	b2d2      	uxtb	r2, r2
 8000bc0:	35ff      	adds	r5, #255	; 0xff
 8000bc2:	2e0a      	cmp	r6, #10
 8000bc4:	dd00      	ble.n	8000bc8 <__aeabi_fmul+0x8c>
 8000bc6:	e0e4      	b.n	8000d92 <__aeabi_fmul+0x256>
 8000bc8:	2002      	movs	r0, #2
 8000bca:	2e02      	cmp	r6, #2
 8000bcc:	dc1c      	bgt.n	8000c08 <__aeabi_fmul+0xcc>
 8000bce:	3e01      	subs	r6, #1
 8000bd0:	2e01      	cmp	r6, #1
 8000bd2:	d842      	bhi.n	8000c5a <__aeabi_fmul+0x11e>
 8000bd4:	2802      	cmp	r0, #2
 8000bd6:	d03d      	beq.n	8000c54 <__aeabi_fmul+0x118>
 8000bd8:	2801      	cmp	r0, #1
 8000bda:	d166      	bne.n	8000caa <__aeabi_fmul+0x16e>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	2100      	movs	r1, #0
 8000be0:	05c0      	lsls	r0, r0, #23
 8000be2:	4308      	orrs	r0, r1
 8000be4:	07d2      	lsls	r2, r2, #31
 8000be6:	4310      	orrs	r0, r2
 8000be8:	bce0      	pop	{r5, r6, r7}
 8000bea:	46ba      	mov	sl, r7
 8000bec:	46b1      	mov	r9, r6
 8000bee:	46a8      	mov	r8, r5
 8000bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	4316      	orrs	r6, r2
 8000bf6:	4642      	mov	r2, r8
 8000bf8:	3501      	adds	r5, #1
 8000bfa:	407a      	eors	r2, r7
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	35ff      	adds	r5, #255	; 0xff
 8000c00:	2e0a      	cmp	r6, #10
 8000c02:	dd00      	ble.n	8000c06 <__aeabi_fmul+0xca>
 8000c04:	e0e4      	b.n	8000dd0 <__aeabi_fmul+0x294>
 8000c06:	2003      	movs	r0, #3
 8000c08:	2101      	movs	r1, #1
 8000c0a:	40b1      	lsls	r1, r6
 8000c0c:	26a6      	movs	r6, #166	; 0xa6
 8000c0e:	00f6      	lsls	r6, r6, #3
 8000c10:	4231      	tst	r1, r6
 8000c12:	d10a      	bne.n	8000c2a <__aeabi_fmul+0xee>
 8000c14:	2690      	movs	r6, #144	; 0x90
 8000c16:	00b6      	lsls	r6, r6, #2
 8000c18:	4231      	tst	r1, r6
 8000c1a:	d116      	bne.n	8000c4a <__aeabi_fmul+0x10e>
 8000c1c:	3eb9      	subs	r6, #185	; 0xb9
 8000c1e:	3eff      	subs	r6, #255	; 0xff
 8000c20:	420e      	tst	r6, r1
 8000c22:	d01a      	beq.n	8000c5a <__aeabi_fmul+0x11e>
 8000c24:	46a1      	mov	r9, r4
 8000c26:	4682      	mov	sl, r0
 8000c28:	e000      	b.n	8000c2c <__aeabi_fmul+0xf0>
 8000c2a:	0017      	movs	r7, r2
 8000c2c:	4653      	mov	r3, sl
 8000c2e:	003a      	movs	r2, r7
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d00f      	beq.n	8000c54 <__aeabi_fmul+0x118>
 8000c34:	464c      	mov	r4, r9
 8000c36:	4650      	mov	r0, sl
 8000c38:	2803      	cmp	r0, #3
 8000c3a:	d1cd      	bne.n	8000bd8 <__aeabi_fmul+0x9c>
 8000c3c:	2180      	movs	r1, #128	; 0x80
 8000c3e:	03c9      	lsls	r1, r1, #15
 8000c40:	4321      	orrs	r1, r4
 8000c42:	0249      	lsls	r1, r1, #9
 8000c44:	20ff      	movs	r0, #255	; 0xff
 8000c46:	0a49      	lsrs	r1, r1, #9
 8000c48:	e7ca      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000c4a:	2180      	movs	r1, #128	; 0x80
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	20ff      	movs	r0, #255	; 0xff
 8000c50:	03c9      	lsls	r1, r1, #15
 8000c52:	e7c5      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000c54:	20ff      	movs	r0, #255	; 0xff
 8000c56:	2100      	movs	r1, #0
 8000c58:	e7c2      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000c5a:	0c20      	lsrs	r0, r4, #16
 8000c5c:	4649      	mov	r1, r9
 8000c5e:	0424      	lsls	r4, r4, #16
 8000c60:	0c24      	lsrs	r4, r4, #16
 8000c62:	0027      	movs	r7, r4
 8000c64:	0c0e      	lsrs	r6, r1, #16
 8000c66:	0409      	lsls	r1, r1, #16
 8000c68:	0c09      	lsrs	r1, r1, #16
 8000c6a:	4374      	muls	r4, r6
 8000c6c:	434f      	muls	r7, r1
 8000c6e:	4346      	muls	r6, r0
 8000c70:	4348      	muls	r0, r1
 8000c72:	0c39      	lsrs	r1, r7, #16
 8000c74:	1900      	adds	r0, r0, r4
 8000c76:	1809      	adds	r1, r1, r0
 8000c78:	428c      	cmp	r4, r1
 8000c7a:	d903      	bls.n	8000c84 <__aeabi_fmul+0x148>
 8000c7c:	2080      	movs	r0, #128	; 0x80
 8000c7e:	0240      	lsls	r0, r0, #9
 8000c80:	4684      	mov	ip, r0
 8000c82:	4466      	add	r6, ip
 8000c84:	043f      	lsls	r7, r7, #16
 8000c86:	0408      	lsls	r0, r1, #16
 8000c88:	0c3f      	lsrs	r7, r7, #16
 8000c8a:	19c0      	adds	r0, r0, r7
 8000c8c:	0184      	lsls	r4, r0, #6
 8000c8e:	1e67      	subs	r7, r4, #1
 8000c90:	41bc      	sbcs	r4, r7
 8000c92:	0c09      	lsrs	r1, r1, #16
 8000c94:	0e80      	lsrs	r0, r0, #26
 8000c96:	1989      	adds	r1, r1, r6
 8000c98:	4304      	orrs	r4, r0
 8000c9a:	0189      	lsls	r1, r1, #6
 8000c9c:	430c      	orrs	r4, r1
 8000c9e:	0109      	lsls	r1, r1, #4
 8000ca0:	d571      	bpl.n	8000d86 <__aeabi_fmul+0x24a>
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	0861      	lsrs	r1, r4, #1
 8000ca6:	401c      	ands	r4, r3
 8000ca8:	430c      	orrs	r4, r1
 8000caa:	002b      	movs	r3, r5
 8000cac:	337f      	adds	r3, #127	; 0x7f
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	dd51      	ble.n	8000d56 <__aeabi_fmul+0x21a>
 8000cb2:	0761      	lsls	r1, r4, #29
 8000cb4:	d004      	beq.n	8000cc0 <__aeabi_fmul+0x184>
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	4021      	ands	r1, r4
 8000cba:	2904      	cmp	r1, #4
 8000cbc:	d000      	beq.n	8000cc0 <__aeabi_fmul+0x184>
 8000cbe:	3404      	adds	r4, #4
 8000cc0:	0121      	lsls	r1, r4, #4
 8000cc2:	d503      	bpl.n	8000ccc <__aeabi_fmul+0x190>
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <__aeabi_fmul+0x298>)
 8000cc6:	401c      	ands	r4, r3
 8000cc8:	002b      	movs	r3, r5
 8000cca:	3380      	adds	r3, #128	; 0x80
 8000ccc:	2bfe      	cmp	r3, #254	; 0xfe
 8000cce:	dcc1      	bgt.n	8000c54 <__aeabi_fmul+0x118>
 8000cd0:	01a1      	lsls	r1, r4, #6
 8000cd2:	0a49      	lsrs	r1, r1, #9
 8000cd4:	b2d8      	uxtb	r0, r3
 8000cd6:	e783      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000cd8:	2c00      	cmp	r4, #0
 8000cda:	d12c      	bne.n	8000d36 <__aeabi_fmul+0x1fa>
 8000cdc:	2301      	movs	r3, #1
 8000cde:	4642      	mov	r2, r8
 8000ce0:	431e      	orrs	r6, r3
 8000ce2:	002b      	movs	r3, r5
 8000ce4:	407a      	eors	r2, r7
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	1c5d      	adds	r5, r3, #1
 8000cec:	2e0a      	cmp	r6, #10
 8000cee:	dd00      	ble.n	8000cf2 <__aeabi_fmul+0x1b6>
 8000cf0:	e757      	b.n	8000ba2 <__aeabi_fmul+0x66>
 8000cf2:	e76a      	b.n	8000bca <__aeabi_fmul+0x8e>
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d110      	bne.n	8000d1a <__aeabi_fmul+0x1de>
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	2604      	movs	r6, #4
 8000cfc:	2500      	movs	r5, #0
 8000cfe:	469a      	mov	sl, r3
 8000d00:	e738      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d104      	bne.n	8000d10 <__aeabi_fmul+0x1d4>
 8000d06:	2302      	movs	r3, #2
 8000d08:	2608      	movs	r6, #8
 8000d0a:	25ff      	movs	r5, #255	; 0xff
 8000d0c:	469a      	mov	sl, r3
 8000d0e:	e731      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d10:	2303      	movs	r3, #3
 8000d12:	260c      	movs	r6, #12
 8000d14:	25ff      	movs	r5, #255	; 0xff
 8000d16:	469a      	mov	sl, r3
 8000d18:	e72c      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d1a:	4648      	mov	r0, r9
 8000d1c:	f000 ff4e 	bl	8001bbc <__clzsi2>
 8000d20:	464a      	mov	r2, r9
 8000d22:	1f43      	subs	r3, r0, #5
 8000d24:	2576      	movs	r5, #118	; 0x76
 8000d26:	409a      	lsls	r2, r3
 8000d28:	2300      	movs	r3, #0
 8000d2a:	426d      	negs	r5, r5
 8000d2c:	4691      	mov	r9, r2
 8000d2e:	2600      	movs	r6, #0
 8000d30:	469a      	mov	sl, r3
 8000d32:	1a2d      	subs	r5, r5, r0
 8000d34:	e71e      	b.n	8000b74 <__aeabi_fmul+0x38>
 8000d36:	0020      	movs	r0, r4
 8000d38:	f000 ff40 	bl	8001bbc <__clzsi2>
 8000d3c:	4642      	mov	r2, r8
 8000d3e:	1f43      	subs	r3, r0, #5
 8000d40:	409c      	lsls	r4, r3
 8000d42:	1a2b      	subs	r3, r5, r0
 8000d44:	3b76      	subs	r3, #118	; 0x76
 8000d46:	407a      	eors	r2, r7
 8000d48:	2000      	movs	r0, #0
 8000d4a:	b2d2      	uxtb	r2, r2
 8000d4c:	1c5d      	adds	r5, r3, #1
 8000d4e:	2e0a      	cmp	r6, #10
 8000d50:	dd00      	ble.n	8000d54 <__aeabi_fmul+0x218>
 8000d52:	e726      	b.n	8000ba2 <__aeabi_fmul+0x66>
 8000d54:	e739      	b.n	8000bca <__aeabi_fmul+0x8e>
 8000d56:	2101      	movs	r1, #1
 8000d58:	1acb      	subs	r3, r1, r3
 8000d5a:	2b1b      	cmp	r3, #27
 8000d5c:	dd00      	ble.n	8000d60 <__aeabi_fmul+0x224>
 8000d5e:	e73d      	b.n	8000bdc <__aeabi_fmul+0xa0>
 8000d60:	359e      	adds	r5, #158	; 0x9e
 8000d62:	0021      	movs	r1, r4
 8000d64:	40ac      	lsls	r4, r5
 8000d66:	40d9      	lsrs	r1, r3
 8000d68:	1e63      	subs	r3, r4, #1
 8000d6a:	419c      	sbcs	r4, r3
 8000d6c:	4321      	orrs	r1, r4
 8000d6e:	074b      	lsls	r3, r1, #29
 8000d70:	d004      	beq.n	8000d7c <__aeabi_fmul+0x240>
 8000d72:	230f      	movs	r3, #15
 8000d74:	400b      	ands	r3, r1
 8000d76:	2b04      	cmp	r3, #4
 8000d78:	d000      	beq.n	8000d7c <__aeabi_fmul+0x240>
 8000d7a:	3104      	adds	r1, #4
 8000d7c:	014b      	lsls	r3, r1, #5
 8000d7e:	d504      	bpl.n	8000d8a <__aeabi_fmul+0x24e>
 8000d80:	2001      	movs	r0, #1
 8000d82:	2100      	movs	r1, #0
 8000d84:	e72c      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000d86:	001d      	movs	r5, r3
 8000d88:	e78f      	b.n	8000caa <__aeabi_fmul+0x16e>
 8000d8a:	0189      	lsls	r1, r1, #6
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	0a49      	lsrs	r1, r1, #9
 8000d90:	e726      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000d92:	2302      	movs	r3, #2
 8000d94:	2e0f      	cmp	r6, #15
 8000d96:	d10c      	bne.n	8000db2 <__aeabi_fmul+0x276>
 8000d98:	2180      	movs	r1, #128	; 0x80
 8000d9a:	464b      	mov	r3, r9
 8000d9c:	03c9      	lsls	r1, r1, #15
 8000d9e:	420b      	tst	r3, r1
 8000da0:	d00d      	beq.n	8000dbe <__aeabi_fmul+0x282>
 8000da2:	420c      	tst	r4, r1
 8000da4:	d10b      	bne.n	8000dbe <__aeabi_fmul+0x282>
 8000da6:	4321      	orrs	r1, r4
 8000da8:	0249      	lsls	r1, r1, #9
 8000daa:	003a      	movs	r2, r7
 8000dac:	20ff      	movs	r0, #255	; 0xff
 8000dae:	0a49      	lsrs	r1, r1, #9
 8000db0:	e716      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000db2:	2e0b      	cmp	r6, #11
 8000db4:	d000      	beq.n	8000db8 <__aeabi_fmul+0x27c>
 8000db6:	e6f7      	b.n	8000ba8 <__aeabi_fmul+0x6c>
 8000db8:	46a1      	mov	r9, r4
 8000dba:	469a      	mov	sl, r3
 8000dbc:	e736      	b.n	8000c2c <__aeabi_fmul+0xf0>
 8000dbe:	2180      	movs	r1, #128	; 0x80
 8000dc0:	464b      	mov	r3, r9
 8000dc2:	03c9      	lsls	r1, r1, #15
 8000dc4:	4319      	orrs	r1, r3
 8000dc6:	0249      	lsls	r1, r1, #9
 8000dc8:	4642      	mov	r2, r8
 8000dca:	20ff      	movs	r0, #255	; 0xff
 8000dcc:	0a49      	lsrs	r1, r1, #9
 8000dce:	e707      	b.n	8000be0 <__aeabi_fmul+0xa4>
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	e7df      	b.n	8000d94 <__aeabi_fmul+0x258>
 8000dd4:	f7ffffff 	.word	0xf7ffffff

08000dd8 <__aeabi_fsub>:
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dda:	46c6      	mov	lr, r8
 8000ddc:	0243      	lsls	r3, r0, #9
 8000dde:	0a5b      	lsrs	r3, r3, #9
 8000de0:	0045      	lsls	r5, r0, #1
 8000de2:	00da      	lsls	r2, r3, #3
 8000de4:	0fc4      	lsrs	r4, r0, #31
 8000de6:	0248      	lsls	r0, r1, #9
 8000de8:	004f      	lsls	r7, r1, #1
 8000dea:	4694      	mov	ip, r2
 8000dec:	0a42      	lsrs	r2, r0, #9
 8000dee:	001e      	movs	r6, r3
 8000df0:	4690      	mov	r8, r2
 8000df2:	b500      	push	{lr}
 8000df4:	0e2d      	lsrs	r5, r5, #24
 8000df6:	0e3f      	lsrs	r7, r7, #24
 8000df8:	0fc9      	lsrs	r1, r1, #31
 8000dfa:	0980      	lsrs	r0, r0, #6
 8000dfc:	2fff      	cmp	r7, #255	; 0xff
 8000dfe:	d059      	beq.n	8000eb4 <__aeabi_fsub+0xdc>
 8000e00:	2201      	movs	r2, #1
 8000e02:	4051      	eors	r1, r2
 8000e04:	428c      	cmp	r4, r1
 8000e06:	d039      	beq.n	8000e7c <__aeabi_fsub+0xa4>
 8000e08:	1bea      	subs	r2, r5, r7
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	dd58      	ble.n	8000ec0 <__aeabi_fsub+0xe8>
 8000e0e:	2f00      	cmp	r7, #0
 8000e10:	d068      	beq.n	8000ee4 <__aeabi_fsub+0x10c>
 8000e12:	2dff      	cmp	r5, #255	; 0xff
 8000e14:	d100      	bne.n	8000e18 <__aeabi_fsub+0x40>
 8000e16:	e0d1      	b.n	8000fbc <__aeabi_fsub+0x1e4>
 8000e18:	2380      	movs	r3, #128	; 0x80
 8000e1a:	04db      	lsls	r3, r3, #19
 8000e1c:	4318      	orrs	r0, r3
 8000e1e:	2a1b      	cmp	r2, #27
 8000e20:	dc00      	bgt.n	8000e24 <__aeabi_fsub+0x4c>
 8000e22:	e0e3      	b.n	8000fec <__aeabi_fsub+0x214>
 8000e24:	2301      	movs	r3, #1
 8000e26:	4662      	mov	r2, ip
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	015a      	lsls	r2, r3, #5
 8000e2c:	d400      	bmi.n	8000e30 <__aeabi_fsub+0x58>
 8000e2e:	e0ac      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 8000e30:	019b      	lsls	r3, r3, #6
 8000e32:	099e      	lsrs	r6, r3, #6
 8000e34:	0030      	movs	r0, r6
 8000e36:	f000 fec1 	bl	8001bbc <__clzsi2>
 8000e3a:	0033      	movs	r3, r6
 8000e3c:	3805      	subs	r0, #5
 8000e3e:	4083      	lsls	r3, r0
 8000e40:	4285      	cmp	r5, r0
 8000e42:	dc00      	bgt.n	8000e46 <__aeabi_fsub+0x6e>
 8000e44:	e0c6      	b.n	8000fd4 <__aeabi_fsub+0x1fc>
 8000e46:	4ab2      	ldr	r2, [pc, #712]	; (8001110 <__aeabi_fsub+0x338>)
 8000e48:	1a2d      	subs	r5, r5, r0
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	075a      	lsls	r2, r3, #29
 8000e4e:	d004      	beq.n	8000e5a <__aeabi_fsub+0x82>
 8000e50:	220f      	movs	r2, #15
 8000e52:	401a      	ands	r2, r3
 8000e54:	2a04      	cmp	r2, #4
 8000e56:	d000      	beq.n	8000e5a <__aeabi_fsub+0x82>
 8000e58:	3304      	adds	r3, #4
 8000e5a:	015a      	lsls	r2, r3, #5
 8000e5c:	d400      	bmi.n	8000e60 <__aeabi_fsub+0x88>
 8000e5e:	e097      	b.n	8000f90 <__aeabi_fsub+0x1b8>
 8000e60:	1c6a      	adds	r2, r5, #1
 8000e62:	2dfe      	cmp	r5, #254	; 0xfe
 8000e64:	d100      	bne.n	8000e68 <__aeabi_fsub+0x90>
 8000e66:	e084      	b.n	8000f72 <__aeabi_fsub+0x19a>
 8000e68:	019b      	lsls	r3, r3, #6
 8000e6a:	0a5e      	lsrs	r6, r3, #9
 8000e6c:	b2d2      	uxtb	r2, r2
 8000e6e:	05d0      	lsls	r0, r2, #23
 8000e70:	4330      	orrs	r0, r6
 8000e72:	07e4      	lsls	r4, r4, #31
 8000e74:	4320      	orrs	r0, r4
 8000e76:	bc80      	pop	{r7}
 8000e78:	46b8      	mov	r8, r7
 8000e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e7c:	1bea      	subs	r2, r5, r7
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	dd41      	ble.n	8000f06 <__aeabi_fsub+0x12e>
 8000e82:	2f00      	cmp	r7, #0
 8000e84:	d06b      	beq.n	8000f5e <__aeabi_fsub+0x186>
 8000e86:	2dff      	cmp	r5, #255	; 0xff
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0xb4>
 8000e8a:	e097      	b.n	8000fbc <__aeabi_fsub+0x1e4>
 8000e8c:	2380      	movs	r3, #128	; 0x80
 8000e8e:	04db      	lsls	r3, r3, #19
 8000e90:	4318      	orrs	r0, r3
 8000e92:	2a1b      	cmp	r2, #27
 8000e94:	dc00      	bgt.n	8000e98 <__aeabi_fsub+0xc0>
 8000e96:	e0cc      	b.n	8001032 <__aeabi_fsub+0x25a>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	4463      	add	r3, ip
 8000e9c:	015a      	lsls	r2, r3, #5
 8000e9e:	d574      	bpl.n	8000f8a <__aeabi_fsub+0x1b2>
 8000ea0:	3501      	adds	r5, #1
 8000ea2:	2dff      	cmp	r5, #255	; 0xff
 8000ea4:	d065      	beq.n	8000f72 <__aeabi_fsub+0x19a>
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	499a      	ldr	r1, [pc, #616]	; (8001114 <__aeabi_fsub+0x33c>)
 8000eaa:	401a      	ands	r2, r3
 8000eac:	085b      	lsrs	r3, r3, #1
 8000eae:	400b      	ands	r3, r1
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	e7cb      	b.n	8000e4c <__aeabi_fsub+0x74>
 8000eb4:	2800      	cmp	r0, #0
 8000eb6:	d01f      	beq.n	8000ef8 <__aeabi_fsub+0x120>
 8000eb8:	428c      	cmp	r4, r1
 8000eba:	d022      	beq.n	8000f02 <__aeabi_fsub+0x12a>
 8000ebc:	002a      	movs	r2, r5
 8000ebe:	3aff      	subs	r2, #255	; 0xff
 8000ec0:	2a00      	cmp	r2, #0
 8000ec2:	d035      	beq.n	8000f30 <__aeabi_fsub+0x158>
 8000ec4:	1b7a      	subs	r2, r7, r5
 8000ec6:	2d00      	cmp	r5, #0
 8000ec8:	d000      	beq.n	8000ecc <__aeabi_fsub+0xf4>
 8000eca:	e099      	b.n	8001000 <__aeabi_fsub+0x228>
 8000ecc:	4663      	mov	r3, ip
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d100      	bne.n	8000ed4 <__aeabi_fsub+0xfc>
 8000ed2:	e0dd      	b.n	8001090 <__aeabi_fsub+0x2b8>
 8000ed4:	1e53      	subs	r3, r2, #1
 8000ed6:	2a01      	cmp	r2, #1
 8000ed8:	d100      	bne.n	8000edc <__aeabi_fsub+0x104>
 8000eda:	e105      	b.n	80010e8 <__aeabi_fsub+0x310>
 8000edc:	2aff      	cmp	r2, #255	; 0xff
 8000ede:	d06b      	beq.n	8000fb8 <__aeabi_fsub+0x1e0>
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	e094      	b.n	800100e <__aeabi_fsub+0x236>
 8000ee4:	2800      	cmp	r0, #0
 8000ee6:	d073      	beq.n	8000fd0 <__aeabi_fsub+0x1f8>
 8000ee8:	1e51      	subs	r1, r2, #1
 8000eea:	2a01      	cmp	r2, #1
 8000eec:	d100      	bne.n	8000ef0 <__aeabi_fsub+0x118>
 8000eee:	e0df      	b.n	80010b0 <__aeabi_fsub+0x2d8>
 8000ef0:	2aff      	cmp	r2, #255	; 0xff
 8000ef2:	d063      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000ef4:	000a      	movs	r2, r1
 8000ef6:	e792      	b.n	8000e1e <__aeabi_fsub+0x46>
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4051      	eors	r1, r2
 8000efc:	42a1      	cmp	r1, r4
 8000efe:	d000      	beq.n	8000f02 <__aeabi_fsub+0x12a>
 8000f00:	e782      	b.n	8000e08 <__aeabi_fsub+0x30>
 8000f02:	002a      	movs	r2, r5
 8000f04:	3aff      	subs	r2, #255	; 0xff
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d036      	beq.n	8000f78 <__aeabi_fsub+0x1a0>
 8000f0a:	1b7a      	subs	r2, r7, r5
 8000f0c:	2d00      	cmp	r5, #0
 8000f0e:	d100      	bne.n	8000f12 <__aeabi_fsub+0x13a>
 8000f10:	e0aa      	b.n	8001068 <__aeabi_fsub+0x290>
 8000f12:	2fff      	cmp	r7, #255	; 0xff
 8000f14:	d100      	bne.n	8000f18 <__aeabi_fsub+0x140>
 8000f16:	e0da      	b.n	80010ce <__aeabi_fsub+0x2f6>
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	4661      	mov	r1, ip
 8000f1c:	04db      	lsls	r3, r3, #19
 8000f1e:	4319      	orrs	r1, r3
 8000f20:	468c      	mov	ip, r1
 8000f22:	2a1b      	cmp	r2, #27
 8000f24:	dc00      	bgt.n	8000f28 <__aeabi_fsub+0x150>
 8000f26:	e0d4      	b.n	80010d2 <__aeabi_fsub+0x2fa>
 8000f28:	2301      	movs	r3, #1
 8000f2a:	003d      	movs	r5, r7
 8000f2c:	181b      	adds	r3, r3, r0
 8000f2e:	e7b5      	b.n	8000e9c <__aeabi_fsub+0xc4>
 8000f30:	27fe      	movs	r7, #254	; 0xfe
 8000f32:	1c6a      	adds	r2, r5, #1
 8000f34:	4217      	tst	r7, r2
 8000f36:	d171      	bne.n	800101c <__aeabi_fsub+0x244>
 8000f38:	2d00      	cmp	r5, #0
 8000f3a:	d000      	beq.n	8000f3e <__aeabi_fsub+0x166>
 8000f3c:	e09e      	b.n	800107c <__aeabi_fsub+0x2a4>
 8000f3e:	4663      	mov	r3, ip
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fsub+0x16e>
 8000f44:	e0d5      	b.n	80010f2 <__aeabi_fsub+0x31a>
 8000f46:	2200      	movs	r2, #0
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	d100      	bne.n	8000f4e <__aeabi_fsub+0x176>
 8000f4c:	e78f      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000f4e:	1a1b      	subs	r3, r3, r0
 8000f50:	015e      	lsls	r6, r3, #5
 8000f52:	d400      	bmi.n	8000f56 <__aeabi_fsub+0x17e>
 8000f54:	e0d6      	b.n	8001104 <__aeabi_fsub+0x32c>
 8000f56:	4663      	mov	r3, ip
 8000f58:	000c      	movs	r4, r1
 8000f5a:	1ac3      	subs	r3, r0, r3
 8000f5c:	e776      	b.n	8000e4c <__aeabi_fsub+0x74>
 8000f5e:	2800      	cmp	r0, #0
 8000f60:	d036      	beq.n	8000fd0 <__aeabi_fsub+0x1f8>
 8000f62:	1e51      	subs	r1, r2, #1
 8000f64:	2a01      	cmp	r2, #1
 8000f66:	d100      	bne.n	8000f6a <__aeabi_fsub+0x192>
 8000f68:	e09a      	b.n	80010a0 <__aeabi_fsub+0x2c8>
 8000f6a:	2aff      	cmp	r2, #255	; 0xff
 8000f6c:	d026      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000f6e:	000a      	movs	r2, r1
 8000f70:	e78f      	b.n	8000e92 <__aeabi_fsub+0xba>
 8000f72:	22ff      	movs	r2, #255	; 0xff
 8000f74:	2600      	movs	r6, #0
 8000f76:	e77a      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000f78:	27fe      	movs	r7, #254	; 0xfe
 8000f7a:	1c6a      	adds	r2, r5, #1
 8000f7c:	4217      	tst	r7, r2
 8000f7e:	d062      	beq.n	8001046 <__aeabi_fsub+0x26e>
 8000f80:	2aff      	cmp	r2, #255	; 0xff
 8000f82:	d0f6      	beq.n	8000f72 <__aeabi_fsub+0x19a>
 8000f84:	0015      	movs	r5, r2
 8000f86:	4460      	add	r0, ip
 8000f88:	0843      	lsrs	r3, r0, #1
 8000f8a:	075a      	lsls	r2, r3, #29
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_fsub+0x1b8>
 8000f8e:	e75f      	b.n	8000e50 <__aeabi_fsub+0x78>
 8000f90:	08db      	lsrs	r3, r3, #3
 8000f92:	2dff      	cmp	r5, #255	; 0xff
 8000f94:	d012      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	0a5e      	lsrs	r6, r3, #9
 8000f9a:	b2ea      	uxtb	r2, r5
 8000f9c:	e767      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000f9e:	4662      	mov	r2, ip
 8000fa0:	2a00      	cmp	r2, #0
 8000fa2:	d100      	bne.n	8000fa6 <__aeabi_fsub+0x1ce>
 8000fa4:	e093      	b.n	80010ce <__aeabi_fsub+0x2f6>
 8000fa6:	2800      	cmp	r0, #0
 8000fa8:	d008      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000faa:	2280      	movs	r2, #128	; 0x80
 8000fac:	03d2      	lsls	r2, r2, #15
 8000fae:	4213      	tst	r3, r2
 8000fb0:	d004      	beq.n	8000fbc <__aeabi_fsub+0x1e4>
 8000fb2:	4640      	mov	r0, r8
 8000fb4:	4210      	tst	r0, r2
 8000fb6:	d101      	bne.n	8000fbc <__aeabi_fsub+0x1e4>
 8000fb8:	000c      	movs	r4, r1
 8000fba:	4643      	mov	r3, r8
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d0d8      	beq.n	8000f72 <__aeabi_fsub+0x19a>
 8000fc0:	2680      	movs	r6, #128	; 0x80
 8000fc2:	03f6      	lsls	r6, r6, #15
 8000fc4:	431e      	orrs	r6, r3
 8000fc6:	0276      	lsls	r6, r6, #9
 8000fc8:	22ff      	movs	r2, #255	; 0xff
 8000fca:	0a76      	lsrs	r6, r6, #9
 8000fcc:	e74f      	b.n	8000e6e <__aeabi_fsub+0x96>
 8000fce:	4643      	mov	r3, r8
 8000fd0:	0015      	movs	r5, r2
 8000fd2:	e7de      	b.n	8000f92 <__aeabi_fsub+0x1ba>
 8000fd4:	2220      	movs	r2, #32
 8000fd6:	1b40      	subs	r0, r0, r5
 8000fd8:	3001      	adds	r0, #1
 8000fda:	1a12      	subs	r2, r2, r0
 8000fdc:	0019      	movs	r1, r3
 8000fde:	4093      	lsls	r3, r2
 8000fe0:	40c1      	lsrs	r1, r0
 8000fe2:	1e5a      	subs	r2, r3, #1
 8000fe4:	4193      	sbcs	r3, r2
 8000fe6:	2500      	movs	r5, #0
 8000fe8:	430b      	orrs	r3, r1
 8000fea:	e72f      	b.n	8000e4c <__aeabi_fsub+0x74>
 8000fec:	2320      	movs	r3, #32
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	0001      	movs	r1, r0
 8000ff2:	4098      	lsls	r0, r3
 8000ff4:	0003      	movs	r3, r0
 8000ff6:	40d1      	lsrs	r1, r2
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	4193      	sbcs	r3, r2
 8000ffc:	430b      	orrs	r3, r1
 8000ffe:	e712      	b.n	8000e26 <__aeabi_fsub+0x4e>
 8001000:	2fff      	cmp	r7, #255	; 0xff
 8001002:	d0d9      	beq.n	8000fb8 <__aeabi_fsub+0x1e0>
 8001004:	2380      	movs	r3, #128	; 0x80
 8001006:	4664      	mov	r4, ip
 8001008:	04db      	lsls	r3, r3, #19
 800100a:	431c      	orrs	r4, r3
 800100c:	46a4      	mov	ip, r4
 800100e:	2a1b      	cmp	r2, #27
 8001010:	dd52      	ble.n	80010b8 <__aeabi_fsub+0x2e0>
 8001012:	2301      	movs	r3, #1
 8001014:	000c      	movs	r4, r1
 8001016:	003d      	movs	r5, r7
 8001018:	1ac3      	subs	r3, r0, r3
 800101a:	e706      	b.n	8000e2a <__aeabi_fsub+0x52>
 800101c:	4663      	mov	r3, ip
 800101e:	1a1e      	subs	r6, r3, r0
 8001020:	0173      	lsls	r3, r6, #5
 8001022:	d439      	bmi.n	8001098 <__aeabi_fsub+0x2c0>
 8001024:	2e00      	cmp	r6, #0
 8001026:	d000      	beq.n	800102a <__aeabi_fsub+0x252>
 8001028:	e704      	b.n	8000e34 <__aeabi_fsub+0x5c>
 800102a:	2400      	movs	r4, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2600      	movs	r6, #0
 8001030:	e71d      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001032:	2320      	movs	r3, #32
 8001034:	1a9b      	subs	r3, r3, r2
 8001036:	0001      	movs	r1, r0
 8001038:	4098      	lsls	r0, r3
 800103a:	0003      	movs	r3, r0
 800103c:	40d1      	lsrs	r1, r2
 800103e:	1e5a      	subs	r2, r3, #1
 8001040:	4193      	sbcs	r3, r2
 8001042:	430b      	orrs	r3, r1
 8001044:	e729      	b.n	8000e9a <__aeabi_fsub+0xc2>
 8001046:	2d00      	cmp	r5, #0
 8001048:	d1a9      	bne.n	8000f9e <__aeabi_fsub+0x1c6>
 800104a:	4663      	mov	r3, ip
 800104c:	2b00      	cmp	r3, #0
 800104e:	d056      	beq.n	80010fe <__aeabi_fsub+0x326>
 8001050:	2200      	movs	r2, #0
 8001052:	2800      	cmp	r0, #0
 8001054:	d100      	bne.n	8001058 <__aeabi_fsub+0x280>
 8001056:	e70a      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001058:	0003      	movs	r3, r0
 800105a:	4463      	add	r3, ip
 800105c:	015a      	lsls	r2, r3, #5
 800105e:	d594      	bpl.n	8000f8a <__aeabi_fsub+0x1b2>
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <__aeabi_fsub+0x338>)
 8001062:	3501      	adds	r5, #1
 8001064:	4013      	ands	r3, r2
 8001066:	e790      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 8001068:	4663      	mov	r3, ip
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0af      	beq.n	8000fce <__aeabi_fsub+0x1f6>
 800106e:	1e53      	subs	r3, r2, #1
 8001070:	2a01      	cmp	r2, #1
 8001072:	d015      	beq.n	80010a0 <__aeabi_fsub+0x2c8>
 8001074:	2aff      	cmp	r2, #255	; 0xff
 8001076:	d02a      	beq.n	80010ce <__aeabi_fsub+0x2f6>
 8001078:	001a      	movs	r2, r3
 800107a:	e752      	b.n	8000f22 <__aeabi_fsub+0x14a>
 800107c:	4662      	mov	r2, ip
 800107e:	2a00      	cmp	r2, #0
 8001080:	d191      	bne.n	8000fa6 <__aeabi_fsub+0x1ce>
 8001082:	2800      	cmp	r0, #0
 8001084:	d198      	bne.n	8000fb8 <__aeabi_fsub+0x1e0>
 8001086:	2680      	movs	r6, #128	; 0x80
 8001088:	2400      	movs	r4, #0
 800108a:	22ff      	movs	r2, #255	; 0xff
 800108c:	03f6      	lsls	r6, r6, #15
 800108e:	e6ee      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001090:	000c      	movs	r4, r1
 8001092:	4643      	mov	r3, r8
 8001094:	0015      	movs	r5, r2
 8001096:	e77c      	b.n	8000f92 <__aeabi_fsub+0x1ba>
 8001098:	4663      	mov	r3, ip
 800109a:	000c      	movs	r4, r1
 800109c:	1ac6      	subs	r6, r0, r3
 800109e:	e6c9      	b.n	8000e34 <__aeabi_fsub+0x5c>
 80010a0:	0003      	movs	r3, r0
 80010a2:	4463      	add	r3, ip
 80010a4:	2501      	movs	r5, #1
 80010a6:	015a      	lsls	r2, r3, #5
 80010a8:	d400      	bmi.n	80010ac <__aeabi_fsub+0x2d4>
 80010aa:	e76e      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 80010ac:	2502      	movs	r5, #2
 80010ae:	e6fa      	b.n	8000ea6 <__aeabi_fsub+0xce>
 80010b0:	4663      	mov	r3, ip
 80010b2:	2501      	movs	r5, #1
 80010b4:	1a1b      	subs	r3, r3, r0
 80010b6:	e6b8      	b.n	8000e2a <__aeabi_fsub+0x52>
 80010b8:	4664      	mov	r4, ip
 80010ba:	2320      	movs	r3, #32
 80010bc:	40d4      	lsrs	r4, r2
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	4662      	mov	r2, ip
 80010c2:	409a      	lsls	r2, r3
 80010c4:	0013      	movs	r3, r2
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	4193      	sbcs	r3, r2
 80010ca:	4323      	orrs	r3, r4
 80010cc:	e7a2      	b.n	8001014 <__aeabi_fsub+0x23c>
 80010ce:	4643      	mov	r3, r8
 80010d0:	e774      	b.n	8000fbc <__aeabi_fsub+0x1e4>
 80010d2:	4661      	mov	r1, ip
 80010d4:	2320      	movs	r3, #32
 80010d6:	40d1      	lsrs	r1, r2
 80010d8:	1a9b      	subs	r3, r3, r2
 80010da:	4662      	mov	r2, ip
 80010dc:	409a      	lsls	r2, r3
 80010de:	0013      	movs	r3, r2
 80010e0:	1e5a      	subs	r2, r3, #1
 80010e2:	4193      	sbcs	r3, r2
 80010e4:	430b      	orrs	r3, r1
 80010e6:	e720      	b.n	8000f2a <__aeabi_fsub+0x152>
 80010e8:	4663      	mov	r3, ip
 80010ea:	000c      	movs	r4, r1
 80010ec:	2501      	movs	r5, #1
 80010ee:	1ac3      	subs	r3, r0, r3
 80010f0:	e69b      	b.n	8000e2a <__aeabi_fsub+0x52>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	d099      	beq.n	800102a <__aeabi_fsub+0x252>
 80010f6:	000c      	movs	r4, r1
 80010f8:	4646      	mov	r6, r8
 80010fa:	2200      	movs	r2, #0
 80010fc:	e6b7      	b.n	8000e6e <__aeabi_fsub+0x96>
 80010fe:	4646      	mov	r6, r8
 8001100:	2200      	movs	r2, #0
 8001102:	e6b4      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001104:	2b00      	cmp	r3, #0
 8001106:	d000      	beq.n	800110a <__aeabi_fsub+0x332>
 8001108:	e73f      	b.n	8000f8a <__aeabi_fsub+0x1b2>
 800110a:	2400      	movs	r4, #0
 800110c:	2600      	movs	r6, #0
 800110e:	e6ae      	b.n	8000e6e <__aeabi_fsub+0x96>
 8001110:	fbffffff 	.word	0xfbffffff
 8001114:	7dffffff 	.word	0x7dffffff

08001118 <__aeabi_f2iz>:
 8001118:	0241      	lsls	r1, r0, #9
 800111a:	0042      	lsls	r2, r0, #1
 800111c:	0fc3      	lsrs	r3, r0, #31
 800111e:	0a49      	lsrs	r1, r1, #9
 8001120:	2000      	movs	r0, #0
 8001122:	0e12      	lsrs	r2, r2, #24
 8001124:	2a7e      	cmp	r2, #126	; 0x7e
 8001126:	dd03      	ble.n	8001130 <__aeabi_f2iz+0x18>
 8001128:	2a9d      	cmp	r2, #157	; 0x9d
 800112a:	dd02      	ble.n	8001132 <__aeabi_f2iz+0x1a>
 800112c:	4a09      	ldr	r2, [pc, #36]	; (8001154 <__aeabi_f2iz+0x3c>)
 800112e:	1898      	adds	r0, r3, r2
 8001130:	4770      	bx	lr
 8001132:	2080      	movs	r0, #128	; 0x80
 8001134:	0400      	lsls	r0, r0, #16
 8001136:	4301      	orrs	r1, r0
 8001138:	2a95      	cmp	r2, #149	; 0x95
 800113a:	dc07      	bgt.n	800114c <__aeabi_f2iz+0x34>
 800113c:	2096      	movs	r0, #150	; 0x96
 800113e:	1a82      	subs	r2, r0, r2
 8001140:	40d1      	lsrs	r1, r2
 8001142:	4248      	negs	r0, r1
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1f3      	bne.n	8001130 <__aeabi_f2iz+0x18>
 8001148:	0008      	movs	r0, r1
 800114a:	e7f1      	b.n	8001130 <__aeabi_f2iz+0x18>
 800114c:	3a96      	subs	r2, #150	; 0x96
 800114e:	4091      	lsls	r1, r2
 8001150:	e7f7      	b.n	8001142 <__aeabi_f2iz+0x2a>
 8001152:	46c0      	nop			; (mov r8, r8)
 8001154:	7fffffff 	.word	0x7fffffff

08001158 <__aeabi_ui2f>:
 8001158:	b570      	push	{r4, r5, r6, lr}
 800115a:	1e04      	subs	r4, r0, #0
 800115c:	d00e      	beq.n	800117c <__aeabi_ui2f+0x24>
 800115e:	f000 fd2d 	bl	8001bbc <__clzsi2>
 8001162:	239e      	movs	r3, #158	; 0x9e
 8001164:	0001      	movs	r1, r0
 8001166:	1a1b      	subs	r3, r3, r0
 8001168:	2b96      	cmp	r3, #150	; 0x96
 800116a:	dc0c      	bgt.n	8001186 <__aeabi_ui2f+0x2e>
 800116c:	2808      	cmp	r0, #8
 800116e:	d02c      	beq.n	80011ca <__aeabi_ui2f+0x72>
 8001170:	3908      	subs	r1, #8
 8001172:	408c      	lsls	r4, r1
 8001174:	0264      	lsls	r4, r4, #9
 8001176:	0a64      	lsrs	r4, r4, #9
 8001178:	b2d8      	uxtb	r0, r3
 800117a:	e001      	b.n	8001180 <__aeabi_ui2f+0x28>
 800117c:	2000      	movs	r0, #0
 800117e:	2400      	movs	r4, #0
 8001180:	05c0      	lsls	r0, r0, #23
 8001182:	4320      	orrs	r0, r4
 8001184:	bd70      	pop	{r4, r5, r6, pc}
 8001186:	2b99      	cmp	r3, #153	; 0x99
 8001188:	dd0a      	ble.n	80011a0 <__aeabi_ui2f+0x48>
 800118a:	0002      	movs	r2, r0
 800118c:	0020      	movs	r0, r4
 800118e:	321b      	adds	r2, #27
 8001190:	4090      	lsls	r0, r2
 8001192:	0002      	movs	r2, r0
 8001194:	1e50      	subs	r0, r2, #1
 8001196:	4182      	sbcs	r2, r0
 8001198:	2005      	movs	r0, #5
 800119a:	1a40      	subs	r0, r0, r1
 800119c:	40c4      	lsrs	r4, r0
 800119e:	4314      	orrs	r4, r2
 80011a0:	2905      	cmp	r1, #5
 80011a2:	dc16      	bgt.n	80011d2 <__aeabi_ui2f+0x7a>
 80011a4:	0022      	movs	r2, r4
 80011a6:	480f      	ldr	r0, [pc, #60]	; (80011e4 <__aeabi_ui2f+0x8c>)
 80011a8:	4002      	ands	r2, r0
 80011aa:	0765      	lsls	r5, r4, #29
 80011ac:	d009      	beq.n	80011c2 <__aeabi_ui2f+0x6a>
 80011ae:	250f      	movs	r5, #15
 80011b0:	402c      	ands	r4, r5
 80011b2:	2c04      	cmp	r4, #4
 80011b4:	d005      	beq.n	80011c2 <__aeabi_ui2f+0x6a>
 80011b6:	3204      	adds	r2, #4
 80011b8:	0154      	lsls	r4, r2, #5
 80011ba:	d502      	bpl.n	80011c2 <__aeabi_ui2f+0x6a>
 80011bc:	239f      	movs	r3, #159	; 0x9f
 80011be:	4002      	ands	r2, r0
 80011c0:	1a5b      	subs	r3, r3, r1
 80011c2:	0192      	lsls	r2, r2, #6
 80011c4:	0a54      	lsrs	r4, r2, #9
 80011c6:	b2d8      	uxtb	r0, r3
 80011c8:	e7da      	b.n	8001180 <__aeabi_ui2f+0x28>
 80011ca:	0264      	lsls	r4, r4, #9
 80011cc:	2096      	movs	r0, #150	; 0x96
 80011ce:	0a64      	lsrs	r4, r4, #9
 80011d0:	e7d6      	b.n	8001180 <__aeabi_ui2f+0x28>
 80011d2:	1f4a      	subs	r2, r1, #5
 80011d4:	4094      	lsls	r4, r2
 80011d6:	0022      	movs	r2, r4
 80011d8:	4802      	ldr	r0, [pc, #8]	; (80011e4 <__aeabi_ui2f+0x8c>)
 80011da:	4002      	ands	r2, r0
 80011dc:	0765      	lsls	r5, r4, #29
 80011de:	d0f0      	beq.n	80011c2 <__aeabi_ui2f+0x6a>
 80011e0:	e7e5      	b.n	80011ae <__aeabi_ui2f+0x56>
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	fbffffff 	.word	0xfbffffff

080011e8 <__aeabi_dadd>:
 80011e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ea:	464f      	mov	r7, r9
 80011ec:	4646      	mov	r6, r8
 80011ee:	46d6      	mov	lr, sl
 80011f0:	0004      	movs	r4, r0
 80011f2:	b5c0      	push	{r6, r7, lr}
 80011f4:	001f      	movs	r7, r3
 80011f6:	030b      	lsls	r3, r1, #12
 80011f8:	0010      	movs	r0, r2
 80011fa:	004e      	lsls	r6, r1, #1
 80011fc:	0a5b      	lsrs	r3, r3, #9
 80011fe:	0fcd      	lsrs	r5, r1, #31
 8001200:	0f61      	lsrs	r1, r4, #29
 8001202:	007a      	lsls	r2, r7, #1
 8001204:	4319      	orrs	r1, r3
 8001206:	00e3      	lsls	r3, r4, #3
 8001208:	033c      	lsls	r4, r7, #12
 800120a:	0fff      	lsrs	r7, r7, #31
 800120c:	46bc      	mov	ip, r7
 800120e:	0a64      	lsrs	r4, r4, #9
 8001210:	0f47      	lsrs	r7, r0, #29
 8001212:	4327      	orrs	r7, r4
 8001214:	0d76      	lsrs	r6, r6, #21
 8001216:	0d52      	lsrs	r2, r2, #21
 8001218:	00c0      	lsls	r0, r0, #3
 800121a:	46b9      	mov	r9, r7
 800121c:	4680      	mov	r8, r0
 800121e:	1ab7      	subs	r7, r6, r2
 8001220:	4565      	cmp	r5, ip
 8001222:	d100      	bne.n	8001226 <__aeabi_dadd+0x3e>
 8001224:	e09b      	b.n	800135e <__aeabi_dadd+0x176>
 8001226:	2f00      	cmp	r7, #0
 8001228:	dc00      	bgt.n	800122c <__aeabi_dadd+0x44>
 800122a:	e084      	b.n	8001336 <__aeabi_dadd+0x14e>
 800122c:	2a00      	cmp	r2, #0
 800122e:	d100      	bne.n	8001232 <__aeabi_dadd+0x4a>
 8001230:	e0be      	b.n	80013b0 <__aeabi_dadd+0x1c8>
 8001232:	4ac8      	ldr	r2, [pc, #800]	; (8001554 <__aeabi_dadd+0x36c>)
 8001234:	4296      	cmp	r6, r2
 8001236:	d100      	bne.n	800123a <__aeabi_dadd+0x52>
 8001238:	e124      	b.n	8001484 <__aeabi_dadd+0x29c>
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	464c      	mov	r4, r9
 800123e:	0412      	lsls	r2, r2, #16
 8001240:	4314      	orrs	r4, r2
 8001242:	46a1      	mov	r9, r4
 8001244:	2f38      	cmp	r7, #56	; 0x38
 8001246:	dd00      	ble.n	800124a <__aeabi_dadd+0x62>
 8001248:	e167      	b.n	800151a <__aeabi_dadd+0x332>
 800124a:	2f1f      	cmp	r7, #31
 800124c:	dd00      	ble.n	8001250 <__aeabi_dadd+0x68>
 800124e:	e1d6      	b.n	80015fe <__aeabi_dadd+0x416>
 8001250:	2220      	movs	r2, #32
 8001252:	464c      	mov	r4, r9
 8001254:	1bd2      	subs	r2, r2, r7
 8001256:	4094      	lsls	r4, r2
 8001258:	46a2      	mov	sl, r4
 800125a:	4644      	mov	r4, r8
 800125c:	40fc      	lsrs	r4, r7
 800125e:	0020      	movs	r0, r4
 8001260:	4654      	mov	r4, sl
 8001262:	4304      	orrs	r4, r0
 8001264:	4640      	mov	r0, r8
 8001266:	4090      	lsls	r0, r2
 8001268:	1e42      	subs	r2, r0, #1
 800126a:	4190      	sbcs	r0, r2
 800126c:	464a      	mov	r2, r9
 800126e:	40fa      	lsrs	r2, r7
 8001270:	4304      	orrs	r4, r0
 8001272:	1a89      	subs	r1, r1, r2
 8001274:	1b1c      	subs	r4, r3, r4
 8001276:	42a3      	cmp	r3, r4
 8001278:	4192      	sbcs	r2, r2
 800127a:	4252      	negs	r2, r2
 800127c:	1a8b      	subs	r3, r1, r2
 800127e:	469a      	mov	sl, r3
 8001280:	4653      	mov	r3, sl
 8001282:	021b      	lsls	r3, r3, #8
 8001284:	d400      	bmi.n	8001288 <__aeabi_dadd+0xa0>
 8001286:	e0d4      	b.n	8001432 <__aeabi_dadd+0x24a>
 8001288:	4653      	mov	r3, sl
 800128a:	025a      	lsls	r2, r3, #9
 800128c:	0a53      	lsrs	r3, r2, #9
 800128e:	469a      	mov	sl, r3
 8001290:	4653      	mov	r3, sl
 8001292:	2b00      	cmp	r3, #0
 8001294:	d100      	bne.n	8001298 <__aeabi_dadd+0xb0>
 8001296:	e104      	b.n	80014a2 <__aeabi_dadd+0x2ba>
 8001298:	4650      	mov	r0, sl
 800129a:	f000 fc8f 	bl	8001bbc <__clzsi2>
 800129e:	0003      	movs	r3, r0
 80012a0:	3b08      	subs	r3, #8
 80012a2:	2220      	movs	r2, #32
 80012a4:	0020      	movs	r0, r4
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	4651      	mov	r1, sl
 80012aa:	40d0      	lsrs	r0, r2
 80012ac:	4099      	lsls	r1, r3
 80012ae:	0002      	movs	r2, r0
 80012b0:	409c      	lsls	r4, r3
 80012b2:	430a      	orrs	r2, r1
 80012b4:	42b3      	cmp	r3, r6
 80012b6:	da00      	bge.n	80012ba <__aeabi_dadd+0xd2>
 80012b8:	e102      	b.n	80014c0 <__aeabi_dadd+0x2d8>
 80012ba:	1b9b      	subs	r3, r3, r6
 80012bc:	1c59      	adds	r1, r3, #1
 80012be:	291f      	cmp	r1, #31
 80012c0:	dd00      	ble.n	80012c4 <__aeabi_dadd+0xdc>
 80012c2:	e0a7      	b.n	8001414 <__aeabi_dadd+0x22c>
 80012c4:	2320      	movs	r3, #32
 80012c6:	0010      	movs	r0, r2
 80012c8:	0026      	movs	r6, r4
 80012ca:	1a5b      	subs	r3, r3, r1
 80012cc:	409c      	lsls	r4, r3
 80012ce:	4098      	lsls	r0, r3
 80012d0:	40ce      	lsrs	r6, r1
 80012d2:	40ca      	lsrs	r2, r1
 80012d4:	1e63      	subs	r3, r4, #1
 80012d6:	419c      	sbcs	r4, r3
 80012d8:	4330      	orrs	r0, r6
 80012da:	4692      	mov	sl, r2
 80012dc:	2600      	movs	r6, #0
 80012de:	4304      	orrs	r4, r0
 80012e0:	0763      	lsls	r3, r4, #29
 80012e2:	d009      	beq.n	80012f8 <__aeabi_dadd+0x110>
 80012e4:	230f      	movs	r3, #15
 80012e6:	4023      	ands	r3, r4
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d005      	beq.n	80012f8 <__aeabi_dadd+0x110>
 80012ec:	1d23      	adds	r3, r4, #4
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	41a4      	sbcs	r4, r4
 80012f2:	4264      	negs	r4, r4
 80012f4:	44a2      	add	sl, r4
 80012f6:	001c      	movs	r4, r3
 80012f8:	4653      	mov	r3, sl
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	d400      	bmi.n	8001300 <__aeabi_dadd+0x118>
 80012fe:	e09b      	b.n	8001438 <__aeabi_dadd+0x250>
 8001300:	4b94      	ldr	r3, [pc, #592]	; (8001554 <__aeabi_dadd+0x36c>)
 8001302:	3601      	adds	r6, #1
 8001304:	429e      	cmp	r6, r3
 8001306:	d100      	bne.n	800130a <__aeabi_dadd+0x122>
 8001308:	e0b8      	b.n	800147c <__aeabi_dadd+0x294>
 800130a:	4653      	mov	r3, sl
 800130c:	4992      	ldr	r1, [pc, #584]	; (8001558 <__aeabi_dadd+0x370>)
 800130e:	08e4      	lsrs	r4, r4, #3
 8001310:	400b      	ands	r3, r1
 8001312:	0019      	movs	r1, r3
 8001314:	075b      	lsls	r3, r3, #29
 8001316:	4323      	orrs	r3, r4
 8001318:	0572      	lsls	r2, r6, #21
 800131a:	024c      	lsls	r4, r1, #9
 800131c:	0b24      	lsrs	r4, r4, #12
 800131e:	0d52      	lsrs	r2, r2, #21
 8001320:	0512      	lsls	r2, r2, #20
 8001322:	07ed      	lsls	r5, r5, #31
 8001324:	4322      	orrs	r2, r4
 8001326:	432a      	orrs	r2, r5
 8001328:	0018      	movs	r0, r3
 800132a:	0011      	movs	r1, r2
 800132c:	bce0      	pop	{r5, r6, r7}
 800132e:	46ba      	mov	sl, r7
 8001330:	46b1      	mov	r9, r6
 8001332:	46a8      	mov	r8, r5
 8001334:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001336:	2f00      	cmp	r7, #0
 8001338:	d048      	beq.n	80013cc <__aeabi_dadd+0x1e4>
 800133a:	1b97      	subs	r7, r2, r6
 800133c:	2e00      	cmp	r6, #0
 800133e:	d000      	beq.n	8001342 <__aeabi_dadd+0x15a>
 8001340:	e10e      	b.n	8001560 <__aeabi_dadd+0x378>
 8001342:	000c      	movs	r4, r1
 8001344:	431c      	orrs	r4, r3
 8001346:	d100      	bne.n	800134a <__aeabi_dadd+0x162>
 8001348:	e1b7      	b.n	80016ba <__aeabi_dadd+0x4d2>
 800134a:	1e7c      	subs	r4, r7, #1
 800134c:	2f01      	cmp	r7, #1
 800134e:	d100      	bne.n	8001352 <__aeabi_dadd+0x16a>
 8001350:	e226      	b.n	80017a0 <__aeabi_dadd+0x5b8>
 8001352:	4d80      	ldr	r5, [pc, #512]	; (8001554 <__aeabi_dadd+0x36c>)
 8001354:	42af      	cmp	r7, r5
 8001356:	d100      	bne.n	800135a <__aeabi_dadd+0x172>
 8001358:	e1d5      	b.n	8001706 <__aeabi_dadd+0x51e>
 800135a:	0027      	movs	r7, r4
 800135c:	e107      	b.n	800156e <__aeabi_dadd+0x386>
 800135e:	2f00      	cmp	r7, #0
 8001360:	dc00      	bgt.n	8001364 <__aeabi_dadd+0x17c>
 8001362:	e0b2      	b.n	80014ca <__aeabi_dadd+0x2e2>
 8001364:	2a00      	cmp	r2, #0
 8001366:	d047      	beq.n	80013f8 <__aeabi_dadd+0x210>
 8001368:	4a7a      	ldr	r2, [pc, #488]	; (8001554 <__aeabi_dadd+0x36c>)
 800136a:	4296      	cmp	r6, r2
 800136c:	d100      	bne.n	8001370 <__aeabi_dadd+0x188>
 800136e:	e089      	b.n	8001484 <__aeabi_dadd+0x29c>
 8001370:	2280      	movs	r2, #128	; 0x80
 8001372:	464c      	mov	r4, r9
 8001374:	0412      	lsls	r2, r2, #16
 8001376:	4314      	orrs	r4, r2
 8001378:	46a1      	mov	r9, r4
 800137a:	2f38      	cmp	r7, #56	; 0x38
 800137c:	dc6b      	bgt.n	8001456 <__aeabi_dadd+0x26e>
 800137e:	2f1f      	cmp	r7, #31
 8001380:	dc00      	bgt.n	8001384 <__aeabi_dadd+0x19c>
 8001382:	e16e      	b.n	8001662 <__aeabi_dadd+0x47a>
 8001384:	003a      	movs	r2, r7
 8001386:	4648      	mov	r0, r9
 8001388:	3a20      	subs	r2, #32
 800138a:	40d0      	lsrs	r0, r2
 800138c:	4684      	mov	ip, r0
 800138e:	2f20      	cmp	r7, #32
 8001390:	d007      	beq.n	80013a2 <__aeabi_dadd+0x1ba>
 8001392:	2240      	movs	r2, #64	; 0x40
 8001394:	4648      	mov	r0, r9
 8001396:	1bd2      	subs	r2, r2, r7
 8001398:	4090      	lsls	r0, r2
 800139a:	0002      	movs	r2, r0
 800139c:	4640      	mov	r0, r8
 800139e:	4310      	orrs	r0, r2
 80013a0:	4680      	mov	r8, r0
 80013a2:	4640      	mov	r0, r8
 80013a4:	1e42      	subs	r2, r0, #1
 80013a6:	4190      	sbcs	r0, r2
 80013a8:	4662      	mov	r2, ip
 80013aa:	0004      	movs	r4, r0
 80013ac:	4314      	orrs	r4, r2
 80013ae:	e057      	b.n	8001460 <__aeabi_dadd+0x278>
 80013b0:	464a      	mov	r2, r9
 80013b2:	4302      	orrs	r2, r0
 80013b4:	d100      	bne.n	80013b8 <__aeabi_dadd+0x1d0>
 80013b6:	e103      	b.n	80015c0 <__aeabi_dadd+0x3d8>
 80013b8:	1e7a      	subs	r2, r7, #1
 80013ba:	2f01      	cmp	r7, #1
 80013bc:	d100      	bne.n	80013c0 <__aeabi_dadd+0x1d8>
 80013be:	e193      	b.n	80016e8 <__aeabi_dadd+0x500>
 80013c0:	4c64      	ldr	r4, [pc, #400]	; (8001554 <__aeabi_dadd+0x36c>)
 80013c2:	42a7      	cmp	r7, r4
 80013c4:	d100      	bne.n	80013c8 <__aeabi_dadd+0x1e0>
 80013c6:	e18a      	b.n	80016de <__aeabi_dadd+0x4f6>
 80013c8:	0017      	movs	r7, r2
 80013ca:	e73b      	b.n	8001244 <__aeabi_dadd+0x5c>
 80013cc:	4c63      	ldr	r4, [pc, #396]	; (800155c <__aeabi_dadd+0x374>)
 80013ce:	1c72      	adds	r2, r6, #1
 80013d0:	4222      	tst	r2, r4
 80013d2:	d000      	beq.n	80013d6 <__aeabi_dadd+0x1ee>
 80013d4:	e0e0      	b.n	8001598 <__aeabi_dadd+0x3b0>
 80013d6:	000a      	movs	r2, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	2e00      	cmp	r6, #0
 80013dc:	d000      	beq.n	80013e0 <__aeabi_dadd+0x1f8>
 80013de:	e174      	b.n	80016ca <__aeabi_dadd+0x4e2>
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dadd+0x1fe>
 80013e4:	e1d0      	b.n	8001788 <__aeabi_dadd+0x5a0>
 80013e6:	464a      	mov	r2, r9
 80013e8:	4302      	orrs	r2, r0
 80013ea:	d000      	beq.n	80013ee <__aeabi_dadd+0x206>
 80013ec:	e1e3      	b.n	80017b6 <__aeabi_dadd+0x5ce>
 80013ee:	074a      	lsls	r2, r1, #29
 80013f0:	08db      	lsrs	r3, r3, #3
 80013f2:	4313      	orrs	r3, r2
 80013f4:	08c9      	lsrs	r1, r1, #3
 80013f6:	e029      	b.n	800144c <__aeabi_dadd+0x264>
 80013f8:	464a      	mov	r2, r9
 80013fa:	4302      	orrs	r2, r0
 80013fc:	d100      	bne.n	8001400 <__aeabi_dadd+0x218>
 80013fe:	e17d      	b.n	80016fc <__aeabi_dadd+0x514>
 8001400:	1e7a      	subs	r2, r7, #1
 8001402:	2f01      	cmp	r7, #1
 8001404:	d100      	bne.n	8001408 <__aeabi_dadd+0x220>
 8001406:	e0e0      	b.n	80015ca <__aeabi_dadd+0x3e2>
 8001408:	4c52      	ldr	r4, [pc, #328]	; (8001554 <__aeabi_dadd+0x36c>)
 800140a:	42a7      	cmp	r7, r4
 800140c:	d100      	bne.n	8001410 <__aeabi_dadd+0x228>
 800140e:	e166      	b.n	80016de <__aeabi_dadd+0x4f6>
 8001410:	0017      	movs	r7, r2
 8001412:	e7b2      	b.n	800137a <__aeabi_dadd+0x192>
 8001414:	0010      	movs	r0, r2
 8001416:	3b1f      	subs	r3, #31
 8001418:	40d8      	lsrs	r0, r3
 800141a:	2920      	cmp	r1, #32
 800141c:	d003      	beq.n	8001426 <__aeabi_dadd+0x23e>
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	1a5b      	subs	r3, r3, r1
 8001422:	409a      	lsls	r2, r3
 8001424:	4314      	orrs	r4, r2
 8001426:	1e63      	subs	r3, r4, #1
 8001428:	419c      	sbcs	r4, r3
 800142a:	2300      	movs	r3, #0
 800142c:	2600      	movs	r6, #0
 800142e:	469a      	mov	sl, r3
 8001430:	4304      	orrs	r4, r0
 8001432:	0763      	lsls	r3, r4, #29
 8001434:	d000      	beq.n	8001438 <__aeabi_dadd+0x250>
 8001436:	e755      	b.n	80012e4 <__aeabi_dadd+0xfc>
 8001438:	4652      	mov	r2, sl
 800143a:	08e3      	lsrs	r3, r4, #3
 800143c:	0752      	lsls	r2, r2, #29
 800143e:	4313      	orrs	r3, r2
 8001440:	4652      	mov	r2, sl
 8001442:	0037      	movs	r7, r6
 8001444:	08d1      	lsrs	r1, r2, #3
 8001446:	4a43      	ldr	r2, [pc, #268]	; (8001554 <__aeabi_dadd+0x36c>)
 8001448:	4297      	cmp	r7, r2
 800144a:	d01f      	beq.n	800148c <__aeabi_dadd+0x2a4>
 800144c:	0309      	lsls	r1, r1, #12
 800144e:	057a      	lsls	r2, r7, #21
 8001450:	0b0c      	lsrs	r4, r1, #12
 8001452:	0d52      	lsrs	r2, r2, #21
 8001454:	e764      	b.n	8001320 <__aeabi_dadd+0x138>
 8001456:	4642      	mov	r2, r8
 8001458:	464c      	mov	r4, r9
 800145a:	4314      	orrs	r4, r2
 800145c:	1e62      	subs	r2, r4, #1
 800145e:	4194      	sbcs	r4, r2
 8001460:	18e4      	adds	r4, r4, r3
 8001462:	429c      	cmp	r4, r3
 8001464:	4192      	sbcs	r2, r2
 8001466:	4252      	negs	r2, r2
 8001468:	4692      	mov	sl, r2
 800146a:	448a      	add	sl, r1
 800146c:	4653      	mov	r3, sl
 800146e:	021b      	lsls	r3, r3, #8
 8001470:	d5df      	bpl.n	8001432 <__aeabi_dadd+0x24a>
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <__aeabi_dadd+0x36c>)
 8001474:	3601      	adds	r6, #1
 8001476:	429e      	cmp	r6, r3
 8001478:	d000      	beq.n	800147c <__aeabi_dadd+0x294>
 800147a:	e0b3      	b.n	80015e4 <__aeabi_dadd+0x3fc>
 800147c:	0032      	movs	r2, r6
 800147e:	2400      	movs	r4, #0
 8001480:	2300      	movs	r3, #0
 8001482:	e74d      	b.n	8001320 <__aeabi_dadd+0x138>
 8001484:	074a      	lsls	r2, r1, #29
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	4313      	orrs	r3, r2
 800148a:	08c9      	lsrs	r1, r1, #3
 800148c:	001a      	movs	r2, r3
 800148e:	430a      	orrs	r2, r1
 8001490:	d100      	bne.n	8001494 <__aeabi_dadd+0x2ac>
 8001492:	e200      	b.n	8001896 <__aeabi_dadd+0x6ae>
 8001494:	2480      	movs	r4, #128	; 0x80
 8001496:	0324      	lsls	r4, r4, #12
 8001498:	430c      	orrs	r4, r1
 800149a:	0324      	lsls	r4, r4, #12
 800149c:	4a2d      	ldr	r2, [pc, #180]	; (8001554 <__aeabi_dadd+0x36c>)
 800149e:	0b24      	lsrs	r4, r4, #12
 80014a0:	e73e      	b.n	8001320 <__aeabi_dadd+0x138>
 80014a2:	0020      	movs	r0, r4
 80014a4:	f000 fb8a 	bl	8001bbc <__clzsi2>
 80014a8:	0003      	movs	r3, r0
 80014aa:	3318      	adds	r3, #24
 80014ac:	2b1f      	cmp	r3, #31
 80014ae:	dc00      	bgt.n	80014b2 <__aeabi_dadd+0x2ca>
 80014b0:	e6f7      	b.n	80012a2 <__aeabi_dadd+0xba>
 80014b2:	0022      	movs	r2, r4
 80014b4:	3808      	subs	r0, #8
 80014b6:	4082      	lsls	r2, r0
 80014b8:	2400      	movs	r4, #0
 80014ba:	42b3      	cmp	r3, r6
 80014bc:	db00      	blt.n	80014c0 <__aeabi_dadd+0x2d8>
 80014be:	e6fc      	b.n	80012ba <__aeabi_dadd+0xd2>
 80014c0:	1af6      	subs	r6, r6, r3
 80014c2:	4b25      	ldr	r3, [pc, #148]	; (8001558 <__aeabi_dadd+0x370>)
 80014c4:	401a      	ands	r2, r3
 80014c6:	4692      	mov	sl, r2
 80014c8:	e70a      	b.n	80012e0 <__aeabi_dadd+0xf8>
 80014ca:	2f00      	cmp	r7, #0
 80014cc:	d02b      	beq.n	8001526 <__aeabi_dadd+0x33e>
 80014ce:	1b97      	subs	r7, r2, r6
 80014d0:	2e00      	cmp	r6, #0
 80014d2:	d100      	bne.n	80014d6 <__aeabi_dadd+0x2ee>
 80014d4:	e0b8      	b.n	8001648 <__aeabi_dadd+0x460>
 80014d6:	4c1f      	ldr	r4, [pc, #124]	; (8001554 <__aeabi_dadd+0x36c>)
 80014d8:	42a2      	cmp	r2, r4
 80014da:	d100      	bne.n	80014de <__aeabi_dadd+0x2f6>
 80014dc:	e11c      	b.n	8001718 <__aeabi_dadd+0x530>
 80014de:	2480      	movs	r4, #128	; 0x80
 80014e0:	0424      	lsls	r4, r4, #16
 80014e2:	4321      	orrs	r1, r4
 80014e4:	2f38      	cmp	r7, #56	; 0x38
 80014e6:	dd00      	ble.n	80014ea <__aeabi_dadd+0x302>
 80014e8:	e11e      	b.n	8001728 <__aeabi_dadd+0x540>
 80014ea:	2f1f      	cmp	r7, #31
 80014ec:	dd00      	ble.n	80014f0 <__aeabi_dadd+0x308>
 80014ee:	e19e      	b.n	800182e <__aeabi_dadd+0x646>
 80014f0:	2620      	movs	r6, #32
 80014f2:	000c      	movs	r4, r1
 80014f4:	1bf6      	subs	r6, r6, r7
 80014f6:	0018      	movs	r0, r3
 80014f8:	40b3      	lsls	r3, r6
 80014fa:	40b4      	lsls	r4, r6
 80014fc:	40f8      	lsrs	r0, r7
 80014fe:	1e5e      	subs	r6, r3, #1
 8001500:	41b3      	sbcs	r3, r6
 8001502:	40f9      	lsrs	r1, r7
 8001504:	4304      	orrs	r4, r0
 8001506:	431c      	orrs	r4, r3
 8001508:	4489      	add	r9, r1
 800150a:	4444      	add	r4, r8
 800150c:	4544      	cmp	r4, r8
 800150e:	419b      	sbcs	r3, r3
 8001510:	425b      	negs	r3, r3
 8001512:	444b      	add	r3, r9
 8001514:	469a      	mov	sl, r3
 8001516:	0016      	movs	r6, r2
 8001518:	e7a8      	b.n	800146c <__aeabi_dadd+0x284>
 800151a:	4642      	mov	r2, r8
 800151c:	464c      	mov	r4, r9
 800151e:	4314      	orrs	r4, r2
 8001520:	1e62      	subs	r2, r4, #1
 8001522:	4194      	sbcs	r4, r2
 8001524:	e6a6      	b.n	8001274 <__aeabi_dadd+0x8c>
 8001526:	4c0d      	ldr	r4, [pc, #52]	; (800155c <__aeabi_dadd+0x374>)
 8001528:	1c72      	adds	r2, r6, #1
 800152a:	4222      	tst	r2, r4
 800152c:	d000      	beq.n	8001530 <__aeabi_dadd+0x348>
 800152e:	e0a8      	b.n	8001682 <__aeabi_dadd+0x49a>
 8001530:	000a      	movs	r2, r1
 8001532:	431a      	orrs	r2, r3
 8001534:	2e00      	cmp	r6, #0
 8001536:	d000      	beq.n	800153a <__aeabi_dadd+0x352>
 8001538:	e10a      	b.n	8001750 <__aeabi_dadd+0x568>
 800153a:	2a00      	cmp	r2, #0
 800153c:	d100      	bne.n	8001540 <__aeabi_dadd+0x358>
 800153e:	e15e      	b.n	80017fe <__aeabi_dadd+0x616>
 8001540:	464a      	mov	r2, r9
 8001542:	4302      	orrs	r2, r0
 8001544:	d000      	beq.n	8001548 <__aeabi_dadd+0x360>
 8001546:	e161      	b.n	800180c <__aeabi_dadd+0x624>
 8001548:	074a      	lsls	r2, r1, #29
 800154a:	08db      	lsrs	r3, r3, #3
 800154c:	4313      	orrs	r3, r2
 800154e:	08c9      	lsrs	r1, r1, #3
 8001550:	e77c      	b.n	800144c <__aeabi_dadd+0x264>
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	000007ff 	.word	0x000007ff
 8001558:	ff7fffff 	.word	0xff7fffff
 800155c:	000007fe 	.word	0x000007fe
 8001560:	4ccf      	ldr	r4, [pc, #828]	; (80018a0 <__aeabi_dadd+0x6b8>)
 8001562:	42a2      	cmp	r2, r4
 8001564:	d100      	bne.n	8001568 <__aeabi_dadd+0x380>
 8001566:	e0ce      	b.n	8001706 <__aeabi_dadd+0x51e>
 8001568:	2480      	movs	r4, #128	; 0x80
 800156a:	0424      	lsls	r4, r4, #16
 800156c:	4321      	orrs	r1, r4
 800156e:	2f38      	cmp	r7, #56	; 0x38
 8001570:	dc5b      	bgt.n	800162a <__aeabi_dadd+0x442>
 8001572:	2f1f      	cmp	r7, #31
 8001574:	dd00      	ble.n	8001578 <__aeabi_dadd+0x390>
 8001576:	e0dc      	b.n	8001732 <__aeabi_dadd+0x54a>
 8001578:	2520      	movs	r5, #32
 800157a:	000c      	movs	r4, r1
 800157c:	1bed      	subs	r5, r5, r7
 800157e:	001e      	movs	r6, r3
 8001580:	40ab      	lsls	r3, r5
 8001582:	40ac      	lsls	r4, r5
 8001584:	40fe      	lsrs	r6, r7
 8001586:	1e5d      	subs	r5, r3, #1
 8001588:	41ab      	sbcs	r3, r5
 800158a:	4334      	orrs	r4, r6
 800158c:	40f9      	lsrs	r1, r7
 800158e:	431c      	orrs	r4, r3
 8001590:	464b      	mov	r3, r9
 8001592:	1a5b      	subs	r3, r3, r1
 8001594:	4699      	mov	r9, r3
 8001596:	e04c      	b.n	8001632 <__aeabi_dadd+0x44a>
 8001598:	464a      	mov	r2, r9
 800159a:	1a1c      	subs	r4, r3, r0
 800159c:	1a88      	subs	r0, r1, r2
 800159e:	42a3      	cmp	r3, r4
 80015a0:	4192      	sbcs	r2, r2
 80015a2:	4252      	negs	r2, r2
 80015a4:	4692      	mov	sl, r2
 80015a6:	0002      	movs	r2, r0
 80015a8:	4650      	mov	r0, sl
 80015aa:	1a12      	subs	r2, r2, r0
 80015ac:	4692      	mov	sl, r2
 80015ae:	0212      	lsls	r2, r2, #8
 80015b0:	d478      	bmi.n	80016a4 <__aeabi_dadd+0x4bc>
 80015b2:	4653      	mov	r3, sl
 80015b4:	4323      	orrs	r3, r4
 80015b6:	d000      	beq.n	80015ba <__aeabi_dadd+0x3d2>
 80015b8:	e66a      	b.n	8001290 <__aeabi_dadd+0xa8>
 80015ba:	2100      	movs	r1, #0
 80015bc:	2500      	movs	r5, #0
 80015be:	e745      	b.n	800144c <__aeabi_dadd+0x264>
 80015c0:	074a      	lsls	r2, r1, #29
 80015c2:	08db      	lsrs	r3, r3, #3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	08c9      	lsrs	r1, r1, #3
 80015c8:	e73d      	b.n	8001446 <__aeabi_dadd+0x25e>
 80015ca:	181c      	adds	r4, r3, r0
 80015cc:	429c      	cmp	r4, r3
 80015ce:	419b      	sbcs	r3, r3
 80015d0:	4449      	add	r1, r9
 80015d2:	468a      	mov	sl, r1
 80015d4:	425b      	negs	r3, r3
 80015d6:	449a      	add	sl, r3
 80015d8:	4653      	mov	r3, sl
 80015da:	2601      	movs	r6, #1
 80015dc:	021b      	lsls	r3, r3, #8
 80015de:	d400      	bmi.n	80015e2 <__aeabi_dadd+0x3fa>
 80015e0:	e727      	b.n	8001432 <__aeabi_dadd+0x24a>
 80015e2:	2602      	movs	r6, #2
 80015e4:	4652      	mov	r2, sl
 80015e6:	4baf      	ldr	r3, [pc, #700]	; (80018a4 <__aeabi_dadd+0x6bc>)
 80015e8:	2101      	movs	r1, #1
 80015ea:	401a      	ands	r2, r3
 80015ec:	0013      	movs	r3, r2
 80015ee:	4021      	ands	r1, r4
 80015f0:	0862      	lsrs	r2, r4, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	07dc      	lsls	r4, r3, #31
 80015f6:	085b      	lsrs	r3, r3, #1
 80015f8:	469a      	mov	sl, r3
 80015fa:	4314      	orrs	r4, r2
 80015fc:	e670      	b.n	80012e0 <__aeabi_dadd+0xf8>
 80015fe:	003a      	movs	r2, r7
 8001600:	464c      	mov	r4, r9
 8001602:	3a20      	subs	r2, #32
 8001604:	40d4      	lsrs	r4, r2
 8001606:	46a4      	mov	ip, r4
 8001608:	2f20      	cmp	r7, #32
 800160a:	d007      	beq.n	800161c <__aeabi_dadd+0x434>
 800160c:	2240      	movs	r2, #64	; 0x40
 800160e:	4648      	mov	r0, r9
 8001610:	1bd2      	subs	r2, r2, r7
 8001612:	4090      	lsls	r0, r2
 8001614:	0002      	movs	r2, r0
 8001616:	4640      	mov	r0, r8
 8001618:	4310      	orrs	r0, r2
 800161a:	4680      	mov	r8, r0
 800161c:	4640      	mov	r0, r8
 800161e:	1e42      	subs	r2, r0, #1
 8001620:	4190      	sbcs	r0, r2
 8001622:	4662      	mov	r2, ip
 8001624:	0004      	movs	r4, r0
 8001626:	4314      	orrs	r4, r2
 8001628:	e624      	b.n	8001274 <__aeabi_dadd+0x8c>
 800162a:	4319      	orrs	r1, r3
 800162c:	000c      	movs	r4, r1
 800162e:	1e63      	subs	r3, r4, #1
 8001630:	419c      	sbcs	r4, r3
 8001632:	4643      	mov	r3, r8
 8001634:	1b1c      	subs	r4, r3, r4
 8001636:	45a0      	cmp	r8, r4
 8001638:	419b      	sbcs	r3, r3
 800163a:	4649      	mov	r1, r9
 800163c:	425b      	negs	r3, r3
 800163e:	1acb      	subs	r3, r1, r3
 8001640:	469a      	mov	sl, r3
 8001642:	4665      	mov	r5, ip
 8001644:	0016      	movs	r6, r2
 8001646:	e61b      	b.n	8001280 <__aeabi_dadd+0x98>
 8001648:	000c      	movs	r4, r1
 800164a:	431c      	orrs	r4, r3
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x468>
 800164e:	e0c7      	b.n	80017e0 <__aeabi_dadd+0x5f8>
 8001650:	1e7c      	subs	r4, r7, #1
 8001652:	2f01      	cmp	r7, #1
 8001654:	d100      	bne.n	8001658 <__aeabi_dadd+0x470>
 8001656:	e0f9      	b.n	800184c <__aeabi_dadd+0x664>
 8001658:	4e91      	ldr	r6, [pc, #580]	; (80018a0 <__aeabi_dadd+0x6b8>)
 800165a:	42b7      	cmp	r7, r6
 800165c:	d05c      	beq.n	8001718 <__aeabi_dadd+0x530>
 800165e:	0027      	movs	r7, r4
 8001660:	e740      	b.n	80014e4 <__aeabi_dadd+0x2fc>
 8001662:	2220      	movs	r2, #32
 8001664:	464c      	mov	r4, r9
 8001666:	4640      	mov	r0, r8
 8001668:	1bd2      	subs	r2, r2, r7
 800166a:	4094      	lsls	r4, r2
 800166c:	40f8      	lsrs	r0, r7
 800166e:	4304      	orrs	r4, r0
 8001670:	4640      	mov	r0, r8
 8001672:	4090      	lsls	r0, r2
 8001674:	1e42      	subs	r2, r0, #1
 8001676:	4190      	sbcs	r0, r2
 8001678:	464a      	mov	r2, r9
 800167a:	40fa      	lsrs	r2, r7
 800167c:	4304      	orrs	r4, r0
 800167e:	1889      	adds	r1, r1, r2
 8001680:	e6ee      	b.n	8001460 <__aeabi_dadd+0x278>
 8001682:	4c87      	ldr	r4, [pc, #540]	; (80018a0 <__aeabi_dadd+0x6b8>)
 8001684:	42a2      	cmp	r2, r4
 8001686:	d100      	bne.n	800168a <__aeabi_dadd+0x4a2>
 8001688:	e6f9      	b.n	800147e <__aeabi_dadd+0x296>
 800168a:	1818      	adds	r0, r3, r0
 800168c:	4298      	cmp	r0, r3
 800168e:	419b      	sbcs	r3, r3
 8001690:	4449      	add	r1, r9
 8001692:	425b      	negs	r3, r3
 8001694:	18cb      	adds	r3, r1, r3
 8001696:	07dc      	lsls	r4, r3, #31
 8001698:	0840      	lsrs	r0, r0, #1
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	469a      	mov	sl, r3
 800169e:	0016      	movs	r6, r2
 80016a0:	4304      	orrs	r4, r0
 80016a2:	e6c6      	b.n	8001432 <__aeabi_dadd+0x24a>
 80016a4:	4642      	mov	r2, r8
 80016a6:	1ad4      	subs	r4, r2, r3
 80016a8:	45a0      	cmp	r8, r4
 80016aa:	4180      	sbcs	r0, r0
 80016ac:	464b      	mov	r3, r9
 80016ae:	4240      	negs	r0, r0
 80016b0:	1a59      	subs	r1, r3, r1
 80016b2:	1a0b      	subs	r3, r1, r0
 80016b4:	469a      	mov	sl, r3
 80016b6:	4665      	mov	r5, ip
 80016b8:	e5ea      	b.n	8001290 <__aeabi_dadd+0xa8>
 80016ba:	464b      	mov	r3, r9
 80016bc:	464a      	mov	r2, r9
 80016be:	08c0      	lsrs	r0, r0, #3
 80016c0:	075b      	lsls	r3, r3, #29
 80016c2:	4665      	mov	r5, ip
 80016c4:	4303      	orrs	r3, r0
 80016c6:	08d1      	lsrs	r1, r2, #3
 80016c8:	e6bd      	b.n	8001446 <__aeabi_dadd+0x25e>
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d000      	beq.n	80016d0 <__aeabi_dadd+0x4e8>
 80016ce:	e08e      	b.n	80017ee <__aeabi_dadd+0x606>
 80016d0:	464b      	mov	r3, r9
 80016d2:	4303      	orrs	r3, r0
 80016d4:	d117      	bne.n	8001706 <__aeabi_dadd+0x51e>
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	2500      	movs	r5, #0
 80016da:	0309      	lsls	r1, r1, #12
 80016dc:	e6da      	b.n	8001494 <__aeabi_dadd+0x2ac>
 80016de:	074a      	lsls	r2, r1, #29
 80016e0:	08db      	lsrs	r3, r3, #3
 80016e2:	4313      	orrs	r3, r2
 80016e4:	08c9      	lsrs	r1, r1, #3
 80016e6:	e6d1      	b.n	800148c <__aeabi_dadd+0x2a4>
 80016e8:	1a1c      	subs	r4, r3, r0
 80016ea:	464a      	mov	r2, r9
 80016ec:	42a3      	cmp	r3, r4
 80016ee:	419b      	sbcs	r3, r3
 80016f0:	1a89      	subs	r1, r1, r2
 80016f2:	425b      	negs	r3, r3
 80016f4:	1acb      	subs	r3, r1, r3
 80016f6:	469a      	mov	sl, r3
 80016f8:	2601      	movs	r6, #1
 80016fa:	e5c1      	b.n	8001280 <__aeabi_dadd+0x98>
 80016fc:	074a      	lsls	r2, r1, #29
 80016fe:	08db      	lsrs	r3, r3, #3
 8001700:	4313      	orrs	r3, r2
 8001702:	08c9      	lsrs	r1, r1, #3
 8001704:	e69f      	b.n	8001446 <__aeabi_dadd+0x25e>
 8001706:	4643      	mov	r3, r8
 8001708:	08d8      	lsrs	r0, r3, #3
 800170a:	464b      	mov	r3, r9
 800170c:	464a      	mov	r2, r9
 800170e:	075b      	lsls	r3, r3, #29
 8001710:	4665      	mov	r5, ip
 8001712:	4303      	orrs	r3, r0
 8001714:	08d1      	lsrs	r1, r2, #3
 8001716:	e6b9      	b.n	800148c <__aeabi_dadd+0x2a4>
 8001718:	4643      	mov	r3, r8
 800171a:	08d8      	lsrs	r0, r3, #3
 800171c:	464b      	mov	r3, r9
 800171e:	464a      	mov	r2, r9
 8001720:	075b      	lsls	r3, r3, #29
 8001722:	4303      	orrs	r3, r0
 8001724:	08d1      	lsrs	r1, r2, #3
 8001726:	e6b1      	b.n	800148c <__aeabi_dadd+0x2a4>
 8001728:	4319      	orrs	r1, r3
 800172a:	000c      	movs	r4, r1
 800172c:	1e63      	subs	r3, r4, #1
 800172e:	419c      	sbcs	r4, r3
 8001730:	e6eb      	b.n	800150a <__aeabi_dadd+0x322>
 8001732:	003c      	movs	r4, r7
 8001734:	000d      	movs	r5, r1
 8001736:	3c20      	subs	r4, #32
 8001738:	40e5      	lsrs	r5, r4
 800173a:	2f20      	cmp	r7, #32
 800173c:	d003      	beq.n	8001746 <__aeabi_dadd+0x55e>
 800173e:	2440      	movs	r4, #64	; 0x40
 8001740:	1be4      	subs	r4, r4, r7
 8001742:	40a1      	lsls	r1, r4
 8001744:	430b      	orrs	r3, r1
 8001746:	001c      	movs	r4, r3
 8001748:	1e63      	subs	r3, r4, #1
 800174a:	419c      	sbcs	r4, r3
 800174c:	432c      	orrs	r4, r5
 800174e:	e770      	b.n	8001632 <__aeabi_dadd+0x44a>
 8001750:	2a00      	cmp	r2, #0
 8001752:	d0e1      	beq.n	8001718 <__aeabi_dadd+0x530>
 8001754:	464a      	mov	r2, r9
 8001756:	4302      	orrs	r2, r0
 8001758:	d0c1      	beq.n	80016de <__aeabi_dadd+0x4f6>
 800175a:	074a      	lsls	r2, r1, #29
 800175c:	08db      	lsrs	r3, r3, #3
 800175e:	4313      	orrs	r3, r2
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	08c9      	lsrs	r1, r1, #3
 8001764:	0312      	lsls	r2, r2, #12
 8001766:	4211      	tst	r1, r2
 8001768:	d008      	beq.n	800177c <__aeabi_dadd+0x594>
 800176a:	4648      	mov	r0, r9
 800176c:	08c4      	lsrs	r4, r0, #3
 800176e:	4214      	tst	r4, r2
 8001770:	d104      	bne.n	800177c <__aeabi_dadd+0x594>
 8001772:	4643      	mov	r3, r8
 8001774:	0021      	movs	r1, r4
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	0742      	lsls	r2, r0, #29
 800177a:	4313      	orrs	r3, r2
 800177c:	0f5a      	lsrs	r2, r3, #29
 800177e:	00db      	lsls	r3, r3, #3
 8001780:	0752      	lsls	r2, r2, #29
 8001782:	08db      	lsrs	r3, r3, #3
 8001784:	4313      	orrs	r3, r2
 8001786:	e681      	b.n	800148c <__aeabi_dadd+0x2a4>
 8001788:	464b      	mov	r3, r9
 800178a:	4303      	orrs	r3, r0
 800178c:	d100      	bne.n	8001790 <__aeabi_dadd+0x5a8>
 800178e:	e714      	b.n	80015ba <__aeabi_dadd+0x3d2>
 8001790:	464b      	mov	r3, r9
 8001792:	464a      	mov	r2, r9
 8001794:	08c0      	lsrs	r0, r0, #3
 8001796:	075b      	lsls	r3, r3, #29
 8001798:	4665      	mov	r5, ip
 800179a:	4303      	orrs	r3, r0
 800179c:	08d1      	lsrs	r1, r2, #3
 800179e:	e655      	b.n	800144c <__aeabi_dadd+0x264>
 80017a0:	1ac4      	subs	r4, r0, r3
 80017a2:	45a0      	cmp	r8, r4
 80017a4:	4180      	sbcs	r0, r0
 80017a6:	464b      	mov	r3, r9
 80017a8:	4240      	negs	r0, r0
 80017aa:	1a59      	subs	r1, r3, r1
 80017ac:	1a0b      	subs	r3, r1, r0
 80017ae:	469a      	mov	sl, r3
 80017b0:	4665      	mov	r5, ip
 80017b2:	2601      	movs	r6, #1
 80017b4:	e564      	b.n	8001280 <__aeabi_dadd+0x98>
 80017b6:	1a1c      	subs	r4, r3, r0
 80017b8:	464a      	mov	r2, r9
 80017ba:	42a3      	cmp	r3, r4
 80017bc:	4180      	sbcs	r0, r0
 80017be:	1a8a      	subs	r2, r1, r2
 80017c0:	4240      	negs	r0, r0
 80017c2:	1a12      	subs	r2, r2, r0
 80017c4:	4692      	mov	sl, r2
 80017c6:	0212      	lsls	r2, r2, #8
 80017c8:	d549      	bpl.n	800185e <__aeabi_dadd+0x676>
 80017ca:	4642      	mov	r2, r8
 80017cc:	1ad4      	subs	r4, r2, r3
 80017ce:	45a0      	cmp	r8, r4
 80017d0:	4180      	sbcs	r0, r0
 80017d2:	464b      	mov	r3, r9
 80017d4:	4240      	negs	r0, r0
 80017d6:	1a59      	subs	r1, r3, r1
 80017d8:	1a0b      	subs	r3, r1, r0
 80017da:	469a      	mov	sl, r3
 80017dc:	4665      	mov	r5, ip
 80017de:	e57f      	b.n	80012e0 <__aeabi_dadd+0xf8>
 80017e0:	464b      	mov	r3, r9
 80017e2:	464a      	mov	r2, r9
 80017e4:	08c0      	lsrs	r0, r0, #3
 80017e6:	075b      	lsls	r3, r3, #29
 80017e8:	4303      	orrs	r3, r0
 80017ea:	08d1      	lsrs	r1, r2, #3
 80017ec:	e62b      	b.n	8001446 <__aeabi_dadd+0x25e>
 80017ee:	464a      	mov	r2, r9
 80017f0:	08db      	lsrs	r3, r3, #3
 80017f2:	4302      	orrs	r2, r0
 80017f4:	d138      	bne.n	8001868 <__aeabi_dadd+0x680>
 80017f6:	074a      	lsls	r2, r1, #29
 80017f8:	4313      	orrs	r3, r2
 80017fa:	08c9      	lsrs	r1, r1, #3
 80017fc:	e646      	b.n	800148c <__aeabi_dadd+0x2a4>
 80017fe:	464b      	mov	r3, r9
 8001800:	464a      	mov	r2, r9
 8001802:	08c0      	lsrs	r0, r0, #3
 8001804:	075b      	lsls	r3, r3, #29
 8001806:	4303      	orrs	r3, r0
 8001808:	08d1      	lsrs	r1, r2, #3
 800180a:	e61f      	b.n	800144c <__aeabi_dadd+0x264>
 800180c:	181c      	adds	r4, r3, r0
 800180e:	429c      	cmp	r4, r3
 8001810:	419b      	sbcs	r3, r3
 8001812:	4449      	add	r1, r9
 8001814:	468a      	mov	sl, r1
 8001816:	425b      	negs	r3, r3
 8001818:	449a      	add	sl, r3
 800181a:	4653      	mov	r3, sl
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	d400      	bmi.n	8001822 <__aeabi_dadd+0x63a>
 8001820:	e607      	b.n	8001432 <__aeabi_dadd+0x24a>
 8001822:	4652      	mov	r2, sl
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <__aeabi_dadd+0x6bc>)
 8001826:	2601      	movs	r6, #1
 8001828:	401a      	ands	r2, r3
 800182a:	4692      	mov	sl, r2
 800182c:	e601      	b.n	8001432 <__aeabi_dadd+0x24a>
 800182e:	003c      	movs	r4, r7
 8001830:	000e      	movs	r6, r1
 8001832:	3c20      	subs	r4, #32
 8001834:	40e6      	lsrs	r6, r4
 8001836:	2f20      	cmp	r7, #32
 8001838:	d003      	beq.n	8001842 <__aeabi_dadd+0x65a>
 800183a:	2440      	movs	r4, #64	; 0x40
 800183c:	1be4      	subs	r4, r4, r7
 800183e:	40a1      	lsls	r1, r4
 8001840:	430b      	orrs	r3, r1
 8001842:	001c      	movs	r4, r3
 8001844:	1e63      	subs	r3, r4, #1
 8001846:	419c      	sbcs	r4, r3
 8001848:	4334      	orrs	r4, r6
 800184a:	e65e      	b.n	800150a <__aeabi_dadd+0x322>
 800184c:	4443      	add	r3, r8
 800184e:	4283      	cmp	r3, r0
 8001850:	4180      	sbcs	r0, r0
 8001852:	4449      	add	r1, r9
 8001854:	468a      	mov	sl, r1
 8001856:	4240      	negs	r0, r0
 8001858:	001c      	movs	r4, r3
 800185a:	4482      	add	sl, r0
 800185c:	e6bc      	b.n	80015d8 <__aeabi_dadd+0x3f0>
 800185e:	4653      	mov	r3, sl
 8001860:	4323      	orrs	r3, r4
 8001862:	d100      	bne.n	8001866 <__aeabi_dadd+0x67e>
 8001864:	e6a9      	b.n	80015ba <__aeabi_dadd+0x3d2>
 8001866:	e5e4      	b.n	8001432 <__aeabi_dadd+0x24a>
 8001868:	074a      	lsls	r2, r1, #29
 800186a:	4313      	orrs	r3, r2
 800186c:	2280      	movs	r2, #128	; 0x80
 800186e:	08c9      	lsrs	r1, r1, #3
 8001870:	0312      	lsls	r2, r2, #12
 8001872:	4211      	tst	r1, r2
 8001874:	d009      	beq.n	800188a <__aeabi_dadd+0x6a2>
 8001876:	4648      	mov	r0, r9
 8001878:	08c4      	lsrs	r4, r0, #3
 800187a:	4214      	tst	r4, r2
 800187c:	d105      	bne.n	800188a <__aeabi_dadd+0x6a2>
 800187e:	4643      	mov	r3, r8
 8001880:	4665      	mov	r5, ip
 8001882:	0021      	movs	r1, r4
 8001884:	08db      	lsrs	r3, r3, #3
 8001886:	0742      	lsls	r2, r0, #29
 8001888:	4313      	orrs	r3, r2
 800188a:	0f5a      	lsrs	r2, r3, #29
 800188c:	00db      	lsls	r3, r3, #3
 800188e:	08db      	lsrs	r3, r3, #3
 8001890:	0752      	lsls	r2, r2, #29
 8001892:	4313      	orrs	r3, r2
 8001894:	e5fa      	b.n	800148c <__aeabi_dadd+0x2a4>
 8001896:	2300      	movs	r3, #0
 8001898:	4a01      	ldr	r2, [pc, #4]	; (80018a0 <__aeabi_dadd+0x6b8>)
 800189a:	001c      	movs	r4, r3
 800189c:	e540      	b.n	8001320 <__aeabi_dadd+0x138>
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	000007ff 	.word	0x000007ff
 80018a4:	ff7fffff 	.word	0xff7fffff

080018a8 <__eqdf2>:
 80018a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018aa:	464e      	mov	r6, r9
 80018ac:	4645      	mov	r5, r8
 80018ae:	46de      	mov	lr, fp
 80018b0:	4657      	mov	r7, sl
 80018b2:	4690      	mov	r8, r2
 80018b4:	b5e0      	push	{r5, r6, r7, lr}
 80018b6:	0017      	movs	r7, r2
 80018b8:	031a      	lsls	r2, r3, #12
 80018ba:	0b12      	lsrs	r2, r2, #12
 80018bc:	0005      	movs	r5, r0
 80018be:	4684      	mov	ip, r0
 80018c0:	4819      	ldr	r0, [pc, #100]	; (8001928 <__eqdf2+0x80>)
 80018c2:	030e      	lsls	r6, r1, #12
 80018c4:	004c      	lsls	r4, r1, #1
 80018c6:	4691      	mov	r9, r2
 80018c8:	005a      	lsls	r2, r3, #1
 80018ca:	0fdb      	lsrs	r3, r3, #31
 80018cc:	469b      	mov	fp, r3
 80018ce:	0b36      	lsrs	r6, r6, #12
 80018d0:	0d64      	lsrs	r4, r4, #21
 80018d2:	0fc9      	lsrs	r1, r1, #31
 80018d4:	0d52      	lsrs	r2, r2, #21
 80018d6:	4284      	cmp	r4, r0
 80018d8:	d019      	beq.n	800190e <__eqdf2+0x66>
 80018da:	4282      	cmp	r2, r0
 80018dc:	d010      	beq.n	8001900 <__eqdf2+0x58>
 80018de:	2001      	movs	r0, #1
 80018e0:	4294      	cmp	r4, r2
 80018e2:	d10e      	bne.n	8001902 <__eqdf2+0x5a>
 80018e4:	454e      	cmp	r6, r9
 80018e6:	d10c      	bne.n	8001902 <__eqdf2+0x5a>
 80018e8:	2001      	movs	r0, #1
 80018ea:	45c4      	cmp	ip, r8
 80018ec:	d109      	bne.n	8001902 <__eqdf2+0x5a>
 80018ee:	4559      	cmp	r1, fp
 80018f0:	d017      	beq.n	8001922 <__eqdf2+0x7a>
 80018f2:	2c00      	cmp	r4, #0
 80018f4:	d105      	bne.n	8001902 <__eqdf2+0x5a>
 80018f6:	0030      	movs	r0, r6
 80018f8:	4328      	orrs	r0, r5
 80018fa:	1e43      	subs	r3, r0, #1
 80018fc:	4198      	sbcs	r0, r3
 80018fe:	e000      	b.n	8001902 <__eqdf2+0x5a>
 8001900:	2001      	movs	r0, #1
 8001902:	bcf0      	pop	{r4, r5, r6, r7}
 8001904:	46bb      	mov	fp, r7
 8001906:	46b2      	mov	sl, r6
 8001908:	46a9      	mov	r9, r5
 800190a:	46a0      	mov	r8, r4
 800190c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800190e:	0033      	movs	r3, r6
 8001910:	2001      	movs	r0, #1
 8001912:	432b      	orrs	r3, r5
 8001914:	d1f5      	bne.n	8001902 <__eqdf2+0x5a>
 8001916:	42a2      	cmp	r2, r4
 8001918:	d1f3      	bne.n	8001902 <__eqdf2+0x5a>
 800191a:	464b      	mov	r3, r9
 800191c:	433b      	orrs	r3, r7
 800191e:	d1f0      	bne.n	8001902 <__eqdf2+0x5a>
 8001920:	e7e2      	b.n	80018e8 <__eqdf2+0x40>
 8001922:	2000      	movs	r0, #0
 8001924:	e7ed      	b.n	8001902 <__eqdf2+0x5a>
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	000007ff 	.word	0x000007ff

0800192c <__gedf2>:
 800192c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800192e:	4647      	mov	r7, r8
 8001930:	46ce      	mov	lr, r9
 8001932:	0004      	movs	r4, r0
 8001934:	0018      	movs	r0, r3
 8001936:	0016      	movs	r6, r2
 8001938:	031b      	lsls	r3, r3, #12
 800193a:	0b1b      	lsrs	r3, r3, #12
 800193c:	4d2d      	ldr	r5, [pc, #180]	; (80019f4 <__gedf2+0xc8>)
 800193e:	004a      	lsls	r2, r1, #1
 8001940:	4699      	mov	r9, r3
 8001942:	b580      	push	{r7, lr}
 8001944:	0043      	lsls	r3, r0, #1
 8001946:	030f      	lsls	r7, r1, #12
 8001948:	46a4      	mov	ip, r4
 800194a:	46b0      	mov	r8, r6
 800194c:	0b3f      	lsrs	r7, r7, #12
 800194e:	0d52      	lsrs	r2, r2, #21
 8001950:	0fc9      	lsrs	r1, r1, #31
 8001952:	0d5b      	lsrs	r3, r3, #21
 8001954:	0fc0      	lsrs	r0, r0, #31
 8001956:	42aa      	cmp	r2, r5
 8001958:	d021      	beq.n	800199e <__gedf2+0x72>
 800195a:	42ab      	cmp	r3, r5
 800195c:	d013      	beq.n	8001986 <__gedf2+0x5a>
 800195e:	2a00      	cmp	r2, #0
 8001960:	d122      	bne.n	80019a8 <__gedf2+0x7c>
 8001962:	433c      	orrs	r4, r7
 8001964:	2b00      	cmp	r3, #0
 8001966:	d102      	bne.n	800196e <__gedf2+0x42>
 8001968:	464d      	mov	r5, r9
 800196a:	432e      	orrs	r6, r5
 800196c:	d022      	beq.n	80019b4 <__gedf2+0x88>
 800196e:	2c00      	cmp	r4, #0
 8001970:	d010      	beq.n	8001994 <__gedf2+0x68>
 8001972:	4281      	cmp	r1, r0
 8001974:	d022      	beq.n	80019bc <__gedf2+0x90>
 8001976:	2002      	movs	r0, #2
 8001978:	3901      	subs	r1, #1
 800197a:	4008      	ands	r0, r1
 800197c:	3801      	subs	r0, #1
 800197e:	bcc0      	pop	{r6, r7}
 8001980:	46b9      	mov	r9, r7
 8001982:	46b0      	mov	r8, r6
 8001984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001986:	464d      	mov	r5, r9
 8001988:	432e      	orrs	r6, r5
 800198a:	d129      	bne.n	80019e0 <__gedf2+0xb4>
 800198c:	2a00      	cmp	r2, #0
 800198e:	d1f0      	bne.n	8001972 <__gedf2+0x46>
 8001990:	433c      	orrs	r4, r7
 8001992:	d1ee      	bne.n	8001972 <__gedf2+0x46>
 8001994:	2800      	cmp	r0, #0
 8001996:	d1f2      	bne.n	800197e <__gedf2+0x52>
 8001998:	2001      	movs	r0, #1
 800199a:	4240      	negs	r0, r0
 800199c:	e7ef      	b.n	800197e <__gedf2+0x52>
 800199e:	003d      	movs	r5, r7
 80019a0:	4325      	orrs	r5, r4
 80019a2:	d11d      	bne.n	80019e0 <__gedf2+0xb4>
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d0ee      	beq.n	8001986 <__gedf2+0x5a>
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d1e2      	bne.n	8001972 <__gedf2+0x46>
 80019ac:	464c      	mov	r4, r9
 80019ae:	4326      	orrs	r6, r4
 80019b0:	d1df      	bne.n	8001972 <__gedf2+0x46>
 80019b2:	e7e0      	b.n	8001976 <__gedf2+0x4a>
 80019b4:	2000      	movs	r0, #0
 80019b6:	2c00      	cmp	r4, #0
 80019b8:	d0e1      	beq.n	800197e <__gedf2+0x52>
 80019ba:	e7dc      	b.n	8001976 <__gedf2+0x4a>
 80019bc:	429a      	cmp	r2, r3
 80019be:	dc0a      	bgt.n	80019d6 <__gedf2+0xaa>
 80019c0:	dbe8      	blt.n	8001994 <__gedf2+0x68>
 80019c2:	454f      	cmp	r7, r9
 80019c4:	d8d7      	bhi.n	8001976 <__gedf2+0x4a>
 80019c6:	d00e      	beq.n	80019e6 <__gedf2+0xba>
 80019c8:	2000      	movs	r0, #0
 80019ca:	454f      	cmp	r7, r9
 80019cc:	d2d7      	bcs.n	800197e <__gedf2+0x52>
 80019ce:	2900      	cmp	r1, #0
 80019d0:	d0e2      	beq.n	8001998 <__gedf2+0x6c>
 80019d2:	0008      	movs	r0, r1
 80019d4:	e7d3      	b.n	800197e <__gedf2+0x52>
 80019d6:	4243      	negs	r3, r0
 80019d8:	4158      	adcs	r0, r3
 80019da:	0040      	lsls	r0, r0, #1
 80019dc:	3801      	subs	r0, #1
 80019de:	e7ce      	b.n	800197e <__gedf2+0x52>
 80019e0:	2002      	movs	r0, #2
 80019e2:	4240      	negs	r0, r0
 80019e4:	e7cb      	b.n	800197e <__gedf2+0x52>
 80019e6:	45c4      	cmp	ip, r8
 80019e8:	d8c5      	bhi.n	8001976 <__gedf2+0x4a>
 80019ea:	2000      	movs	r0, #0
 80019ec:	45c4      	cmp	ip, r8
 80019ee:	d2c6      	bcs.n	800197e <__gedf2+0x52>
 80019f0:	e7ed      	b.n	80019ce <__gedf2+0xa2>
 80019f2:	46c0      	nop			; (mov r8, r8)
 80019f4:	000007ff 	.word	0x000007ff

080019f8 <__ledf2>:
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	4647      	mov	r7, r8
 80019fc:	46ce      	mov	lr, r9
 80019fe:	0004      	movs	r4, r0
 8001a00:	0018      	movs	r0, r3
 8001a02:	0016      	movs	r6, r2
 8001a04:	031b      	lsls	r3, r3, #12
 8001a06:	0b1b      	lsrs	r3, r3, #12
 8001a08:	4d2c      	ldr	r5, [pc, #176]	; (8001abc <__ledf2+0xc4>)
 8001a0a:	004a      	lsls	r2, r1, #1
 8001a0c:	4699      	mov	r9, r3
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	0043      	lsls	r3, r0, #1
 8001a12:	030f      	lsls	r7, r1, #12
 8001a14:	46a4      	mov	ip, r4
 8001a16:	46b0      	mov	r8, r6
 8001a18:	0b3f      	lsrs	r7, r7, #12
 8001a1a:	0d52      	lsrs	r2, r2, #21
 8001a1c:	0fc9      	lsrs	r1, r1, #31
 8001a1e:	0d5b      	lsrs	r3, r3, #21
 8001a20:	0fc0      	lsrs	r0, r0, #31
 8001a22:	42aa      	cmp	r2, r5
 8001a24:	d00d      	beq.n	8001a42 <__ledf2+0x4a>
 8001a26:	42ab      	cmp	r3, r5
 8001a28:	d010      	beq.n	8001a4c <__ledf2+0x54>
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d127      	bne.n	8001a7e <__ledf2+0x86>
 8001a2e:	433c      	orrs	r4, r7
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d111      	bne.n	8001a58 <__ledf2+0x60>
 8001a34:	464d      	mov	r5, r9
 8001a36:	432e      	orrs	r6, r5
 8001a38:	d10e      	bne.n	8001a58 <__ledf2+0x60>
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	2c00      	cmp	r4, #0
 8001a3e:	d015      	beq.n	8001a6c <__ledf2+0x74>
 8001a40:	e00e      	b.n	8001a60 <__ledf2+0x68>
 8001a42:	003d      	movs	r5, r7
 8001a44:	4325      	orrs	r5, r4
 8001a46:	d110      	bne.n	8001a6a <__ledf2+0x72>
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d118      	bne.n	8001a7e <__ledf2+0x86>
 8001a4c:	464d      	mov	r5, r9
 8001a4e:	432e      	orrs	r6, r5
 8001a50:	d10b      	bne.n	8001a6a <__ledf2+0x72>
 8001a52:	2a00      	cmp	r2, #0
 8001a54:	d102      	bne.n	8001a5c <__ledf2+0x64>
 8001a56:	433c      	orrs	r4, r7
 8001a58:	2c00      	cmp	r4, #0
 8001a5a:	d00b      	beq.n	8001a74 <__ledf2+0x7c>
 8001a5c:	4281      	cmp	r1, r0
 8001a5e:	d014      	beq.n	8001a8a <__ledf2+0x92>
 8001a60:	2002      	movs	r0, #2
 8001a62:	3901      	subs	r1, #1
 8001a64:	4008      	ands	r0, r1
 8001a66:	3801      	subs	r0, #1
 8001a68:	e000      	b.n	8001a6c <__ledf2+0x74>
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	bcc0      	pop	{r6, r7}
 8001a6e:	46b9      	mov	r9, r7
 8001a70:	46b0      	mov	r8, r6
 8001a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a74:	2800      	cmp	r0, #0
 8001a76:	d1f9      	bne.n	8001a6c <__ledf2+0x74>
 8001a78:	2001      	movs	r0, #1
 8001a7a:	4240      	negs	r0, r0
 8001a7c:	e7f6      	b.n	8001a6c <__ledf2+0x74>
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1ec      	bne.n	8001a5c <__ledf2+0x64>
 8001a82:	464c      	mov	r4, r9
 8001a84:	4326      	orrs	r6, r4
 8001a86:	d1e9      	bne.n	8001a5c <__ledf2+0x64>
 8001a88:	e7ea      	b.n	8001a60 <__ledf2+0x68>
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	dd04      	ble.n	8001a98 <__ledf2+0xa0>
 8001a8e:	4243      	negs	r3, r0
 8001a90:	4158      	adcs	r0, r3
 8001a92:	0040      	lsls	r0, r0, #1
 8001a94:	3801      	subs	r0, #1
 8001a96:	e7e9      	b.n	8001a6c <__ledf2+0x74>
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	dbeb      	blt.n	8001a74 <__ledf2+0x7c>
 8001a9c:	454f      	cmp	r7, r9
 8001a9e:	d8df      	bhi.n	8001a60 <__ledf2+0x68>
 8001aa0:	d006      	beq.n	8001ab0 <__ledf2+0xb8>
 8001aa2:	2000      	movs	r0, #0
 8001aa4:	454f      	cmp	r7, r9
 8001aa6:	d2e1      	bcs.n	8001a6c <__ledf2+0x74>
 8001aa8:	2900      	cmp	r1, #0
 8001aaa:	d0e5      	beq.n	8001a78 <__ledf2+0x80>
 8001aac:	0008      	movs	r0, r1
 8001aae:	e7dd      	b.n	8001a6c <__ledf2+0x74>
 8001ab0:	45c4      	cmp	ip, r8
 8001ab2:	d8d5      	bhi.n	8001a60 <__ledf2+0x68>
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	45c4      	cmp	ip, r8
 8001ab8:	d2d8      	bcs.n	8001a6c <__ledf2+0x74>
 8001aba:	e7f5      	b.n	8001aa8 <__ledf2+0xb0>
 8001abc:	000007ff 	.word	0x000007ff

08001ac0 <__aeabi_d2iz>:
 8001ac0:	000a      	movs	r2, r1
 8001ac2:	b530      	push	{r4, r5, lr}
 8001ac4:	4c13      	ldr	r4, [pc, #76]	; (8001b14 <__aeabi_d2iz+0x54>)
 8001ac6:	0053      	lsls	r3, r2, #1
 8001ac8:	0309      	lsls	r1, r1, #12
 8001aca:	0005      	movs	r5, r0
 8001acc:	0b09      	lsrs	r1, r1, #12
 8001ace:	2000      	movs	r0, #0
 8001ad0:	0d5b      	lsrs	r3, r3, #21
 8001ad2:	0fd2      	lsrs	r2, r2, #31
 8001ad4:	42a3      	cmp	r3, r4
 8001ad6:	dd04      	ble.n	8001ae2 <__aeabi_d2iz+0x22>
 8001ad8:	480f      	ldr	r0, [pc, #60]	; (8001b18 <__aeabi_d2iz+0x58>)
 8001ada:	4283      	cmp	r3, r0
 8001adc:	dd02      	ble.n	8001ae4 <__aeabi_d2iz+0x24>
 8001ade:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <__aeabi_d2iz+0x5c>)
 8001ae0:	18d0      	adds	r0, r2, r3
 8001ae2:	bd30      	pop	{r4, r5, pc}
 8001ae4:	2080      	movs	r0, #128	; 0x80
 8001ae6:	0340      	lsls	r0, r0, #13
 8001ae8:	4301      	orrs	r1, r0
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <__aeabi_d2iz+0x60>)
 8001aec:	1ac0      	subs	r0, r0, r3
 8001aee:	281f      	cmp	r0, #31
 8001af0:	dd08      	ble.n	8001b04 <__aeabi_d2iz+0x44>
 8001af2:	480c      	ldr	r0, [pc, #48]	; (8001b24 <__aeabi_d2iz+0x64>)
 8001af4:	1ac3      	subs	r3, r0, r3
 8001af6:	40d9      	lsrs	r1, r3
 8001af8:	000b      	movs	r3, r1
 8001afa:	4258      	negs	r0, r3
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d1f0      	bne.n	8001ae2 <__aeabi_d2iz+0x22>
 8001b00:	0018      	movs	r0, r3
 8001b02:	e7ee      	b.n	8001ae2 <__aeabi_d2iz+0x22>
 8001b04:	4c08      	ldr	r4, [pc, #32]	; (8001b28 <__aeabi_d2iz+0x68>)
 8001b06:	40c5      	lsrs	r5, r0
 8001b08:	46a4      	mov	ip, r4
 8001b0a:	4463      	add	r3, ip
 8001b0c:	4099      	lsls	r1, r3
 8001b0e:	000b      	movs	r3, r1
 8001b10:	432b      	orrs	r3, r5
 8001b12:	e7f2      	b.n	8001afa <__aeabi_d2iz+0x3a>
 8001b14:	000003fe 	.word	0x000003fe
 8001b18:	0000041d 	.word	0x0000041d
 8001b1c:	7fffffff 	.word	0x7fffffff
 8001b20:	00000433 	.word	0x00000433
 8001b24:	00000413 	.word	0x00000413
 8001b28:	fffffbed 	.word	0xfffffbed

08001b2c <__aeabi_f2d>:
 8001b2c:	b570      	push	{r4, r5, r6, lr}
 8001b2e:	0242      	lsls	r2, r0, #9
 8001b30:	0043      	lsls	r3, r0, #1
 8001b32:	0fc4      	lsrs	r4, r0, #31
 8001b34:	20fe      	movs	r0, #254	; 0xfe
 8001b36:	0e1b      	lsrs	r3, r3, #24
 8001b38:	1c59      	adds	r1, r3, #1
 8001b3a:	0a55      	lsrs	r5, r2, #9
 8001b3c:	4208      	tst	r0, r1
 8001b3e:	d00c      	beq.n	8001b5a <__aeabi_f2d+0x2e>
 8001b40:	21e0      	movs	r1, #224	; 0xe0
 8001b42:	0089      	lsls	r1, r1, #2
 8001b44:	468c      	mov	ip, r1
 8001b46:	076d      	lsls	r5, r5, #29
 8001b48:	0b12      	lsrs	r2, r2, #12
 8001b4a:	4463      	add	r3, ip
 8001b4c:	051b      	lsls	r3, r3, #20
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	07e4      	lsls	r4, r4, #31
 8001b52:	4323      	orrs	r3, r4
 8001b54:	0028      	movs	r0, r5
 8001b56:	0019      	movs	r1, r3
 8001b58:	bd70      	pop	{r4, r5, r6, pc}
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d114      	bne.n	8001b88 <__aeabi_f2d+0x5c>
 8001b5e:	2d00      	cmp	r5, #0
 8001b60:	d01b      	beq.n	8001b9a <__aeabi_f2d+0x6e>
 8001b62:	0028      	movs	r0, r5
 8001b64:	f000 f82a 	bl	8001bbc <__clzsi2>
 8001b68:	280a      	cmp	r0, #10
 8001b6a:	dc1c      	bgt.n	8001ba6 <__aeabi_f2d+0x7a>
 8001b6c:	230b      	movs	r3, #11
 8001b6e:	002a      	movs	r2, r5
 8001b70:	1a1b      	subs	r3, r3, r0
 8001b72:	40da      	lsrs	r2, r3
 8001b74:	0003      	movs	r3, r0
 8001b76:	3315      	adds	r3, #21
 8001b78:	409d      	lsls	r5, r3
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <__aeabi_f2d+0x88>)
 8001b7c:	0312      	lsls	r2, r2, #12
 8001b7e:	1a1b      	subs	r3, r3, r0
 8001b80:	055b      	lsls	r3, r3, #21
 8001b82:	0b12      	lsrs	r2, r2, #12
 8001b84:	0d5b      	lsrs	r3, r3, #21
 8001b86:	e7e1      	b.n	8001b4c <__aeabi_f2d+0x20>
 8001b88:	2d00      	cmp	r5, #0
 8001b8a:	d009      	beq.n	8001ba0 <__aeabi_f2d+0x74>
 8001b8c:	0b13      	lsrs	r3, r2, #12
 8001b8e:	2280      	movs	r2, #128	; 0x80
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	431a      	orrs	r2, r3
 8001b94:	076d      	lsls	r5, r5, #29
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <__aeabi_f2d+0x8c>)
 8001b98:	e7d8      	b.n	8001b4c <__aeabi_f2d+0x20>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	e7d5      	b.n	8001b4c <__aeabi_f2d+0x20>
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	4b05      	ldr	r3, [pc, #20]	; (8001bb8 <__aeabi_f2d+0x8c>)
 8001ba4:	e7d2      	b.n	8001b4c <__aeabi_f2d+0x20>
 8001ba6:	0003      	movs	r3, r0
 8001ba8:	002a      	movs	r2, r5
 8001baa:	3b0b      	subs	r3, #11
 8001bac:	409a      	lsls	r2, r3
 8001bae:	2500      	movs	r5, #0
 8001bb0:	e7e3      	b.n	8001b7a <__aeabi_f2d+0x4e>
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	00000389 	.word	0x00000389
 8001bb8:	000007ff 	.word	0x000007ff

08001bbc <__clzsi2>:
 8001bbc:	211c      	movs	r1, #28
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	041b      	lsls	r3, r3, #16
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	d301      	bcc.n	8001bca <__clzsi2+0xe>
 8001bc6:	0c00      	lsrs	r0, r0, #16
 8001bc8:	3910      	subs	r1, #16
 8001bca:	0a1b      	lsrs	r3, r3, #8
 8001bcc:	4298      	cmp	r0, r3
 8001bce:	d301      	bcc.n	8001bd4 <__clzsi2+0x18>
 8001bd0:	0a00      	lsrs	r0, r0, #8
 8001bd2:	3908      	subs	r1, #8
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	4298      	cmp	r0, r3
 8001bd8:	d301      	bcc.n	8001bde <__clzsi2+0x22>
 8001bda:	0900      	lsrs	r0, r0, #4
 8001bdc:	3904      	subs	r1, #4
 8001bde:	a202      	add	r2, pc, #8	; (adr r2, 8001be8 <__clzsi2+0x2c>)
 8001be0:	5c10      	ldrb	r0, [r2, r0]
 8001be2:	1840      	adds	r0, r0, r1
 8001be4:	4770      	bx	lr
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	02020304 	.word	0x02020304
 8001bec:	01010101 	.word	0x01010101
	...

08001bf8 <__clzdi2>:
 8001bf8:	b510      	push	{r4, lr}
 8001bfa:	2900      	cmp	r1, #0
 8001bfc:	d103      	bne.n	8001c06 <__clzdi2+0xe>
 8001bfe:	f7ff ffdd 	bl	8001bbc <__clzsi2>
 8001c02:	3020      	adds	r0, #32
 8001c04:	e002      	b.n	8001c0c <__clzdi2+0x14>
 8001c06:	0008      	movs	r0, r1
 8001c08:	f7ff ffd8 	bl	8001bbc <__clzsi2>
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)

08001c10 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8001c10:	b510      	push	{r4, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8001c12:	f000 fee1 	bl	80029d8 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8001c16:	f000 f9b1 	bl	8001f7c <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8001c1a:	bd10      	pop	{r4, pc}

08001c1c <MX_LoRaWAN_Process>:
void MX_LoRaWAN_Process(void)
{
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c1c:	2001      	movs	r0, #1
{
 8001c1e:	b510      	push	{r4, lr}
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c20:	4240      	negs	r0, r0
 8001c22:	f00c f8ed 	bl	800de00 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8001c26:	bd10      	pop	{r4, pc}

08001c28 <OnTxTimerEvent>:

  /* USER CODE END SendTxData_1 */
}

static void OnTxTimerEvent(void *context)
{
 8001c28:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f00c f8b9 	bl	800dda4 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 8001c32:	4802      	ldr	r0, [pc, #8]	; (8001c3c <OnTxTimerEvent+0x14>)
 8001c34:	f00c faf2 	bl	800e21c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 8001c38:	bd10      	pop	{r4, pc}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	20000170 	.word	0x20000170

08001c40 <OnMacProcessNotify>:
  }
  /* USER CODE END OnJoinRequest_1 */
}

static void OnMacProcessNotify(void)
{
 8001c40:	b510      	push	{r4, lr}
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 8001c42:	2100      	movs	r1, #0
 8001c44:	2001      	movs	r0, #1
 8001c46:	f00c f8ad 	bl	800dda4 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 8001c4a:	bd10      	pop	{r4, pc}

08001c4c <OnRxData>:
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	0004      	movs	r4, r0
 8001c50:	000d      	movs	r5, r1
 8001c52:	b086      	sub	sp, #24
  if ((appData != NULL) || (params != NULL))
 8001c54:	2800      	cmp	r0, #0
 8001c56:	d101      	bne.n	8001c5c <OnRxData+0x10>
 8001c58:	2900      	cmp	r1, #0
 8001c5a:	d038      	beq.n	8001cce <OnRxData+0x82>
    LED_On(LED_BLUE);
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f001 fa35 	bl	80030cc <BSP_LED_On>
    UTIL_TIMER_Start(&RxLedTimer);
 8001c62:	4e2a      	ldr	r6, [pc, #168]	; (8001d0c <OnRxData+0xc0>)
 8001c64:	0030      	movs	r0, r6
 8001c66:	3018      	adds	r0, #24
 8001c68:	f00c fad8 	bl	800e21c <UTIL_TIMER_Start>
    APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Indication ==========\r\n");
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	4b28      	ldr	r3, [pc, #160]	; (8001d10 <OnRxData+0xc4>)
 8001c70:	0011      	movs	r1, r2
 8001c72:	2002      	movs	r0, #2
 8001c74:	f00b ff72 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | SLOT:%s | PORT:%d | DR:%d | RSSI:%d | SNR:%d\r\n",
 8001c78:	2204      	movs	r2, #4
 8001c7a:	56aa      	ldrsb	r2, [r5, r2]
 8001c7c:	210c      	movs	r1, #12
 8001c7e:	9205      	str	r2, [sp, #20]
 8001c80:	2203      	movs	r2, #3
 8001c82:	56aa      	ldrsb	r2, [r5, r2]
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <OnRxData+0xc8>)
 8001c86:	9204      	str	r2, [sp, #16]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	56aa      	ldrsb	r2, [r5, r2]
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	9203      	str	r2, [sp, #12]
 8001c90:	7822      	ldrb	r2, [r4, #0]
 8001c92:	9202      	str	r2, [sp, #8]
 8001c94:	5669      	ldrsb	r1, [r5, r1]
 8001c96:	4a20      	ldr	r2, [pc, #128]	; (8001d18 <OnRxData+0xcc>)
 8001c98:	0089      	lsls	r1, r1, #2
 8001c9a:	588a      	ldr	r2, [r1, r2]
 8001c9c:	9201      	str	r2, [sp, #4]
 8001c9e:	68aa      	ldr	r2, [r5, #8]
 8001ca0:	9200      	str	r2, [sp, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	0011      	movs	r1, r2
 8001ca6:	f00b ff59 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    switch (appData->Port)
 8001caa:	7823      	ldrb	r3, [r4, #0]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d010      	beq.n	8001cd2 <OnRxData+0x86>
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d10c      	bne.n	8001cce <OnRxData+0x82>
        if (appData->BufferSize == 1)
 8001cb4:	7863      	ldrb	r3, [r4, #1]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d109      	bne.n	8001cce <OnRxData+0x82>
          switch (appData->Buffer[0])
 8001cba:	6863      	ldr	r3, [r4, #4]
 8001cbc:	7818      	ldrb	r0, [r3, #0]
 8001cbe:	2801      	cmp	r0, #1
 8001cc0:	d003      	beq.n	8001cca <OnRxData+0x7e>
 8001cc2:	2802      	cmp	r0, #2
 8001cc4:	d001      	beq.n	8001cca <OnRxData+0x7e>
 8001cc6:	2800      	cmp	r0, #0
 8001cc8:	d101      	bne.n	8001cce <OnRxData+0x82>
              LmHandlerRequestClass(CLASS_C);
 8001cca:	f005 f9ed 	bl	80070a8 <LmHandlerRequestClass>
}
 8001cce:	b006      	add	sp, #24
 8001cd0:	bd70      	pop	{r4, r5, r6, pc}
        if (appData->BufferSize == 1)
 8001cd2:	7865      	ldrb	r5, [r4, #1]
 8001cd4:	2d01      	cmp	r5, #1
 8001cd6:	d1fa      	bne.n	8001cce <OnRxData+0x82>
          AppLedStateOn = appData->Buffer[0] & 0x01;
 8001cd8:	6863      	ldr	r3, [r4, #4]
 8001cda:	3630      	adds	r6, #48	; 0x30
 8001cdc:	7819      	ldrb	r1, [r3, #0]
 8001cde:	4029      	ands	r1, r5
 8001ce0:	7031      	strb	r1, [r6, #0]
          if (AppLedStateOn == RESET)
 8001ce2:	d108      	bne.n	8001cf6 <OnRxData+0xaa>
            APP_LOG(TS_OFF, VLEVEL_H,   "LED OFF\r\n");
 8001ce4:	000a      	movs	r2, r1
 8001ce6:	4b0d      	ldr	r3, [pc, #52]	; (8001d1c <OnRxData+0xd0>)
 8001ce8:	2003      	movs	r0, #3
 8001cea:	f00b ff37 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
            LED_Off(LED_RED1);
 8001cee:	0028      	movs	r0, r5
 8001cf0:	f001 f9fc 	bl	80030ec <BSP_LED_Off>
 8001cf4:	e7eb      	b.n	8001cce <OnRxData+0x82>
            APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <OnRxData+0xd4>)
 8001cfa:	0011      	movs	r1, r2
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f00b ff2d 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
            LED_On(LED_RED1);
 8001d02:	0028      	movs	r0, r5
 8001d04:	f001 f9e2 	bl	80030cc <BSP_LED_On>
}
 8001d08:	e7e1      	b.n	8001cce <OnRxData+0x82>
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	20000170 	.word	0x20000170
 8001d10:	0800f748 	.word	0x0800f748
 8001d14:	0800f779 	.word	0x0800f779
 8001d18:	0800f094 	.word	0x0800f094
 8001d1c:	0800f7c0 	.word	0x0800f7c0
 8001d20:	0800f7ca 	.word	0x0800f7ca

08001d24 <OnRxTimerLedEvent>:
{
 8001d24:	b510      	push	{r4, lr}
  LED_Off(LED_BLUE) ;
 8001d26:	2002      	movs	r0, #2
 8001d28:	f001 f9e0 	bl	80030ec <BSP_LED_Off>
}
 8001d2c:	bd10      	pop	{r4, pc}

08001d2e <OnTxTimerLedEvent>:
{
 8001d2e:	b510      	push	{r4, lr}
  LED_Off(LED_RED2);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f001 f9db 	bl	80030ec <BSP_LED_Off>
}
 8001d36:	bd10      	pop	{r4, pc}

08001d38 <SendTxData>:
{
 8001d38:	b5f0      	push	{r4, r5, r6, r7, lr}
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001d3a:	2500      	movs	r5, #0
{
 8001d3c:	b08d      	sub	sp, #52	; 0x34
  EnvSensors_Read(&sensor_data);
 8001d3e:	a806      	add	r0, sp, #24
  UTIL_TIMER_Time_t nextTxIn = 0;
 8001d40:	9505      	str	r5, [sp, #20]
  EnvSensors_Read(&sensor_data);
 8001d42:	f000 ff69 	bl	8002c18 <EnvSensors_Read>
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001d46:	f000 fa97 	bl	8002278 <SYS_GetTemperatureLevel>
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001d4a:	4942      	ldr	r1, [pc, #264]	; (8001e54 <SendTxData+0x11c>)
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001d4c:	0006      	movs	r6, r0
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001d4e:	9806      	ldr	r0, [sp, #24]
 8001d50:	f7fe fef4 	bl	8000b3c <__aeabi_fmul>
 8001d54:	4940      	ldr	r1, [pc, #256]	; (8001e58 <SendTxData+0x120>)
 8001d56:	f7fe fd27 	bl	80007a8 <__aeabi_fdiv>
 8001d5a:	f7fe fc41 	bl	80005e0 <__aeabi_f2uiz>
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	4c3e      	ldr	r4, [pc, #248]	; (8001e5c <SendTxData+0x124>)
  pressure    = (uint16_t)(sensor_data.pressure * 100 / 10);      /* in hPa / 10 */
 8001d62:	b287      	uxth	r7, r0
  AppData.Port = LORAWAN_USER_APP_PORT;
 8001d64:	7023      	strb	r3, [r4, #0]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8001d66:	9808      	ldr	r0, [sp, #32]
 8001d68:	493b      	ldr	r1, [pc, #236]	; (8001e58 <SendTxData+0x120>)
 8001d6a:	f7fe fee7 	bl	8000b3c <__aeabi_fmul>
 8001d6e:	f7fe fc37 	bl	80005e0 <__aeabi_f2uiz>
  AppData.Buffer[i++] = AppLedStateOn;
 8001d72:	4b3b      	ldr	r3, [pc, #236]	; (8001e60 <SendTxData+0x128>)
 8001d74:	6862      	ldr	r2, [r4, #4]
 8001d76:	3330      	adds	r3, #48	; 0x30
 8001d78:	781b      	ldrb	r3, [r3, #0]
  temperature = (SYS_GetTemperatureLevel() >> 8);
 8001d7a:	1236      	asrs	r6, r6, #8
  AppData.Buffer[i++] = AppLedStateOn;
 8001d7c:	7013      	strb	r3, [r2, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8001d7e:	6863      	ldr	r3, [r4, #4]
 8001d80:	0a3a      	lsrs	r2, r7, #8
 8001d82:	705a      	strb	r2, [r3, #1]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8001d84:	6863      	ldr	r3, [r4, #4]
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8001d86:	b280      	uxth	r0, r0
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8001d88:	709f      	strb	r7, [r3, #2]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8001d8a:	6863      	ldr	r3, [r4, #4]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8001d8c:	0a02      	lsrs	r2, r0, #8
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8001d8e:	70de      	strb	r6, [r3, #3]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8001d90:	6863      	ldr	r3, [r4, #4]
 8001d92:	711a      	strb	r2, [r3, #4]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8001d94:	6863      	ldr	r3, [r4, #4]
 8001d96:	7158      	strb	r0, [r3, #5]
  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8001d98:	7a23      	ldrb	r3, [r4, #8]
 8001d9a:	2b08      	cmp	r3, #8
 8001d9c:	d001      	beq.n	8001da2 <SendTxData+0x6a>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d827      	bhi.n	8001df2 <SendTxData+0xba>
    AppData.Buffer[i++] = 0;
 8001da2:	6863      	ldr	r3, [r4, #4]
 8001da4:	719d      	strb	r5, [r3, #6]
    AppData.Buffer[i++] = 0;
 8001da6:	6863      	ldr	r3, [r4, #4]
 8001da8:	71dd      	strb	r5, [r3, #7]
    AppData.Buffer[i++] = 0;
 8001daa:	6863      	ldr	r3, [r4, #4]
 8001dac:	721d      	strb	r5, [r3, #8]
    AppData.Buffer[i++] = 0;
 8001dae:	725d      	strb	r5, [r3, #9]
 8001db0:	230a      	movs	r3, #10
  AppData.BufferSize = i;
 8001db2:	7063      	strb	r3, [r4, #1]
  if (LORAMAC_HANDLER_SUCCESS == LmHandlerSend(&AppData, LORAWAN_DEFAULT_CONFIRMED_MSG_STATE, &nextTxIn, false))
 8001db4:	2300      	movs	r3, #0
 8001db6:	0020      	movs	r0, r4
 8001db8:	0019      	movs	r1, r3
 8001dba:	aa05      	add	r2, sp, #20
 8001dbc:	f005 fa0c 	bl	80071d8 <LmHandlerSend>
 8001dc0:	1e05      	subs	r5, r0, #0
 8001dc2:	d137      	bne.n	8001e34 <SendTxData+0xfc>
    char * ls = (char*)calloc(2 * sizeof AppData.BufferSize + 1, sizeof(char)); // calloc automatically zeros asta
 8001dc4:	2101      	movs	r1, #1
 8001dc6:	2003      	movs	r0, #3
 8001dc8:	f00c fbee 	bl	800e5a8 <calloc>
 8001dcc:	0006      	movs	r6, r0
    for (k = 0; k <AppData.BufferSize ; k++)
 8001dce:	7863      	ldrb	r3, [r4, #1]
 8001dd0:	42ab      	cmp	r3, r5
 8001dd2:	dc26      	bgt.n	8001e22 <SendTxData+0xea>
    APP_LOG(TS_ON, VLEVEL_L, "AppData.Buffer %s\r\n", ls);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	0010      	movs	r0, r2
 8001dda:	4b22      	ldr	r3, [pc, #136]	; (8001e64 <SendTxData+0x12c>)
 8001ddc:	9600      	str	r6, [sp, #0]
 8001dde:	f00b febd 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8001de2:	2201      	movs	r2, #1
 8001de4:	2100      	movs	r1, #0
 8001de6:	0010      	movs	r0, r2
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <SendTxData+0x130>)
 8001dea:	f00b feb7 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8001dee:	b00d      	add	sp, #52	; 0x34
 8001df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8001df2:	6863      	ldr	r3, [r4, #4]
    latitude = sensor_data.latitude;
 8001df4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    longitude = sensor_data.longitude;
 8001df6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8001df8:	9303      	str	r3, [sp, #12]
 8001dfa:	f000 fe69 	bl	8002ad0 <GetBatteryLevel>
 8001dfe:	9b03      	ldr	r3, [sp, #12]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8001e00:	143a      	asrs	r2, r7, #16
    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8001e02:	7198      	strb	r0, [r3, #6]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8001e04:	6863      	ldr	r3, [r4, #4]
 8001e06:	71da      	strb	r2, [r3, #7]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8001e08:	6863      	ldr	r3, [r4, #4]
 8001e0a:	123a      	asrs	r2, r7, #8
 8001e0c:	721a      	strb	r2, [r3, #8]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8001e0e:	1432      	asrs	r2, r6, #16
 8001e10:	729a      	strb	r2, [r3, #10]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8001e12:	1232      	asrs	r2, r6, #8
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8001e14:	725f      	strb	r7, [r3, #9]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8001e16:	72da      	strb	r2, [r3, #11]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8001e18:	731e      	strb	r6, [r3, #12]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8001e1a:	735d      	strb	r5, [r3, #13]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8001e1c:	739d      	strb	r5, [r3, #14]
 8001e1e:	230f      	movs	r3, #15
 8001e20:	e7c7      	b.n	8001db2 <SendTxData+0x7a>
        sprintf(&ls[2 * k],"%02x:", AppData.Buffer[k]); // Not sure if the cast is needed
 8001e22:	6863      	ldr	r3, [r4, #4]
 8001e24:	0068      	lsls	r0, r5, #1
 8001e26:	5d5a      	ldrb	r2, [r3, r5]
 8001e28:	4910      	ldr	r1, [pc, #64]	; (8001e6c <SendTxData+0x134>)
 8001e2a:	1830      	adds	r0, r6, r0
 8001e2c:	f00c fca8 	bl	800e780 <siprintf>
    for (k = 0; k <AppData.BufferSize ; k++)
 8001e30:	3501      	adds	r5, #1
 8001e32:	e7cc      	b.n	8001dce <SendTxData+0x96>
  else if (nextTxIn > 0)
 8001e34:	9805      	ldr	r0, [sp, #20]
 8001e36:	2800      	cmp	r0, #0
 8001e38:	d0d9      	beq.n	8001dee <SendTxData+0xb6>
    APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8001e3a:	21fa      	movs	r1, #250	; 0xfa
 8001e3c:	0089      	lsls	r1, r1, #2
 8001e3e:	f7fe f993 	bl	8000168 <__udivsi3>
 8001e42:	2201      	movs	r2, #1
 8001e44:	4c0a      	ldr	r4, [pc, #40]	; (8001e70 <SendTxData+0x138>)
 8001e46:	9000      	str	r0, [sp, #0]
 8001e48:	0023      	movs	r3, r4
 8001e4a:	2100      	movs	r1, #0
 8001e4c:	0010      	movs	r0, r2
 8001e4e:	f00b fe85 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8001e52:	e7cc      	b.n	8001dee <SendTxData+0xb6>
 8001e54:	42c80000 	.word	0x42c80000
 8001e58:	41200000 	.word	0x41200000
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	20000170 	.word	0x20000170
 8001e64:	0800f7d9 	.word	0x0800f7d9
 8001e68:	0800f7ed 	.word	0x0800f7ed
 8001e6c:	0800f7d3 	.word	0x0800f7d3
 8001e70:	0800f7fc 	.word	0x0800f7fc

08001e74 <OnJoinTimerLedEvent>:
{
 8001e74:	b510      	push	{r4, lr}
  LED_Toggle(LED_RED1) ;
 8001e76:	2001      	movs	r0, #1
 8001e78:	f001 f948 	bl	800310c <BSP_LED_Toggle>
}
 8001e7c:	bd10      	pop	{r4, pc}
	...

08001e80 <OnTxData>:
{
 8001e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001e82:	1e04      	subs	r4, r0, #0
  if ((params != NULL))
 8001e84:	d034      	beq.n	8001ef0 <OnTxData+0x70>
    if (params->IsMcpsConfirm != 0)
 8001e86:	7803      	ldrb	r3, [r0, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d031      	beq.n	8001ef0 <OnTxData+0x70>
      LED_On(LED_RED2) ;
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f001 f91d 	bl	80030cc <BSP_LED_On>
      UTIL_TIMER_Start(&TxLedTimer);
 8001e92:	481b      	ldr	r0, [pc, #108]	; (8001f00 <OnTxData+0x80>)
 8001e94:	3034      	adds	r0, #52	; 0x34
 8001e96:	f00c f9c1 	bl	800e21c <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <OnTxData+0x84>)
 8001e9e:	0011      	movs	r1, r2
 8001ea0:	2002      	movs	r0, #2
 8001ea2:	f00b fe5b 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8001ea6:	2214      	movs	r2, #20
 8001ea8:	56a2      	ldrsb	r2, [r4, r2]
 8001eaa:	4b17      	ldr	r3, [pc, #92]	; (8001f08 <OnTxData+0x88>)
 8001eac:	9203      	str	r2, [sp, #12]
 8001eae:	2204      	movs	r2, #4
 8001eb0:	56a2      	ldrsb	r2, [r4, r2]
 8001eb2:	2003      	movs	r0, #3
 8001eb4:	9202      	str	r2, [sp, #8]
 8001eb6:	7b22      	ldrb	r2, [r4, #12]
 8001eb8:	9201      	str	r2, [sp, #4]
 8001eba:	68a2      	ldr	r2, [r4, #8]
 8001ebc:	9200      	str	r2, [sp, #0]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	f00b fe4b 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <OnTxData+0x8c>)
 8001eca:	0011      	movs	r1, r2
 8001ecc:	2003      	movs	r0, #3
 8001ece:	f00b fe45 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 8001ed2:	78a3      	ldrb	r3, [r4, #2]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d10c      	bne.n	8001ef2 <OnTxData+0x72>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8001ed8:	78e3      	ldrb	r3, [r4, #3]
 8001eda:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <OnTxData+0x90>)
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d100      	bne.n	8001ee2 <OnTxData+0x62>
 8001ee0:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <OnTxData+0x94>)
 8001ee2:	9200      	str	r2, [sp, #0]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	0011      	movs	r1, r2
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <OnTxData+0x98>)
 8001eec:	f00b fe36 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8001ef0:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <OnTxData+0x9c>)
 8001ef6:	0011      	movs	r1, r2
 8001ef8:	2003      	movs	r0, #3
 8001efa:	f00b fe2f 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8001efe:	e7f7      	b.n	8001ef0 <OnTxData+0x70>
 8001f00:	20000170 	.word	0x20000170
 8001f04:	0800f81f 	.word	0x0800f81f
 8001f08:	0800f850 	.word	0x0800f850
 8001f0c:	0800f881 	.word	0x0800f881
 8001f10:	0800f81b 	.word	0x0800f81b
 8001f14:	0800f81a 	.word	0x0800f81a
 8001f18:	0800f88e 	.word	0x0800f88e
 8001f1c:	0800f89f 	.word	0x0800f89f

08001f20 <OnJoinRequest>:
{
 8001f20:	b570      	push	{r4, r5, r6, lr}
 8001f22:	1e05      	subs	r5, r0, #0
  if (joinParams != NULL)
 8001f24:	d019      	beq.n	8001f5a <OnJoinRequest+0x3a>
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 8001f26:	2401      	movs	r4, #1
 8001f28:	5704      	ldrsb	r4, [r0, r4]
 8001f2a:	2c00      	cmp	r4, #0
 8001f2c:	d118      	bne.n	8001f60 <OnJoinRequest+0x40>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8001f2e:	480e      	ldr	r0, [pc, #56]	; (8001f68 <OnJoinRequest+0x48>)
 8001f30:	304c      	adds	r0, #76	; 0x4c
 8001f32:	f00c f91f 	bl	800e174 <UTIL_TIMER_Stop>
      LED_Off(LED_RED1) ;
 8001f36:	2001      	movs	r0, #1
 8001f38:	f001 f8d8 	bl	80030ec <BSP_LED_Off>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <OnJoinRequest+0x4c>)
 8001f3e:	0022      	movs	r2, r4
 8001f40:	0021      	movs	r1, r4
 8001f42:	2002      	movs	r0, #2
 8001f44:	f00b fe0a 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 8001f48:	78ab      	ldrb	r3, [r5, #2]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d106      	bne.n	8001f5c <OnJoinRequest+0x3c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8001f4e:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <OnJoinRequest+0x50>)
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001f50:	0022      	movs	r2, r4
 8001f52:	0021      	movs	r1, r4
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001f54:	2002      	movs	r0, #2
 8001f56:	f00b fe01 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8001f5a:	bd70      	pop	{r4, r5, r6, pc}
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8001f5c:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <OnJoinRequest+0x54>)
 8001f5e:	e7f7      	b.n	8001f50 <OnJoinRequest+0x30>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8001f60:	2200      	movs	r2, #0
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <OnJoinRequest+0x58>)
 8001f64:	0011      	movs	r1, r2
 8001f66:	e7f5      	b.n	8001f54 <OnJoinRequest+0x34>
 8001f68:	20000170 	.word	0x20000170
 8001f6c:	0800f8ad 	.word	0x0800f8ad
 8001f70:	0800f8c2 	.word	0x0800f8c2
 8001f74:	0800f8df 	.word	0x0800f8df
 8001f78:	0800f8fc 	.word	0x0800f8fc

08001f7c <LoRaWAN_Init>:
{
 8001f7c:	b5f0      	push	{r4, r5, r6, r7, lr}
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001f7e:	2400      	movs	r4, #0
 8001f80:	2601      	movs	r6, #1
{
 8001f82:	b085      	sub	sp, #20
  LED_Init(LED_BLUE);
 8001f84:	2002      	movs	r0, #2
 8001f86:	f001 f85f 	bl	8003048 <BSP_LED_Init>
  LED_Init(LED_RED1);
 8001f8a:	2001      	movs	r0, #1
 8001f8c:	f001 f85c 	bl	8003048 <BSP_LED_Init>
  LED_Init(LED_RED2);
 8001f90:	2003      	movs	r0, #3
 8001f92:	f001 f859 	bl	8003048 <BSP_LED_Init>
  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION:        V%X.%X.%X\r\n",
 8001f96:	0022      	movs	r2, r4
 8001f98:	0021      	movs	r1, r4
 8001f9a:	9601      	str	r6, [sp, #4]
 8001f9c:	9600      	str	r6, [sp, #0]
 8001f9e:	4b36      	ldr	r3, [pc, #216]	; (8002078 <LoRaWAN_Init+0xfc>)
 8001fa0:	9402      	str	r4, [sp, #8]
 8001fa2:	2002      	movs	r0, #2
 8001fa4:	f00b fdda 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION: V%X.%X.%X\r\n",
 8001fa8:	2502      	movs	r5, #2
 8001faa:	2203      	movs	r2, #3
 8001fac:	0021      	movs	r1, r4
 8001fae:	9201      	str	r2, [sp, #4]
 8001fb0:	0028      	movs	r0, r5
 8001fb2:	0022      	movs	r2, r4
 8001fb4:	4b31      	ldr	r3, [pc, #196]	; (800207c <LoRaWAN_Init+0x100>)
 8001fb6:	9402      	str	r4, [sp, #8]
 8001fb8:	9500      	str	r5, [sp, #0]
 8001fba:	f00b fdcf 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:   V%X.%X.%X\r\n",
 8001fbe:	0022      	movs	r2, r4
 8001fc0:	0021      	movs	r1, r4
 8001fc2:	9601      	str	r6, [sp, #4]
 8001fc4:	9600      	str	r6, [sp, #0]
 8001fc6:	0028      	movs	r0, r5
 8001fc8:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <LoRaWAN_Init+0x104>)
 8001fca:	9402      	str	r4, [sp, #8]
 8001fcc:	f00b fdc6 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	0022      	movs	r2, r4
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <LoRaWAN_Init+0x108>)
 8001fd6:	9400      	str	r4, [sp, #0]
 8001fd8:	4249      	negs	r1, r1
 8001fda:	482b      	ldr	r0, [pc, #172]	; (8002088 <LoRaWAN_Init+0x10c>)
 8001fdc:	4f2b      	ldr	r7, [pc, #172]	; (800208c <LoRaWAN_Init+0x110>)
 8001fde:	f00c f86b 	bl	800e0b8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	0022      	movs	r2, r4
 8001fe6:	4b2a      	ldr	r3, [pc, #168]	; (8002090 <LoRaWAN_Init+0x114>)
 8001fe8:	9400      	str	r4, [sp, #0]
 8001fea:	4249      	negs	r1, r1
 8001fec:	4829      	ldr	r0, [pc, #164]	; (8002094 <LoRaWAN_Init+0x118>)
 8001fee:	f00c f863 	bl	800e0b8 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, 0xFFFFFFFFU, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <LoRaWAN_Init+0x11c>)
 8001ff6:	0032      	movs	r2, r6
 8001ff8:	9400      	str	r4, [sp, #0]
 8001ffa:	4249      	negs	r1, r1
 8001ffc:	4827      	ldr	r0, [pc, #156]	; (800209c <LoRaWAN_Init+0x120>)
 8001ffe:	f00c f85b 	bl	800e0b8 <UTIL_TIMER_Create>
  UTIL_TIMER_SetPeriod(&TxLedTimer, 500);
 8002002:	21fa      	movs	r1, #250	; 0xfa
 8002004:	4820      	ldr	r0, [pc, #128]	; (8002088 <LoRaWAN_Init+0x10c>)
 8002006:	0049      	lsls	r1, r1, #1
 8002008:	f00c f946 	bl	800e298 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&RxLedTimer, 500);
 800200c:	21fa      	movs	r1, #250	; 0xfa
 800200e:	4821      	ldr	r0, [pc, #132]	; (8002094 <LoRaWAN_Init+0x118>)
 8002010:	0049      	lsls	r1, r1, #1
 8002012:	f00c f941 	bl	800e298 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_SetPeriod(&JoinLedTimer, 500);
 8002016:	21fa      	movs	r1, #250	; 0xfa
 8002018:	4820      	ldr	r0, [pc, #128]	; (800209c <LoRaWAN_Init+0x120>)
 800201a:	0049      	lsls	r1, r1, #1
 800201c:	f00c f93c 	bl	800e298 <UTIL_TIMER_SetPeriod>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002020:	0021      	movs	r1, r4
 8002022:	0030      	movs	r0, r6
 8002024:	4a1e      	ldr	r2, [pc, #120]	; (80020a0 <LoRaWAN_Init+0x124>)
 8002026:	f00b ff51 	bl	800decc <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 800202a:	0021      	movs	r1, r4
 800202c:	4a1d      	ldr	r2, [pc, #116]	; (80020a4 <LoRaWAN_Init+0x128>)
 800202e:	0028      	movs	r0, r5
 8002030:	f00b ff4c 	bl	800decc <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002034:	f000 f846 	bl	80020c4 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks);
 8002038:	4e1b      	ldr	r6, [pc, #108]	; (80020a8 <LoRaWAN_Init+0x12c>)
 800203a:	0030      	movs	r0, r6
 800203c:	3018      	adds	r0, #24
 800203e:	f005 fa73 	bl	8007528 <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002042:	0030      	movs	r0, r6
 8002044:	3008      	adds	r0, #8
 8002046:	f004 ff39 	bl	8006ebc <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 800204a:	4814      	ldr	r0, [pc, #80]	; (800209c <LoRaWAN_Init+0x120>)
 800204c:	f00c f8e6 	bl	800e21c <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType);
 8002050:	0028      	movs	r0, r5
 8002052:	f005 f881 	bl	8007158 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer,  0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002056:	2101      	movs	r1, #1
 8002058:	0022      	movs	r2, r4
 800205a:	4b14      	ldr	r3, [pc, #80]	; (80020ac <LoRaWAN_Init+0x130>)
 800205c:	0038      	movs	r0, r7
 800205e:	9400      	str	r4, [sp, #0]
 8002060:	4249      	negs	r1, r1
 8002062:	f00c f829 	bl	800e0b8 <UTIL_TIMER_Create>
    UTIL_TIMER_SetPeriod(&TxTimer,  APP_TX_DUTYCYCLE);
 8002066:	4912      	ldr	r1, [pc, #72]	; (80020b0 <LoRaWAN_Init+0x134>)
 8002068:	0038      	movs	r0, r7
 800206a:	f00c f915 	bl	800e298 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 800206e:	0038      	movs	r0, r7
 8002070:	f00c f8d4 	bl	800e21c <UTIL_TIMER_Start>
}
 8002074:	b005      	add	sp, #20
 8002076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002078:	0800f915 	.word	0x0800f915
 800207c:	0800f935 	.word	0x0800f935
 8002080:	0800f955 	.word	0x0800f955
 8002084:	08001d2f 	.word	0x08001d2f
 8002088:	200001a4 	.word	0x200001a4
 800208c:	20000170 	.word	0x20000170
 8002090:	08001d25 	.word	0x08001d25
 8002094:	20000188 	.word	0x20000188
 8002098:	08001e75 	.word	0x08001e75
 800209c:	200001bc 	.word	0x200001bc
 80020a0:	08007045 	.word	0x08007045
 80020a4:	08001d39 	.word	0x08001d39
 80020a8:	20000000 	.word	0x20000000
 80020ac:	08001c29 	.word	0x08001c29
 80020b0:	00002710 	.word	0x00002710

080020b4 <HAL_GPIO_EXTI_Callback>:
{
 80020b4:	b510      	push	{r4, lr}
  switch (GPIO_Pin)
 80020b6:	2804      	cmp	r0, #4
 80020b8:	d103      	bne.n	80020c2 <HAL_GPIO_EXTI_Callback+0xe>
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 80020ba:	2100      	movs	r1, #0
 80020bc:	3802      	subs	r0, #2
 80020be:	f00b fe71 	bl	800dda4 <UTIL_SEQ_SetTask>
}
 80020c2:	bd10      	pop	{r4, pc}

080020c4 <LoraInfo_Init>:
/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ActivationMode = 0;
  loraInfo.Region = 0;
  loraInfo.ClassB = 0;
 80020c4:	2200      	movs	r2, #0
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <LoraInfo_Init+0x14>)
 80020c8:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 80020ca:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433) ;
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868) ;
 80020cc:	3220      	adds	r2, #32
 80020ce:	605a      	str	r2, [r3, #4]
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
  loraInfo.ActivationMode = 3;
 80020d0:	3a1d      	subs	r2, #29
 80020d2:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 80020d4:	4770      	bx	lr
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	200002c8 	.word	0x200002c8

080020dc <LoraInfo_GetPtr>:
LoraInfo_t *LoraInfo_GetPtr(void)
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 80020dc:	4800      	ldr	r0, [pc, #0]	; (80020e0 <LoraInfo_GetPtr+0x4>)
}
 80020de:	4770      	bx	lr
 80020e0:	200002c8 	.word	0x200002c8

080020e4 <MX_ADC_Init>:
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
  hadc.Init.LowPowerFrequencyMode = ENABLE;
  hadc.Init.LowPowerAutoWait      = DISABLE;
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80020e4:	2107      	movs	r1, #7
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80020e6:	2201      	movs	r2, #1
{
 80020e8:	b510      	push	{r4, lr}
  hadc.Init.OversamplingMode      = DISABLE;
 80020ea:	4c13      	ldr	r4, [pc, #76]	; (8002138 <MX_ADC_Init+0x54>)
 80020ec:	2300      	movs	r3, #0
  hadc.Init.SamplingTime          = ADC_SAMPLETIME_160CYCLES_5;
 80020ee:	63a1      	str	r1, [r4, #56]	; 0x38
  hadc.Instance  = ADC1;
 80020f0:	4912      	ldr	r1, [pc, #72]	; (800213c <MX_ADC_Init+0x58>)
  hadc.Init.LowPowerFrequencyMode = ENABLE;
 80020f2:	6362      	str	r2, [r4, #52]	; 0x34
  hadc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;
 80020f4:	6122      	str	r2, [r4, #16]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode    = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80020f6:	3203      	adds	r2, #3
  hadc.Instance  = ADC1;
 80020f8:	6021      	str	r1, [r4, #0]
  hadc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 80020fa:	6162      	str	r2, [r4, #20]
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 80020fc:	2180      	movs	r1, #128	; 0x80
  hadc.Init.DMAContinuousRequests = DISABLE;
 80020fe:	0022      	movs	r2, r4
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002100:	0609      	lsls	r1, r1, #24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002102:	322c      	adds	r2, #44	; 0x2c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002104:	0020      	movs	r0, r4
  hadc.Init.ContinuousConvMode    = DISABLE;
 8002106:	8423      	strh	r3, [r4, #32]
  hadc.Init.OversamplingMode      = DISABLE;
 8002108:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800210a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;
 800210c:	6061      	str	r1, [r4, #4]
  hadc.Init.Resolution            = ADC_RESOLUTION_12B;
 800210e:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8002110:	60e3      	str	r3, [r4, #12]
  hadc.Init.LowPowerAutoWait      = DISABLE;
 8002112:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff  = DISABLE;
 8002114:	61e3      	str	r3, [r4, #28]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8002116:	7013      	strb	r3, [r2, #0]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8002118:	f001 fb1a 	bl	8003750 <HAL_ADC_Init>
 800211c:	2800      	cmp	r0, #0
 800211e:	d001      	beq.n	8002124 <MX_ADC_Init+0x40>
  {
    Error_Handler();
 8002120:	f000 f942 	bl	80023a8 <Error_Handler>
  }

  if (HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED) != HAL_OK)
 8002124:	2100      	movs	r1, #0
 8002126:	0020      	movs	r0, r4
 8002128:	f001 fd40 	bl	8003bac <HAL_ADCEx_Calibration_Start>
 800212c:	2800      	cmp	r0, #0
 800212e:	d001      	beq.n	8002134 <MX_ADC_Init+0x50>
  {
    Error_Handler();
 8002130:	f000 f93a 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8002134:	bd10      	pop	{r4, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	200002d8 	.word	0x200002d8
 800213c:	40012400 	.word	0x40012400

08002140 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_ADC_MspInit+0x18>)
 8002142:	6802      	ldr	r2, [r0, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d105      	bne.n	8002154 <HAL_ADC_MspInit+0x14>
  {
    /* USER CODE BEGIN ADC_MspInit 0 */

    /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	4a04      	ldr	r2, [pc, #16]	; (800215c <HAL_ADC_MspInit+0x1c>)
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002150:	430b      	orrs	r3, r1
 8002152:	6353      	str	r3, [r2, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspInit 1 */

    /* USER CODE END ADC_MspInit 1 */
  }
}
 8002154:	4770      	bx	lr
 8002156:	46c0      	nop			; (mov r8, r8)
 8002158:	40012400 	.word	0x40012400
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef *adcHandle)
{

  if (adcHandle->Instance == ADC1)
 8002160:	4b08      	ldr	r3, [pc, #32]	; (8002184 <HAL_ADC_MspDeInit+0x24>)
 8002162:	6802      	ldr	r2, [r0, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d10c      	bne.n	8002182 <HAL_ADC_MspDeInit+0x22>
  {
    /* USER CODE BEGIN ADC_MspDeInit 0 */

    /* USER CODE END ADC_MspDeInit 0 */

    __HAL_RCC_ADC1_FORCE_RESET();
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <HAL_ADC_MspDeInit+0x28>)
 800216c:	0092      	lsls	r2, r2, #2
 800216e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002170:	430a      	orrs	r2, r1
 8002172:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_RCC_ADC1_RELEASE_RESET();
 8002174:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002176:	4905      	ldr	r1, [pc, #20]	; (800218c <HAL_ADC_MspDeInit+0x2c>)
 8002178:	400a      	ands	r2, r1
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
    /* Peripheral clock disable */
    __HAL_RCC_ADC1_CLK_DISABLE();
 800217c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800217e:	400a      	ands	r2, r1
 8002180:	635a      	str	r2, [r3, #52]	; 0x34
    /* USER CODE BEGIN ADC_MspDeInit 1 */

    /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8002182:	4770      	bx	lr
 8002184:	40012400 	.word	0x40012400
 8002188:	40021000 	.word	0x40021000
 800218c:	fffffdff 	.word	0xfffffdff

08002190 <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 8002190:	b573      	push	{r0, r1, r4, r5, r6, lr}
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8002192:	2208      	movs	r2, #8
 8002194:	2100      	movs	r1, #0
{
 8002196:	0006      	movs	r6, r0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002198:	4668      	mov	r0, sp
 800219a:	f00c fb11 	bl	800e7c0 <memset>

  MX_ADC_Init();
 800219e:	f7ff ffa1 	bl	80020e4 <MX_ADC_Init>

  /* wait the the Vrefint used by adc is set */
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VREFINTRDY) == RESET) {};
 80021a2:	2308      	movs	r3, #8
 80021a4:	491f      	ldr	r1, [pc, #124]	; (8002224 <ADC_ReadChannels+0x94>)
 80021a6:	684a      	ldr	r2, [r1, #4]
 80021a8:	421a      	tst	r2, r3
 80021aa:	d0fc      	beq.n	80021a6 <ADC_ReadChannels+0x16>

  __HAL_RCC_ADC1_CLK_ENABLE();
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	4d1e      	ldr	r5, [pc, #120]	; (8002228 <ADC_ReadChannels+0x98>)

  /*calibrate ADC if any calibraiton hardware*/
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80021b0:	4c1e      	ldr	r4, [pc, #120]	; (800222c <ADC_ReadChannels+0x9c>)
  __HAL_RCC_ADC1_CLK_ENABLE();
 80021b2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4313      	orrs	r3, r2
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80021b8:	2100      	movs	r1, #0
  __HAL_RCC_ADC1_CLK_ENABLE();
 80021ba:	636b      	str	r3, [r5, #52]	; 0x34
  HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 80021bc:	0020      	movs	r0, r4
 80021be:	f001 fcf5 	bl	8003bac <HAL_ADCEx_Calibration_Start>

  /* Deselects all channels*/
  sConfig.Channel = ADC_CHANNEL_MASK;
 80021c2:	4b1b      	ldr	r3, [pc, #108]	; (8002230 <ADC_ReadChannels+0xa0>)
  sConfig.Rank = ADC_RANK_NONE;
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80021c4:	4669      	mov	r1, sp
  sConfig.Channel = ADC_CHANNEL_MASK;
 80021c6:	9300      	str	r3, [sp, #0]
  sConfig.Rank = ADC_RANK_NONE;
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <ADC_ReadChannels+0xa4>)
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80021ca:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_NONE;
 80021cc:	9301      	str	r3, [sp, #4]
  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 80021ce:	f001 fc99 	bl	8003b04 <HAL_ADC_ConfigChannel>

  /* Configure Regular Channel */
  sConfig.Channel = channel;
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021d2:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021d4:	4669      	mov	r1, sp
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021d6:	015b      	lsls	r3, r3, #5
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021d8:	0020      	movs	r0, r4
  sConfig.Channel = channel;
 80021da:	9600      	str	r6, [sp, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80021dc:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80021de:	f001 fc91 	bl	8003b04 <HAL_ADC_ConfigChannel>
 80021e2:	2800      	cmp	r0, #0
 80021e4:	d001      	beq.n	80021ea <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
 80021e6:	f000 f8df 	bl	80023a8 <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80021ea:	0020      	movs	r0, r4
 80021ec:	f001 fbdc 	bl	80039a8 <HAL_ADC_Start>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d001      	beq.n	80021f8 <ADC_ReadChannels+0x68>
  {
    /* Start Error */
    Error_Handler();
 80021f4:	f000 f8d8 	bl	80023a8 <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80021f8:	2101      	movs	r1, #1
 80021fa:	0020      	movs	r0, r4
 80021fc:	4249      	negs	r1, r1
 80021fe:	f001 fc1d 	bl	8003a3c <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 8002202:	0020      	movs	r0, r4
 8002204:	f001 fbfc 	bl	8003a00 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8002208:	0020      	movs	r0, r4
 800220a:	f001 fc77 	bl	8003afc <HAL_ADC_GetValue>
 800220e:	0006      	movs	r6, r0

  HAL_ADC_DeInit(&hadc);
 8002210:	0020      	movs	r0, r4
 8002212:	f001 fb75 	bl	8003900 <HAL_ADC_DeInit>

  __HAL_RCC_ADC1_CLK_DISABLE();
 8002216:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002218:	4a07      	ldr	r2, [pc, #28]	; (8002238 <ADC_ReadChannels+0xa8>)

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 800221a:	0030      	movs	r0, r6
  __HAL_RCC_ADC1_CLK_DISABLE();
 800221c:	4013      	ands	r3, r2
 800221e:	636b      	str	r3, [r5, #52]	; 0x34
}
 8002220:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	40007000 	.word	0x40007000
 8002228:	40021000 	.word	0x40021000
 800222c:	200002d8 	.word	0x200002d8
 8002230:	0007ffff 	.word	0x0007ffff
 8002234:	00001001 	.word	0x00001001
 8002238:	fffffdff 	.word	0xfffffdff

0800223c <SYS_InitMeasurement>:
  hadc.Instance = ADC1;
 800223c:	4b01      	ldr	r3, [pc, #4]	; (8002244 <SYS_InitMeasurement+0x8>)
 800223e:	4a02      	ldr	r2, [pc, #8]	; (8002248 <SYS_InitMeasurement+0xc>)
 8002240:	601a      	str	r2, [r3, #0]
}
 8002242:	4770      	bx	lr
 8002244:	200002d8 	.word	0x200002d8
 8002248:	40012400 	.word	0x40012400

0800224c <SYS_GetBatteryLevel>:
{
 800224c:	b510      	push	{r4, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 800224e:	4807      	ldr	r0, [pc, #28]	; (800226c <SYS_GetBatteryLevel+0x20>)
 8002250:	f7ff ff9e 	bl	8002190 <ADC_ReadChannels>
 8002254:	0001      	movs	r1, r0
    batteryLevelmV = 0;
 8002256:	2000      	movs	r0, #0
  if (measuredLevel == 0)
 8002258:	4281      	cmp	r1, r0
 800225a:	d006      	beq.n	800226a <SYS_GetBatteryLevel+0x1e>
    batteryLevelmV = (((uint32_t) VDDA_VREFINT_CAL * (*VREFINT_CAL)) / measuredLevel);
 800225c:	4b04      	ldr	r3, [pc, #16]	; (8002270 <SYS_GetBatteryLevel+0x24>)
 800225e:	4805      	ldr	r0, [pc, #20]	; (8002274 <SYS_GetBatteryLevel+0x28>)
 8002260:	881b      	ldrh	r3, [r3, #0]
 8002262:	4358      	muls	r0, r3
 8002264:	f7fd ff80 	bl	8000168 <__udivsi3>
 8002268:	b280      	uxth	r0, r0
}
 800226a:	bd10      	pop	{r4, pc}
 800226c:	44020000 	.word	0x44020000
 8002270:	1ff80078 	.word	0x1ff80078
 8002274:	00000bb8 	.word	0x00000bb8

08002278 <SYS_GetTemperatureLevel>:
{
 8002278:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 800227a:	f7ff ffe7 	bl	800224c <SYS_GetBatteryLevel>
 800227e:	0005      	movs	r5, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 8002280:	480f      	ldr	r0, [pc, #60]	; (80022c0 <SYS_GetTemperatureLevel+0x48>)
 8002282:	f7ff ff85 	bl	8002190 <ADC_ReadChannels>
  temperatureDegreeC = COMPUTE_TEMPERATURE(measuredLevel, batteryLevelmV);
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <SYS_GetTemperatureLevel+0x4c>)
 8002288:	4368      	muls	r0, r5
 800228a:	490f      	ldr	r1, [pc, #60]	; (80022c8 <SYS_GetTemperatureLevel+0x50>)
 800228c:	881c      	ldrh	r4, [r3, #0]
 800228e:	f7fd ff6b 	bl	8000168 <__udivsi3>
 8002292:	1b03      	subs	r3, r0, r4
 8002294:	2050      	movs	r0, #80	; 0x50
 8002296:	4358      	muls	r0, r3
 8002298:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <SYS_GetTemperatureLevel+0x54>)
 800229a:	0200      	lsls	r0, r0, #8
 800229c:	8819      	ldrh	r1, [r3, #0]
 800229e:	1b09      	subs	r1, r1, r4
 80022a0:	f7fd ffec 	bl	800027c <__divsi3>
 80022a4:	23f0      	movs	r3, #240	; 0xf0
 80022a6:	015b      	lsls	r3, r3, #5
 80022a8:	18c0      	adds	r0, r0, r3
 80022aa:	b204      	sxth	r4, r0
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC >> 8);
 80022ac:	1222      	asrs	r2, r4, #8
 80022ae:	9200      	str	r2, [sp, #0]
 80022b0:	2201      	movs	r2, #1
 80022b2:	2100      	movs	r1, #0
 80022b4:	0010      	movs	r0, r2
 80022b6:	4b06      	ldr	r3, [pc, #24]	; (80022d0 <SYS_GetTemperatureLevel+0x58>)
 80022b8:	f00b fc50 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 80022bc:	0020      	movs	r0, r4
 80022be:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 80022c0:	48040000 	.word	0x48040000
 80022c4:	1ff8007a 	.word	0x1ff8007a
 80022c8:	00000bb8 	.word	0x00000bb8
 80022cc:	1ff8007e 	.word	0x1ff8007e
 80022d0:	0800f9a7 	.word	0x0800f9a7

080022d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80022d4:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */

  __HAL_RCC_DMA1_CLK_ENABLE();
 80022d6:	2101      	movs	r1, #1
 80022d8:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_DMA_Init+0x28>)

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80022da:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022de:	430a      	orrs	r2, r1
 80022e0:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80022e2:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	400b      	ands	r3, r1
 80022e8:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80022ea:	0011      	movs	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ec:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 80022ee:	f001 fcad 	bl	8003c4c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80022f2:	200b      	movs	r0, #11
 80022f4:	f001 fcd4 	bl	8003ca0 <HAL_NVIC_EnableIRQ>

}
 80022f8:	bd07      	pop	{r0, r1, r2, pc}
 80022fa:	46c0      	nop			; (mov r8, r8)
 80022fc:	40021000 	.word	0x40021000

08002300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002300:	b510      	push	{r4, lr}
 8002302:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002304:	222c      	movs	r2, #44	; 0x2c
 8002306:	2100      	movs	r1, #0
 8002308:	a807      	add	r0, sp, #28
 800230a:	f00c fa59 	bl	800e7c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800230e:	2214      	movs	r2, #20
 8002310:	2100      	movs	r1, #0
 8002312:	a801      	add	r0, sp, #4
 8002314:	f00c fa54 	bl	800e7c0 <memset>

  /* Enable HSE Oscillator and Activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType      = RCC_OSCILLATORTYPE_HSI;
 8002318:	2302      	movs	r3, #2
 800231a:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEState            = RCC_HSE_OFF;
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState        = RCC_PLL_ON;
 800231c:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource       = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL          = RCC_PLLMUL_6;
 800231e:	2380      	movs	r3, #128	; 0x80
 8002320:	031b      	lsls	r3, r3, #12
 8002322:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002324:	2380      	movs	r3, #128	; 0x80
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 8002326:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002328:	2410      	movs	r4, #16
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 800232a:	041b      	lsls	r3, r3, #16

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800232c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState            = RCC_HSI_ON;
 800232e:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002330:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLDIV          = RCC_PLLDIV_3;
 8002332:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002334:	f002 f870 	bl	8004418 <HAL_RCC_OscConfig>
 8002338:	2800      	cmp	r0, #0
 800233a:	d001      	beq.n	8002340 <SystemClock_Config+0x40>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800233c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800233e:	e7fe      	b.n	800233e <SystemClock_Config+0x3e>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	4a11      	ldr	r2, [pc, #68]	; (8002388 <SystemClock_Config+0x88>)
 8002344:	055b      	lsls	r3, r3, #21
 8002346:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8002348:	430b      	orrs	r3, r1
 800234a:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800234c:	4a0f      	ldr	r2, [pc, #60]	; (800238c <SystemClock_Config+0x8c>)
 800234e:	4b10      	ldr	r3, [pc, #64]	; (8002390 <SystemClock_Config+0x90>)
 8002350:	6811      	ldr	r1, [r2, #0]
 8002352:	4019      	ands	r1, r3
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	430b      	orrs	r3, r1
 800235a:	6013      	str	r3, [r2, #0]
  while (__HAL_PWR_GET_FLAG(PWR_FLAG_VOS) != RESET) {};
 800235c:	6851      	ldr	r1, [r2, #4]
 800235e:	000b      	movs	r3, r1
 8002360:	4023      	ands	r3, r4
 8002362:	4221      	tst	r1, r4
 8002364:	d1fa      	bne.n	800235c <SystemClock_Config+0x5c>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002366:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002368:	2101      	movs	r1, #1
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800236a:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800236c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800236e:	3a0c      	subs	r2, #12
 8002370:	9202      	str	r2, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002372:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002374:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002376:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002378:	f002 fad8 	bl	800492c <HAL_RCC_ClockConfig>
 800237c:	2800      	cmp	r0, #0
 800237e:	d001      	beq.n	8002384 <SystemClock_Config+0x84>
 8002380:	b672      	cpsid	i
  while (1)
 8002382:	e7fe      	b.n	8002382 <SystemClock_Config+0x82>
}
 8002384:	b014      	add	sp, #80	; 0x50
 8002386:	bd10      	pop	{r4, pc}
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	ffffe7ff 	.word	0xffffe7ff

08002394 <main>:
{
 8002394:	b510      	push	{r4, lr}
  HAL_Init();
 8002396:	f001 f8e5 	bl	8003564 <HAL_Init>
  SystemClock_Config();
 800239a:	f7ff ffb1 	bl	8002300 <SystemClock_Config>
  MX_LoRaWAN_Init();
 800239e:	f7ff fc37 	bl	8001c10 <MX_LoRaWAN_Init>
    MX_LoRaWAN_Process();
 80023a2:	f7ff fc3b 	bl	8001c1c <MX_LoRaWAN_Process>
  while (1)
 80023a6:	e7fc      	b.n	80023a2 <main+0xe>

080023a8 <Error_Handler>:
 80023a8:	b672      	cpsid	i
  while (1)
 80023aa:	e7fe      	b.n	80023aa <Error_Handler+0x2>

080023ac <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80023ac:	b530      	push	{r4, r5, lr}
  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
  RTC_DateTypeDef sDate = {0};
 80023ae:	2500      	movs	r5, #0
{
 80023b0:	b091      	sub	sp, #68	; 0x44
  RTC_TimeTypeDef sTime = {0};
 80023b2:	2214      	movs	r2, #20
 80023b4:	2100      	movs	r1, #0
 80023b6:	a801      	add	r0, sp, #4
 80023b8:	f00c fa02 	bl	800e7c0 <memset>
  RTC_AlarmTypeDef sAlarm = {0};
 80023bc:	2228      	movs	r2, #40	; 0x28
 80023be:	0029      	movs	r1, r5
 80023c0:	a806      	add	r0, sp, #24
  RTC_DateTypeDef sDate = {0};
 80023c2:	9500      	str	r5, [sp, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 80023c4:	f00c f9fc 	bl	800e7c0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80023c8:	4c24      	ldr	r4, [pc, #144]	; (800245c <MX_RTC_Init+0xb0>)
 80023ca:	4b25      	ldr	r3, [pc, #148]	; (8002460 <MX_RTC_Init+0xb4>)
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;

  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023cc:	0020      	movs	r0, r4
  hrtc.Instance = RTC;
 80023ce:	6023      	str	r3, [r4, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80023d0:	231f      	movs	r3, #31
 80023d2:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <MX_RTC_Init+0xb8>)
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80023d6:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = RTC_PREDIV_S;
 80023d8:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80023da:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80023dc:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80023de:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80023e0:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80023e2:	f002 fd35 	bl	8004e50 <HAL_RTC_Init>
 80023e6:	42a8      	cmp	r0, r5
 80023e8:	d001      	beq.n	80023ee <MX_RTC_Init+0x42>
  {
    Error_Handler();
 80023ea:	f7ff ffdd 	bl	80023a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80023ee:	466b      	mov	r3, sp
  sTime.Minutes = 0;
  sTime.Seconds = 0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80023f0:	2200      	movs	r2, #0
 80023f2:	0020      	movs	r0, r4
  sTime.Hours = 0;
 80023f4:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80023f6:	a901      	add	r1, sp, #4
  sTime.Seconds = 0;
 80023f8:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023fa:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80023fc:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80023fe:	f002 fd8f 	bl	8004f20 <HAL_RTC_SetTime>
 8002402:	2800      	cmp	r0, #0
 8002404:	d001      	beq.n	800240a <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8002406:	f7ff ffcf 	bl	80023a8 <Error_Handler>
  }

  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800240a:	4b17      	ldr	r3, [pc, #92]	; (8002468 <MX_RTC_Init+0xbc>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 1;
  sDate.Year = 0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 800240c:	2200      	movs	r2, #0
 800240e:	4669      	mov	r1, sp
 8002410:	0020      	movs	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002412:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002414:	f002 fe08 	bl	8005028 <HAL_RTC_SetDate>
 8002418:	2800      	cmp	r0, #0
 800241a:	d001      	beq.n	8002420 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 800241c:	f7ff ffc4 	bl	80023a8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0;
 8002420:	2200      	movs	r2, #0
 8002422:	466b      	mov	r3, sp
 8002424:	831a      	strh	r2, [r3, #24]
  sAlarm.AlarmTime.Minutes = 0;
  sAlarm.AlarmTime.Seconds = 0;
 8002426:	769a      	strb	r2, [r3, #26]
  sAlarm.AlarmTime.SubSeconds = 0;
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_SS14_10;
 8002428:	23a0      	movs	r3, #160	; 0xa0
 800242a:	051b      	lsls	r3, r3, #20
 800242c:	930c      	str	r3, [sp, #48]	; 0x30
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
  sAlarm.AlarmDateWeekDay = 30;
 800242e:	2319      	movs	r3, #25
 8002430:	211e      	movs	r1, #30
 8002432:	446b      	add	r3, sp
 8002434:	77d9      	strb	r1, [r3, #31]
  sAlarm.Alarm = RTC_ALARM_A;
 8002436:	2380      	movs	r3, #128	; 0x80
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 8002438:	0020      	movs	r0, r4
  sAlarm.Alarm = RTC_ALARM_A;
 800243a:	005b      	lsls	r3, r3, #1
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800243c:	a906      	add	r1, sp, #24
  sAlarm.AlarmTime.SubSeconds = 0;
 800243e:	9207      	str	r2, [sp, #28]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002440:	9209      	str	r2, [sp, #36]	; 0x24
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8002442:	920a      	str	r2, [sp, #40]	; 0x28
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8002444:	920b      	str	r2, [sp, #44]	; 0x2c
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8002446:	920d      	str	r2, [sp, #52]	; 0x34
  sAlarm.Alarm = RTC_ALARM_A;
 8002448:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK)
 800244a:	f002 fe5b 	bl	8005104 <HAL_RTC_SetAlarm_IT>
 800244e:	2800      	cmp	r0, #0
 8002450:	d001      	beq.n	8002456 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8002452:	f7ff ffa9 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002456:	b011      	add	sp, #68	; 0x44
 8002458:	bd30      	pop	{r4, r5, pc}
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	20000334 	.word	0x20000334
 8002460:	40002800 	.word	0x40002800
 8002464:	000003ff 	.word	0x000003ff
 8002468:	00010101 	.word	0x00010101

0800246c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef *rtcHandle)
{
 800246c:	b510      	push	{r4, lr}
 800246e:	0004      	movs	r4, r0
 8002470:	b08e      	sub	sp, #56	; 0x38

  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002472:	2238      	movs	r2, #56	; 0x38
 8002474:	2100      	movs	r1, #0
 8002476:	4668      	mov	r0, sp
 8002478:	f00c f9a2 	bl	800e7c0 <memset>
  if (rtcHandle->Instance == RTC)
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_RTC_MspInit+0x50>)
 800247e:	6822      	ldr	r2, [r4, #0]
 8002480:	429a      	cmp	r2, r3
 8002482:	d118      	bne.n	80024b6 <HAL_RTC_MspInit+0x4a>
    /* USER CODE BEGIN RTC_MspInit 0 */

    /* USER CODE END RTC_MspInit 0 */
    /** Initializes the peripherals clocks
      */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002484:	2304      	movs	r3, #4
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
    RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
    RCC_OscInitStruct.HSEState = RCC_HSE_OFF;
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002486:	4668      	mov	r0, sp
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE;
 8002488:	9300      	str	r3, [sp, #0]
    RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800248a:	33fc      	adds	r3, #252	; 0xfc
 800248c:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800248e:	f001 ffc3 	bl	8004418 <HAL_RCC_OscConfig>
 8002492:	2800      	cmp	r0, #0
 8002494:	d001      	beq.n	800249a <HAL_RTC_MspInit+0x2e>
    {
      Error_Handler();
 8002496:	f7ff ff87 	bl	80023a8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800249a:	2380      	movs	r3, #128	; 0x80
 800249c:	4a08      	ldr	r2, [pc, #32]	; (80024c0 <HAL_RTC_MspInit+0x54>)
 800249e:	02db      	lsls	r3, r3, #11
 80024a0:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80024a2:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 80024a4:	430b      	orrs	r3, r1
 80024a6:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80024a8:	2200      	movs	r2, #0
 80024aa:	0011      	movs	r1, r2
 80024ac:	f001 fbce 	bl	8003c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80024b0:	2002      	movs	r0, #2
 80024b2:	f001 fbf5 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN RTC_MspInit 1 */

    /* USER CODE END RTC_MspInit 1 */
  }
}
 80024b6:	b00e      	add	sp, #56	; 0x38
 80024b8:	bd10      	pop	{r4, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	40002800 	.word	0x40002800
 80024c0:	40021000 	.word	0x40021000

080024c4 <RTC_IF_GetTimerContext>:

uint32_t RTC_IF_GetTimerContext(void)
{
  RTC_IF_DBG_PRINTF("RTC_IF_GetTimerContext=%d\n\r", RtcTimerContext.Rtc_Time);
  /*return time context*/
  return (uint32_t) RtcTimerContext.Rtc_Time;
 80024c4:	4b01      	ldr	r3, [pc, #4]	; (80024cc <RTC_IF_GetTimerContext+0x8>)
 80024c6:	6818      	ldr	r0, [r3, #0]
}
 80024c8:	4770      	bx	lr
 80024ca:	46c0      	nop			; (mov r8, r8)
 80024cc:	20000358 	.word	0x20000358

080024d0 <RTC_IF_GetMinimumTimeout>:
}

uint32_t RTC_IF_GetMinimumTimeout(void)
{
  return (MIN_ALARM_DELAY);
}
 80024d0:	2003      	movs	r0, #3
 80024d2:	4770      	bx	lr

080024d4 <RTC_IF_Convert_ms2Tick>:

uint32_t RTC_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 80024d4:	b510      	push	{r4, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 80024d6:	0e41      	lsrs	r1, r0, #25
 80024d8:	227d      	movs	r2, #125	; 0x7d
 80024da:	2300      	movs	r3, #0
 80024dc:	01c0      	lsls	r0, r0, #7
 80024de:	f7fe f831 	bl	8000544 <__aeabi_uldivmod>
}
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <RTC_IF_Convert_Tick2ms>:

uint32_t RTC_IF_Convert_Tick2ms(uint32_t tick)
{
 80024e4:	b510      	push	{r4, lr}
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 80024e6:	227d      	movs	r2, #125	; 0x7d
 80024e8:	2300      	movs	r3, #0
 80024ea:	2100      	movs	r1, #0
 80024ec:	f7fe f84a 	bl	8000584 <__aeabi_lmul>
 80024f0:	0649      	lsls	r1, r1, #25
 80024f2:	09c0      	lsrs	r0, r0, #7
 80024f4:	4308      	orrs	r0, r1
}
 80024f6:	bd10      	pop	{r4, pc}

080024f8 <RTC_IF_StopTimer>:
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <RTC_IF_StopTimer+0x1c>)
 80024fa:	4b07      	ldr	r3, [pc, #28]	; (8002518 <RTC_IF_StopTimer+0x20>)
 80024fc:	6801      	ldr	r1, [r0, #0]
{
 80024fe:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8002500:	68ca      	ldr	r2, [r1, #12]
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	4313      	orrs	r3, r2
 8002506:	60cb      	str	r3, [r1, #12]
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8002508:	2180      	movs	r1, #128	; 0x80
 800250a:	0049      	lsls	r1, r1, #1
 800250c:	f002 fbd8 	bl	8004cc0 <HAL_RTC_DeactivateAlarm>
}
 8002510:	2000      	movs	r0, #0
 8002512:	bd10      	pop	{r4, pc}
 8002514:	20000334 	.word	0x20000334
 8002518:	fffffe7f 	.word	0xfffffe7f

0800251c <RTC_GetCalendarValue>:
  * @param pointer to RTC_DateStruct
  * @param pointer to RTC_TimeStruct
  * @retval time in ticks
  */
static uint32_t RTC_GetCalendarValue(RTC_DateTypeDef *RTC_DateStruct, RTC_TimeTypeDef *RTC_TimeStruct)
{
 800251c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t calendarValue = 0;
  uint32_t first_read;
  uint32_t correction;

  /* Get Time and Date*/
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800251e:	4e25      	ldr	r6, [pc, #148]	; (80025b4 <RTC_GetCalendarValue+0x98>)
{
 8002520:	0005      	movs	r5, r0
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002522:	2200      	movs	r2, #0
 8002524:	0030      	movs	r0, r6
{
 8002526:	000c      	movs	r4, r1
  HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 8002528:	f002 fece 	bl	80052c8 <HAL_RTC_GetTime>
  * @param  RTCx RTC Instance
  * @retval Sub second value (number between 0 and 65535)
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 800252c:	4f22      	ldr	r7, [pc, #136]	; (80025b8 <RTC_GetCalendarValue+0x9c>)

  /* make sure it is correct due to asynchronus nature of RTC*/
  do
  {
    first_read = LL_RTC_TIME_GetSubSecond(RTC);
    HAL_RTC_GetDate(&hrtc, RTC_DateStruct, RTC_FORMAT_BIN);
 800252e:	2200      	movs	r2, #0
 8002530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002532:	0029      	movs	r1, r5
 8002534:	0030      	movs	r0, r6
 8002536:	9301      	str	r3, [sp, #4]
 8002538:	f002 fef0 	bl	800531c <HAL_RTC_GetDate>
    HAL_RTC_GetTime(&hrtc, RTC_TimeStruct, RTC_FORMAT_BIN);
 800253c:	2200      	movs	r2, #0
 800253e:	0021      	movs	r1, r4
 8002540:	0030      	movs	r0, r6
 8002542:	f002 fec1 	bl	80052c8 <HAL_RTC_GetTime>
 8002546:	6abb      	ldr	r3, [r7, #40]	; 0x28

  } while (first_read != LL_RTC_TIME_GetSubSecond(RTC));
 8002548:	9a01      	ldr	r2, [sp, #4]
 800254a:	4053      	eors	r3, r2
 800254c:	b29b      	uxth	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1ec      	bne.n	800252c <RTC_GetCalendarValue+0x10>

  /* calculte amount of elapsed days since 01/01/2000 */
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);

  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002552:	2103      	movs	r1, #3
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002554:	78ea      	ldrb	r2, [r5, #3]
 8002556:	4819      	ldr	r0, [pc, #100]	; (80025bc <RTC_GetCalendarValue+0xa0>)

  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002558:	786e      	ldrb	r6, [r5, #1]
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800255a:	4350      	muls	r0, r2
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800255c:	400a      	ands	r2, r1
 800255e:	4253      	negs	r3, r2
 8002560:	415a      	adcs	r2, r3
 8002562:	4253      	negs	r3, r2
 8002564:	4a16      	ldr	r2, [pc, #88]	; (80025c0 <RTC_GetCalendarValue+0xa4>)
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002566:	3e01      	subs	r6, #1
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 8002568:	4013      	ands	r3, r2
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <RTC_GetCalendarValue+0xa8>)
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));

  calendarValue += (RTC_DateStruct->Date - 1);
 800256c:	78ad      	ldrb	r5, [r5, #2]
  correction = ((RTC_DateStruct->Year % 4) == 0) ? DAYS_IN_MONTH_CORRECTION_LEAP : DAYS_IN_MONTH_CORRECTION_NORM ;
 800256e:	189b      	adds	r3, r3, r2
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002570:	223d      	movs	r2, #61	; 0x3d
 8002572:	4372      	muls	r2, r6
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 8002574:	0076      	lsls	r6, r6, #1
 8002576:	40f3      	lsrs	r3, r6
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002578:	3201      	adds	r2, #1
 800257a:	0fd7      	lsrs	r7, r2, #31
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 800257c:	3003      	adds	r0, #3
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 800257e:	18ba      	adds	r2, r7, r2
 8002580:	3d01      	subs	r5, #1
  calendarValue = DIVC((DAYS_IN_YEAR * 3 + DAYS_IN_LEAP_YEAR) * RTC_DateStruct->Year, 4);
 8002582:	0880      	lsrs	r0, r0, #2
  calendarValue += (RTC_DateStruct->Date - 1);
 8002584:	1828      	adds	r0, r5, r0
  calendarValue += (DIVC((RTC_DateStruct->Month - 1) * (30 + 31),
 8002586:	1052      	asrs	r2, r2, #1
 8002588:	1812      	adds	r2, r2, r0
  /* convert from days to seconds */
  calendarValue *= SECONDS_IN_1DAY;

  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800258a:	20e1      	movs	r0, #225	; 0xe1
                         2) - (((correction >> ((RTC_DateStruct->Month - 1) * 2)) & 0x3)));
 800258c:	400b      	ands	r3, r1
  calendarValue += (RTC_DateStruct->Date - 1);
 800258e:	1ad3      	subs	r3, r2, r3
  calendarValue *= SECONDS_IN_1DAY;
 8002590:	4a0d      	ldr	r2, [pc, #52]	; (80025c8 <RTC_GetCalendarValue+0xac>)
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8002592:	0100      	lsls	r0, r0, #4
  calendarValue *= SECONDS_IN_1DAY;
 8002594:	4353      	muls	r3, r2
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 8002596:	7822      	ldrb	r2, [r4, #0]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 8002598:	7861      	ldrb	r1, [r4, #1]
                    ((uint32_t)RTC_TimeStruct->Hours * SECONDS_IN_1HOUR)) ;
 800259a:	4350      	muls	r0, r2
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 800259c:	223c      	movs	r2, #60	; 0x3c
 800259e:	434a      	muls	r2, r1
 80025a0:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80025a2:	78a2      	ldrb	r2, [r4, #2]
                    ((uint32_t)RTC_TimeStruct->Minutes * SECONDS_IN_1MINUTE) +
 80025a4:	1880      	adds	r0, r0, r2
  calendarValue += ((uint32_t)RTC_TimeStruct->Seconds +
 80025a6:	18c0      	adds	r0, r0, r3

  calendarValue = (calendarValue << RTC_N_PREDIV_S) + (RTC_PREDIV_S - RTC_TimeStruct->SubSeconds);
 80025a8:	6863      	ldr	r3, [r4, #4]
 80025aa:	0280      	lsls	r0, r0, #10
 80025ac:	1ac0      	subs	r0, r0, r3
 80025ae:	4b07      	ldr	r3, [pc, #28]	; (80025cc <RTC_GetCalendarValue+0xb0>)
 80025b0:	18c0      	adds	r0, r0, r3

  return (calendarValue);
}
 80025b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80025b4:	20000334 	.word	0x20000334
 80025b8:	40002800 	.word	0x40002800
 80025bc:	000005b5 	.word	0x000005b5
 80025c0:	ffaaaab0 	.word	0xffaaaab0
 80025c4:	0099aaa0 	.word	0x0099aaa0
 80025c8:	00015180 	.word	0x00015180
 80025cc:	000003ff 	.word	0x000003ff

080025d0 <RTC_IF_SetTimerContext>:
{
 80025d0:	b510      	push	{r4, lr}
  RtcTimerContext.Rtc_Time = RTC_GetCalendarValue(&RtcTimerContext.RTC_Calndr_Date, &RtcTimerContext.RTC_Calndr_Time);
 80025d2:	4c04      	ldr	r4, [pc, #16]	; (80025e4 <RTC_IF_SetTimerContext+0x14>)
 80025d4:	0020      	movs	r0, r4
 80025d6:	1d21      	adds	r1, r4, #4
 80025d8:	3018      	adds	r0, #24
 80025da:	f7ff ff9f 	bl	800251c <RTC_GetCalendarValue>
 80025de:	6020      	str	r0, [r4, #0]
}
 80025e0:	bd10      	pop	{r4, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	20000358 	.word	0x20000358

080025e8 <RTC_IF_GetTimerElapsedTime>:
{
 80025e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 80025ea:	4668      	mov	r0, sp
 80025ec:	a901      	add	r1, sp, #4
 80025ee:	f7ff ff95 	bl	800251c <RTC_GetCalendarValue>
  return ((uint32_t)(CalendarValue - RtcTimerContext.Rtc_Time));
 80025f2:	4b02      	ldr	r3, [pc, #8]	; (80025fc <RTC_IF_GetTimerElapsedTime+0x14>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	1ac0      	subs	r0, r0, r3
}
 80025f8:	b007      	add	sp, #28
 80025fa:	bd00      	pop	{pc}
 80025fc:	20000358 	.word	0x20000358

08002600 <RTC_IF_StartTimer>:
{
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	b087      	sub	sp, #28
 8002604:	0006      	movs	r6, r0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 8002606:	f7ff ffef 	bl	80025e8 <RTC_IF_GetTimerElapsedTime>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_ENABLE);
 800260a:	2100      	movs	r1, #0
  if ((MIN_ALARM_DELAY + McuWakeUpTimeCal) < ((timeout - RTC_IF_GetTimerElapsedTime())))
 800260c:	1a30      	subs	r0, r6, r0
 800260e:	2803      	cmp	r0, #3
 8002610:	d800      	bhi.n	8002614 <RTC_IF_StartTimer+0x14>
    UTIL_LPM_SetStopMode((1 << CFG_LPM_RTC_Id), UTIL_LPM_DISABLE);
 8002612:	2101      	movs	r1, #1
 8002614:	2002      	movs	r0, #2
 8002616:	f00b fb59 	bl	800dccc <UTIL_LPM_SetStopMode>
  if (UTIL_LPM_GetMode() == UTIL_LPM_STOPMODE)
 800261a:	f00b fb83 	bl	800dd24 <UTIL_LPM_GetMode>
  RTC_TimeTypeDef RTC_TimeStruct = RtcTimerContext.RTC_Calndr_Time;
 800261e:	4c40      	ldr	r4, [pc, #256]	; (8002720 <RTC_IF_StartTimer+0x120>)
 8002620:	7923      	ldrb	r3, [r4, #4]
 8002622:	68a7      	ldr	r7, [r4, #8]
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	7963      	ldrb	r3, [r4, #5]
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	79a3      	ldrb	r3, [r4, #6]
 800262c:	9302      	str	r3, [sp, #8]
 800262e:	79e3      	ldrb	r3, [r4, #7]
 8002630:	9303      	str	r3, [sp, #12]
  RTC_DateTypeDef RTC_DateStruct = RtcTimerContext.RTC_Calndr_Date;
 8002632:	7e63      	ldrb	r3, [r4, #25]
 8002634:	9304      	str	r3, [sp, #16]
 8002636:	7ee3      	ldrb	r3, [r4, #27]
 8002638:	7ea5      	ldrb	r5, [r4, #26]
 800263a:	9305      	str	r3, [sp, #20]
  RTC_IF_StopTimer();
 800263c:	f7ff ff5c 	bl	80024f8 <RTC_IF_StopTimer>
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002640:	4b38      	ldr	r3, [pc, #224]	; (8002724 <RTC_IF_StartTimer+0x124>)
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002642:	4939      	ldr	r1, [pc, #228]	; (8002728 <RTC_IF_StartTimer+0x128>)
  rtcAlarmSubSeconds =  RTC_PREDIV_S - RTC_TimeStruct.SubSeconds;
 8002644:	1bdf      	subs	r7, r3, r7
  rtcAlarmSubSeconds += (timeoutValue & RTC_PREDIV_S);
 8002646:	05b3      	lsls	r3, r6, #22
 8002648:	0d9b      	lsrs	r3, r3, #22
 800264a:	18ff      	adds	r7, r7, r3
 800264c:	b2ba      	uxth	r2, r7
  timeoutValue >>= RTC_N_PREDIV_S;  /* convert timeout  in seconds */
 800264e:	0ab3      	lsrs	r3, r6, #10
  rtcAlarmDays =  RTC_DateStruct.Date;
 8002650:	b2a8      	uxth	r0, r5
  while (timeoutValue >= SECONDS_IN_1DAY)
 8002652:	428b      	cmp	r3, r1
 8002654:	d844      	bhi.n	80026e0 <RTC_IF_StartTimer+0xe0>
  rtcAlarmHours = RTC_TimeStruct.Hours;
 8002656:	4669      	mov	r1, sp
 8002658:	880e      	ldrh	r6, [r1, #0]
  while (timeoutValue >= SECONDS_IN_1HOUR)
 800265a:	21e1      	movs	r1, #225	; 0xe1
 800265c:	0109      	lsls	r1, r1, #4
 800265e:	428b      	cmp	r3, r1
 8002660:	d243      	bcs.n	80026ea <RTC_IF_StartTimer+0xea>
  rtcAlarmMinutes = RTC_TimeStruct.Minutes;
 8002662:	4669      	mov	r1, sp
 8002664:	888f      	ldrh	r7, [r1, #4]
  while (timeoutValue >= SECONDS_IN_1MINUTE)
 8002666:	2b3b      	cmp	r3, #59	; 0x3b
 8002668:	d844      	bhi.n	80026f4 <RTC_IF_StartTimer+0xf4>
  while (rtcAlarmSubSeconds >= (RTC_PREDIV_S + 1))
 800266a:	0a95      	lsrs	r5, r2, #10
 800266c:	02a9      	lsls	r1, r5, #10
 800266e:	1a52      	subs	r2, r2, r1
 8002670:	b292      	uxth	r2, r2
 8002672:	9200      	str	r2, [sp, #0]
 8002674:	9a02      	ldr	r2, [sp, #8]
 8002676:	18ad      	adds	r5, r5, r2
 8002678:	18ed      	adds	r5, r5, r3
 800267a:	b2ad      	uxth	r5, r5
  while (rtcAlarmSeconds >= SECONDS_IN_1MINUTE)
 800267c:	2d3b      	cmp	r5, #59	; 0x3b
 800267e:	d83d      	bhi.n	80026fc <RTC_IF_StartTimer+0xfc>
  while (rtcAlarmMinutes >= MINUTES_IN_1HOUR)
 8002680:	2f3b      	cmp	r7, #59	; 0x3b
 8002682:	d840      	bhi.n	8002706 <RTC_IF_StartTimer+0x106>
  while (rtcAlarmHours >= HOURS_IN_1DAY)
 8002684:	2e17      	cmp	r6, #23
 8002686:	d843      	bhi.n	8002710 <RTC_IF_StartTimer+0x110>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002688:	9a04      	ldr	r2, [sp, #16]
  if (RTC_DateStruct.Year % 4 == 0)
 800268a:	9905      	ldr	r1, [sp, #20]
 800268c:	4b27      	ldr	r3, [pc, #156]	; (800272c <RTC_IF_StartTimer+0x12c>)
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 800268e:	3a01      	subs	r2, #1
  if (RTC_DateStruct.Year % 4 == 0)
 8002690:	0789      	lsls	r1, r1, #30
 8002692:	d142      	bne.n	800271a <RTC_IF_StartTimer+0x11a>
    if (rtcAlarmDays > DaysInMonthLeapYear[ RTC_DateStruct.Month - 1 ])
 8002694:	5c99      	ldrb	r1, [r3, r2]
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 8002696:	4288      	cmp	r0, r1
 8002698:	d902      	bls.n	80026a0 <RTC_IF_StartTimer+0xa0>
      rtcAlarmDays = rtcAlarmDays % DaysInMonth[ RTC_DateStruct.Month - 1 ];
 800269a:	f7fd fed5 	bl	8000448 <__aeabi_idivmod>
 800269e:	b288      	uxth	r0, r1
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80026a0:	9a00      	ldr	r2, [sp, #0]
 80026a2:	4b20      	ldr	r3, [pc, #128]	; (8002724 <RTC_IF_StartTimer+0x124>)
  RTC_AlarmStructure.AlarmTime.Seconds = rtcAlarmSeconds;
 80026a4:	77a5      	strb	r5, [r4, #30]
  RTC_AlarmStructure.AlarmTime.SubSeconds = RTC_PREDIV_S - rtcAlarmSubSeconds;
 80026a6:	1a9b      	subs	r3, r3, r2
 80026a8:	6223      	str	r3, [r4, #32]
  RTC_AlarmStructure.AlarmSubSecondMask  = RTC_ALARMSUBSECONDMASK;
 80026aa:	23a0      	movs	r3, #160	; 0xa0
 80026ac:	051b      	lsls	r3, r3, #20
 80026ae:	6363      	str	r3, [r4, #52]	; 0x34
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80026b0:	0023      	movs	r3, r4
 80026b2:	333c      	adds	r3, #60	; 0x3c
 80026b4:	7018      	strb	r0, [r3, #0]
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80026b6:	9b03      	ldr	r3, [sp, #12]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80026b8:	2500      	movs	r5, #0
  RTC_AlarmStructure.AlarmTime.TimeFormat   = RTC_TimeStruct.TimeFormat;
 80026ba:	77e3      	strb	r3, [r4, #31]
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80026bc:	0021      	movs	r1, r4
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80026be:	2380      	movs	r3, #128	; 0x80
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80026c0:	002a      	movs	r2, r5
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80026c2:	005b      	lsls	r3, r3, #1
  RTC_AlarmStructure.AlarmDateWeekDay    = (uint8_t)rtcAlarmDays;
 80026c4:	311c      	adds	r1, #28
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80026c6:	481a      	ldr	r0, [pc, #104]	; (8002730 <RTC_IF_StartTimer+0x130>)
  RTC_AlarmStructure.AlarmTime.Minutes = rtcAlarmMinutes;
 80026c8:	7767      	strb	r7, [r4, #29]
  RTC_AlarmStructure.AlarmTime.Hours   = rtcAlarmHours;
 80026ca:	7726      	strb	r6, [r4, #28]
  RTC_AlarmStructure.AlarmDateWeekDaySel   = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80026cc:	63a5      	str	r5, [r4, #56]	; 0x38
  RTC_AlarmStructure.AlarmMask       = RTC_ALARMMASK_NONE;
 80026ce:	6325      	str	r5, [r4, #48]	; 0x30
  RTC_AlarmStructure.Alarm = RTC_ALARM_A;
 80026d0:	6423      	str	r3, [r4, #64]	; 0x40
  RTC_AlarmStructure.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80026d2:	62a5      	str	r5, [r4, #40]	; 0x28
  RTC_AlarmStructure.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80026d4:	62e5      	str	r5, [r4, #44]	; 0x2c
  HAL_RTC_SetAlarm_IT(&hrtc, &RTC_AlarmStructure, RTC_FORMAT_BIN);
 80026d6:	f002 fd15 	bl	8005104 <HAL_RTC_SetAlarm_IT>
}
 80026da:	0028      	movs	r0, r5
 80026dc:	b007      	add	sp, #28
 80026de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    timeoutValue -= SECONDS_IN_1DAY;
 80026e0:	4d14      	ldr	r5, [pc, #80]	; (8002734 <RTC_IF_StartTimer+0x134>)
    rtcAlarmDays++;
 80026e2:	3001      	adds	r0, #1
    timeoutValue -= SECONDS_IN_1DAY;
 80026e4:	195b      	adds	r3, r3, r5
    rtcAlarmDays++;
 80026e6:	b280      	uxth	r0, r0
 80026e8:	e7b3      	b.n	8002652 <RTC_IF_StartTimer+0x52>
    timeoutValue -= SECONDS_IN_1HOUR;
 80026ea:	4d13      	ldr	r5, [pc, #76]	; (8002738 <RTC_IF_StartTimer+0x138>)
    rtcAlarmHours++;
 80026ec:	3601      	adds	r6, #1
    timeoutValue -= SECONDS_IN_1HOUR;
 80026ee:	195b      	adds	r3, r3, r5
    rtcAlarmHours++;
 80026f0:	b2b6      	uxth	r6, r6
 80026f2:	e7b4      	b.n	800265e <RTC_IF_StartTimer+0x5e>
    rtcAlarmMinutes++;
 80026f4:	3701      	adds	r7, #1
    timeoutValue -= SECONDS_IN_1MINUTE;
 80026f6:	3b3c      	subs	r3, #60	; 0x3c
    rtcAlarmMinutes++;
 80026f8:	b2bf      	uxth	r7, r7
 80026fa:	e7b4      	b.n	8002666 <RTC_IF_StartTimer+0x66>
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 80026fc:	3d3c      	subs	r5, #60	; 0x3c
    rtcAlarmMinutes++;
 80026fe:	3701      	adds	r7, #1
    rtcAlarmSeconds -= SECONDS_IN_1MINUTE;
 8002700:	b2ad      	uxth	r5, r5
    rtcAlarmMinutes++;
 8002702:	b2bf      	uxth	r7, r7
 8002704:	e7ba      	b.n	800267c <RTC_IF_StartTimer+0x7c>
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 8002706:	3f3c      	subs	r7, #60	; 0x3c
    rtcAlarmHours++;
 8002708:	3601      	adds	r6, #1
    rtcAlarmMinutes -= MINUTES_IN_1HOUR;
 800270a:	b2bf      	uxth	r7, r7
    rtcAlarmHours++;
 800270c:	b2b6      	uxth	r6, r6
 800270e:	e7b7      	b.n	8002680 <RTC_IF_StartTimer+0x80>
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002710:	3e18      	subs	r6, #24
    rtcAlarmDays++;
 8002712:	3001      	adds	r0, #1
    rtcAlarmHours -= HOURS_IN_1DAY;
 8002714:	b2b6      	uxth	r6, r6
    rtcAlarmDays++;
 8002716:	b280      	uxth	r0, r0
 8002718:	e7b4      	b.n	8002684 <RTC_IF_StartTimer+0x84>
    if (rtcAlarmDays > DaysInMonth[ RTC_DateStruct.Month - 1 ])
 800271a:	189b      	adds	r3, r3, r2
 800271c:	7b19      	ldrb	r1, [r3, #12]
 800271e:	e7ba      	b.n	8002696 <RTC_IF_StartTimer+0x96>
 8002720:	20000358 	.word	0x20000358
 8002724:	000003ff 	.word	0x000003ff
 8002728:	0001517f 	.word	0x0001517f
 800272c:	0800f0ac 	.word	0x0800f0ac
 8002730:	20000334 	.word	0x20000334
 8002734:	fffeae80 	.word	0xfffeae80
 8002738:	fffff1f0 	.word	0xfffff1f0

0800273c <RTC_IF_GetTime>:
{
 800273c:	b530      	push	{r4, r5, lr}
 800273e:	b087      	sub	sp, #28
 8002740:	0005      	movs	r5, r0
  uint64_t calendarValue = RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 8002742:	a901      	add	r1, sp, #4
 8002744:	4668      	mov	r0, sp
 8002746:	f7ff fee9 	bl	800251c <RTC_GetCalendarValue>
 800274a:	0004      	movs	r4, r0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 800274c:	0580      	lsls	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 800274e:	227d      	movs	r2, #125	; 0x7d
 8002750:	2300      	movs	r3, #0
 8002752:	2100      	movs	r1, #0
  ticks = (uint32_t) calendarValue & RTC_PREDIV_S;
 8002754:	0d80      	lsrs	r0, r0, #22
  return (((uint64_t)(tick) * CONV_NUMER) / CONV_DENOM);
 8002756:	f7fd ff15 	bl	8000584 <__aeabi_lmul>
 800275a:	09c0      	lsrs	r0, r0, #7
  *mSeconds = RTC_IF_Convert_Tick2ms(ticks);
 800275c:	8028      	strh	r0, [r5, #0]
  uint32_t seconds = (uint32_t)(calendarValue >> RTC_N_PREDIV_S);
 800275e:	0aa0      	lsrs	r0, r4, #10
}
 8002760:	b007      	add	sp, #28
 8002762:	bd30      	pop	{r4, r5, pc}

08002764 <RTC_IF_BkUp_Write_Seconds>:
{
 8002764:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002766:	4b03      	ldr	r3, [pc, #12]	; (8002774 <RTC_IF_BkUp_Write_Seconds+0x10>)
{
 8002768:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 800276a:	2100      	movs	r1, #0
 800276c:	0018      	movs	r0, r3
 800276e:	f002 fdf7 	bl	8005360 <HAL_RTCEx_BKUPWrite>
}
 8002772:	bd10      	pop	{r4, pc}
 8002774:	20000334 	.word	0x20000334

08002778 <RTC_IF_BkUp_Write_SubSeconds>:
{
 8002778:	b510      	push	{r4, lr}
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800277a:	4b03      	ldr	r3, [pc, #12]	; (8002788 <RTC_IF_BkUp_Write_SubSeconds+0x10>)
{
 800277c:	0002      	movs	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800277e:	2101      	movs	r1, #1
 8002780:	0018      	movs	r0, r3
 8002782:	f002 fded 	bl	8005360 <HAL_RTCEx_BKUPWrite>
}
 8002786:	bd10      	pop	{r4, pc}
 8002788:	20000334 	.word	0x20000334

0800278c <RTC_IF_BkUp_Read_Seconds>:
{
 800278c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800278e:	2100      	movs	r1, #0
 8002790:	4801      	ldr	r0, [pc, #4]	; (8002798 <RTC_IF_BkUp_Read_Seconds+0xc>)
 8002792:	f002 fdeb 	bl	800536c <HAL_RTCEx_BKUPRead>
}
 8002796:	bd10      	pop	{r4, pc}
 8002798:	20000334 	.word	0x20000334

0800279c <RTC_IF_BkUp_Read_SubSeconds>:
{
 800279c:	b510      	push	{r4, lr}
  return HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800279e:	2101      	movs	r1, #1
 80027a0:	4801      	ldr	r0, [pc, #4]	; (80027a8 <RTC_IF_BkUp_Read_SubSeconds+0xc>)
 80027a2:	f002 fde3 	bl	800536c <HAL_RTCEx_BKUPRead>
}
 80027a6:	bd10      	pop	{r4, pc}
 80027a8:	20000334 	.word	0x20000334

080027ac <RTC_IF_Init>:
{
 80027ac:	b530      	push	{r4, r5, lr}
  if (RTC_Initalized == false)
 80027ae:	4c11      	ldr	r4, [pc, #68]	; (80027f4 <RTC_IF_Init+0x48>)
{
 80027b0:	b08b      	sub	sp, #44	; 0x2c
  if (RTC_Initalized == false)
 80027b2:	3444      	adds	r4, #68	; 0x44
 80027b4:	7823      	ldrb	r3, [r4, #0]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d119      	bne.n	80027ee <RTC_IF_Init+0x42>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027ba:	3320      	adds	r3, #32
 80027bc:	9301      	str	r3, [sp, #4]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027be:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c0:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80027c2:	025b      	lsls	r3, r3, #9
 80027c4:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027c6:	f002 f99f 	bl	8004b08 <HAL_RCCEx_PeriphCLKConfig>
 80027ca:	2800      	cmp	r0, #0
 80027cc:	d000      	beq.n	80027d0 <RTC_IF_Init+0x24>
      while (1);
 80027ce:	e7fe      	b.n	80027ce <RTC_IF_Init+0x22>
    MX_RTC_Init();
 80027d0:	f7ff fdec 	bl	80023ac <MX_RTC_Init>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80027d4:	2180      	movs	r1, #128	; 0x80
 80027d6:	4d08      	ldr	r5, [pc, #32]	; (80027f8 <RTC_IF_Init+0x4c>)
 80027d8:	0049      	lsls	r1, r1, #1
 80027da:	0028      	movs	r0, r5
 80027dc:	f002 fa70 	bl	8004cc0 <HAL_RTC_DeactivateAlarm>
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80027e0:	0028      	movs	r0, r5
 80027e2:	f002 fdc9 	bl	8005378 <HAL_RTCEx_EnableBypassShadow>
    RTC_IF_SetTimerContext();
 80027e6:	f7ff fef3 	bl	80025d0 <RTC_IF_SetTimerContext>
    RTC_Initalized = true;
 80027ea:	2301      	movs	r3, #1
 80027ec:	7023      	strb	r3, [r4, #0]
}
 80027ee:	2000      	movs	r0, #0
 80027f0:	b00b      	add	sp, #44	; 0x2c
 80027f2:	bd30      	pop	{r4, r5, pc}
 80027f4:	20000358 	.word	0x20000358
 80027f8:	20000334 	.word	0x20000334

080027fc <RTC_IF_GetTimerValue>:
{
 80027fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint32_t CalendarValue = 0;
 80027fe:	2000      	movs	r0, #0
  if (RTC_Initalized == true)
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <RTC_IF_GetTimerValue+0x1c>)
 8002802:	3344      	adds	r3, #68	; 0x44
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	4283      	cmp	r3, r0
 8002808:	d003      	beq.n	8002812 <RTC_IF_GetTimerValue+0x16>
    CalendarValue = (uint32_t) RTC_GetCalendarValue(&RTC_DateStruct, &RTC_TimeStruct);
 800280a:	4668      	mov	r0, sp
 800280c:	a901      	add	r1, sp, #4
 800280e:	f7ff fe85 	bl	800251c <RTC_GetCalendarValue>
}
 8002812:	b007      	add	sp, #28
 8002814:	bd00      	pop	{pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	20000358 	.word	0x20000358

0800281c <RTC_IF_DelayMs>:
{
 800281c:	b570      	push	{r4, r5, r6, lr}
  return (uint32_t)((((uint64_t)timeMilliSec) * CONV_DENOM) / CONV_NUMER);
 800281e:	227d      	movs	r2, #125	; 0x7d
 8002820:	2300      	movs	r3, #0
 8002822:	0e41      	lsrs	r1, r0, #25
 8002824:	01c0      	lsls	r0, r0, #7
 8002826:	f7fd fe8d 	bl	8000544 <__aeabi_uldivmod>
 800282a:	0004      	movs	r4, r0
  timeout = RTC_IF_GetTimerValue();
 800282c:	f7ff ffe6 	bl	80027fc <RTC_IF_GetTimerValue>
 8002830:	0005      	movs	r5, r0
  while (((RTC_IF_GetTimerValue() - timeout)) < delayValue)
 8002832:	f7ff ffe3 	bl	80027fc <RTC_IF_GetTimerValue>
 8002836:	1b40      	subs	r0, r0, r5
 8002838:	42a0      	cmp	r0, r4
 800283a:	d300      	bcc.n	800283e <RTC_IF_DelayMs+0x22>
}
 800283c:	bd70      	pop	{r4, r5, r6, pc}
    __NOP();
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	e7f7      	b.n	8002832 <RTC_IF_DelayMs+0x16>

08002842 <HAL_RTC_AlarmAEventCallback>:
{
 8002842:	b510      	push	{r4, lr}
  UTIL_TIMER_IRQ_Handler();
 8002844:	f00b fd44 	bl	800e2d0 <UTIL_TIMER_IRQ_Handler>
}
 8002848:	bd10      	pop	{r4, pc}

0800284a <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800284a:	4770      	bx	lr

0800284c <PWR_EnterStopMode>:

  /* USER CODE END ExitOffMode_1 */
}

void PWR_EnterStopMode(void)
{
 800284c:	b510      	push	{r4, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800284e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002852:	b672      	cpsid	i
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  UTILS_ENTER_CRITICAL_SECTION();

  Sx_Board_IoDeInit();
 8002854:	f000 fd5a 	bl	800330c <CMWX1ZZABZ0XX_RADIO_IoDeInit>

  HAL_ADC_MspDeInit(&hadc);
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <PWR_EnterStopMode+0x2c>)
 800285a:	f7ff fc81 	bl	8002160 <HAL_ADC_MspDeInit>

  /*clear wake up flag*/
  SET_BIT(PWR->CR, PWR_CR_CWUF);
 800285e:	2304      	movs	r3, #4
 8002860:	4a06      	ldr	r2, [pc, #24]	; (800287c <PWR_EnterStopMode+0x30>)
 8002862:	6811      	ldr	r1, [r2, #0]
 8002864:	430b      	orrs	r3, r1
 8002866:	6013      	str	r3, [r2, #0]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002868:	f384 8810 	msr	PRIMASK, r4
  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  /* Enter Stop Mode */
  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 800286c:	2101      	movs	r1, #1
 800286e:	0008      	movs	r0, r1
 8002870:	f001 fd3a 	bl	80042e8 <HAL_PWR_EnterSTOPMode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8002874:	bd10      	pop	{r4, pc}
 8002876:	46c0      	nop			; (mov r8, r8)
 8002878:	200002d8 	.word	0x200002d8
 800287c:	40007000 	.word	0x40007000

08002880 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8002880:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002882:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8002886:	b672      	cpsid	i

  UTILS_ENTER_CRITICAL_SECTION();

  /* After wake-up from STOP reconfigure the system clock */
  /* Enable HSI */
  __HAL_RCC_HSI_ENABLE();
 8002888:	2201      	movs	r2, #1
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <PWR_ExitStopMode+0x4c>)
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {}
 8002892:	2204      	movs	r2, #4
 8002894:	6819      	ldr	r1, [r3, #0]
 8002896:	4211      	tst	r1, r2
 8002898:	d0fc      	beq.n	8002894 <PWR_ExitStopMode+0x14>

  /* Enable PLL */
  __HAL_RCC_PLL_ENABLE();
 800289a:	2280      	movs	r2, #128	; 0x80
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	0452      	lsls	r2, r2, #17
 80028a0:	430a      	orrs	r2, r1
 80028a2:	601a      	str	r2, [r3, #0]
  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {}
 80028a4:	2280      	movs	r2, #128	; 0x80
 80028a6:	0492      	lsls	r2, r2, #18
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	4211      	tst	r1, r2
 80028ac:	d0fc      	beq.n	80028a8 <PWR_ExitStopMode+0x28>

  /* Select PLL as system clock source */
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80028ae:	2203      	movs	r2, #3
 80028b0:	68d9      	ldr	r1, [r3, #12]
 80028b2:	430a      	orrs	r2, r1

  /* Wait till PLL is used as system clock source */
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80028b4:	210c      	movs	r1, #12
  __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);
 80028b6:	60da      	str	r2, [r3, #12]
  while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {}
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	400a      	ands	r2, r1
 80028bc:	2a0c      	cmp	r2, #12
 80028be:	d1fb      	bne.n	80028b8 <PWR_ExitStopMode+0x38>

  /* initializes the peripherals */
  Sx_Board_IoInit();
 80028c0:	f000 fc4a 	bl	8003158 <CMWX1ZZABZ0XX_RADIO_IoInit>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c4:	f384 8810 	msr	PRIMASK, r4

  UTILS_EXIT_CRITICAL_SECTION();
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 80028c8:	bd10      	pop	{r4, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	40021000 	.word	0x40021000

080028d0 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 80028d0:	b510      	push	{r4, lr}

  /* USER CODE END EnterSleepMode_1 */
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80028d2:	2101      	movs	r1, #1
 80028d4:	2000      	movs	r0, #0
 80028d6:	f001 fccf 	bl	8004278 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 80028da:	bd10      	pop	{r4, pc}

080028dc <PWR_ExitSleepMode>:
 80028dc:	4770      	bx	lr

080028de <PWR_ExitOffMode>:
 80028de:	4770      	bx	lr

080028e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80028e0:	2380      	movs	r3, #128	; 0x80
 80028e2:	4a09      	ldr	r2, [pc, #36]	; (8002908 <HAL_MspInit+0x28>)
 80028e4:	055b      	lsls	r3, r3, #21
 80028e6:	6b91      	ldr	r1, [r2, #56]	; 0x38
{
 80028e8:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80028ea:	430b      	orrs	r3, r1
 80028ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* Disable the Power Voltage Detector */
  HAL_PWR_DisablePVD();
 80028ee:	f001 fcbb 	bl	8004268 <HAL_PWR_DisablePVD>

  /* Enables the Ultra Low Power mode */
  HAL_PWREx_EnableUltraLowPower();
 80028f2:	f001 fd3f 	bl	8004374 <HAL_PWREx_EnableUltraLowPower>

  __HAL_FLASH_SLEEP_POWERDOWN_ENABLE();
 80028f6:	2308      	movs	r3, #8
 80028f8:	4a04      	ldr	r2, [pc, #16]	; (800290c <HAL_MspInit+0x2c>)
 80028fa:	6811      	ldr	r1, [r2, #0]
 80028fc:	430b      	orrs	r3, r1
 80028fe:	6013      	str	r3, [r2, #0]
   */
  DBG(__HAL_FLASH_SLEEP_POWERDOWN_DISABLE(););

#ifdef ENABLE_FAST_WAKEUP
  /*Enable fast wakeUp*/
  HAL_PWREx_EnableFastWakeUp();
 8002900:	f001 fd2e 	bl	8004360 <HAL_PWREx_EnableFastWakeUp>
#endif

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002904:	bd10      	pop	{r4, pc}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	40021000 	.word	0x40021000
 800290c:	40022000 	.word	0x40022000

08002910 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002910:	e7fe      	b.n	8002910 <NMI_Handler>

08002912 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002912:	e7fe      	b.n	8002912 <HardFault_Handler>

08002914 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002914:	4770      	bx	lr

08002916 <PendSV_Handler>:
 8002916:	4770      	bx	lr

08002918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002918:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800291a:	f000 fe37 	bl	800358c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800291e:	bd10      	pop	{r4, pc}

08002920 <EXTI0_1_IRQHandler>:
/*void PPP_IRQHandler(void)
{
}*/

void EXTI0_1_IRQHandler(void)
{
 8002920:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_0);
 8002922:	4803      	ldr	r0, [pc, #12]	; (8002930 <EXTI0_1_IRQHandler+0x10>)
 8002924:	f001 fb2a 	bl	8003f7c <HAL_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_1);
 8002928:	4802      	ldr	r0, [pc, #8]	; (8002934 <EXTI0_1_IRQHandler+0x14>)
 800292a:	f001 fb27 	bl	8003f7c <HAL_EXTI_IRQHandler>
#endif
}
 800292e:	bd10      	pop	{r4, pc}
 8002930:	20000538 	.word	0x20000538
 8002934:	20000530 	.word	0x20000530

08002938 <EXTI2_3_IRQHandler>:

void EXTI2_3_IRQHandler(void)
{
 8002938:	b510      	push	{r4, lr}
#if (defined(CMWX1ZZABZ0XX))
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800293a:	2004      	movs	r0, #4
 800293c:	f001 fc88 	bl	8004250 <HAL_GPIO_EXTI_IRQHandler>
#endif
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_3);
#endif
}
 8002940:	bd10      	pop	{r4, pc}
	...

08002944 <EXTI4_15_IRQHandler>:

void EXTI4_15_IRQHandler(void)
{
 8002944:	b510      	push	{r4, lr}
  HAL_EXTI_IRQHandler(&H_EXTI_4);
 8002946:	4803      	ldr	r0, [pc, #12]	; (8002954 <EXTI4_15_IRQHandler+0x10>)
 8002948:	f001 fb18 	bl	8003f7c <HAL_EXTI_IRQHandler>
#if (defined(SX1276MB1MAS) | defined(SX1276MB1LAS) | defined(SX1272MB2DAS))
  HAL_EXTI_IRQHandler(&H_EXTI_10);
#endif

#if (defined(CMWX1ZZABZ0XX))
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <EXTI4_15_IRQHandler+0x14>)
 800294e:	f001 fb15 	bl	8003f7c <HAL_EXTI_IRQHandler>
#else
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
#endif
}
 8002952:	bd10      	pop	{r4, pc}
 8002954:	20000528 	.word	0x20000528
 8002958:	20000540 	.word	0x20000540

0800295c <DMA1_Channel4_5_6_7_IRQHandler>:

void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800295c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800295e:	4802      	ldr	r0, [pc, #8]	; (8002968 <DMA1_Channel4_5_6_7_IRQHandler+0xc>)
 8002960:	f001 fab3 	bl	8003eca <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8002964:	bd10      	pop	{r4, pc}
 8002966:	46c0      	nop			; (mov r8, r8)
 8002968:	200003a0 	.word	0x200003a0

0800296c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 800296c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800296e:	4802      	ldr	r0, [pc, #8]	; (8002978 <USART2_IRQHandler+0xc>)
 8002970:	f003 f836 	bl	80059e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002974:	bd10      	pop	{r4, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	200003e8 	.word	0x200003e8

0800297c <RTC_IRQHandler>:

void RTC_IRQHandler(void)
{
 800297c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800297e:	4802      	ldr	r0, [pc, #8]	; (8002988 <RTC_IRQHandler+0xc>)
 8002980:	f002 fa00 	bl	8004d84 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002984:	bd10      	pop	{r4, pc}
 8002986:	46c0      	nop			; (mov r8, r8)
 8002988:	20000334 	.word	0x20000334

0800298c <tiny_snprintf_like.constprop.0>:
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
 800298c:	b40c      	push	{r2, r3}
 800298e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002990:	2110      	movs	r1, #16
  va_start(vaArgs, strFormat);
 8002992:	ab05      	add	r3, sp, #20
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002994:	4a03      	ldr	r2, [pc, #12]	; (80029a4 <tiny_snprintf_like.constprop.0+0x18>)
  va_start(vaArgs, strFormat);
 8002996:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8002998:	f00b fcdc 	bl	800e354 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 800299c:	b003      	add	sp, #12
 800299e:	bc08      	pop	{r3}
 80029a0:	b002      	add	sp, #8
 80029a2:	4718      	bx	r3
 80029a4:	0800f9b2 	.word	0x0800f9b2

080029a8 <TimestampNow>:
{
 80029a8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80029aa:	0004      	movs	r4, r0
  SysTime_t curtime = SysTimeGet();
 80029ac:	ae02      	add	r6, sp, #8
 80029ae:	0030      	movs	r0, r6
{
 80029b0:	000d      	movs	r5, r1
  SysTime_t curtime = SysTimeGet();
 80029b2:	f00b faf1 	bl	800df98 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80029b6:	2104      	movs	r1, #4
 80029b8:	5e73      	ldrsh	r3, [r6, r1]
 80029ba:	0020      	movs	r0, r4
 80029bc:	2110      	movs	r1, #16
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <TimestampNow+0x2c>)
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	9b02      	ldr	r3, [sp, #8]
 80029c4:	f7ff ffe2 	bl	800298c <tiny_snprintf_like.constprop.0>
  *size = strlen((char *)buff);
 80029c8:	0020      	movs	r0, r4
 80029ca:	f7fd fb9d 	bl	8000108 <strlen>
 80029ce:	8028      	strh	r0, [r5, #0]
}
 80029d0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	0800f9b2 	.word	0x0800f9b2

080029d8 <SystemApp_Init>:
{
 80029d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029da:	2501      	movs	r5, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80029dc:	2602      	movs	r6, #2
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80029de:	2704      	movs	r7, #4
{
 80029e0:	b08b      	sub	sp, #44	; 0x2c
  UTIL_TIMER_Init();
 80029e2:	f00b fb5d 	bl	800e0a0 <UTIL_TIMER_Init>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029e6:	220c      	movs	r2, #12
 80029e8:	2100      	movs	r1, #0
 80029ea:	a807      	add	r0, sp, #28
 80029ec:	f00b fee8 	bl	800e7c0 <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80029f0:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4c2e      	ldr	r4, [pc, #184]	; (8002aac <SystemApp_Init+0xd4>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	20a0      	movs	r0, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	a905      	add	r1, sp, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fa:	432b      	orrs	r3, r5
 80029fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80029fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a00:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a02:	402b      	ands	r3, r5
 8002a04:	9301      	str	r3, [sp, #4]
 8002a06:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a08:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a0a:	4333      	orrs	r3, r6
 8002a0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a0e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a10:	4033      	ands	r3, r6
 8002a12:	9302      	str	r3, [sp, #8]
 8002a14:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a16:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a18:	433b      	orrs	r3, r7
 8002a1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a1e:	403b      	ands	r3, r7
 8002a20:	9303      	str	r3, [sp, #12]
 8002a22:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a26:	4313      	orrs	r3, r2
 8002a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002a2a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	9304      	str	r3, [sp, #16]
 8002a30:	9b04      	ldr	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a32:	2303      	movs	r3, #3
 8002a34:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_All & (~(GPIO_PIN_13 | GPIO_PIN_14));
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <SystemApp_Init+0xd8>)
 8002a38:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a3a:	f001 fab1 	bl	8003fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002a3e:	4b1d      	ldr	r3, [pc, #116]	; (8002ab4 <SystemApp_Init+0xdc>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a40:	a905      	add	r1, sp, #20
 8002a42:	481d      	ldr	r0, [pc, #116]	; (8002ab8 <SystemApp_Init+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_All;
 8002a44:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a46:	f001 faab 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4a:	a905      	add	r1, sp, #20
 8002a4c:	481b      	ldr	r0, [pc, #108]	; (8002abc <SystemApp_Init+0xe4>)
 8002a4e:	f001 faa7 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002a52:	a905      	add	r1, sp, #20
 8002a54:	481a      	ldr	r0, [pc, #104]	; (8002ac0 <SystemApp_Init+0xe8>)
 8002a56:	f001 faa3 	bl	8003fa0 <HAL_GPIO_Init>
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002a5a:	2280      	movs	r2, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_DISABLE();
 8002a5c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a5e:	43ab      	bics	r3, r5
 8002a60:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOB_CLK_DISABLE();
 8002a62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a64:	43b3      	bics	r3, r6
 8002a66:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOC_CLK_DISABLE();
 8002a68:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a6a:	43bb      	bics	r3, r7
 8002a6c:	62e3      	str	r3, [r4, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_DISABLE();
 8002a6e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a70:	4393      	bics	r3, r2
 8002a72:	62e3      	str	r3, [r4, #44]	; 0x2c
  DBG_Disable();
 8002a74:	f000 f8ac 	bl	8002bd0 <DBG_Disable>
  DBG_ProbesInit();
 8002a78:	f000 f8cc 	bl	8002c14 <DBG_ProbesInit>
  UTIL_ADV_TRACE_Init();
 8002a7c:	f00b f806 	bl	800da8c <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8002a80:	4810      	ldr	r0, [pc, #64]	; (8002ac4 <SystemApp_Init+0xec>)
 8002a82:	f00b f81d 	bl	800dac0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8002a86:	0030      	movs	r0, r6
 8002a88:	f00b f820 	bl	800dacc <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8002a8c:	f7ff fbd6 	bl	800223c <SYS_InitMeasurement>
  Sx_Board_Bus_Init();
 8002a90:	f000 fd12 	bl	80034b8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>
  Sx_Board_IoInit();
 8002a94:	f000 fb60 	bl	8003158 <CMWX1ZZABZ0XX_RADIO_IoInit>
  EnvSensors_Init();
 8002a98:	f000 f8d4 	bl	8002c44 <EnvSensors_Init>
  UTIL_LPM_Init();
 8002a9c:	f00b f90e 	bl	800dcbc <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8002aa0:	0029      	movs	r1, r5
 8002aa2:	0028      	movs	r0, r5
 8002aa4:	f00b f928 	bl	800dcf8 <UTIL_LPM_SetOffMode>
}
 8002aa8:	b00b      	add	sp, #44	; 0x2c
 8002aaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	00009fff 	.word	0x00009fff
 8002ab4:	0000ffff 	.word	0x0000ffff
 8002ab8:	50000400 	.word	0x50000400
 8002abc:	50000800 	.word	0x50000800
 8002ac0:	50001c00 	.word	0x50001c00
 8002ac4:	080029a9 	.word	0x080029a9

08002ac8 <UTIL_SEQ_Idle>:
{
 8002ac8:	b510      	push	{r4, lr}
  UTIL_LPM_EnterLowPower();
 8002aca:	f00b f93d 	bl	800dd48 <UTIL_LPM_EnterLowPower>
}
 8002ace:	bd10      	pop	{r4, pc}

08002ad0 <GetBatteryLevel>:
{
 8002ad0:	b513      	push	{r0, r1, r4, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8002ad2:	f7ff fbbb 	bl	800224c <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8002ad6:	4b0d      	ldr	r3, [pc, #52]	; (8002b0c <GetBatteryLevel+0x3c>)
    batteryLevel = LORAWAN_MAX_BAT;
 8002ad8:	24fe      	movs	r4, #254	; 0xfe
  if (batteryLevelmV > VDD_BAT)
 8002ada:	4298      	cmp	r0, r3
 8002adc:	d80d      	bhi.n	8002afa <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8002ade:	23e1      	movs	r3, #225	; 0xe1
    batteryLevel = 0;
 8002ae0:	2400      	movs	r4, #0
  else if (batteryLevelmV < VDD_MIN)
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4298      	cmp	r0, r3
 8002ae6:	d308      	bcc.n	8002afa <GetBatteryLevel+0x2a>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8002ae8:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <GetBatteryLevel+0x40>)
 8002aea:	2196      	movs	r1, #150	; 0x96
 8002aec:	18c0      	adds	r0, r0, r3
 8002aee:	23fe      	movs	r3, #254	; 0xfe
 8002af0:	00c9      	lsls	r1, r1, #3
 8002af2:	4358      	muls	r0, r3
 8002af4:	f7fd fb38 	bl	8000168 <__udivsi3>
 8002af8:	b2c4      	uxtb	r4, r0
  APP_LOG(TS_ON, VLEVEL_M, "VDDA= %d\r\n", batteryLevel);
 8002afa:	2201      	movs	r2, #1
 8002afc:	2100      	movs	r1, #0
 8002afe:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <GetBatteryLevel+0x44>)
 8002b00:	9400      	str	r4, [sp, #0]
 8002b02:	2002      	movs	r0, #2
 8002b04:	f00b f82a 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8002b08:	0020      	movs	r0, r4
 8002b0a:	bd16      	pop	{r1, r2, r4, pc}
 8002b0c:	00000bb8 	.word	0x00000bb8
 8002b10:	fffff8f8 	.word	0xfffff8f8
 8002b14:	0800f9bb 	.word	0x0800f9bb

08002b18 <GetTemperatureLevel>:
{
 8002b18:	b510      	push	{r4, lr}
  temperatureLevel = (uint16_t)(SYS_GetTemperatureLevel() / 256);
 8002b1a:	f7ff fbad 	bl	8002278 <SYS_GetTemperatureLevel>
 8002b1e:	0002      	movs	r2, r0
 8002b20:	17c0      	asrs	r0, r0, #31
 8002b22:	b2c0      	uxtb	r0, r0
 8002b24:	1880      	adds	r0, r0, r2
 8002b26:	1200      	asrs	r0, r0, #8
  return temperatureLevel;
 8002b28:	b280      	uxth	r0, r0
}
 8002b2a:	bd10      	pop	{r4, pc}

08002b2c <GetUniqueId>:
{
 8002b2c:	b570      	push	{r4, r5, r6, lr}
 8002b2e:	0004      	movs	r4, r0
  uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8002b30:	f000 fd38 	bl	80035a4 <HAL_GetUIDw0>
 8002b34:	0005      	movs	r5, r0
 8002b36:	f000 fd41 	bl	80035bc <HAL_GetUIDw2>
 8002b3a:	182d      	adds	r5, r5, r0
  uint32_t ID_2_val = HAL_GetUIDw1();
 8002b3c:	f000 fd38 	bl	80035b0 <HAL_GetUIDw1>
  id[7] = (ID_1_3_val) >> 24;
 8002b40:	0e2b      	lsrs	r3, r5, #24
 8002b42:	71e3      	strb	r3, [r4, #7]
  id[6] = (ID_1_3_val) >> 16;
 8002b44:	0c2b      	lsrs	r3, r5, #16
 8002b46:	71a3      	strb	r3, [r4, #6]
  id[5] = (ID_1_3_val) >> 8;
 8002b48:	0a2b      	lsrs	r3, r5, #8
 8002b4a:	7163      	strb	r3, [r4, #5]
  id[3] = (ID_2_val) >> 24;
 8002b4c:	0e03      	lsrs	r3, r0, #24
 8002b4e:	70e3      	strb	r3, [r4, #3]
  id[2] = (ID_2_val) >> 16;
 8002b50:	0c03      	lsrs	r3, r0, #16
 8002b52:	70a3      	strb	r3, [r4, #2]
  id[1] = (ID_2_val) >> 8;
 8002b54:	0a03      	lsrs	r3, r0, #8
  id[4] = (ID_1_3_val);
 8002b56:	7125      	strb	r5, [r4, #4]
  id[1] = (ID_2_val) >> 8;
 8002b58:	7063      	strb	r3, [r4, #1]
  id[0] = (ID_2_val);
 8002b5a:	7020      	strb	r0, [r4, #0]
}
 8002b5c:	bd70      	pop	{r4, r5, r6, pc}

08002b5e <GetDevAddr>:
{
 8002b5e:	b510      	push	{r4, lr}
  return ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8002b60:	f000 fd20 	bl	80035a4 <HAL_GetUIDw0>
 8002b64:	0004      	movs	r4, r0
 8002b66:	f000 fd23 	bl	80035b0 <HAL_GetUIDw1>
 8002b6a:	4044      	eors	r4, r0
 8002b6c:	f000 fd26 	bl	80035bc <HAL_GetUIDw2>
 8002b70:	4060      	eors	r0, r4
}
 8002b72:	bd10      	pop	{r4, pc}

08002b74 <UTIL_ADV_TRACE_PreSendHook>:
{
 8002b74:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8002b76:	2101      	movs	r1, #1
 8002b78:	2004      	movs	r0, #4
 8002b7a:	f00b f8a7 	bl	800dccc <UTIL_LPM_SetStopMode>
}
 8002b7e:	bd10      	pop	{r4, pc}

08002b80 <UTIL_ADV_TRACE_PostSendHook>:
{
 8002b80:	b510      	push	{r4, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8002b82:	2100      	movs	r1, #0
 8002b84:	2004      	movs	r0, #4
 8002b86:	f00b f8a1 	bl	800dccc <UTIL_LPM_SetStopMode>
}
 8002b8a:	bd10      	pop	{r4, pc}

08002b8c <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	4770      	bx	lr

08002b90 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8002b90:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return RTC_IF_GetTimerValue();
 8002b92:	f7ff fe33 	bl	80027fc <RTC_IF_GetTimerValue>
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8002b96:	bd10      	pop	{r4, pc}

08002b98 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8002b98:	b507      	push	{r0, r1, r2, lr}
 8002b9a:	9001      	str	r0, [sp, #4]
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  RTC_IF_DelayMs(Delay);   /* based on RTC */
 8002b9c:	9801      	ldr	r0, [sp, #4]
 8002b9e:	f7ff fe3d 	bl	800281c <RTC_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8002ba2:	bd07      	pop	{r0, r1, r2, pc}

08002ba4 <DBG_ConfigForLpm>:
    HAL_DBGMCU_EnableDBGStopMode();
    HAL_DBGMCU_EnableDBGStandbyMode();
  }
  else
  {
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002ba4:	2380      	movs	r3, #128	; 0x80
{
 8002ba6:	b510      	push	{r4, lr}
    __HAL_RCC_DBGMCU_CLK_ENABLE();
 8002ba8:	4c07      	ldr	r4, [pc, #28]	; (8002bc8 <DBG_ConfigForLpm+0x24>)
 8002baa:	03db      	lsls	r3, r3, #15
 8002bac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	6363      	str	r3, [r4, #52]	; 0x34
    HAL_DBGMCU_DisableDBGSleepMode();
 8002bb2:	f000 fd09 	bl	80035c8 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8002bb6:	f000 fd0f 	bl	80035d8 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8002bba:	f000 fd15 	bl	80035e8 <HAL_DBGMCU_DisableDBGStandbyMode>
    __HAL_RCC_DBGMCU_CLK_DISABLE();
 8002bbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002bc0:	4a02      	ldr	r2, [pc, #8]	; (8002bcc <DBG_ConfigForLpm+0x28>)
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	6363      	str	r3, [r4, #52]	; 0x34
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8002bc6:	bd10      	pop	{r4, pc}
 8002bc8:	40021000 	.word	0x40021000
 8002bcc:	ffbfffff 	.word	0xffbfffff

08002bd0 <DBG_Disable>:
{
 8002bd0:	b510      	push	{r4, lr}
 8002bd2:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd4:	220c      	movs	r2, #12
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	a803      	add	r0, sp, #12
 8002bda:	f00b fdf1 	bl	800e7c0 <memset>
  GPIO_InitStruct.Mode   = GPIO_MODE_ANALOG;
 8002bde:	2303      	movs	r3, #3
 8002be0:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8002be2:	23c0      	movs	r3, #192	; 0xc0
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002be4:	2401      	movs	r4, #1
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002be6:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin    = (GPIO_PIN_13 | GPIO_PIN_14);
 8002be8:	01db      	lsls	r3, r3, #7
 8002bea:	9301      	str	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <DBG_Disable+0x40>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bee:	a901      	add	r1, sp, #4
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf2:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE() ;
 8002bf4:	4322      	orrs	r2, r4
 8002bf6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfa:	4023      	ands	r3, r4
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	9b00      	ldr	r3, [sp, #0]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c00:	f001 f9ce 	bl	8003fa0 <HAL_GPIO_Init>
  DBG_ConfigForLpm(1);
 8002c04:	0020      	movs	r0, r4
 8002c06:	f7ff ffcd 	bl	8002ba4 <DBG_ConfigForLpm>
}
 8002c0a:	b006      	add	sp, #24
 8002c0c:	bd10      	pop	{r4, pc}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	40021000 	.word	0x40021000

08002c14 <DBG_ProbesInit>:
#endif /* PROBE_PINS_ENABLED */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8002c14:	4770      	bx	lr
	...

08002c18 <EnvSensors_Read>:
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8002c18:	4b05      	ldr	r3, [pc, #20]	; (8002c30 <EnvSensors_Read+0x18>)
 8002c1a:	6083      	str	r3, [r0, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8002c1c:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <EnvSensors_Read+0x1c>)
 8002c1e:	6043      	str	r3, [r0, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <EnvSensors_Read+0x20>)
 8002c22:	6003      	str	r3, [r0, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8002c24:	4b05      	ldr	r3, [pc, #20]	; (8002c3c <EnvSensors_Read+0x24>)
 8002c26:	60c3      	str	r3, [r0, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8002c28:	4b05      	ldr	r3, [pc, #20]	; (8002c40 <EnvSensors_Read+0x28>)
 8002c2a:	6103      	str	r3, [r0, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	4770      	bx	lr
 8002c30:	42480000 	.word	0x42480000
 8002c34:	41900000 	.word	0x41900000
 8002c38:	447a0000 	.word	0x447a0000
 8002c3c:	003e090d 	.word	0x003e090d
 8002c40:	000503ab 	.word	0x000503ab

08002c44 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
  /* USER CODE END EnvSensors_Init */
}
 8002c44:	2000      	movs	r0, #0
 8002c46:	4770      	bx	lr

08002c48 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance        = USART2;
 8002c48:	480a      	ldr	r0, [pc, #40]	; (8002c74 <MX_USART2_UART_Init+0x2c>)
 8002c4a:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <MX_USART2_UART_Init+0x30>)
{
 8002c4c:	b510      	push	{r4, lr}
  huart2.Instance        = USART2;
 8002c4e:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8002c50:	23e1      	movs	r3, #225	; 0xe1
 8002c52:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits   = UART_STOPBITS_1;
  huart2.Init.Parity     = UART_PARITY_NONE;
  huart2.Init.Mode       = UART_MODE_TX;
 8002c54:	2208      	movs	r2, #8
  huart2.Init.BaudRate   = USART_BAUDRATE;
 8002c56:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c58:	2300      	movs	r3, #0
  huart2.Init.Mode       = UART_MODE_TX;
 8002c5a:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c5c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits   = UART_STOPBITS_1;
 8002c5e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity     = UART_PARITY_NONE;
 8002c60:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 8002c62:	6183      	str	r3, [r0, #24]

  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c64:	f003 fa52 	bl	800610c <HAL_UART_Init>
 8002c68:	2800      	cmp	r0, #0
 8002c6a:	d001      	beq.n	8002c70 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
 8002c6c:	f7ff fb9c 	bl	80023a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002c70:	bd10      	pop	{r4, pc}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	200003e8 	.word	0x200003e8
 8002c78:	40004400 	.word	0x40004400

08002c7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle)
{
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7e:	0005      	movs	r5, r0
 8002c80:	b093      	sub	sp, #76	; 0x4c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c82:	2214      	movs	r2, #20
 8002c84:	2100      	movs	r1, #0
 8002c86:	a804      	add	r0, sp, #16
 8002c88:	f00b fd9a 	bl	800e7c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c8c:	2224      	movs	r2, #36	; 0x24
 8002c8e:	2100      	movs	r1, #0
 8002c90:	a809      	add	r0, sp, #36	; 0x24
 8002c92:	f00b fd95 	bl	800e7c0 <memset>

  if (uartHandle->Instance == USART2)
 8002c96:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_UART_MspInit+0xf8>)
 8002c98:	682a      	ldr	r2, [r5, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d168      	bne.n	8002d70 <HAL_UART_MspInit+0xf4>

    /* USER CODE END USART2_MspInit 0 */

    /* Enable peripherals and GPIO Clocks */
    /* Enable GPIO TX/RX clock */
    USARTx_TX_GPIO_CLK_ENABLE();
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4b35      	ldr	r3, [pc, #212]	; (8002d78 <HAL_UART_MspInit+0xfc>)
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();

    /* Select SYSTEM clock for USART2 commuincation TX/RX */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002ca2:	2604      	movs	r6, #4
    USARTx_TX_GPIO_CLK_ENABLE();
 8002ca4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ca6:	4311      	orrs	r1, r2
 8002ca8:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002caa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cac:	4011      	ands	r1, r2
 8002cae:	9101      	str	r1, [sp, #4]
 8002cb0:	9901      	ldr	r1, [sp, #4]
    USARTx_RX_GPIO_CLK_ENABLE();
 8002cb2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cb4:	4311      	orrs	r1, r2
 8002cb6:	62d9      	str	r1, [r3, #44]	; 0x2c
 8002cb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002cba:	4011      	ands	r1, r2
 8002cbc:	9102      	str	r1, [sp, #8]
 8002cbe:	9902      	ldr	r1, [sp, #8]
    __USART2_CLK_ENABLE();
 8002cc0:	2180      	movs	r1, #128	; 0x80
 8002cc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cc4:	0289      	lsls	r1, r1, #10
 8002cc6:	4308      	orrs	r0, r1
 8002cc8:	6398      	str	r0, [r3, #56]	; 0x38
    DMAx_CLK_ENABLE();
 8002cca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ccc:	4310      	orrs	r0, r2
 8002cce:	6318      	str	r0, [r3, #48]	; 0x30
 8002cd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cd2:	4002      	ands	r2, r0
 8002cd4:	9203      	str	r2, [sp, #12]
 8002cd6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cda:	a809      	add	r0, sp, #36	; 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	6399      	str	r1, [r3, #56]	; 0x38
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ce0:	2302      	movs	r3, #2
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 8002ce2:	960c      	str	r6, [sp, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002ce4:	9309      	str	r3, [sp, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ce6:	f001 ff0f 	bl	8004b08 <HAL_RCCEx_PeriphCLKConfig>
 8002cea:	2800      	cmp	r0, #0
 8002cec:	d001      	beq.n	8002cf2 <HAL_UART_MspInit+0x76>
    {
      Error_Handler();
 8002cee:	f7ff fb5b 	bl	80023a8 <Error_Handler>
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002cf2:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf4:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf6:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002cf8:	2303      	movs	r3, #3
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002cfa:	a904      	add	r1, sp, #16
 8002cfc:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfe:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002d00:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pin = USARTx_TX_Pin;
 8002d02:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d04:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002d06:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_TX_GPIO_Port, &GPIO_InitStruct);
 8002d08:	f001 f94a 	bl	8003fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002d0c:	2308      	movs	r3, #8
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002d0e:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = USARTx_RX_Pin;
 8002d10:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002d12:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002d14:	3b05      	subs	r3, #5
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002d16:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d18:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002d1a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1c:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002d1e:	9608      	str	r6, [sp, #32]
    HAL_GPIO_Init(USARTx_RX_GPIO_Port, &GPIO_InitStruct);
 8002d20:	f001 f93e 	bl	8003fa0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    /* Configure the DMA handler for Transmission process */
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002d24:	4f15      	ldr	r7, [pc, #84]	; (8002d7c <HAL_UART_MspInit+0x100>)
 8002d26:	4b16      	ldr	r3, [pc, #88]	; (8002d80 <HAL_UART_MspInit+0x104>)
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;

    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d28:	0038      	movs	r0, r7
    hdma_usart2_tx.Instance                 = USARTx_TX_DMA_CHANNEL;
 8002d2a:	603b      	str	r3, [r7, #0]
    hdma_usart2_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8002d2c:	2310      	movs	r3, #16
 8002d2e:	60bb      	str	r3, [r7, #8]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002d30:	3370      	adds	r3, #112	; 0x70
    hdma_usart2_tx.Init.Request             = USARTx_TX_DMA_REQUEST;
 8002d32:	607e      	str	r6, [r7, #4]
    hdma_usart2_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002d34:	60fc      	str	r4, [r7, #12]
    hdma_usart2_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002d36:	613b      	str	r3, [r7, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d38:	617c      	str	r4, [r7, #20]
    hdma_usart2_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
 8002d3a:	61bc      	str	r4, [r7, #24]
    hdma_usart2_tx.Init.Mode                = DMA_NORMAL;
 8002d3c:	61fc      	str	r4, [r7, #28]
    hdma_usart2_tx.Init.Priority            = DMA_PRIORITY_LOW;
 8002d3e:	623c      	str	r4, [r7, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002d40:	f000 ffca 	bl	8003cd8 <HAL_DMA_Init>
 8002d44:	42a0      	cmp	r0, r4
 8002d46:	d001      	beq.n	8002d4c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8002d48:	f7ff fb2e 	bl	80023a8 <Error_Handler>
    /* Associate the initialized DMA handle to the UART handle */
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);

    /* Configure the NVIC for DMA */
    /* NVIC configuration for DMA transfer complete interrupt (USART1_TX) */
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2100      	movs	r1, #0
 8002d50:	200b      	movs	r0, #11
    __HAL_LINKDMA(uartHandle, hdmatx, hdma_usart2_tx);
 8002d52:	66ef      	str	r7, [r5, #108]	; 0x6c
 8002d54:	62bd      	str	r5, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(USARTx_DMA_TX_IRQn, USARTx_Priority, 1);
 8002d56:	f000 ff79 	bl	8003c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_DMA_TX_IRQn);
 8002d5a:	200b      	movs	r0, #11
 8002d5c:	f000 ffa0 	bl	8003ca0 <HAL_NVIC_EnableIRQ>

    /* NVIC for USART, to catch the TX complete */
    HAL_NVIC_SetPriority(USARTx_IRQn, USARTx_DMA_Priority, 1);
 8002d60:	201c      	movs	r0, #28
 8002d62:	2201      	movs	r2, #1
 8002d64:	2100      	movs	r1, #0
 8002d66:	f000 ff71 	bl	8003c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USARTx_IRQn);
 8002d6a:	201c      	movs	r0, #28
 8002d6c:	f000 ff98 	bl	8003ca0 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d70:	b013      	add	sp, #76	; 0x4c
 8002d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d74:	40004400 	.word	0x40004400
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	200003a0 	.word	0x200003a0
 8002d80:	40020080 	.word	0x40020080

08002d84 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef *uartHandle)
{

  if (uartHandle->Instance == USART2)
 8002d84:	4b0b      	ldr	r3, [pc, #44]	; (8002db4 <HAL_UART_MspDeInit+0x30>)
 8002d86:	6802      	ldr	r2, [r0, #0]
{
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	0004      	movs	r4, r0
  if (uartHandle->Instance == USART2)
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d10f      	bne.n	8002db0 <HAL_UART_MspDeInit+0x2c>

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
      */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002d90:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <HAL_UART_MspDeInit+0x34>)
 8002d94:	4909      	ldr	r1, [pc, #36]	; (8002dbc <HAL_UART_MspDeInit+0x38>)
 8002d96:	6b93      	ldr	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002d98:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8002d9a:	400b      	ands	r3, r1
 8002d9c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin | USARTx_TX_Pin);
 8002d9e:	210c      	movs	r1, #12
 8002da0:	f001 f9c2 	bl	8004128 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8002da4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002da6:	f000 ffdb 	bl	8003d60 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002daa:	201c      	movs	r0, #28
 8002dac:	f000 ff84 	bl	8003cb8 <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002db0:	bd10      	pop	{r4, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	40004400 	.word	0x40004400
 8002db8:	40021000 	.word	0x40021000
 8002dbc:	fffdffff 	.word	0xfffdffff

08002dc0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002dc0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002dc2:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <vcom_Init+0x14>)
 8002dc4:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002dc6:	f7ff fa85 	bl	80022d4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002dca:	f7ff ff3d 	bl	8002c48 <MX_USART2_UART_Init>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8002dce:	2000      	movs	r0, #0
 8002dd0:	bd10      	pop	{r4, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	2000046c 	.word	0x2000046c

08002dd8 <vcom_DeInit>:
{
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8002dd8:	2280      	movs	r2, #128	; 0x80
 8002dda:	4b09      	ldr	r3, [pc, #36]	; (8002e00 <vcom_DeInit+0x28>)
 8002ddc:	0292      	lsls	r2, r2, #10
 8002dde:	6a99      	ldr	r1, [r3, #40]	; 0x28
{
 8002de0:	b510      	push	{r4, lr}
  __HAL_RCC_USART2_FORCE_RESET();
 8002de2:	430a      	orrs	r2, r1
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_USART2_RELEASE_RESET();
 8002de6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002de8:	4906      	ldr	r1, [pc, #24]	; (8002e04 <vcom_DeInit+0x2c>)

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8002dea:	4807      	ldr	r0, [pc, #28]	; (8002e08 <vcom_DeInit+0x30>)
  __HAL_RCC_USART2_RELEASE_RESET();
 8002dec:	400a      	ands	r2, r1
 8002dee:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_UART_MspDeInit(&huart2);
 8002df0:	f7ff ffc8 	bl	8002d84 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8002df4:	200b      	movs	r0, #11
 8002df6:	f000 ff5f 	bl	8003cb8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	bd10      	pop	{r4, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	40021000 	.word	0x40021000
 8002e04:	fffdffff 	.word	0xfffdffff
 8002e08:	200003e8 	.word	0x200003e8

08002e0c <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002e0c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <vcom_Trace_DMA+0x14>)
{
 8002e10:	000a      	movs	r2, r1
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8002e12:	0001      	movs	r1, r0
 8002e14:	0018      	movs	r0, r3
 8002e16:	f002 fd39 	bl	800588c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd10      	pop	{r4, pc}
 8002e1e:	46c0      	nop			; (mov r8, r8)
 8002e20:	200003e8 	.word	0x200003e8

08002e24 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002e24:	b537      	push	{r0, r1, r2, r4, r5, lr}

  /*record call back*/
  RxCpltCallback = RxCb;

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e26:	2180      	movs	r1, #128	; 0x80

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002e28:	4c10      	ldr	r4, [pc, #64]	; (8002e6c <vcom_ReceiveInit+0x48>)
  RxCpltCallback = RxCb;
 8002e2a:	4d11      	ldr	r5, [pc, #68]	; (8002e70 <vcom_ReceiveInit+0x4c>)
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002e2c:	9a01      	ldr	r2, [sp, #4]
  RxCpltCallback = RxCb;
 8002e2e:	6068      	str	r0, [r5, #4]
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e30:	0389      	lsls	r1, r1, #14
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002e32:	0020      	movs	r0, r4
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8002e34:	9100      	str	r1, [sp, #0]
  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8002e36:	f003 fa1f 	bl	8006278 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8002e3a:	2280      	movs	r2, #128	; 0x80
 8002e3c:	6823      	ldr	r3, [r4, #0]
 8002e3e:	0252      	lsls	r2, r2, #9
 8002e40:	69d9      	ldr	r1, [r3, #28]
 8002e42:	4211      	tst	r1, r2
 8002e44:	d1fc      	bne.n	8002e40 <vcom_ReceiveInit+0x1c>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8002e46:	2280      	movs	r2, #128	; 0x80
 8002e48:	03d2      	lsls	r2, r2, #15
 8002e4a:	69d9      	ldr	r1, [r3, #28]
 8002e4c:	4211      	tst	r1, r2
 8002e4e:	d0fc      	beq.n	8002e4a <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002e50:	6899      	ldr	r1, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8002e52:	0020      	movs	r0, r4
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
  HAL_UARTEx_EnableStopMode(&huart2);
 8002e58:	f003 fa54 	bl	8006304 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8002e5c:	0029      	movs	r1, r5
 8002e5e:	2201      	movs	r2, #1
 8002e60:	0020      	movs	r0, r4
 8002e62:	3108      	adds	r1, #8
 8002e64:	f003 f9d2 	bl	800620c <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002e68:	2000      	movs	r0, #0
 8002e6a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8002e6c:	200003e8 	.word	0x200003e8
 8002e70:	2000046c 	.word	0x2000046c

08002e74 <HAL_UART_TxCpltCallback>:

  /* USER CODE END vcom_Resume_2 */
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 8002e74:	b510      	push	{r4, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8002e76:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <HAL_UART_TxCpltCallback+0xc>)
 8002e78:	2000      	movs	r0, #0
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002e7e:	bd10      	pop	{r4, pc}
 8002e80:	2000046c 	.word	0x2000046c

08002e84 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8002e84:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8002e86:	4c0a      	ldr	r4, [pc, #40]	; (8002eb0 <HAL_UART_RxCpltCallback+0x2c>)
{
 8002e88:	0005      	movs	r5, r0
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 8002e8a:	6863      	ldr	r3, [r4, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d007      	beq.n	8002ea0 <HAL_UART_RxCpltCallback+0x1c>
 8002e90:	1d02      	adds	r2, r0, #4
 8002e92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002e94:	2a00      	cmp	r2, #0
 8002e96:	d103      	bne.n	8002ea0 <HAL_UART_RxCpltCallback+0x1c>
  {
    RxCpltCallback(&charRx, 1, 0);
 8002e98:	0020      	movs	r0, r4
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	3008      	adds	r0, #8
 8002e9e:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 8002ea0:	0021      	movs	r1, r4
 8002ea2:	0028      	movs	r0, r5
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	3108      	adds	r1, #8
 8002ea8:	f003 f9b0 	bl	800620c <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002eac:	bd70      	pop	{r4, r5, r6, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	2000046c 	.word	0x2000046c

08002eb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002eb6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002eba:	490e      	ldr	r1, [pc, #56]	; (8002ef4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ebc:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <LoopForever+0xe>)
  movs r3, #0
 8002ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ec0:	e002      	b.n	8002ec8 <LoopCopyDataInit>

08002ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ec6:	3304      	adds	r3, #4

08002ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ecc:	d3f9      	bcc.n	8002ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ece:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ed0:	4c0b      	ldr	r4, [pc, #44]	; (8002f00 <LoopForever+0x16>)
  movs r3, #0
 8002ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ed4:	e001      	b.n	8002eda <LoopFillZerobss>

08002ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ed8:	3204      	adds	r2, #4

08002eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002edc:	d3fb      	bcc.n	8002ed6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002ede:	f000 fb13 	bl	8003508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ee2:	f00b fc8d 	bl	800e800 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ee6:	f7ff fa55 	bl	8002394 <main>

08002eea <LoopForever>:

LoopForever:
    b LoopForever
 8002eea:	e7fe      	b.n	8002eea <LoopForever>
   ldr   r0, =_estack
 8002eec:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002ef0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ef4:	20000154 	.word	0x20000154
  ldr r2, =_sidata
 8002ef8:	0800fd40 	.word	0x0800fd40
  ldr r2, =_sbss
 8002efc:	20000154 	.word	0x20000154
  ldr r4, =_ebss
 8002f00:	20001a30 	.word	0x20001a30

08002f04 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f04:	e7fe      	b.n	8002f04 <ADC1_COMP_IRQHandler>
	...

08002f08 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002f08:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <_sbrk+0x2c>)
{
 8002f0a:	0003      	movs	r3, r0
	if (heap_end == 0)
 8002f0c:	6811      	ldr	r1, [r2, #0]
{
 8002f0e:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8002f10:	2900      	cmp	r1, #0
 8002f12:	d101      	bne.n	8002f18 <_sbrk+0x10>
		heap_end = &end;
 8002f14:	4908      	ldr	r1, [pc, #32]	; (8002f38 <_sbrk+0x30>)
 8002f16:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8002f18:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8002f1a:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8002f1c:	18c3      	adds	r3, r0, r3
 8002f1e:	428b      	cmp	r3, r1
 8002f20:	d906      	bls.n	8002f30 <_sbrk+0x28>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002f22:	f00b fc67 	bl	800e7f4 <__errno>
 8002f26:	230c      	movs	r3, #12
 8002f28:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8002f2e:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8002f30:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8002f32:	e7fc      	b.n	8002f2e <_sbrk+0x26>
 8002f34:	20000478 	.word	0x20000478
 8002f38:	20001a30 	.word	0x20001a30

08002f3c <BSP_SPI1_SendRecv>:
  */
int32_t BSP_SPI1_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t len)
{
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;

  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002f3c:	23fa      	movs	r3, #250	; 0xfa
{
 8002f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f40:	0005      	movs	r5, r0
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002f42:	009b      	lsls	r3, r3, #2
{
 8002f44:	0014      	movs	r4, r2
  if (HAL_SPI_TransmitReceive(&hspi1, pTxData, pRxData, len, TIMEOUT_DURATION) == HAL_OK)
 8002f46:	9300      	str	r3, [sp, #0]
 8002f48:	4806      	ldr	r0, [pc, #24]	; (8002f64 <BSP_SPI1_SendRecv+0x28>)
 8002f4a:	0013      	movs	r3, r2
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	0029      	movs	r1, r5
 8002f50:	f002 fb2c 	bl	80055ac <HAL_SPI_TransmitReceive>
 8002f54:	2800      	cmp	r0, #0
 8002f56:	d101      	bne.n	8002f5c <BSP_SPI1_SendRecv+0x20>
  {
    ret = len;
 8002f58:	0020      	movs	r0, r4
  }
  return ret;
}
 8002f5a:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8002f5c:	2006      	movs	r0, #6
 8002f5e:	4240      	negs	r0, r0
  return ret;
 8002f60:	e7fb      	b.n	8002f5a <BSP_SPI1_SendRecv+0x1e>
 8002f62:	46c0      	nop			; (mov r8, r8)
 8002f64:	20000480 	.word	0x20000480

08002f68 <MX_SPI1_Init>:
/* SPI1 init function */

__weak HAL_StatusTypeDef MX_SPI1_Init(SPI_HandleTypeDef *hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI1;
 8002f68:	4b14      	ldr	r3, [pc, #80]	; (8002fbc <MX_SPI1_Init+0x54>)
{
 8002f6a:	b570      	push	{r4, r5, r6, lr}
  hspi->Instance = SPI1;
 8002f6c:	6003      	str	r3, [r0, #0]
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002f6e:	2382      	movs	r3, #130	; 0x82
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002f70:	2500      	movs	r5, #0
  hspi->Init.Mode = SPI_MODE_MASTER;
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	6043      	str	r3, [r0, #4]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 8002f76:	33fc      	adds	r3, #252	; 0xfc
 8002f78:	6183      	str	r3, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 8002f7a:	6085      	str	r5, [r0, #8]
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8002f7c:	60c5      	str	r5, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f7e:	6105      	str	r5, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 8002f80:	6145      	str	r5, [r0, #20]
{
 8002f82:	0004      	movs	r4, r0
  /* SPI1 is on APB2 for L0x3 -> HAL_RCC_GetPCLK2Freq */
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002f84:	f001 fdb0 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
  /* USER CODE END SPI1_MspDeInit 1 */
}

static uint32_t SPI_GetPrescaler(uint32_t clock_src_hz, uint32_t baudrate_mbps)
{
  uint32_t divisor = 0;
 8002f88:	002b      	movs	r3, r5
    SPI_BAUDRATEPRESCALER_64,
    SPI_BAUDRATEPRESCALER_128,
    SPI_BAUDRATEPRESCALER_256,
  };

  while (spi_clk > baudrate_mbps)
 8002f8a:	4a0d      	ldr	r2, [pc, #52]	; (8002fc0 <MX_SPI1_Init+0x58>)
  {
    presc = baudrate[divisor];
 8002f8c:	490d      	ldr	r1, [pc, #52]	; (8002fc4 <MX_SPI1_Init+0x5c>)
  while (spi_clk > baudrate_mbps)
 8002f8e:	4290      	cmp	r0, r2
 8002f90:	d80d      	bhi.n	8002fae <MX_SPI1_Init+0x46>
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002f92:	2300      	movs	r3, #0
 8002f94:	6223      	str	r3, [r4, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 8002f96:	6263      	str	r3, [r4, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f98:	62a3      	str	r3, [r4, #40]	; 0x28
  hspi->Init.CRCPolynomial = 7;
 8002f9a:	3307      	adds	r3, #7
  hspi->Init.BaudRatePrescaler = SPI_GetPrescaler(HAL_RCC_GetPCLK2Freq(), RADIO_SPI_BAUDRATE);
 8002f9c:	61e5      	str	r5, [r4, #28]
  hspi->Init.CRCPolynomial = 7;
 8002f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_SPI_Init(hspi) != HAL_OK)
 8002fa0:	0020      	movs	r0, r4
 8002fa2:	f002 fa9b 	bl	80054dc <HAL_SPI_Init>
 8002fa6:	1e43      	subs	r3, r0, #1
 8002fa8:	4198      	sbcs	r0, r3
  return ret;
 8002faa:	b2c0      	uxtb	r0, r0
}
 8002fac:	bd70      	pop	{r4, r5, r6, pc}
    presc = baudrate[divisor];
 8002fae:	009d      	lsls	r5, r3, #2
    if (++divisor > 7)
 8002fb0:	3301      	adds	r3, #1
    presc = baudrate[divisor];
 8002fb2:	586d      	ldr	r5, [r5, r1]
    if (++divisor > 7)
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d0ec      	beq.n	8002f92 <MX_SPI1_Init+0x2a>
    {
      break;
    }

    spi_clk = (spi_clk >> 1);
 8002fb8:	0840      	lsrs	r0, r0, #1
 8002fba:	e7e8      	b.n	8002f8e <MX_SPI1_Init+0x26>
 8002fbc:	40013000 	.word	0x40013000
 8002fc0:	00989680 	.word	0x00989680
 8002fc4:	0800f12c 	.word	0x0800f12c

08002fc8 <BSP_SPI1_Init>:
{
 8002fc8:	b530      	push	{r4, r5, lr}
  hspi1.Instance  = SPI1;
 8002fca:	4d1b      	ldr	r5, [pc, #108]	; (8003038 <BSP_SPI1_Init+0x70>)
 8002fcc:	4b1b      	ldr	r3, [pc, #108]	; (800303c <BSP_SPI1_Init+0x74>)
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002fce:	0028      	movs	r0, r5
{
 8002fd0:	b087      	sub	sp, #28
  hspi1.Instance  = SPI1;
 8002fd2:	602b      	str	r3, [r5, #0]
  if (HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET)
 8002fd4:	f002 fc3c 	bl	8005850 <HAL_SPI_GetState>
 8002fd8:	1e04      	subs	r4, r0, #0
 8002fda:	d002      	beq.n	8002fe2 <BSP_SPI1_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8002fdc:	2000      	movs	r0, #0
}
 8002fde:	b007      	add	sp, #28
 8002fe0:	bd30      	pop	{r4, r5, pc}
  __HAL_RCC_SPI1_CLK_ENABLE();
 8002fe2:	2380      	movs	r3, #128	; 0x80
 8002fe4:	4a16      	ldr	r2, [pc, #88]	; (8003040 <BSP_SPI1_Init+0x78>)
 8002fe6:	015b      	lsls	r3, r3, #5
 8002fe8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002fea:	430b      	orrs	r3, r1
 8002fec:	6353      	str	r3, [r2, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fee:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff0:	9003      	str	r0, [sp, #12]
  GPIO_InitStruct.Alternate = BUS_SPI1_MOSI_GPIO_AF;
 8002ff2:	9005      	str	r0, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ff4:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ff6:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8002ffc:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8002ffe:	337d      	adds	r3, #125	; 0x7d
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003000:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MOSI_GPIO_PIN;
 8003002:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003004:	f000 ffcc 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003008:	20a0      	movs	r0, #160	; 0xa0
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 800300a:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 800300c:	a901      	add	r1, sp, #4
 800300e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = BUS_SPI1_MISO_GPIO_PIN;
 8003010:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Alternate = BUS_SPI1_MISO_GPIO_AF;
 8003012:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(BUS_SPI1_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003014:	f000 ffc4 	bl	8003fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003018:	2308      	movs	r3, #8
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 800301a:	480a      	ldr	r0, [pc, #40]	; (8003044 <BSP_SPI1_Init+0x7c>)
 800301c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Alternate = BUS_SPI1_SCK_GPIO_AF;
 800301e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pin = BUS_SPI1_SCK_GPIO_PIN;
 8003020:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(BUS_SPI1_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003022:	f000 ffbd 	bl	8003fa0 <HAL_GPIO_Init>
    if (MX_SPI1_Init(&hspi1) != HAL_OK)
 8003026:	0028      	movs	r0, r5
 8003028:	f7ff ff9e 	bl	8002f68 <MX_SPI1_Init>
 800302c:	2800      	cmp	r0, #0
 800302e:	d0d5      	beq.n	8002fdc <BSP_SPI1_Init+0x14>
      ret = BSP_ERROR_BUS_FAILURE;
 8003030:	2008      	movs	r0, #8
 8003032:	4240      	negs	r0, r0
  return ret;
 8003034:	e7d3      	b.n	8002fde <BSP_SPI1_Init+0x16>
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	20000480 	.word	0x20000480
 800303c:	40013000 	.word	0x40013000
 8003040:	40021000 	.word	0x40021000
 8003044:	50000400 	.word	0x50000400

08003048 <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003048:	b500      	push	{lr}
 800304a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800304c:	2803      	cmp	r0, #3
 800304e:	d80c      	bhi.n	800306a <BSP_LED_Init+0x22>
 8003050:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <BSP_LED_Init+0x78>)
 8003052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003054:	f7fd f86a 	bl	800012c <__gnu_thumb1_case_uqi>
 8003058:	2b231b02 	.word	0x2b231b02
 800305c:	2102      	movs	r1, #2
 800305e:	430a      	orrs	r2, r1
 8003060:	62da      	str	r2, [r3, #44]	; 0x2c
 8003062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003064:	400b      	ands	r3, r1
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800306a:	4b16      	ldr	r3, [pc, #88]	; (80030c4 <BSP_LED_Init+0x7c>)
 800306c:	0042      	lsls	r2, r0, #1
 800306e:	5ad3      	ldrh	r3, [r2, r3]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003070:	0080      	lsls	r0, r0, #2
  GPIO_InitStruct.Pin = LED_PIN[Led];
 8003072:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003074:	2301      	movs	r3, #1
 8003076:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003078:	2300      	movs	r3, #0
 800307a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307c:	3303      	adds	r3, #3
 800307e:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 8003080:	4b11      	ldr	r3, [pc, #68]	; (80030c8 <BSP_LED_Init+0x80>)
 8003082:	a905      	add	r1, sp, #20
 8003084:	58c0      	ldr	r0, [r0, r3]
 8003086:	f000 ff8b 	bl	8003fa0 <HAL_GPIO_Init>
}
 800308a:	b00b      	add	sp, #44	; 0x2c
 800308c:	bd00      	pop	{pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 800308e:	2101      	movs	r1, #1
 8003090:	430a      	orrs	r2, r1
 8003092:	62da      	str	r2, [r3, #44]	; 0x2c
 8003094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003096:	400b      	ands	r3, r1
 8003098:	9302      	str	r3, [sp, #8]
 800309a:	9b02      	ldr	r3, [sp, #8]
 800309c:	e7e5      	b.n	800306a <BSP_LED_Init+0x22>
 800309e:	2102      	movs	r1, #2
 80030a0:	430a      	orrs	r2, r1
 80030a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80030a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a6:	400b      	ands	r3, r1
 80030a8:	9303      	str	r3, [sp, #12]
 80030aa:	9b03      	ldr	r3, [sp, #12]
 80030ac:	e7dd      	b.n	800306a <BSP_LED_Init+0x22>
 80030ae:	2102      	movs	r1, #2
 80030b0:	430a      	orrs	r2, r1
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	400b      	ands	r3, r1
 80030b8:	9304      	str	r3, [sp, #16]
 80030ba:	9b04      	ldr	r3, [sp, #16]
 80030bc:	e7d5      	b.n	800306a <BSP_LED_Init+0x22>
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	40021000 	.word	0x40021000
 80030c4:	0800f14c 	.word	0x0800f14c
 80030c8:	2000004c 	.word	0x2000004c

080030cc <BSP_LED_On>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80030cc:	4b05      	ldr	r3, [pc, #20]	; (80030e4 <BSP_LED_On+0x18>)
{
 80030ce:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80030d0:	0042      	lsls	r2, r0, #1
 80030d2:	5ad1      	ldrh	r1, [r2, r3]
 80030d4:	4b04      	ldr	r3, [pc, #16]	; (80030e8 <BSP_LED_On+0x1c>)
 80030d6:	0080      	lsls	r0, r0, #2
 80030d8:	2201      	movs	r2, #1
 80030da:	58c0      	ldr	r0, [r0, r3]
 80030dc:	f001 f8aa 	bl	8004234 <HAL_GPIO_WritePin>
}
 80030e0:	bd10      	pop	{r4, pc}
 80030e2:	46c0      	nop			; (mov r8, r8)
 80030e4:	0800f14c 	.word	0x0800f14c
 80030e8:	2000004c 	.word	0x2000004c

080030ec <BSP_LED_Off>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <BSP_LED_Off+0x18>)
{
 80030ee:	b510      	push	{r4, lr}
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80030f0:	0042      	lsls	r2, r0, #1
 80030f2:	5ad1      	ldrh	r1, [r2, r3]
 80030f4:	4b04      	ldr	r3, [pc, #16]	; (8003108 <BSP_LED_Off+0x1c>)
 80030f6:	0080      	lsls	r0, r0, #2
 80030f8:	2200      	movs	r2, #0
 80030fa:	58c0      	ldr	r0, [r0, r3]
 80030fc:	f001 f89a 	bl	8004234 <HAL_GPIO_WritePin>
}
 8003100:	bd10      	pop	{r4, pc}
 8003102:	46c0      	nop			; (mov r8, r8)
 8003104:	0800f14c 	.word	0x0800f14c
 8003108:	2000004c 	.word	0x2000004c

0800310c <BSP_LED_Toggle>:
  *            @arg  LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 800310c:	4b04      	ldr	r3, [pc, #16]	; (8003120 <BSP_LED_Toggle+0x14>)
{
 800310e:	b510      	push	{r4, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8003110:	0042      	lsls	r2, r0, #1
 8003112:	5ad1      	ldrh	r1, [r2, r3]
 8003114:	4b03      	ldr	r3, [pc, #12]	; (8003124 <BSP_LED_Toggle+0x18>)
 8003116:	0080      	lsls	r0, r0, #2
 8003118:	58c0      	ldr	r0, [r0, r3]
 800311a:	f001 f891 	bl	8004240 <HAL_GPIO_TogglePin>
}
 800311e:	bd10      	pop	{r4, pc}
 8003120:	0800f14c 	.word	0x0800f14c
 8003124:	2000004c 	.word	0x2000004c

08003128 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>:

/* Exported functions ---------------------------------------------------------*/
uint32_t CMWX1ZZABZ0XX_RADIO_GetWakeUpTime(void)
{
  return  BOARD_WAKEUP_TIME;
}
 8003128:	2005      	movs	r0, #5
 800312a:	4770      	bx	lr

0800312c <CMWX1ZZABZ0XX_RADIO_SetXO>:

void CMWX1ZZABZ0XX_RADIO_SetXO(uint8_t state)
{
 800312c:	0002      	movs	r2, r0
 800312e:	b510      	push	{r4, lr}

  if (state == SET)
 8003130:	2801      	cmp	r0, #1
 8003132:	d109      	bne.n	8003148 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1c>
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_SET);
 8003134:	2180      	movs	r1, #128	; 0x80
 8003136:	20a0      	movs	r0, #160	; 0xa0
 8003138:	0149      	lsls	r1, r1, #5
 800313a:	05c0      	lsls	r0, r0, #23
 800313c:	f001 f87a 	bl	8004234 <HAL_GPIO_WritePin>

    HAL_Delay(BOARD_WAKEUP_TIME);   //start up time of TCXO
 8003140:	2005      	movs	r0, #5
 8003142:	f7ff fd29 	bl	8002b98 <HAL_Delay>
  }
  else
  {
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
  }
}
 8003146:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, GPIO_PIN_RESET);
 8003148:	2180      	movs	r1, #128	; 0x80
 800314a:	20a0      	movs	r0, #160	; 0xa0
 800314c:	2200      	movs	r2, #0
 800314e:	0149      	lsls	r1, r1, #5
 8003150:	05c0      	lsls	r0, r0, #23
 8003152:	f001 f86f 	bl	8004234 <HAL_GPIO_WritePin>
}
 8003156:	e7f6      	b.n	8003146 <CMWX1ZZABZ0XX_RADIO_SetXO+0x1a>

08003158 <CMWX1ZZABZ0XX_RADIO_IoInit>:
void CMWX1ZZABZ0XX_RADIO_IoInit(void)
{
  GPIO_InitTypeDef initStruct = {0};
 8003158:	2300      	movs	r3, #0
{
 800315a:	b5f0      	push	{r4, r5, r6, r7, lr}
  SPI_HandleTypeDef dummy_hspi;

  /* Enable DIO GPIO clock */
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800315c:	2702      	movs	r7, #2
  RADIO_DIO_1_GPIO_CLK_ENABLE();
  RADIO_DIO_2_GPIO_CLK_ENABLE();
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 800315e:	2204      	movs	r2, #4
{
 8003160:	b097      	sub	sp, #92	; 0x5c
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003162:	4c65      	ldr	r4, [pc, #404]	; (80032f8 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a0>)
  GPIO_InitTypeDef initStruct = {0};
 8003164:	9310      	str	r3, [sp, #64]	; 0x40
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  RADIO_DIO_5_GPIO_CLK_ENABLE();
#endif

  /* DIO IO Init */
  initStruct.Pull = GPIO_PULLDOWN;
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003168:	2103      	movs	r1, #3
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 800316a:	433b      	orrs	r3, r7
 800316c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800316e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
  {
    initStruct.Mode = RADIO_DIO_MODE[i];
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003170:	2501      	movs	r5, #1
  RADIO_DIO_0_GPIO_CLK_ENABLE();
 8003172:	403b      	ands	r3, r7
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	9b01      	ldr	r3, [sp, #4]
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    initStruct.Mode = RADIO_DIO_MODE[i];
 800317a:	4e60      	ldr	r6, [pc, #384]	; (80032fc <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a4>)
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 800317c:	433b      	orrs	r3, r7
 800317e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003180:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003182:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_DIO_1_GPIO_CLK_ENABLE();
 8003184:	403b      	ands	r3, r7
 8003186:	9302      	str	r3, [sp, #8]
 8003188:	9b02      	ldr	r3, [sp, #8]
  RADIO_DIO_2_GPIO_CLK_ENABLE();
 800318a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800318c:	433b      	orrs	r3, r7
 800318e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003190:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003192:	403b      	ands	r3, r7
 8003194:	9303      	str	r3, [sp, #12]
 8003196:	9b03      	ldr	r3, [sp, #12]
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 8003198:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800319a:	4313      	orrs	r3, r2
 800319c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800319e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 80031a0:	910f      	str	r1, [sp, #60]	; 0x3c
  RADIO_DIO_3_GPIO_CLK_ENABLE();
 80031a2:	4013      	ands	r3, r2
 80031a4:	9304      	str	r3, [sp, #16]
 80031a6:	9b04      	ldr	r3, [sp, #16]
    initStruct.Pin = RADIO_DIO_PIN[i];
 80031a8:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031aa:	0001      	movs	r1, r0
 80031ac:	4854      	ldr	r0, [pc, #336]	; (8003300 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80031ae:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80031b0:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Pull = GPIO_PULLDOWN;
 80031b2:	970e      	str	r7, [sp, #56]	; 0x38
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031b4:	f000 fef4 	bl	8003fa0 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 80031b8:	4b52      	ldr	r3, [pc, #328]	; (8003304 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1ac>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031ba:	a80c      	add	r0, sp, #48	; 0x30
 80031bc:	0001      	movs	r1, r0
 80031be:	4850      	ldr	r0, [pc, #320]	; (8003300 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80031c0:	930d      	str	r3, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80031c2:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031c4:	f000 feec 	bl	8003fa0 <HAL_GPIO_Init>
 80031c8:	a80c      	add	r0, sp, #48	; 0x30
 80031ca:	0001      	movs	r1, r0
 80031cc:	484c      	ldr	r0, [pc, #304]	; (8003300 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80031ce:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80031d0:	950c      	str	r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031d2:	f000 fee5 	bl	8003fa0 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 80031d6:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031d8:	a80c      	add	r0, sp, #48	; 0x30
 80031da:	0001      	movs	r1, r0
    initStruct.Pin = RADIO_DIO_PIN[i];
 80031dc:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031de:	484a      	ldr	r0, [pc, #296]	; (8003308 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 80031e0:	960d      	str	r6, [sp, #52]	; 0x34
    initStruct.Pin = RADIO_DIO_PIN[i];
 80031e2:	930c      	str	r3, [sp, #48]	; 0x30
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 80031e4:	f000 fedc 	bl	8003fa0 <HAL_GPIO_Init>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
  /* Enable Peripheral clock */
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80031e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;

  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80031ea:	26a0      	movs	r6, #160	; 0xa0
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80031ec:	433b      	orrs	r3, r7
 80031ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 80031f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2103      	movs	r1, #3
  RADIO_SPI_SCK_GPIO_CLK_ENABLE();
 80031f4:	403b      	ands	r3, r7
 80031f6:	9309      	str	r3, [sp, #36]	; 0x24
 80031f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80031fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 80031fc:	05f6      	lsls	r6, r6, #23
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 80031fe:	432b      	orrs	r3, r5
 8003200:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003202:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003204:	a811      	add	r0, sp, #68	; 0x44
  RADIO_SPI_MOSI_GPIO_CLK_ENABLE();
 8003206:	402b      	ands	r3, r5
 8003208:	930a      	str	r3, [sp, #40]	; 0x28
 800320a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 800320c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800320e:	432b      	orrs	r3, r5
 8003210:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003212:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003214:	9114      	str	r1, [sp, #80]	; 0x50
  RADIO_SPI_MISO_GPIO_CLK_ENABLE();
 8003216:	402b      	ands	r3, r5
 8003218:	930b      	str	r3, [sp, #44]	; 0x2c
 800321a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 800321c:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800321e:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MOSI_GPIO_AF;
 8003220:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003222:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003224:	3380      	adds	r3, #128	; 0x80
 8003226:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003228:	9712      	str	r7, [sp, #72]	; 0x48
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800322a:	9713      	str	r7, [sp, #76]	; 0x4c
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 800322c:	f000 feb8 	bl	8003fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8003230:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003232:	a811      	add	r0, sp, #68	; 0x44
 8003234:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_MISO_GPIO_AF;
 8003236:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003238:	0030      	movs	r0, r6
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800323a:	3340      	adds	r3, #64	; 0x40
 800323c:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800323e:	f000 feaf 	bl	8003fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8003242:	2300      	movs	r3, #0
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003244:	a811      	add	r0, sp, #68	; 0x44
 8003246:	0001      	movs	r1, r0
  GPIO_InitStruct.Alternate = RADIO_SPI_SCK_GPIO_AF;
 8003248:	9315      	str	r3, [sp, #84]	; 0x54
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 800324a:	482d      	ldr	r0, [pc, #180]	; (8003300 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1a8>)
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 800324c:	3308      	adds	r3, #8
 800324e:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003250:	f000 fea6 	bl	8003fa0 <HAL_GPIO_Init>
  initStruct.Pin = RADIO_NSS_PIN;
 8003254:	2080      	movs	r0, #128	; 0x80
 8003256:	0200      	lsls	r0, r0, #8
 8003258:	900c      	str	r0, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325a:	950d      	str	r5, [sp, #52]	; 0x34
  initStruct.Pull = GPIO_PULLUP;
 800325c:	950e      	str	r5, [sp, #56]	; 0x38
  RADIO_NSS_CLK_ENABLE();
 800325e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8003260:	a80c      	add	r0, sp, #48	; 0x30
  RADIO_NSS_CLK_ENABLE();
 8003262:	432b      	orrs	r3, r5
 8003264:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003266:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8003268:	0001      	movs	r1, r0
  RADIO_NSS_CLK_ENABLE();
 800326a:	402b      	ands	r3, r5
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 800326c:	0030      	movs	r0, r6
  RADIO_NSS_CLK_ENABLE();
 800326e:	9305      	str	r3, [sp, #20]
 8003270:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_NSS_PORT, &initStruct);
 8003272:	f000 fe95 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 8003276:	2180      	movs	r1, #128	; 0x80
 8003278:	002a      	movs	r2, r5
 800327a:	0030      	movs	r0, r6
 800327c:	0209      	lsls	r1, r1, #8
 800327e:	f000 ffd9 	bl	8004234 <HAL_GPIO_WritePin>
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 8003282:	2204      	movs	r2, #4
  RADIO_TCXO_VCC_CLK_ENABLE();
 8003284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003286:	2103      	movs	r1, #3
  RADIO_TCXO_VCC_CLK_ENABLE();
 8003288:	432b      	orrs	r3, r5
 800328a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800328c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 800328e:	0030      	movs	r0, r6
  RADIO_TCXO_VCC_CLK_ENABLE();
 8003290:	402b      	ands	r3, r5
 8003292:	9306      	str	r3, [sp, #24]
 8003294:	9b06      	ldr	r3, [sp, #24]
  RADIO_ANT_SWITCH_CLK_ENABLE_RX();
 8003296:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003298:	432b      	orrs	r3, r5
 800329a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800329c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800329e:	402b      	ands	r3, r5
 80032a0:	9307      	str	r3, [sp, #28]
 80032a2:	9b07      	ldr	r3, [sp, #28]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_BOOST();
 80032a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032a6:	4313      	orrs	r3, r2
 80032a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032ac:	4013      	ands	r3, r2
 80032ae:	9308      	str	r3, [sp, #32]
 80032b0:	9b08      	ldr	r3, [sp, #32]
  RADIO_ANT_SWITCH_CLK_ENABLE_TX_RFO();
 80032b2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032b4:	4313      	orrs	r3, r2
 80032b6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80032ba:	0014      	movs	r4, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	9311      	str	r3, [sp, #68]	; 0x44
 80032c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
  initStruct.Pull = GPIO_NOPULL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	930e      	str	r3, [sp, #56]	; 0x38
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80032c6:	2380      	movs	r3, #128	; 0x80
  initStruct.Speed = GPIO_SPEED_HIGH;
 80032c8:	910f      	str	r1, [sp, #60]	; 0x3c
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80032ca:	015b      	lsls	r3, r3, #5
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80032cc:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_TCXO_VCC_PIN;
 80032ce:	930c      	str	r3, [sp, #48]	; 0x30
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032d0:	950d      	str	r5, [sp, #52]	; 0x34
  HAL_GPIO_Init(RADIO_TCXO_VCC_PORT, &initStruct);
 80032d2:	f000 fe65 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80032d6:	0030      	movs	r0, r6
 80032d8:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_RX;
 80032da:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_RX, &initStruct);
 80032dc:	f000 fe60 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80032e0:	a90c      	add	r1, sp, #48	; 0x30
 80032e2:	4809      	ldr	r0, [pc, #36]	; (8003308 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_BOOST;
 80032e4:	970c      	str	r7, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_BOOST, &initStruct);
 80032e6:	f000 fe5b 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 80032ea:	4807      	ldr	r0, [pc, #28]	; (8003308 <CMWX1ZZABZ0XX_RADIO_IoInit+0x1b0>)
 80032ec:	a90c      	add	r1, sp, #48	; 0x30
  initStruct.Pin = RADIO_ANT_SWITCH_PIN_TX_RFO;
 80032ee:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(RADIO_ANT_SWITCH_PORT_TX_RFO, &initStruct);
 80032f0:	f000 fe56 	bl	8003fa0 <HAL_GPIO_Init>
}
 80032f4:	b017      	add	sp, #92	; 0x5c
 80032f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	10110000 	.word	0x10110000
 8003300:	50000400 	.word	0x50000400
 8003304:	10310000 	.word	0x10310000
 8003308:	50000800 	.word	0x50000800

0800330c <CMWX1ZZABZ0XX_RADIO_IoDeInit>:
{
 800330c:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef initStruct = {0};
 800330e:	2608      	movs	r6, #8
{
 8003310:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef initStruct = {0};
 8003312:	0032      	movs	r2, r6
 8003314:	2100      	movs	r1, #0
 8003316:	a803      	add	r0, sp, #12
 8003318:	f00b fa52 	bl	800e7c0 <memset>
  initStruct.Pull = GPIO_PULLDOWN;
 800331c:	2502      	movs	r5, #2
    initStruct.Pin = RADIO_DIO_PIN[i];
 800331e:	2310      	movs	r3, #16
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003320:	4c22      	ldr	r4, [pc, #136]	; (80033ac <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa0>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003322:	4f23      	ldr	r7, [pc, #140]	; (80033b0 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa4>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003324:	4669      	mov	r1, sp
 8003326:	0020      	movs	r0, r4
  initStruct.Pull = GPIO_PULLDOWN;
 8003328:	9502      	str	r5, [sp, #8]
    initStruct.Mode = RADIO_DIO_MODE[i];
 800332a:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800332c:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800332e:	f000 fe37 	bl	8003fa0 <HAL_GPIO_Init>
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003332:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xa8>)
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003334:	4669      	mov	r1, sp
 8003336:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003338:	9301      	str	r3, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 800333a:	9500      	str	r5, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800333c:	f000 fe30 	bl	8003fa0 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003340:	2301      	movs	r3, #1
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003342:	4669      	mov	r1, sp
 8003344:	0020      	movs	r0, r4
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003346:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003348:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800334a:	f000 fe29 	bl	8003fa0 <HAL_GPIO_Init>
    initStruct.Pin = RADIO_DIO_PIN[i];
 800334e:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003350:	4669      	mov	r1, sp
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003352:	019b      	lsls	r3, r3, #6
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 8003354:	4818      	ldr	r0, [pc, #96]	; (80033b8 <CMWX1ZZABZ0XX_RADIO_IoDeInit+0xac>)
    initStruct.Mode = RADIO_DIO_MODE[i];
 8003356:	9701      	str	r7, [sp, #4]
    initStruct.Pin = RADIO_DIO_PIN[i];
 8003358:	9300      	str	r3, [sp, #0]
    HAL_GPIO_Init(RADIO_DIO_PORT[i], &initStruct);
 800335a:	f000 fe21 	bl	8003fa0 <HAL_GPIO_Init>
  /* DeInitialize Peripheral GPIOs */
  /* Instead of using HAL_GPIO_DeInit() which set ANALOG mode
     it's preferred to set in OUTPUT_PP mode, with the pins set to 0 */

  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800335e:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003360:	25a0      	movs	r5, #160	; 0xa0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003362:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 8003364:	2780      	movs	r7, #128	; 0x80
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003366:	05ed      	lsls	r5, r5, #23
 8003368:	0028      	movs	r0, r5
 800336a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800336c:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = RADIO_SPI_MOSI_GPIO_PIN;
 800336e:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MOSI_GPIO_PORT, &GPIO_InitStruct);
 8003370:	f000 fe16 	bl	8003fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 8003374:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 8003376:	0028      	movs	r0, r5
 8003378:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_MISO_GPIO_PIN;
 800337a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_MISO_GPIO_PORT, &GPIO_InitStruct);
 800337c:	f000 fe10 	bl	8003fa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003380:	0020      	movs	r0, r4
 8003382:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = RADIO_SPI_SCK_GPIO_PIN;
 8003384:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(RADIO_SPI_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003386:	f000 fe0b 	bl	8003fa0 <HAL_GPIO_Init>


  HAL_GPIO_WritePin(RADIO_SPI_MOSI_GPIO_PORT, RADIO_SPI_MOSI_GPIO_PIN, GPIO_PIN_RESET);
 800338a:	0039      	movs	r1, r7
 800338c:	0028      	movs	r0, r5
 800338e:	2200      	movs	r2, #0
 8003390:	f000 ff50 	bl	8004234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_MISO_GPIO_PORT, RADIO_SPI_MISO_GPIO_PIN, GPIO_PIN_RESET);
 8003394:	0028      	movs	r0, r5
 8003396:	2200      	movs	r2, #0
 8003398:	2140      	movs	r1, #64	; 0x40
 800339a:	f000 ff4b 	bl	8004234 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RADIO_SPI_SCK_GPIO_PORT, RADIO_SPI_SCK_GPIO_PIN, GPIO_PIN_RESET);
 800339e:	2200      	movs	r2, #0
 80033a0:	0031      	movs	r1, r6
 80033a2:	0020      	movs	r0, r4
 80033a4:	f000 ff46 	bl	8004234 <HAL_GPIO_WritePin>
}
 80033a8:	b00b      	add	sp, #44	; 0x2c
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ac:	50000400 	.word	0x50000400
 80033b0:	10110000 	.word	0x10110000
 80033b4:	10310000 	.word	0x10310000
 80033b8:	50000800 	.word	0x50000800

080033bc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>:
{
 80033bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80033be:	9000      	str	r0, [sp, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033c0:	f3ef 8310 	mrs	r3, PRIMASK
 80033c4:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 80033c6:	b672      	cpsid	i
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80033c8:	2400      	movs	r4, #0
    HAL_EXTI_GetHandle(&hRADIO_DIO_exti[i], RADIO_DIO_EXTI_LINE[i]);
 80033ca:	4e11      	ldr	r6, [pc, #68]	; (8003410 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x54>)
 80033cc:	4d11      	ldr	r5, [pc, #68]	; (8003414 <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0x58>)
 80033ce:	00e3      	lsls	r3, r4, #3
 80033d0:	18f6      	adds	r6, r6, r3
 80033d2:	00a7      	lsls	r7, r4, #2
 80033d4:	5979      	ldr	r1, [r7, r5]
 80033d6:	0030      	movs	r0, r6
 80033d8:	f000 fdc9 	bl	8003f6e <HAL_EXTI_GetHandle>
    HAL_EXTI_RegisterCallback(&hRADIO_DIO_exti[i], HAL_EXTI_COMMON_CB_ID, irqHandlers[i]);
 80033dc:	9b00      	ldr	r3, [sp, #0]
 80033de:	2100      	movs	r1, #0
 80033e0:	59da      	ldr	r2, [r3, r7]
 80033e2:	0030      	movs	r0, r6
 80033e4:	f000 fdbc 	bl	8003f60 <HAL_EXTI_RegisterCallback>
    HAL_NVIC_SetPriority(RADIO_DIO_IRQn[i], RADIO_DIO_IT_PRIO[i], 0x00);
 80033e8:	002b      	movs	r3, r5
 80033ea:	3310      	adds	r3, #16
 80033ec:	56e6      	ldrsb	r6, [r4, r3]
 80033ee:	3514      	adds	r5, #20
 80033f0:	2200      	movs	r2, #0
 80033f2:	0030      	movs	r0, r6
 80033f4:	5979      	ldr	r1, [r7, r5]
 80033f6:	f000 fc29 	bl	8003c4c <HAL_NVIC_SetPriority>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 80033fa:	3401      	adds	r4, #1
    HAL_NVIC_EnableIRQ(RADIO_DIO_IRQn[i]);
 80033fc:	0030      	movs	r0, r6
 80033fe:	f000 fc4f 	bl	8003ca0 <HAL_NVIC_EnableIRQ>
  for (uint32_t i = 0; i < RADIO_DIOn ; i++)
 8003402:	2c04      	cmp	r4, #4
 8003404:	d1e1      	bne.n	80033ca <CMWX1ZZABZ0XX_RADIO_IoIrqInit+0xe>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003406:	9b01      	ldr	r3, [sp, #4]
 8003408:	f383 8810 	msr	PRIMASK, r3
}
 800340c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800340e:	46c0      	nop			; (mov r8, r8)
 8003410:	20000528 	.word	0x20000528
 8003414:	0800f158 	.word	0x0800f158

08003418 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>:
}
 8003418:	2000      	movs	r0, #0
 800341a:	4770      	bx	lr

0800341c <CMWX1ZZABZ0XX_RADIO_SetAntSw>:
  switch (state)
 800341c:	3801      	subs	r0, #1
{
 800341e:	b510      	push	{r4, lr}
  switch (state)
 8003420:	2803      	cmp	r0, #3
 8003422:	d811      	bhi.n	8003448 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x2c>
 8003424:	f7fc fe82 	bl	800012c <__gnu_thumb1_case_uqi>
 8003428:	080d0902 	.word	0x080d0902
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_SET);
 800342c:	20a0      	movs	r0, #160	; 0xa0
 800342e:	2201      	movs	r2, #1
 8003430:	2102      	movs	r1, #2
 8003432:	05c0      	lsls	r0, r0, #23
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8003434:	f000 fefe 	bl	8004234 <HAL_GPIO_WritePin>
}
 8003438:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_SET);
 800343a:	2201      	movs	r2, #1
 800343c:	2104      	movs	r1, #4
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 800343e:	4809      	ldr	r0, [pc, #36]	; (8003464 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 8003440:	e7f8      	b.n	8003434 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x18>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_SET);
 8003442:	2201      	movs	r2, #1
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 8003444:	2102      	movs	r1, #2
 8003446:	e7fa      	b.n	800343e <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x22>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, GPIO_PIN_RESET);
 8003448:	20a0      	movs	r0, #160	; 0xa0
 800344a:	2200      	movs	r2, #0
 800344c:	2102      	movs	r1, #2
 800344e:	05c0      	lsls	r0, r0, #23
 8003450:	f000 fef0 	bl	8004234 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, GPIO_PIN_RESET);
 8003454:	2200      	movs	r2, #0
 8003456:	2104      	movs	r1, #4
 8003458:	4802      	ldr	r0, [pc, #8]	; (8003464 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x48>)
 800345a:	f000 feeb 	bl	8004234 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, GPIO_PIN_RESET);
 800345e:	2200      	movs	r2, #0
 8003460:	e7f0      	b.n	8003444 <CMWX1ZZABZ0XX_RADIO_SetAntSw+0x28>
 8003462:	46c0      	nop			; (mov r8, r8)
 8003464:	50000800 	.word	0x50000800

08003468 <CMWX1ZZABZ0XX_RADIO_CheckRfFrequency>:
}
 8003468:	2001      	movs	r0, #1
 800346a:	4770      	bx	lr

0800346c <CMWX1ZZABZ0XX_RADIO_Reset>:
{
 800346c:	b530      	push	{r4, r5, lr}
 800346e:	b087      	sub	sp, #28
  GPIO_InitTypeDef initStruct = { 0 };
 8003470:	220c      	movs	r2, #12
 8003472:	2100      	movs	r1, #0
 8003474:	a803      	add	r0, sp, #12
 8003476:	f00b f9a3 	bl	800e7c0 <memset>
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800347a:	2401      	movs	r4, #1
  initStruct.Speed = GPIO_SPEED_HIGH;
 800347c:	2303      	movs	r3, #3
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800347e:	4d0d      	ldr	r5, [pc, #52]	; (80034b4 <CMWX1ZZABZ0XX_RADIO_Reset+0x48>)
 8003480:	a901      	add	r1, sp, #4
 8003482:	0028      	movs	r0, r5
  initStruct.Speed = GPIO_SPEED_HIGH;
 8003484:	9304      	str	r3, [sp, #16]
  initStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003486:	9402      	str	r4, [sp, #8]
  initStruct.Pin = RADIO_RESET_PIN;
 8003488:	9401      	str	r4, [sp, #4]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 800348a:	f000 fd89 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(RADIO_RESET_PORT, RADIO_RESET_PIN, GPIO_PIN_RESET);
 800348e:	2200      	movs	r2, #0
 8003490:	0021      	movs	r1, r4
 8003492:	0028      	movs	r0, r5
 8003494:	f000 fece 	bl	8004234 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8003498:	0020      	movs	r0, r4
 800349a:	f7ff fb7d 	bl	8002b98 <HAL_Delay>
  initStruct.Mode = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80034a0:	0028      	movs	r0, r5
 80034a2:	a901      	add	r1, sp, #4
  initStruct.Mode = GPIO_NOPULL;
 80034a4:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(RADIO_RESET_PORT, &initStruct);
 80034a6:	f000 fd7b 	bl	8003fa0 <HAL_GPIO_Init>
  HAL_Delay(6);
 80034aa:	2006      	movs	r0, #6
 80034ac:	f7ff fb74 	bl	8002b98 <HAL_Delay>
}
 80034b0:	b007      	add	sp, #28
 80034b2:	bd30      	pop	{r4, r5, pc}
 80034b4:	50000800 	.word	0x50000800

080034b8 <CMWX1ZZABZ0XX_RADIO_Bus_Init>:
{
 80034b8:	b510      	push	{r4, lr}
  RADIO_SPI_Init();
 80034ba:	f7ff fd85 	bl	8002fc8 <BSP_SPI1_Init>
}
 80034be:	bd10      	pop	{r4, pc}

080034c0 <CMWX1ZZABZ0XX_RADIO_SendRecv>:
{
 80034c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80034c2:	240e      	movs	r4, #14
{
 80034c4:	466b      	mov	r3, sp
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80034c6:	446c      	add	r4, sp
{
 80034c8:	80d8      	strh	r0, [r3, #6]
 80034ca:	3306      	adds	r3, #6
  RADIO_SPI_SendRecv((uint8_t *) &txData, (uint8_t *) &rxData, 1);
 80034cc:	2201      	movs	r2, #1
 80034ce:	0021      	movs	r1, r4
 80034d0:	0018      	movs	r0, r3
 80034d2:	f7ff fd33 	bl	8002f3c <BSP_SPI1_SendRecv>
  return rxData;
 80034d6:	8820      	ldrh	r0, [r4, #0]
}
 80034d8:	b004      	add	sp, #16
 80034da:	bd10      	pop	{r4, pc}

080034dc <CMWX1ZZABZ0XX_RADIO_ChipSelect>:
{
 80034dc:	0002      	movs	r2, r0
 80034de:	b510      	push	{r4, lr}
  if (state == 0)
 80034e0:	2800      	cmp	r0, #0
 80034e2:	d106      	bne.n	80034f2 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x16>
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80034e4:	2180      	movs	r1, #128	; 0x80
 80034e6:	20a0      	movs	r0, #160	; 0xa0
 80034e8:	0209      	lsls	r1, r1, #8
 80034ea:	05c0      	lsls	r0, r0, #23
 80034ec:	f000 fea2 	bl	8004234 <HAL_GPIO_WritePin>
}
 80034f0:	bd10      	pop	{r4, pc}
    HAL_GPIO_WritePin(RADIO_NSS_PORT, RADIO_NSS_PIN, GPIO_PIN_SET);
 80034f2:	2201      	movs	r2, #1
 80034f4:	e7f6      	b.n	80034e4 <CMWX1ZZABZ0XX_RADIO_ChipSelect+0x8>
	...

080034f8 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>:
{
 80034f8:	b510      	push	{r4, lr}
  return HAL_GPIO_ReadPin(RADIO_DIO_1_PORT, RADIO_DIO_1_PIN);
 80034fa:	2102      	movs	r1, #2
 80034fc:	4801      	ldr	r0, [pc, #4]	; (8003504 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState+0xc>)
 80034fe:	f000 fe93 	bl	8004228 <HAL_GPIO_ReadPin>
}
 8003502:	bd10      	pop	{r4, pc}
 8003504:	50000400 	.word	0x50000400

08003508 <SystemInit>:
  * @retval None
  */
void SystemInit(void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	4b10      	ldr	r3, [pc, #64]	; (800354c <SystemInit+0x44>)
 800350c:	0052      	lsls	r2, r2, #1
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8003514:	68da      	ldr	r2, [r3, #12]
 8003516:	490e      	ldr	r1, [pc, #56]	; (8003550 <SystemInit+0x48>)
 8003518:	400a      	ands	r2, r1
 800351a:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	490d      	ldr	r1, [pc, #52]	; (8003554 <SystemInit+0x4c>)
 8003520:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003522:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8003524:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	438a      	bics	r2, r1
 800352a:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	490a      	ldr	r1, [pc, #40]	; (8003558 <SystemInit+0x50>)
 8003530:	400a      	ands	r2, r1
 8003532:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	4909      	ldr	r1, [pc, #36]	; (800355c <SystemInit+0x54>)
 8003538:	400a      	ands	r2, r1
 800353a:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003540:	2280      	movs	r2, #128	; 0x80
 8003542:	4b07      	ldr	r3, [pc, #28]	; (8003560 <SystemInit+0x58>)
 8003544:	0512      	lsls	r2, r2, #20
 8003546:	609a      	str	r2, [r3, #8]
#endif
}
 8003548:	4770      	bx	lr
 800354a:	46c0      	nop			; (mov r8, r8)
 800354c:	40021000 	.word	0x40021000
 8003550:	88ff400c 	.word	0x88ff400c
 8003554:	fef6fff6 	.word	0xfef6fff6
 8003558:	fffbffff 	.word	0xfffbffff
 800355c:	ff02ffff 	.word	0xff02ffff
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <HAL_Init>:
#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
#endif /* PREREAD_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003564:	2302      	movs	r3, #2
 8003566:	4a08      	ldr	r2, [pc, #32]	; (8003588 <HAL_Init+0x24>)
{
 8003568:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356a:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800356c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800356e:	430b      	orrs	r3, r1
 8003570:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003572:	f7ff fb0b 	bl	8002b8c <HAL_InitTick>
 8003576:	1e04      	subs	r4, r0, #0
 8003578:	d103      	bne.n	8003582 <HAL_Init+0x1e>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800357a:	f7ff f9b1 	bl	80028e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 800357e:	0020      	movs	r0, r4
 8003580:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8003582:	2401      	movs	r4, #1
 8003584:	e7fb      	b.n	800357e <HAL_Init+0x1a>
 8003586:	46c0      	nop			; (mov r8, r8)
 8003588:	40022000 	.word	0x40022000

0800358c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800358c:	4a03      	ldr	r2, [pc, #12]	; (800359c <HAL_IncTick+0x10>)
 800358e:	4b04      	ldr	r3, [pc, #16]	; (80035a0 <HAL_IncTick+0x14>)
 8003590:	6811      	ldr	r1, [r2, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	185b      	adds	r3, r3, r1
 8003596:	6013      	str	r3, [r2, #0]
}
 8003598:	4770      	bx	lr
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	20000548 	.word	0x20000548
 80035a0:	20000064 	.word	0x20000064

080035a4 <HAL_GetUIDw0>:
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80035a4:	4b01      	ldr	r3, [pc, #4]	; (80035ac <HAL_GetUIDw0+0x8>)
 80035a6:	6818      	ldr	r0, [r3, #0]
}
 80035a8:	4770      	bx	lr
 80035aa:	46c0      	nop			; (mov r8, r8)
 80035ac:	1ff80050 	.word	0x1ff80050

080035b0 <HAL_GetUIDw1>:
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 80035b0:	4b01      	ldr	r3, [pc, #4]	; (80035b8 <HAL_GetUIDw1+0x8>)
 80035b2:	6818      	ldr	r0, [r3, #0]
}
 80035b4:	4770      	bx	lr
 80035b6:	46c0      	nop			; (mov r8, r8)
 80035b8:	1ff80054 	.word	0x1ff80054

080035bc <HAL_GetUIDw2>:
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 80035bc:	4b01      	ldr	r3, [pc, #4]	; (80035c4 <HAL_GetUIDw2+0x8>)
 80035be:	6818      	ldr	r0, [r3, #0]
}
 80035c0:	4770      	bx	lr
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	1ff80064 	.word	0x1ff80064

080035c8 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disables the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80035c8:	2101      	movs	r1, #1
 80035ca:	4a02      	ldr	r2, [pc, #8]	; (80035d4 <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80035cc:	6853      	ldr	r3, [r2, #4]
 80035ce:	438b      	bics	r3, r1
 80035d0:	6053      	str	r3, [r2, #4]
}
 80035d2:	4770      	bx	lr
 80035d4:	40015800 	.word	0x40015800

080035d8 <HAL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disables the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 80035d8:	2102      	movs	r1, #2
 80035da:	4a02      	ldr	r2, [pc, #8]	; (80035e4 <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 80035dc:	6853      	ldr	r3, [r2, #4]
 80035de:	438b      	bics	r3, r1
 80035e0:	6053      	str	r3, [r2, #4]
}
 80035e2:	4770      	bx	lr
 80035e4:	40015800 	.word	0x40015800

080035e8 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disables the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80035e8:	2104      	movs	r1, #4
 80035ea:	4a02      	ldr	r2, [pc, #8]	; (80035f4 <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 80035ec:	6853      	ldr	r3, [r2, #4]
 80035ee:	438b      	bics	r3, r1
 80035f0:	6053      	str	r3, [r2, #4]
}
 80035f2:	4770      	bx	lr
 80035f4:	40015800 	.word	0x40015800

080035f8 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80035f8:	4b08      	ldr	r3, [pc, #32]	; (800361c <ADC_DelayMicroSecond+0x24>)
{
 80035fa:	b513      	push	{r0, r1, r4, lr}
 80035fc:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 80035fe:	4908      	ldr	r1, [pc, #32]	; (8003620 <ADC_DelayMicroSecond+0x28>)
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	f7fc fdb1 	bl	8000168 <__udivsi3>
 8003606:	4344      	muls	r4, r0
 8003608:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 800360a:	9b01      	ldr	r3, [sp, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d100      	bne.n	8003612 <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8003610:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8003612:	9b01      	ldr	r3, [sp, #4]
 8003614:	3b01      	subs	r3, #1
 8003616:	9301      	str	r3, [sp, #4]
 8003618:	e7f7      	b.n	800360a <ADC_DelayMicroSecond+0x12>
 800361a:	46c0      	nop			; (mov r8, r8)
 800361c:	20000060 	.word	0x20000060
 8003620:	000f4240 	.word	0x000f4240

08003624 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003624:	2103      	movs	r1, #3
 8003626:	6803      	ldr	r3, [r0, #0]
{
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800362c:	6898      	ldr	r0, [r3, #8]
 800362e:	4008      	ands	r0, r1
 8003630:	2801      	cmp	r0, #1
 8003632:	d001      	beq.n	8003638 <ADC_Disable+0x14>
  return HAL_OK;
 8003634:	2000      	movs	r0, #0
}
 8003636:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4202      	tst	r2, r0
 800363c:	d0fa      	beq.n	8003634 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800363e:	2205      	movs	r2, #5
 8003640:	689d      	ldr	r5, [r3, #8]
 8003642:	4015      	ands	r5, r2
 8003644:	2d01      	cmp	r5, #1
 8003646:	d119      	bne.n	800367c <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8003648:	6898      	ldr	r0, [r3, #8]
 800364a:	3a03      	subs	r2, #3
 800364c:	4302      	orrs	r2, r0
 800364e:	609a      	str	r2, [r3, #8]
 8003650:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8003652:	f7ff fa9d 	bl	8002b90 <HAL_GetTick>
 8003656:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8003658:	6823      	ldr	r3, [r4, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	422b      	tst	r3, r5
 800365e:	d0e9      	beq.n	8003634 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003660:	f7ff fa96 	bl	8002b90 <HAL_GetTick>
 8003664:	1b80      	subs	r0, r0, r6
 8003666:	280a      	cmp	r0, #10
 8003668:	d9f6      	bls.n	8003658 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366a:	2310      	movs	r3, #16
 800366c:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 800366e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003670:	4313      	orrs	r3, r2
 8003672:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003674:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003676:	432b      	orrs	r3, r5
 8003678:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800367a:	e7dc      	b.n	8003636 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367c:	2310      	movs	r3, #16
 800367e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003680:	4313      	orrs	r3, r2
 8003682:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003684:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003686:	4303      	orrs	r3, r0
 8003688:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 800368a:	e7d4      	b.n	8003636 <ADC_Disable+0x12>

0800368c <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 800368c:	2103      	movs	r1, #3
 800368e:	6803      	ldr	r3, [r0, #0]
{
 8003690:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003692:	689a      	ldr	r2, [r3, #8]
{
 8003694:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003696:	400a      	ands	r2, r1
 8003698:	2a01      	cmp	r2, #1
 800369a:	d104      	bne.n	80036a6 <ADC_Enable+0x1a>
 800369c:	6819      	ldr	r1, [r3, #0]
 800369e:	4211      	tst	r1, r2
 80036a0:	d001      	beq.n	80036a6 <ADC_Enable+0x1a>
  return HAL_OK;
 80036a2:	2000      	movs	r0, #0
}
 80036a4:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80036a6:	6899      	ldr	r1, [r3, #8]
 80036a8:	4a13      	ldr	r2, [pc, #76]	; (80036f8 <ADC_Enable+0x6c>)
 80036aa:	4211      	tst	r1, r2
 80036ac:	d008      	beq.n	80036c0 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ae:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b0:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036b2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80036b4:	4313      	orrs	r3, r2
 80036b6:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036ba:	4303      	orrs	r3, r0
 80036bc:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 80036be:	e7f1      	b.n	80036a4 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 80036c0:	2501      	movs	r5, #1
 80036c2:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80036c4:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 80036c6:	432a      	orrs	r2, r5
 80036c8:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 80036ca:	f7ff ff95 	bl	80035f8 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 80036ce:	f7ff fa5f 	bl	8002b90 <HAL_GetTick>
 80036d2:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80036d4:	6823      	ldr	r3, [r4, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	422b      	tst	r3, r5
 80036da:	d1e2      	bne.n	80036a2 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80036dc:	f7ff fa58 	bl	8002b90 <HAL_GetTick>
 80036e0:	1b80      	subs	r0, r0, r6
 80036e2:	280a      	cmp	r0, #10
 80036e4:	d9f6      	bls.n	80036d4 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e6:	2310      	movs	r3, #16
 80036e8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 80036ea:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ec:	4313      	orrs	r3, r2
 80036ee:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80036f2:	432b      	orrs	r3, r5
 80036f4:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 80036f6:	e7d5      	b.n	80036a4 <ADC_Enable+0x18>
 80036f8:	80000017 	.word	0x80000017

080036fc <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 80036fc:	2204      	movs	r2, #4
 80036fe:	6803      	ldr	r3, [r0, #0]
{
 8003700:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003702:	6899      	ldr	r1, [r3, #8]
{
 8003704:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8003706:	4211      	tst	r1, r2
 8003708:	d101      	bne.n	800370e <ADC_ConversionStop+0x12>
  return HAL_OK;
 800370a:	2000      	movs	r0, #0
}
 800370c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800370e:	6899      	ldr	r1, [r3, #8]
 8003710:	4211      	tst	r1, r2
 8003712:	d006      	beq.n	8003722 <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8003714:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8003716:	0792      	lsls	r2, r2, #30
 8003718:	d403      	bmi.n	8003722 <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 800371a:	2210      	movs	r2, #16
 800371c:	6899      	ldr	r1, [r3, #8]
 800371e:	430a      	orrs	r2, r1
 8003720:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8003722:	f7ff fa35 	bl	8002b90 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8003726:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8003728:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 800372a:	6823      	ldr	r3, [r4, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	4233      	tst	r3, r6
 8003730:	d0eb      	beq.n	800370a <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003732:	f7ff fa2d 	bl	8002b90 <HAL_GetTick>
 8003736:	1b40      	subs	r0, r0, r5
 8003738:	280a      	cmp	r0, #10
 800373a:	d9f6      	bls.n	800372a <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373c:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800373e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003740:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003742:	4313      	orrs	r3, r2
 8003744:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003746:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003748:	4303      	orrs	r3, r0
 800374a:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 800374c:	e7de      	b.n	800370c <ADC_ConversionStop+0x10>
	...

08003750 <HAL_ADC_Init>:
{
 8003750:	b570      	push	{r4, r5, r6, lr}
 8003752:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003754:	2001      	movs	r0, #1
  if(hadc == NULL)
 8003756:	2c00      	cmp	r4, #0
 8003758:	d018      	beq.n	800378c <HAL_ADC_Init+0x3c>
  if(hadc->State == HAL_ADC_STATE_RESET)
 800375a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800375c:	2b00      	cmp	r3, #0
 800375e:	d106      	bne.n	800376e <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8003760:	0022      	movs	r2, r4
 8003762:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8003764:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8003766:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8003768:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 800376a:	f7fe fce9 	bl	8002140 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800376e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003770:	06db      	lsls	r3, r3, #27
 8003772:	d403      	bmi.n	800377c <HAL_ADC_Init+0x2c>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8003774:	6823      	ldr	r3, [r4, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8003778:	0752      	lsls	r2, r2, #29
 800377a:	d508      	bpl.n	800378e <HAL_ADC_Init+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800377c:	2310      	movs	r3, #16
 800377e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8003780:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003782:	4313      	orrs	r3, r2
 8003784:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003786:	2300      	movs	r3, #0
 8003788:	3450      	adds	r4, #80	; 0x50
 800378a:	7023      	strb	r3, [r4, #0]
}
 800378c:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 800378e:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003790:	4a55      	ldr	r2, [pc, #340]	; (80038e8 <HAL_ADC_Init+0x198>)
 8003792:	4011      	ands	r1, r2
 8003794:	3206      	adds	r2, #6
 8003796:	32ff      	adds	r2, #255	; 0xff
 8003798:	430a      	orrs	r2, r1
 800379a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 800379c:	2203      	movs	r2, #3
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	4011      	ands	r1, r2
 80037a2:	4a52      	ldr	r2, [pc, #328]	; (80038ec <HAL_ADC_Init+0x19c>)
 80037a4:	2901      	cmp	r1, #1
 80037a6:	d102      	bne.n	80037ae <HAL_ADC_Init+0x5e>
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	4208      	tst	r0, r1
 80037ac:	d119      	bne.n	80037e2 <HAL_ADC_Init+0x92>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80037ae:	2580      	movs	r5, #128	; 0x80
 80037b0:	6861      	ldr	r1, [r4, #4]
 80037b2:	05ed      	lsls	r5, r5, #23
 80037b4:	0048      	lsls	r0, r1, #1
 80037b6:	0840      	lsrs	r0, r0, #1
 80037b8:	42a8      	cmp	r0, r5
 80037ba:	d003      	beq.n	80037c4 <HAL_ADC_Init+0x74>
 80037bc:	2080      	movs	r0, #128	; 0x80
 80037be:	0600      	lsls	r0, r0, #24
 80037c0:	4281      	cmp	r1, r0
 80037c2:	d176      	bne.n	80038b2 <HAL_ADC_Init+0x162>
 80037c4:	6918      	ldr	r0, [r3, #16]
 80037c6:	0080      	lsls	r0, r0, #2
 80037c8:	0880      	lsrs	r0, r0, #2
 80037ca:	6118      	str	r0, [r3, #16]
 80037cc:	6918      	ldr	r0, [r3, #16]
 80037ce:	4301      	orrs	r1, r0
 80037d0:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 80037d2:	2018      	movs	r0, #24
 80037d4:	68d9      	ldr	r1, [r3, #12]
 80037d6:	4381      	bics	r1, r0
 80037d8:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80037da:	68d9      	ldr	r1, [r3, #12]
 80037dc:	68a0      	ldr	r0, [r4, #8]
 80037de:	4301      	orrs	r1, r0
 80037e0:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80037e2:	6811      	ldr	r1, [r2, #0]
 80037e4:	4842      	ldr	r0, [pc, #264]	; (80038f0 <HAL_ADC_Init+0x1a0>)
 80037e6:	4001      	ands	r1, r0
 80037e8:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80037ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80037ec:	6810      	ldr	r0, [r2, #0]
 80037ee:	0649      	lsls	r1, r1, #25
 80037f0:	4301      	orrs	r1, r0
 80037f2:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80037f4:	2280      	movs	r2, #128	; 0x80
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	0552      	lsls	r2, r2, #21
 80037fa:	4211      	tst	r1, r2
 80037fc:	d102      	bne.n	8003804 <HAL_ADC_Init+0xb4>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80037fe:	6899      	ldr	r1, [r3, #8]
 8003800:	430a      	orrs	r2, r1
 8003802:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	493b      	ldr	r1, [pc, #236]	; (80038f4 <HAL_ADC_Init+0x1a4>)
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003808:	6b25      	ldr	r5, [r4, #48]	; 0x30
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800380a:	400a      	ands	r2, r1
 800380c:	60da      	str	r2, [r3, #12]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800380e:	1c62      	adds	r2, r4, #1
 8003810:	7fd1      	ldrb	r1, [r2, #31]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003812:	68e2      	ldr	r2, [r4, #12]
 8003814:	68d8      	ldr	r0, [r3, #12]
 8003816:	432a      	orrs	r2, r5
 8003818:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800381a:	69a0      	ldr	r0, [r4, #24]
 800381c:	0380      	lsls	r0, r0, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800381e:	4302      	orrs	r2, r0
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8003820:	69e0      	ldr	r0, [r4, #28]
 8003822:	03c0      	lsls	r0, r0, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003824:	4302      	orrs	r2, r0
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8003826:	0348      	lsls	r0, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003828:	4302      	orrs	r2, r0
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800382a:	0020      	movs	r0, r4
 800382c:	302c      	adds	r0, #44	; 0x2c
 800382e:	7800      	ldrb	r0, [r0, #0]
 8003830:	0040      	lsls	r0, r0, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003832:	4302      	orrs	r2, r0
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8003834:	6920      	ldr	r0, [r4, #16]
 8003836:	3802      	subs	r0, #2
 8003838:	4245      	negs	r5, r0
 800383a:	4168      	adcs	r0, r5
 800383c:	0080      	lsls	r0, r0, #2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800383e:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003840:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8003842:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003844:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003846:	30ff      	adds	r0, #255	; 0xff
 8003848:	4282      	cmp	r2, r0
 800384a:	d004      	beq.n	8003856 <HAL_ADC_Init+0x106>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800384c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800384e:	68d8      	ldr	r0, [r3, #12]
 8003850:	432a      	orrs	r2, r5
 8003852:	4302      	orrs	r2, r0
 8003854:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003856:	1ca2      	adds	r2, r4, #2
 8003858:	7fd2      	ldrb	r2, [r2, #31]
 800385a:	2a01      	cmp	r2, #1
 800385c:	d106      	bne.n	800386c <HAL_ADC_Init+0x11c>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800385e:	2900      	cmp	r1, #0
 8003860:	d133      	bne.n	80038ca <HAL_ADC_Init+0x17a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	68d9      	ldr	r1, [r3, #12]
 8003866:	0252      	lsls	r2, r2, #9
 8003868:	430a      	orrs	r2, r1
 800386a:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 800386c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800386e:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8003870:	2901      	cmp	r1, #1
 8003872:	d132      	bne.n	80038da <HAL_ADC_Init+0x18a>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003874:	4820      	ldr	r0, [pc, #128]	; (80038f8 <HAL_ADC_Init+0x1a8>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003876:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8003878:	4002      	ands	r2, r0
 800387a:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800387c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800387e:	6918      	ldr	r0, [r3, #16]
 8003880:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8003882:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8003884:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8003886:	4302      	orrs	r2, r0
 8003888:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800388a:	691a      	ldr	r2, [r3, #16]
 800388c:	4311      	orrs	r1, r2
 800388e:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003890:	2107      	movs	r1, #7
 8003892:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8003894:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8003896:	438a      	bics	r2, r1
 8003898:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800389a:	695a      	ldr	r2, [r3, #20]
 800389c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800389e:	430a      	orrs	r2, r1
 80038a0:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 80038a2:	2303      	movs	r3, #3
  ADC_CLEAR_ERRORCODE(hadc);
 80038a4:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 80038a6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80038a8:	439a      	bics	r2, r3
 80038aa:	3b02      	subs	r3, #2
 80038ac:	4313      	orrs	r3, r2
 80038ae:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 80038b0:	e76c      	b.n	800378c <HAL_ADC_Init+0x3c>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80038b2:	6918      	ldr	r0, [r3, #16]
 80038b4:	4d11      	ldr	r5, [pc, #68]	; (80038fc <HAL_ADC_Init+0x1ac>)
 80038b6:	0080      	lsls	r0, r0, #2
 80038b8:	0880      	lsrs	r0, r0, #2
 80038ba:	6118      	str	r0, [r3, #16]
 80038bc:	6810      	ldr	r0, [r2, #0]
 80038be:	4028      	ands	r0, r5
 80038c0:	6010      	str	r0, [r2, #0]
 80038c2:	6810      	ldr	r0, [r2, #0]
 80038c4:	4301      	orrs	r1, r0
 80038c6:	6011      	str	r1, [r2, #0]
 80038c8:	e783      	b.n	80037d2 <HAL_ADC_Init+0x82>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038ca:	2120      	movs	r1, #32
 80038cc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038ce:	4301      	orrs	r1, r0
 80038d0:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80038d4:	430a      	orrs	r2, r1
 80038d6:	65a2      	str	r2, [r4, #88]	; 0x58
 80038d8:	e7c8      	b.n	800386c <HAL_ADC_Init+0x11c>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80038da:	2101      	movs	r1, #1
 80038dc:	420a      	tst	r2, r1
 80038de:	d0d7      	beq.n	8003890 <HAL_ADC_Init+0x140>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	438a      	bics	r2, r1
 80038e4:	611a      	str	r2, [r3, #16]
 80038e6:	e7d3      	b.n	8003890 <HAL_ADC_Init+0x140>
 80038e8:	fffffefd 	.word	0xfffffefd
 80038ec:	40012708 	.word	0x40012708
 80038f0:	fdffffff 	.word	0xfdffffff
 80038f4:	fffe0219 	.word	0xfffe0219
 80038f8:	fffffc03 	.word	0xfffffc03
 80038fc:	ffc3ffff 	.word	0xffc3ffff

08003900 <HAL_ADC_DeInit>:
{
 8003900:	b570      	push	{r4, r5, r6, lr}
 8003902:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003904:	2501      	movs	r5, #1
  if(hadc == NULL)
 8003906:	2800      	cmp	r0, #0
 8003908:	d011      	beq.n	800392e <HAL_ADC_DeInit+0x2e>
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 800390a:	2302      	movs	r3, #2
 800390c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 800390e:	4313      	orrs	r3, r2
 8003910:	6543      	str	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003912:	f7ff fef3 	bl	80036fc <ADC_ConversionStop>
 8003916:	1e05      	subs	r5, r0, #0
  if (tmp_hal_status == HAL_OK)
 8003918:	d137      	bne.n	800398a <HAL_ADC_DeInit+0x8a>
    tmp_hal_status = ADC_Disable(hadc);
 800391a:	0020      	movs	r0, r4
 800391c:	f7ff fe82 	bl	8003624 <ADC_Disable>
 8003920:	0005      	movs	r5, r0
    if (tmp_hal_status != HAL_ERROR)
 8003922:	2801      	cmp	r0, #1
 8003924:	d105      	bne.n	8003932 <HAL_ADC_DeInit+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8003926:	2501      	movs	r5, #1
  __HAL_UNLOCK(hadc);
 8003928:	2300      	movs	r3, #0
 800392a:	3450      	adds	r4, #80	; 0x50
 800392c:	7023      	strb	r3, [r4, #0]
}
 800392e:	0028      	movs	r0, r5
 8003930:	bd70      	pop	{r4, r5, r6, pc}
      hadc->State = HAL_ADC_STATE_READY;
 8003932:	2301      	movs	r3, #1
 8003934:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 8003936:	6823      	ldr	r3, [r4, #0]
 8003938:	4915      	ldr	r1, [pc, #84]	; (8003990 <HAL_ADC_DeInit+0x90>)
 800393a:	685a      	ldr	r2, [r3, #4]
    HAL_ADC_MspDeInit(hadc);
 800393c:	0020      	movs	r0, r4
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD | ADC_IT_OVR | ADC_IT_EOCAL | ADC_IT_EOS |  \
 800393e:	400a      	ands	r2, r1
 8003940:	605a      	str	r2, [r3, #4]
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003942:	4a14      	ldr	r2, [pc, #80]	; (8003994 <HAL_ADC_DeInit+0x94>)
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003944:	4914      	ldr	r1, [pc, #80]	; (8003998 <HAL_ADC_DeInit+0x98>)
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD | ADC_FLAG_EOCAL | ADC_FLAG_OVR | ADC_FLAG_EOS |  \
 8003946:	601a      	str	r2, [r3, #0]
    hadc->Instance->CR &= ~ADC_CR_ADVREGEN;
 8003948:	689a      	ldr	r2, [r3, #8]
 800394a:	400a      	ands	r2, r1
 800394c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH  | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | \
 800394e:	68da      	ldr	r2, [r3, #12]
 8003950:	4912      	ldr	r1, [pc, #72]	; (800399c <HAL_ADC_DeInit+0x9c>)
 8003952:	400a      	ands	r2, r1
 8003954:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 8003956:	691a      	ldr	r2, [r3, #16]
 8003958:	4911      	ldr	r1, [pc, #68]	; (80039a0 <HAL_ADC_DeInit+0xa0>)
 800395a:	400a      	ands	r2, r1
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 800395c:	2107      	movs	r1, #7
    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_TOVS  | ADC_CFGR2_OVSS  | ADC_CFGR2_OVSR | \
 800395e:	611a      	str	r2, [r3, #16]
    hadc->Instance->SMPR &= ~(ADC_SMPR_SMPR);
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	438a      	bics	r2, r1
 8003964:	615a      	str	r2, [r3, #20]
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 8003966:	6a1a      	ldr	r2, [r3, #32]
 8003968:	490e      	ldr	r1, [pc, #56]	; (80039a4 <HAL_ADC_DeInit+0xa4>)
 800396a:	400a      	ands	r2, r1
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 800396c:	217f      	movs	r1, #127	; 0x7f
    hadc->Instance->TR &= ~(ADC_TR_LT | ADC_TR_HT);
 800396e:	621a      	str	r2, [r3, #32]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003970:	33b4      	adds	r3, #180	; 0xb4
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	438a      	bics	r2, r1
 8003976:	601a      	str	r2, [r3, #0]
    hadc->Instance->CALFACT &= ~(ADC_CALFACT_CALFACT);
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	438a      	bics	r2, r1
 800397c:	601a      	str	r2, [r3, #0]
    HAL_ADC_MspDeInit(hadc);
 800397e:	f7fe fbef 	bl	8002160 <HAL_ADC_MspDeInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003982:	2300      	movs	r3, #0
 8003984:	65a3      	str	r3, [r4, #88]	; 0x58
    hadc->State = HAL_ADC_STATE_RESET;
 8003986:	6563      	str	r3, [r4, #84]	; 0x54
 8003988:	e7ce      	b.n	8003928 <HAL_ADC_DeInit+0x28>
  if (tmp_hal_status != HAL_ERROR)
 800398a:	2801      	cmp	r0, #1
 800398c:	d0cb      	beq.n	8003926 <HAL_ADC_DeInit+0x26>
 800398e:	e7d2      	b.n	8003936 <HAL_ADC_DeInit+0x36>
 8003990:	fffff760 	.word	0xfffff760
 8003994:	0000089f 	.word	0x0000089f
 8003998:	efffffff 	.word	0xefffffff
 800399c:	833e0200 	.word	0x833e0200
 80039a0:	3ffffc02 	.word	0x3ffffc02
 80039a4:	f000f000 	.word	0xf000f000

080039a8 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039a8:	6803      	ldr	r3, [r0, #0]
{
 80039aa:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039ac:	689b      	ldr	r3, [r3, #8]
{
 80039ae:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 80039b0:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80039b2:	075b      	lsls	r3, r3, #29
 80039b4:	d41a      	bmi.n	80039ec <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 80039b6:	0025      	movs	r5, r4
 80039b8:	3550      	adds	r5, #80	; 0x50
 80039ba:	782b      	ldrb	r3, [r5, #0]
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d015      	beq.n	80039ec <HAL_ADC_Start+0x44>
 80039c0:	2301      	movs	r3, #1
 80039c2:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80039c4:	69e3      	ldr	r3, [r4, #28]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d111      	bne.n	80039ee <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80039ca:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 80039ce:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 80039d0:	401a      	ands	r2, r3
 80039d2:	2380      	movs	r3, #128	; 0x80
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039d8:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 80039da:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 80039dc:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 80039de:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80039e4:	6899      	ldr	r1, [r3, #8]
 80039e6:	3a18      	subs	r2, #24
 80039e8:	430a      	orrs	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
}
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 80039ee:	0020      	movs	r0, r4
 80039f0:	f7ff fe4c 	bl	800368c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80039f4:	2800      	cmp	r0, #0
 80039f6:	d0e8      	beq.n	80039ca <HAL_ADC_Start+0x22>
 80039f8:	e7f8      	b.n	80039ec <HAL_ADC_Start+0x44>
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	fffff0fe 	.word	0xfffff0fe

08003a00 <HAL_ADC_Stop>:
{
 8003a00:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8003a02:	0006      	movs	r6, r0
 8003a04:	3650      	adds	r6, #80	; 0x50
 8003a06:	7833      	ldrb	r3, [r6, #0]
{
 8003a08:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003a0a:	2002      	movs	r0, #2
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d012      	beq.n	8003a36 <HAL_ADC_Stop+0x36>
 8003a10:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a12:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8003a14:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a16:	f7ff fe71 	bl	80036fc <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003a1a:	2800      	cmp	r0, #0
 8003a1c:	d109      	bne.n	8003a32 <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8003a1e:	0020      	movs	r0, r4
 8003a20:	f7ff fe00 	bl	8003624 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003a24:	2800      	cmp	r0, #0
 8003a26:	d104      	bne.n	8003a32 <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8003a28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003a2a:	4a03      	ldr	r2, [pc, #12]	; (8003a38 <HAL_ADC_Stop+0x38>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	431d      	orrs	r5, r3
 8003a30:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8003a32:	2300      	movs	r3, #0
 8003a34:	7033      	strb	r3, [r6, #0]
}
 8003a36:	bd70      	pop	{r4, r5, r6, pc}
 8003a38:	fffffefe 	.word	0xfffffefe

08003a3c <HAL_ADC_PollForConversion>:
{
 8003a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a3e:	6946      	ldr	r6, [r0, #20]
{
 8003a40:	0004      	movs	r4, r0
 8003a42:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a44:	2e08      	cmp	r6, #8
 8003a46:	d00d      	beq.n	8003a64 <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003a48:	6803      	ldr	r3, [r0, #0]
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003a4e:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8003a50:	4203      	tst	r3, r0
 8003a52:	d007      	beq.n	8003a64 <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a54:	2320      	movs	r3, #32
 8003a56:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8003a58:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	7023      	strb	r3, [r4, #0]
}
 8003a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8003a64:	f7ff f894 	bl	8002b90 <HAL_GetTick>
 8003a68:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003a6a:	6823      	ldr	r3, [r4, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4216      	tst	r6, r2
 8003a70:	d025      	beq.n	8003abe <HAL_ADC_PollForConversion+0x82>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a72:	2280      	movs	r2, #128	; 0x80
 8003a74:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003a76:	0092      	lsls	r2, r2, #2
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a7c:	22c0      	movs	r2, #192	; 0xc0
 8003a7e:	68d9      	ldr	r1, [r3, #12]
 8003a80:	0112      	lsls	r2, r2, #4
 8003a82:	4211      	tst	r1, r2
 8003a84:	d114      	bne.n	8003ab0 <HAL_ADC_PollForConversion+0x74>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a86:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a88:	7fd2      	ldrb	r2, [r2, #31]
 8003a8a:	2a00      	cmp	r2, #0
 8003a8c:	d110      	bne.n	8003ab0 <HAL_ADC_PollForConversion+0x74>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	0712      	lsls	r2, r2, #28
 8003a92:	d50d      	bpl.n	8003ab0 <HAL_ADC_PollForConversion+0x74>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003a94:	689a      	ldr	r2, [r3, #8]
 8003a96:	0752      	lsls	r2, r2, #29
 8003a98:	d424      	bmi.n	8003ae4 <HAL_ADC_PollForConversion+0xa8>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003a9a:	210c      	movs	r1, #12
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8003aa2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003aa4:	4a14      	ldr	r2, [pc, #80]	; (8003af8 <HAL_ADC_PollForConversion+0xbc>)
 8003aa6:	4011      	ands	r1, r2
 8003aa8:	3204      	adds	r2, #4
 8003aaa:	32ff      	adds	r2, #255	; 0xff
 8003aac:	430a      	orrs	r2, r1
 8003aae:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8003ab0:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8003ab2:	69a2      	ldr	r2, [r4, #24]
 8003ab4:	4282      	cmp	r2, r0
 8003ab6:	d1d4      	bne.n	8003a62 <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ab8:	220c      	movs	r2, #12
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	e7d1      	b.n	8003a62 <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8003abe:	1c6a      	adds	r2, r5, #1
 8003ac0:	d0d4      	beq.n	8003a6c <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	d108      	bne.n	8003ad8 <HAL_ADC_PollForConversion+0x9c>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ac6:	2304      	movs	r3, #4
 8003ac8:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003aca:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003acc:	4313      	orrs	r3, r2
 8003ace:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8003ad0:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003ad2:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8003ad4:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8003ad6:	e7c4      	b.n	8003a62 <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003ad8:	f7ff f85a 	bl	8002b90 <HAL_GetTick>
 8003adc:	1bc0      	subs	r0, r0, r7
 8003ade:	42a8      	cmp	r0, r5
 8003ae0:	d9c3      	bls.n	8003a6a <HAL_ADC_PollForConversion+0x2e>
 8003ae2:	e7f0      	b.n	8003ac6 <HAL_ADC_PollForConversion+0x8a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003aec:	2201      	movs	r2, #1
 8003aee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003af0:	430a      	orrs	r2, r1
 8003af2:	65a2      	str	r2, [r4, #88]	; 0x58
 8003af4:	e7dc      	b.n	8003ab0 <HAL_ADC_PollForConversion+0x74>
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	fffffefe 	.word	0xfffffefe

08003afc <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8003afc:	6803      	ldr	r3, [r0, #0]
 8003afe:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003b00:	4770      	bx	lr
	...

08003b04 <HAL_ADC_ConfigChannel>:
{
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8003b06:	0004      	movs	r4, r0
 8003b08:	3450      	adds	r4, #80	; 0x50
 8003b0a:	7822      	ldrb	r2, [r4, #0]
{
 8003b0c:	0003      	movs	r3, r0
  __HAL_LOCK(hadc);
 8003b0e:	2002      	movs	r0, #2
 8003b10:	2a01      	cmp	r2, #1
 8003b12:	d00b      	beq.n	8003b2c <HAL_ADC_ConfigChannel+0x28>
 8003b14:	3801      	subs	r0, #1
 8003b16:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	6895      	ldr	r5, [r2, #8]
 8003b1c:	076d      	lsls	r5, r5, #29
 8003b1e:	d506      	bpl.n	8003b2e <HAL_ADC_ConfigChannel+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b20:	2220      	movs	r2, #32
 8003b22:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b24:	430a      	orrs	r2, r1
 8003b26:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8003b28:	2300      	movs	r3, #0
 8003b2a:	7023      	strb	r3, [r4, #0]
}
 8003b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003b2e:	2380      	movs	r3, #128	; 0x80
 8003b30:	2680      	movs	r6, #128	; 0x80
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003b32:	680d      	ldr	r5, [r1, #0]
  if (sConfig->Rank != ADC_RANK_NONE)
 8003b34:	4f19      	ldr	r7, [pc, #100]	; (8003b9c <HAL_ADC_ConfigChannel+0x98>)
 8003b36:	6849      	ldr	r1, [r1, #4]
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003b38:	0368      	lsls	r0, r5, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003b3a:	02db      	lsls	r3, r3, #11
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003b3c:	0b40      	lsrs	r0, r0, #13
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003b3e:	402b      	ands	r3, r5
 8003b40:	02b6      	lsls	r6, r6, #10
  if (sConfig->Rank != ADC_RANK_NONE)
 8003b42:	42b9      	cmp	r1, r7
 8003b44:	d018      	beq.n	8003b78 <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8003b46:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b48:	4301      	orrs	r1, r0
 8003b4a:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d008      	beq.n	8003b62 <HAL_ADC_ConfigChannel+0x5e>
      ADC->CCR |= ADC_CCR_TSEN;   
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	4a13      	ldr	r2, [pc, #76]	; (8003ba0 <HAL_ADC_ConfigChannel+0x9c>)
 8003b54:	041b      	lsls	r3, r3, #16
 8003b56:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003b58:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8003b5e:	f7ff fd4b 	bl	80035f8 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003b62:	4235      	tst	r5, r6
 8003b64:	d005      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	4a0d      	ldr	r2, [pc, #52]	; (8003ba0 <HAL_ADC_ConfigChannel+0x9c>)
 8003b6a:	03db      	lsls	r3, r3, #15
 8003b6c:	6811      	ldr	r1, [r2, #0]
 8003b6e:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003b70:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8003b72:	2000      	movs	r0, #0
 8003b74:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 8003b76:	e7d9      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x28>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8003b78:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003b7a:	4381      	bics	r1, r0
 8003b7c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8003b82:	4a07      	ldr	r2, [pc, #28]	; (8003ba0 <HAL_ADC_ConfigChannel+0x9c>)
 8003b84:	4907      	ldr	r1, [pc, #28]	; (8003ba4 <HAL_ADC_ConfigChannel+0xa0>)
 8003b86:	6813      	ldr	r3, [r2, #0]
 8003b88:	400b      	ands	r3, r1
 8003b8a:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8003b8c:	4235      	tst	r5, r6
 8003b8e:	d0f0      	beq.n	8003b72 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8003b90:	4a03      	ldr	r2, [pc, #12]	; (8003ba0 <HAL_ADC_ConfigChannel+0x9c>)
 8003b92:	4905      	ldr	r1, [pc, #20]	; (8003ba8 <HAL_ADC_ConfigChannel+0xa4>)
 8003b94:	6813      	ldr	r3, [r2, #0]
 8003b96:	400b      	ands	r3, r1
 8003b98:	e7ea      	b.n	8003b70 <HAL_ADC_ConfigChannel+0x6c>
 8003b9a:	46c0      	nop			; (mov r8, r8)
 8003b9c:	00001001 	.word	0x00001001
 8003ba0:	40012708 	.word	0x40012708
 8003ba4:	ff7fffff 	.word	0xff7fffff
 8003ba8:	ffbfffff 	.word	0xffbfffff

08003bac <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8003bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bae:	0005      	movs	r5, r0
 8003bb0:	3550      	adds	r5, #80	; 0x50
 8003bb2:	782b      	ldrb	r3, [r5, #0]
{
 8003bb4:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8003bb6:	2002      	movs	r0, #2
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d043      	beq.n	8003c44 <HAL_ADCEx_Calibration_Start+0x98>
 8003bbc:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bbe:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8003bc0:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003bc2:	6823      	ldr	r3, [r4, #0]
 8003bc4:	6898      	ldr	r0, [r3, #8]
 8003bc6:	4010      	ands	r0, r2
 8003bc8:	2801      	cmp	r0, #1
 8003bca:	d109      	bne.n	8003be0 <HAL_ADCEx_Calibration_Start+0x34>
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	4202      	tst	r2, r0
 8003bd0:	d006      	beq.n	8003be0 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 8003bde:	e031      	b.n	8003c44 <HAL_ADCEx_Calibration_Start+0x98>
    ADC_STATE_CLR_SET(hadc->State, 
 8003be0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8003be2:	4a19      	ldr	r2, [pc, #100]	; (8003c48 <HAL_ADCEx_Calibration_Start+0x9c>)
 8003be4:	4011      	ands	r1, r2
 8003be6:	3206      	adds	r2, #6
 8003be8:	32ff      	adds	r2, #255	; 0xff
 8003bea:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003bec:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 8003bee:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003bf0:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	438a      	bics	r2, r1
 8003bf6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	0612      	lsls	r2, r2, #24
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 8003c02:	f7fe ffc5 	bl	8002b90 <HAL_GetTick>
 8003c06:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	2a00      	cmp	r2, #0
 8003c0e:	db0b      	blt.n	8003c28 <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003c10:	2103      	movs	r1, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003c12:	68da      	ldr	r2, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8003c14:	400e      	ands	r6, r1
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8003c16:	4316      	orrs	r6, r2
 8003c18:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	6d62      	ldr	r2, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c1e:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 8003c20:	438a      	bics	r2, r1
 8003c22:	4313      	orrs	r3, r2
 8003c24:	6563      	str	r3, [r4, #84]	; 0x54
 8003c26:	e7d8      	b.n	8003bda <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8003c28:	f7fe ffb2 	bl	8002b90 <HAL_GetTick>
 8003c2c:	1bc0      	subs	r0, r0, r7
 8003c2e:	280a      	cmp	r0, #10
 8003c30:	d9ea      	bls.n	8003c08 <HAL_ADCEx_Calibration_Start+0x5c>
        ADC_STATE_CLR_SET(hadc->State,
 8003c32:	2312      	movs	r3, #18
 8003c34:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8003c36:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 8003c38:	439a      	bics	r2, r3
 8003c3a:	3b02      	subs	r3, #2
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8003c40:	2300      	movs	r3, #0
 8003c42:	702b      	strb	r3, [r5, #0]
}
 8003c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c46:	46c0      	nop			; (mov r8, r8)
 8003c48:	fffffefd 	.word	0xfffffefd

08003c4c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c4c:	b530      	push	{r4, r5, lr}
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c4e:	25ff      	movs	r5, #255	; 0xff
 8003c50:	2403      	movs	r4, #3
 8003c52:	002a      	movs	r2, r5
 8003c54:	4004      	ands	r4, r0
 8003c56:	00e4      	lsls	r4, r4, #3
 8003c58:	40a2      	lsls	r2, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c5a:	0189      	lsls	r1, r1, #6
 8003c5c:	4029      	ands	r1, r5
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c5e:	43d2      	mvns	r2, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003c60:	40a1      	lsls	r1, r4
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c62:	b2c3      	uxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003c64:	2800      	cmp	r0, #0
 8003c66:	db0a      	blt.n	8003c7e <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c68:	24c0      	movs	r4, #192	; 0xc0
 8003c6a:	4b0b      	ldr	r3, [pc, #44]	; (8003c98 <HAL_NVIC_SetPriority+0x4c>)
 8003c6c:	0880      	lsrs	r0, r0, #2
 8003c6e:	0080      	lsls	r0, r0, #2
 8003c70:	18c0      	adds	r0, r0, r3
 8003c72:	00a4      	lsls	r4, r4, #2
 8003c74:	5903      	ldr	r3, [r0, r4]
 8003c76:	4013      	ands	r3, r2
 8003c78:	430b      	orrs	r3, r1
 8003c7a:	5103      	str	r3, [r0, r4]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8003c7c:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003c7e:	200f      	movs	r0, #15
 8003c80:	4003      	ands	r3, r0
 8003c82:	3b08      	subs	r3, #8
 8003c84:	4805      	ldr	r0, [pc, #20]	; (8003c9c <HAL_NVIC_SetPriority+0x50>)
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	181b      	adds	r3, r3, r0
 8003c8c:	69d8      	ldr	r0, [r3, #28]
 8003c8e:	4002      	ands	r2, r0
 8003c90:	430a      	orrs	r2, r1
 8003c92:	61da      	str	r2, [r3, #28]
 8003c94:	e7f2      	b.n	8003c7c <HAL_NVIC_SetPriority+0x30>
 8003c96:	46c0      	nop			; (mov r8, r8)
 8003c98:	e000e100 	.word	0xe000e100
 8003c9c:	e000ed00 	.word	0xe000ed00

08003ca0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ca0:	2800      	cmp	r0, #0
 8003ca2:	db05      	blt.n	8003cb0 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ca4:	231f      	movs	r3, #31
 8003ca6:	4018      	ands	r0, r3
 8003ca8:	3b1e      	subs	r3, #30
 8003caa:	4083      	lsls	r3, r0
 8003cac:	4a01      	ldr	r2, [pc, #4]	; (8003cb4 <HAL_NVIC_EnableIRQ+0x14>)
 8003cae:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003cb0:	4770      	bx	lr
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	e000e100 	.word	0xe000e100

08003cb8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	db09      	blt.n	8003cd0 <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003cbc:	231f      	movs	r3, #31
 8003cbe:	4018      	ands	r0, r3
 8003cc0:	3b1e      	subs	r3, #30
 8003cc2:	4083      	lsls	r3, r0
 8003cc4:	4a03      	ldr	r2, [pc, #12]	; (8003cd4 <HAL_NVIC_DisableIRQ+0x1c>)
 8003cc6:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003cc8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ccc:	f3bf 8f6f 	isb	sy
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003cd0:	4770      	bx	lr
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	e000e104 	.word	0xe000e104

08003cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cda:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 8003cdc:	2001      	movs	r0, #1
  if(hdma == NULL)
 8003cde:	2c00      	cmp	r4, #0
 8003ce0:	d035      	beq.n	8003d4e <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003ce2:	6825      	ldr	r5, [r4, #0]
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_DMA_Init+0x78>)
 8003ce6:	2114      	movs	r1, #20
 8003ce8:	18e8      	adds	r0, r5, r3
 8003cea:	f7fc fa3d 	bl	8000168 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 8003cee:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cf0:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 8003cf2:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003cf8:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 8003cfa:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003cfc:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003cfe:	4b16      	ldr	r3, [pc, #88]	; (8003d58 <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d00:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003d02:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 8003d04:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d06:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 8003d08:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d0a:	433b      	orrs	r3, r7
 8003d0c:	6967      	ldr	r7, [r4, #20]
 8003d0e:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d10:	69a7      	ldr	r7, [r4, #24]
 8003d12:	433b      	orrs	r3, r7
 8003d14:	69e7      	ldr	r7, [r4, #28]
 8003d16:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d18:	6a27      	ldr	r7, [r4, #32]
 8003d1a:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8003d1c:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003d1e:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	4299      	cmp	r1, r3
 8003d26:	d00c      	beq.n	8003d42 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d28:	251c      	movs	r5, #28
 8003d2a:	4028      	ands	r0, r5
 8003d2c:	3d0d      	subs	r5, #13
 8003d2e:	4085      	lsls	r5, r0
 8003d30:	490a      	ldr	r1, [pc, #40]	; (8003d5c <HAL_DMA_Init+0x84>)
 8003d32:	680b      	ldr	r3, [r1, #0]
 8003d34:	43ab      	bics	r3, r5
 8003d36:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003d38:	6863      	ldr	r3, [r4, #4]
 8003d3a:	680d      	ldr	r5, [r1, #0]
 8003d3c:	4083      	lsls	r3, r0
 8003d3e:	432b      	orrs	r3, r5
 8003d40:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d42:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003d44:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d46:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003d48:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 8003d4a:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8003d4c:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d50:	bffdfff8 	.word	0xbffdfff8
 8003d54:	40020000 	.word	0x40020000
 8003d58:	ffff800f 	.word	0xffff800f
 8003d5c:	400200a8 	.word	0x400200a8

08003d60 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003d60:	b570      	push	{r4, r5, r6, lr}
 8003d62:	2501      	movs	r5, #1
 8003d64:	0004      	movs	r4, r0

  /* Check the DMA handle allocation */
  if (NULL == hdma )
  {
    return HAL_ERROR;
 8003d66:	0028      	movs	r0, r5
  if (NULL == hdma )
 8003d68:	2c00      	cmp	r4, #0
 8003d6a:	d021      	beq.n	8003db0 <HAL_DMA_DeInit+0x50>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003d6c:	6826      	ldr	r6, [r4, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d6e:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 8003d70:	6833      	ldr	r3, [r6, #0]
 8003d72:	43ab      	bics	r3, r5
 8003d74:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d76:	4b0f      	ldr	r3, [pc, #60]	; (8003db4 <HAL_DMA_DeInit+0x54>)
 8003d78:	18f0      	adds	r0, r6, r3
 8003d7a:	f7fc f9f5 	bl	8000168 <__udivsi3>

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d7e:	211c      	movs	r1, #28
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d80:	0083      	lsls	r3, r0, #2
 8003d82:	6463      	str	r3, [r4, #68]	; 0x44
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d84:	400b      	ands	r3, r1
  hdma->Instance->CCR  = 0U;
 8003d86:	2000      	movs	r0, #0
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d88:	409d      	lsls	r5, r3

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d8a:	390d      	subs	r1, #13
 8003d8c:	4099      	lsls	r1, r3
  hdma->DmaBaseAddress = DMA1;
 8003d8e:	4a0a      	ldr	r2, [pc, #40]	; (8003db8 <HAL_DMA_DeInit+0x58>)

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003d90:	1da3      	adds	r3, r4, #6
  hdma->DmaBaseAddress = DMA1;
 8003d92:	6422      	str	r2, [r4, #64]	; 0x40
  hdma->Instance->CCR  = 0U;
 8003d94:	6030      	str	r0, [r6, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003d96:	6055      	str	r5, [r2, #4]
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003d98:	4d08      	ldr	r5, [pc, #32]	; (8003dbc <HAL_DMA_DeInit+0x5c>)
 8003d9a:	682a      	ldr	r2, [r5, #0]
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	602a      	str	r2, [r5, #0]
  hdma->XferCpltCallback = NULL;
 8003da0:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003da2:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 8003da4:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 8003da6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003da8:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003daa:	3405      	adds	r4, #5
  hdma->State = HAL_DMA_STATE_RESET;
 8003dac:	77d8      	strb	r0, [r3, #31]
  __HAL_UNLOCK(hdma);
 8003dae:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8003db0:	bd70      	pop	{r4, r5, r6, pc}
 8003db2:	46c0      	nop			; (mov r8, r8)
 8003db4:	bffdfff8 	.word	0xbffdfff8
 8003db8:	40020000 	.word	0x40020000
 8003dbc:	400200a8 	.word	0x400200a8

08003dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003dc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dc2:	1d45      	adds	r5, r0, #5
{
 8003dc4:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 8003dc6:	7feb      	ldrb	r3, [r5, #31]
{
 8003dc8:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 8003dca:	2002      	movs	r0, #2
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d029      	beq.n	8003e24 <HAL_DMA_Start_IT+0x64>
 8003dd0:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8003dd2:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8003dd4:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 8003dd6:	7ffb      	ldrb	r3, [r7, #31]
 8003dd8:	2600      	movs	r6, #0
 8003dda:	469c      	mov	ip, r3
 8003ddc:	4660      	mov	r0, ip
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2801      	cmp	r0, #1
 8003de2:	d12a      	bne.n	8003e3a <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003de4:	3001      	adds	r0, #1
 8003de6:	77f8      	strb	r0, [r7, #31]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003de8:	271c      	movs	r7, #28
    __HAL_DMA_DISABLE(hdma);
 8003dea:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003dec:	63e6      	str	r6, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8003dee:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003df0:	6c26      	ldr	r6, [r4, #64]	; 0x40
    __HAL_DMA_DISABLE(hdma);
 8003df2:	439d      	bics	r5, r3
 8003df4:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003df6:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8003df8:	403d      	ands	r5, r7
 8003dfa:	40ab      	lsls	r3, r5
 8003dfc:	6073      	str	r3, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003dfe:	9b01      	ldr	r3, [sp, #4]
 8003e00:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e02:	68a3      	ldr	r3, [r4, #8]
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d10e      	bne.n	8003e26 <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e08:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e0a:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8003e0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00c      	beq.n	8003e2c <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e12:	230e      	movs	r3, #14
 8003e14:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e16:	4313      	orrs	r3, r2
 8003e18:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	6802      	ldr	r2, [r0, #0]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e22:	2000      	movs	r0, #0
}
 8003e24:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8003e26:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8003e28:	60c2      	str	r2, [r0, #12]
 8003e2a:	e7ef      	b.n	8003e0c <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	6803      	ldr	r3, [r0, #0]
 8003e30:	4393      	bics	r3, r2
 8003e32:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e34:	6802      	ldr	r2, [r0, #0]
 8003e36:	230a      	movs	r3, #10
 8003e38:	e7ed      	b.n	8003e16 <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 8003e3a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 8003e3c:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 8003e3e:	e7f1      	b.n	8003e24 <HAL_DMA_Start_IT+0x64>

08003e40 <HAL_DMA_Abort>:
{
 8003e40:	b530      	push	{r4, r5, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e42:	1d84      	adds	r4, r0, #6
 8003e44:	7fe2      	ldrb	r2, [r4, #31]
{
 8003e46:	0003      	movs	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003e48:	2a02      	cmp	r2, #2
 8003e4a:	d006      	beq.n	8003e5a <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	63c2      	str	r2, [r0, #60]	; 0x3c
    return HAL_ERROR;
 8003e50:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8003e52:	2200      	movs	r2, #0
 8003e54:	3305      	adds	r3, #5
 8003e56:	77da      	strb	r2, [r3, #31]
}
 8003e58:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e5a:	6802      	ldr	r2, [r0, #0]
 8003e5c:	200e      	movs	r0, #14
 8003e5e:	6811      	ldr	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e60:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e62:	4381      	bics	r1, r0
 8003e64:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8003e66:	2101      	movs	r1, #1
 8003e68:	6810      	ldr	r0, [r2, #0]
 8003e6a:	4388      	bics	r0, r1
 8003e6c:	6010      	str	r0, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e70:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8003e72:	402a      	ands	r2, r5
 8003e74:	000d      	movs	r5, r1
 8003e76:	4095      	lsls	r5, r2
 8003e78:	6045      	str	r5, [r0, #4]
    return status;
 8003e7a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8003e7c:	77e1      	strb	r1, [r4, #31]
    return status;
 8003e7e:	e7e8      	b.n	8003e52 <HAL_DMA_Abort+0x12>

08003e80 <HAL_DMA_Abort_IT>:
{
 8003e80:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e82:	1d84      	adds	r4, r0, #6
 8003e84:	7fe3      	ldrb	r3, [r4, #31]
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d004      	beq.n	8003e94 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8003e8e:	3b03      	subs	r3, #3
}
 8003e90:	0018      	movs	r0, r3
 8003e92:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e94:	210e      	movs	r1, #14
 8003e96:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003e98:	251c      	movs	r5, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	438a      	bics	r2, r1
 8003e9e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	4391      	bics	r1, r2
 8003ea6:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003ea8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8003eaa:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8003eac:	402b      	ands	r3, r5
 8003eae:	0015      	movs	r5, r2
 8003eb0:	409d      	lsls	r5, r3
 8003eb2:	604d      	str	r5, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8003eb4:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8003eb6:	2400      	movs	r4, #0
 8003eb8:	1d43      	adds	r3, r0, #5
 8003eba:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8003ebc:	6b82      	ldr	r2, [r0, #56]	; 0x38
  HAL_StatusTypeDef status = HAL_OK;
 8003ebe:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8003ec0:	42a2      	cmp	r2, r4
 8003ec2:	d0e5      	beq.n	8003e90 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8003ec4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8003ec6:	0023      	movs	r3, r4
 8003ec8:	e7e2      	b.n	8003e90 <HAL_DMA_Abort_IT+0x10>

08003eca <HAL_DMA_IRQHandler>:
{
 8003eca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ecc:	261c      	movs	r6, #28
 8003ece:	2704      	movs	r7, #4
 8003ed0:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003ed2:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ed4:	4032      	ands	r2, r6
 8003ed6:	003e      	movs	r6, r7
 8003ed8:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003eda:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8003edc:	6803      	ldr	r3, [r0, #0]
 8003ede:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8003ee0:	4235      	tst	r5, r6
 8003ee2:	d00d      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x36>
 8003ee4:	423c      	tst	r4, r7
 8003ee6:	d00b      	beq.n	8003f00 <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	0692      	lsls	r2, r2, #26
 8003eec:	d402      	bmi.n	8003ef4 <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	43ba      	bics	r2, r7
 8003ef2:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 8003ef4:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8003ef6:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d019      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8003efc:	4798      	blx	r3
  return;
 8003efe:	e017      	b.n	8003f30 <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8003f00:	2702      	movs	r7, #2
 8003f02:	003e      	movs	r6, r7
 8003f04:	4096      	lsls	r6, r2
 8003f06:	4235      	tst	r5, r6
 8003f08:	d013      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x68>
 8003f0a:	423c      	tst	r4, r7
 8003f0c:	d011      	beq.n	8003f32 <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	0692      	lsls	r2, r2, #26
 8003f12:	d406      	bmi.n	8003f22 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003f14:	240a      	movs	r4, #10
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	43a2      	bics	r2, r4
 8003f1a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	1d83      	adds	r3, r0, #6
 8003f20:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 8003f22:	2200      	movs	r2, #0
 8003f24:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f26:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8003f28:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8003f2a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d1e5      	bne.n	8003efc <HAL_DMA_IRQHandler+0x32>
}
 8003f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8003f32:	2608      	movs	r6, #8
 8003f34:	0037      	movs	r7, r6
 8003f36:	4097      	lsls	r7, r2
 8003f38:	423d      	tst	r5, r7
 8003f3a:	d0f9      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x66>
 8003f3c:	4234      	tst	r4, r6
 8003f3e:	d0f7      	beq.n	8003f30 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f40:	250e      	movs	r5, #14
 8003f42:	681c      	ldr	r4, [r3, #0]
 8003f44:	43ac      	bics	r4, r5
 8003f46:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f48:	2301      	movs	r3, #1
 8003f4a:	001c      	movs	r4, r3
 8003f4c:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8003f4e:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8003f50:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003f52:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8003f54:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8003f56:	2200      	movs	r2, #0
 8003f58:	1d43      	adds	r3, r0, #5
 8003f5a:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8003f5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003f5e:	e7e5      	b.n	8003f2c <HAL_DMA_IRQHandler+0x62>

08003f60 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8003f60:	0003      	movs	r3, r0
 8003f62:	1e08      	subs	r0, r1, #0
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8003f64:	d101      	bne.n	8003f6a <HAL_EXTI_RegisterCallback+0xa>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8003f66:	605a      	str	r2, [r3, #4]
      status = HAL_ERROR;
      break;
  }

  return status;
}
 8003f68:	4770      	bx	lr
      status = HAL_ERROR;
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	e7fc      	b.n	8003f68 <HAL_EXTI_RegisterCallback+0x8>

08003f6e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8003f6e:	0003      	movs	r3, r0
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
  {
    return HAL_ERROR;
 8003f70:	2001      	movs	r0, #1
  if (hexti == NULL)
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_EXTI_GetHandle+0xc>
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;

    return HAL_OK;
 8003f76:	2000      	movs	r0, #0
    hexti->Line = ExtiLine;
 8003f78:	6019      	str	r1, [r3, #0]
  }
}
 8003f7a:	4770      	bx	lr

08003f7c <HAL_EXTI_IRQHandler>:
{
  uint32_t regval;
  uint32_t maskline;

  /* Compute line mask */
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003f7c:	231f      	movs	r3, #31
 8003f7e:	6802      	ldr	r2, [r0, #0]
{
 8003f80:	b510      	push	{r4, lr}
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8003f82:	401a      	ands	r2, r3
 8003f84:	3b1e      	subs	r3, #30
 8003f86:	4093      	lsls	r3, r2

  /* Get pending bit  */
  regval = (EXTI->PR & maskline);
 8003f88:	4a04      	ldr	r2, [pc, #16]	; (8003f9c <HAL_EXTI_IRQHandler+0x20>)
 8003f8a:	6951      	ldr	r1, [r2, #20]
  if (regval != 0x00u)
 8003f8c:	420b      	tst	r3, r1
 8003f8e:	d004      	beq.n	8003f9a <HAL_EXTI_IRQHandler+0x1e>
  {
    /* Clear pending bit */
    EXTI->PR = maskline;
 8003f90:	6153      	str	r3, [r2, #20]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8003f92:	6843      	ldr	r3, [r0, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d000      	beq.n	8003f9a <HAL_EXTI_IRQHandler+0x1e>
    {
      hexti->PendingCallback();
 8003f98:	4798      	blx	r3
    }
  }
}
 8003f9a:	bd10      	pop	{r4, pc}
 8003f9c:	40010400 	.word	0x40010400

08003fa0 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003fa0:	4a59      	ldr	r2, [pc, #356]	; (8004108 <HAL_GPIO_Init+0x168>)
{
 8003fa2:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003fa4:	1882      	adds	r2, r0, r2
 8003fa6:	1e54      	subs	r4, r2, #1
 8003fa8:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8003faa:	2300      	movs	r3, #0
{
 8003fac:	b087      	sub	sp, #28
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003fae:	3205      	adds	r2, #5
{
 8003fb0:	9102      	str	r1, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003fb2:	9205      	str	r2, [sp, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003fb4:	9a02      	ldr	r2, [sp, #8]
 8003fb6:	6814      	ldr	r4, [r2, #0]
 8003fb8:	0022      	movs	r2, r4
 8003fba:	40da      	lsrs	r2, r3
 8003fbc:	d101      	bne.n	8003fc2 <HAL_GPIO_Init+0x22>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8003fbe:	b007      	add	sp, #28
 8003fc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	0025      	movs	r5, r4
 8003fc6:	409a      	lsls	r2, r3
 8003fc8:	4015      	ands	r5, r2
 8003fca:	9501      	str	r5, [sp, #4]
    if (iocurrent)
 8003fcc:	4214      	tst	r4, r2
 8003fce:	d100      	bne.n	8003fd2 <HAL_GPIO_Init+0x32>
 8003fd0:	e098      	b.n	8004104 <HAL_GPIO_Init+0x164>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fd2:	9902      	ldr	r1, [sp, #8]
 8003fd4:	2510      	movs	r5, #16
 8003fd6:	684c      	ldr	r4, [r1, #4]
 8003fd8:	005f      	lsls	r7, r3, #1
 8003fda:	0026      	movs	r6, r4
 8003fdc:	43ae      	bics	r6, r5
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fde:	3d0d      	subs	r5, #13
 8003fe0:	40bd      	lsls	r5, r7
 8003fe2:	43e9      	mvns	r1, r5
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fe4:	1e75      	subs	r5, r6, #1
 8003fe6:	46b4      	mov	ip, r6
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003fe8:	9103      	str	r1, [sp, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003fea:	2d01      	cmp	r5, #1
 8003fec:	d80d      	bhi.n	800400a <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8003fee:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8003ff0:	9903      	ldr	r1, [sp, #12]
 8003ff2:	400e      	ands	r6, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff4:	9902      	ldr	r1, [sp, #8]
 8003ff6:	68cd      	ldr	r5, [r1, #12]
 8003ff8:	40bd      	lsls	r5, r7
 8003ffa:	4335      	orrs	r5, r6
        GPIOx->OSPEEDR = temp;
 8003ffc:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8003ffe:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004000:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004002:	0922      	lsrs	r2, r4, #4
 8004004:	409a      	lsls	r2, r3
 8004006:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8004008:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
 800400a:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800400c:	9a03      	ldr	r2, [sp, #12]
 800400e:	4015      	ands	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004010:	9a02      	ldr	r2, [sp, #8]
 8004012:	6892      	ldr	r2, [r2, #8]
 8004014:	40ba      	lsls	r2, r7
 8004016:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8004018:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800401a:	4662      	mov	r2, ip
 800401c:	2a02      	cmp	r2, #2
 800401e:	d110      	bne.n	8004042 <HAL_GPIO_Init+0xa2>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004020:	2507      	movs	r5, #7
 8004022:	210f      	movs	r1, #15
 8004024:	401d      	ands	r5, r3
 8004026:	00ad      	lsls	r5, r5, #2
 8004028:	40a9      	lsls	r1, r5
        temp = GPIOx->AFR[position >> 3U];
 800402a:	08da      	lsrs	r2, r3, #3
 800402c:	0092      	lsls	r2, r2, #2
 800402e:	1882      	adds	r2, r0, r2
 8004030:	6a16      	ldr	r6, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004032:	438e      	bics	r6, r1
 8004034:	46b4      	mov	ip, r6
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004036:	9902      	ldr	r1, [sp, #8]
 8004038:	690e      	ldr	r6, [r1, #16]
 800403a:	4661      	mov	r1, ip
 800403c:	40ae      	lsls	r6, r5
 800403e:	430e      	orrs	r6, r1
        GPIOx->AFR[position >> 3U] = temp;
 8004040:	6216      	str	r6, [r2, #32]
      temp = GPIOx->MODER;
 8004042:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004044:	9a03      	ldr	r2, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004046:	2603      	movs	r6, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004048:	402a      	ands	r2, r5
 800404a:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800404c:	0022      	movs	r2, r4
 800404e:	4032      	ands	r2, r6
 8004050:	40ba      	lsls	r2, r7
 8004052:	432a      	orrs	r2, r5
      GPIOx->MODER = temp;
 8004054:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	d554      	bpl.n	8004104 <HAL_GPIO_Init+0x164>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800405a:	2701      	movs	r7, #1
 800405c:	4d2b      	ldr	r5, [pc, #172]	; (800410c <HAL_GPIO_Init+0x16c>)
 800405e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004060:	433a      	orrs	r2, r7
 8004062:	636a      	str	r2, [r5, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8004064:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <HAL_GPIO_Init+0x170>)
 8004066:	089d      	lsrs	r5, r3, #2
 8004068:	00ad      	lsls	r5, r5, #2
 800406a:	18ad      	adds	r5, r5, r2
 800406c:	68aa      	ldr	r2, [r5, #8]
 800406e:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004070:	001a      	movs	r2, r3
 8004072:	4032      	ands	r2, r6
 8004074:	0092      	lsls	r2, r2, #2
 8004076:	9203      	str	r2, [sp, #12]
 8004078:	220f      	movs	r2, #15
 800407a:	9903      	ldr	r1, [sp, #12]
 800407c:	408a      	lsls	r2, r1
 800407e:	4661      	mov	r1, ip
 8004080:	4391      	bics	r1, r2
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004082:	22a0      	movs	r2, #160	; 0xa0
 8004084:	05d2      	lsls	r2, r2, #23
 8004086:	4694      	mov	ip, r2
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004088:	9104      	str	r1, [sp, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800408a:	2200      	movs	r2, #0
 800408c:	4560      	cmp	r0, ip
 800408e:	d011      	beq.n	80040b4 <HAL_GPIO_Init+0x114>
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <HAL_GPIO_Init+0x174>)
 8004092:	4694      	mov	ip, r2
 8004094:	003a      	movs	r2, r7
 8004096:	4560      	cmp	r0, ip
 8004098:	d00c      	beq.n	80040b4 <HAL_GPIO_Init+0x114>
 800409a:	4f1f      	ldr	r7, [pc, #124]	; (8004118 <HAL_GPIO_Init+0x178>)
 800409c:	1892      	adds	r2, r2, r2
 800409e:	42b8      	cmp	r0, r7
 80040a0:	d008      	beq.n	80040b4 <HAL_GPIO_Init+0x114>
 80040a2:	4f1e      	ldr	r7, [pc, #120]	; (800411c <HAL_GPIO_Init+0x17c>)
 80040a4:	0032      	movs	r2, r6
 80040a6:	42b8      	cmp	r0, r7
 80040a8:	d004      	beq.n	80040b4 <HAL_GPIO_Init+0x114>
 80040aa:	4e1d      	ldr	r6, [pc, #116]	; (8004120 <HAL_GPIO_Init+0x180>)
 80040ac:	3201      	adds	r2, #1
 80040ae:	42b0      	cmp	r0, r6
 80040b0:	d000      	beq.n	80040b4 <HAL_GPIO_Init+0x114>
 80040b2:	9a05      	ldr	r2, [sp, #20]
 80040b4:	9903      	ldr	r1, [sp, #12]
 80040b6:	408a      	lsls	r2, r1
 80040b8:	9904      	ldr	r1, [sp, #16]
 80040ba:	430a      	orrs	r2, r1
        temp &= ~((uint32_t)iocurrent);
 80040bc:	9901      	ldr	r1, [sp, #4]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040be:	60aa      	str	r2, [r5, #8]
          temp |= iocurrent;
 80040c0:	000e      	movs	r6, r1
        temp = EXTI->IMR;
 80040c2:	4a18      	ldr	r2, [pc, #96]	; (8004124 <HAL_GPIO_Init+0x184>)
        temp &= ~((uint32_t)iocurrent);
 80040c4:	43cd      	mvns	r5, r1
        temp = EXTI->IMR;
 80040c6:	6817      	ldr	r7, [r2, #0]
          temp |= iocurrent;
 80040c8:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80040ca:	03e1      	lsls	r1, r4, #15
 80040cc:	d401      	bmi.n	80040d2 <HAL_GPIO_Init+0x132>
        temp &= ~((uint32_t)iocurrent);
 80040ce:	003e      	movs	r6, r7
 80040d0:	402e      	ands	r6, r5
        EXTI->IMR = temp;
 80040d2:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80040d4:	6857      	ldr	r7, [r2, #4]
          temp |= iocurrent;
 80040d6:	9e01      	ldr	r6, [sp, #4]
 80040d8:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80040da:	03a1      	lsls	r1, r4, #14
 80040dc:	d401      	bmi.n	80040e2 <HAL_GPIO_Init+0x142>
        temp &= ~((uint32_t)iocurrent);
 80040de:	003e      	movs	r6, r7
 80040e0:	402e      	ands	r6, r5
        EXTI->EMR = temp;
 80040e2:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80040e4:	6897      	ldr	r7, [r2, #8]
          temp |= iocurrent;
 80040e6:	9e01      	ldr	r6, [sp, #4]
 80040e8:	433e      	orrs	r6, r7
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80040ea:	02e1      	lsls	r1, r4, #11
 80040ec:	d401      	bmi.n	80040f2 <HAL_GPIO_Init+0x152>
        temp &= ~((uint32_t)iocurrent);
 80040ee:	003e      	movs	r6, r7
 80040f0:	402e      	ands	r6, r5
        EXTI->RTSR = temp;
 80040f2:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80040f4:	68d6      	ldr	r6, [r2, #12]
          temp |= iocurrent;
 80040f6:	9f01      	ldr	r7, [sp, #4]
 80040f8:	4337      	orrs	r7, r6
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80040fa:	02a4      	lsls	r4, r4, #10
 80040fc:	d401      	bmi.n	8004102 <HAL_GPIO_Init+0x162>
        temp &= ~((uint32_t)iocurrent);
 80040fe:	402e      	ands	r6, r5
 8004100:	0037      	movs	r7, r6
        EXTI->FTSR = temp;
 8004102:	60d7      	str	r7, [r2, #12]
    position++;
 8004104:	3301      	adds	r3, #1
 8004106:	e755      	b.n	8003fb4 <HAL_GPIO_Init+0x14>
 8004108:	afffe400 	.word	0xafffe400
 800410c:	40021000 	.word	0x40021000
 8004110:	40010000 	.word	0x40010000
 8004114:	50000400 	.word	0x50000400
 8004118:	50000800 	.word	0x50000800
 800411c:	50000c00 	.word	0x50000c00
 8004120:	50001000 	.word	0x50001000
 8004124:	40010400 	.word	0x40010400

08004128 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004128:	b5f0      	push	{r4, r5, r6, r7, lr}
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800412a:	4a38      	ldr	r2, [pc, #224]	; (800420c <HAL_GPIO_DeInit+0xe4>)
{
 800412c:	b087      	sub	sp, #28
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800412e:	1882      	adds	r2, r0, r2
{
 8004130:	9102      	str	r1, [sp, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004132:	1e51      	subs	r1, r2, #1
 8004134:	418a      	sbcs	r2, r1
  uint32_t position = 0x00U;
 8004136:	2300      	movs	r3, #0
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004138:	3205      	adds	r2, #5
 800413a:	9205      	str	r2, [sp, #20]
  while ((GPIO_Pin >> position) != 0)
 800413c:	9a02      	ldr	r2, [sp, #8]
 800413e:	40da      	lsrs	r2, r3
 8004140:	d101      	bne.n	8004146 <HAL_GPIO_DeInit+0x1e>
      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
    }
    position++;
  }
}
 8004142:	b007      	add	sp, #28
 8004144:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1U << position);
 8004146:	2701      	movs	r7, #1
 8004148:	003a      	movs	r2, r7
 800414a:	409a      	lsls	r2, r3
 800414c:	9c02      	ldr	r4, [sp, #8]
 800414e:	9201      	str	r2, [sp, #4]
 8004150:	4014      	ands	r4, r2
    if (iocurrent)
 8004152:	9901      	ldr	r1, [sp, #4]
 8004154:	9a02      	ldr	r2, [sp, #8]
 8004156:	420a      	tst	r2, r1
 8004158:	d056      	beq.n	8004208 <HAL_GPIO_DeInit+0xe0>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800415a:	4a2d      	ldr	r2, [pc, #180]	; (8004210 <HAL_GPIO_DeInit+0xe8>)
 800415c:	0899      	lsrs	r1, r3, #2
 800415e:	0089      	lsls	r1, r1, #2
 8004160:	1889      	adds	r1, r1, r2
 8004162:	688a      	ldr	r2, [r1, #8]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004164:	001d      	movs	r5, r3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8004166:	0016      	movs	r6, r2
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8004168:	2203      	movs	r2, #3
 800416a:	4015      	ands	r5, r2
 800416c:	00ad      	lsls	r5, r5, #2
 800416e:	320c      	adds	r2, #12
 8004170:	40aa      	lsls	r2, r5
 8004172:	9203      	str	r2, [sp, #12]
 8004174:	4032      	ands	r2, r6
 8004176:	9204      	str	r2, [sp, #16]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004178:	22a0      	movs	r2, #160	; 0xa0
 800417a:	05d2      	lsls	r2, r2, #23
 800417c:	4694      	mov	ip, r2
 800417e:	2200      	movs	r2, #0
 8004180:	4560      	cmp	r0, ip
 8004182:	d011      	beq.n	80041a8 <HAL_GPIO_DeInit+0x80>
 8004184:	4a23      	ldr	r2, [pc, #140]	; (8004214 <HAL_GPIO_DeInit+0xec>)
 8004186:	4694      	mov	ip, r2
 8004188:	003a      	movs	r2, r7
 800418a:	4560      	cmp	r0, ip
 800418c:	d00c      	beq.n	80041a8 <HAL_GPIO_DeInit+0x80>
 800418e:	4f22      	ldr	r7, [pc, #136]	; (8004218 <HAL_GPIO_DeInit+0xf0>)
 8004190:	1892      	adds	r2, r2, r2
 8004192:	42b8      	cmp	r0, r7
 8004194:	d008      	beq.n	80041a8 <HAL_GPIO_DeInit+0x80>
 8004196:	4f21      	ldr	r7, [pc, #132]	; (800421c <HAL_GPIO_DeInit+0xf4>)
 8004198:	3201      	adds	r2, #1
 800419a:	42b8      	cmp	r0, r7
 800419c:	d004      	beq.n	80041a8 <HAL_GPIO_DeInit+0x80>
 800419e:	4e20      	ldr	r6, [pc, #128]	; (8004220 <HAL_GPIO_DeInit+0xf8>)
 80041a0:	3201      	adds	r2, #1
 80041a2:	42b0      	cmp	r0, r6
 80041a4:	d000      	beq.n	80041a8 <HAL_GPIO_DeInit+0x80>
 80041a6:	9a05      	ldr	r2, [sp, #20]
 80041a8:	40aa      	lsls	r2, r5
 80041aa:	9d04      	ldr	r5, [sp, #16]
 80041ac:	42aa      	cmp	r2, r5
 80041ae:	d110      	bne.n	80041d2 <HAL_GPIO_DeInit+0xaa>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80041b0:	4a1c      	ldr	r2, [pc, #112]	; (8004224 <HAL_GPIO_DeInit+0xfc>)
 80041b2:	6815      	ldr	r5, [r2, #0]
 80041b4:	43a5      	bics	r5, r4
 80041b6:	6015      	str	r5, [r2, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80041b8:	6855      	ldr	r5, [r2, #4]
 80041ba:	43a5      	bics	r5, r4
 80041bc:	6055      	str	r5, [r2, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80041be:	6895      	ldr	r5, [r2, #8]
 80041c0:	43a5      	bics	r5, r4
 80041c2:	6095      	str	r5, [r2, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80041c4:	68d5      	ldr	r5, [r2, #12]
 80041c6:	43a5      	bics	r5, r4
 80041c8:	60d5      	str	r5, [r2, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80041ca:	688a      	ldr	r2, [r1, #8]
 80041cc:	9c03      	ldr	r4, [sp, #12]
 80041ce:	43a2      	bics	r2, r4
 80041d0:	608a      	str	r2, [r1, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80041d2:	2103      	movs	r1, #3
 80041d4:	005c      	lsls	r4, r3, #1
 80041d6:	40a1      	lsls	r1, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041d8:	2407      	movs	r4, #7
 80041da:	260f      	movs	r6, #15
 80041dc:	401c      	ands	r4, r3
 80041de:	00a4      	lsls	r4, r4, #2
 80041e0:	40a6      	lsls	r6, r4
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80041e2:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80041e4:	9c01      	ldr	r4, [sp, #4]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80041e6:	430a      	orrs	r2, r1
 80041e8:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80041ea:	08da      	lsrs	r2, r3, #3
 80041ec:	0092      	lsls	r2, r2, #2
 80041ee:	1882      	adds	r2, r0, r2
 80041f0:	6a15      	ldr	r5, [r2, #32]
 80041f2:	43b5      	bics	r5, r6
 80041f4:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80041f6:	68c2      	ldr	r2, [r0, #12]
 80041f8:	438a      	bics	r2, r1
 80041fa:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 80041fc:	6842      	ldr	r2, [r0, #4]
 80041fe:	43a2      	bics	r2, r4
 8004200:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004202:	6882      	ldr	r2, [r0, #8]
 8004204:	438a      	bics	r2, r1
 8004206:	6082      	str	r2, [r0, #8]
    position++;
 8004208:	3301      	adds	r3, #1
 800420a:	e797      	b.n	800413c <HAL_GPIO_DeInit+0x14>
 800420c:	afffe400 	.word	0xafffe400
 8004210:	40010000 	.word	0x40010000
 8004214:	50000400 	.word	0x50000400
 8004218:	50000800 	.word	0x50000800
 800421c:	50000c00 	.word	0x50000c00
 8004220:	50001000 	.word	0x50001000
 8004224:	40010400 	.word	0x40010400

08004228 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004228:	6900      	ldr	r0, [r0, #16]
 800422a:	4008      	ands	r0, r1
 800422c:	1e43      	subs	r3, r0, #1
 800422e:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8004230:	b2c0      	uxtb	r0, r0
}
 8004232:	4770      	bx	lr

08004234 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004234:	2a00      	cmp	r2, #0
 8004236:	d001      	beq.n	800423c <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004238:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800423a:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 800423c:	6281      	str	r1, [r0, #40]	; 0x28
}
 800423e:	e7fc      	b.n	800423a <HAL_GPIO_WritePin+0x6>

08004240 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004240:	6942      	ldr	r2, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004242:	0013      	movs	r3, r2
 8004244:	400b      	ands	r3, r1
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	4391      	bics	r1, r2
 800424a:	430b      	orrs	r3, r1
 800424c:	6183      	str	r3, [r0, #24]
}
 800424e:	4770      	bx	lr

08004250 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8004252:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004254:	695a      	ldr	r2, [r3, #20]
 8004256:	4210      	tst	r0, r2
 8004258:	d002      	beq.n	8004260 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800425a:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800425c:	f7fd ff2a 	bl	80020b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8004260:	bd10      	pop	{r4, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	40010400 	.word	0x40010400

08004268 <HAL_PWR_DisablePVD>:
  * @retval None
  */
void HAL_PWR_DisablePVD(void)
{
  /* Disable the power voltage detector */
  CLEAR_BIT(PWR->CR, PWR_CR_PVDE);
 8004268:	2110      	movs	r1, #16
 800426a:	4a02      	ldr	r2, [pc, #8]	; (8004274 <HAL_PWR_DisablePVD+0xc>)
 800426c:	6813      	ldr	r3, [r2, #0]
 800426e:	438b      	bics	r3, r1
 8004270:	6013      	str	r3, [r2, #0]
}
 8004272:	4770      	bx	lr
 8004274:	40007000 	.word	0x40007000

08004278 <HAL_PWR_EnterSLEEPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004278:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_PWR_EnterSLEEPMode+0x60>)
{
 800427a:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800427c:	681e      	ldr	r6, [r3, #0]
{
 800427e:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004280:	2080      	movs	r0, #128	; 0x80
 8004282:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 8004284:	2701      	movs	r7, #1
 8004286:	4a15      	ldr	r2, [pc, #84]	; (80042dc <HAL_PWR_EnterSLEEPMode+0x64>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 8004288:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800428a:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 800428c:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 800428e:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8004290:	4206      	tst	r6, r0
 8004292:	d005      	beq.n	80042a0 <HAL_PWR_EnterSLEEPMode+0x28>
 8004294:	2a00      	cmp	r2, #0
 8004296:	d003      	beq.n	80042a0 <HAL_PWR_EnterSLEEPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	4e11      	ldr	r6, [pc, #68]	; (80042e0 <HAL_PWR_EnterSLEEPMode+0x68>)
 800429c:	4030      	ands	r0, r6
 800429e:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Sleep mode ---------------------------------*/
  tmpreg = PWR->CR;

  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80042a0:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 80042a2:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 80042a4:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 80042a6:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;
  
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80042a8:	4d0e      	ldr	r5, [pc, #56]	; (80042e4 <HAL_PWR_EnterSLEEPMode+0x6c>)
  PWR->CR = tmpreg;
 80042aa:	6018      	str	r0, [r3, #0]
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80042ac:	6928      	ldr	r0, [r5, #16]
 80042ae:	3601      	adds	r6, #1
 80042b0:	43b0      	bics	r0, r6
 80042b2:	6128      	str	r0, [r5, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80042b4:	2901      	cmp	r1, #1
 80042b6:	d10b      	bne.n	80042d0 <HAL_PWR_EnterSLEEPMode+0x58>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80042b8:	bf30      	wfi
    __SEV();
    __WFE();
    __WFE();
  }

  if((ulpbit != 0) && (vrefinbit != 0))
 80042ba:	2c00      	cmp	r4, #0
 80042bc:	d006      	beq.n	80042cc <HAL_PWR_EnterSLEEPMode+0x54>
 80042be:	2a00      	cmp	r2, #0
 80042c0:	d004      	beq.n	80042cc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 80042c2:	2280      	movs	r2, #128	; 0x80
 80042c4:	6819      	ldr	r1, [r3, #0]
 80042c6:	0092      	lsls	r2, r2, #2
 80042c8:	430a      	orrs	r2, r1
 80042ca:	601a      	str	r2, [r3, #0]
  }

  /* Additional NOP to ensure all pending instructions are flushed before entering low power mode */
  __NOP();
 80042cc:	46c0      	nop			; (mov r8, r8)

}
 80042ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 80042d0:	bf40      	sev
    __WFE();
 80042d2:	bf20      	wfe
    __WFE();
 80042d4:	bf20      	wfe
 80042d6:	e7f0      	b.n	80042ba <HAL_PWR_EnterSLEEPMode+0x42>
 80042d8:	40007000 	.word	0x40007000
 80042dc:	40010000 	.word	0x40010000
 80042e0:	fffffdff 	.word	0xfffffdff
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <HAL_PWR_EnterSTOPMode>:
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  /* It is forbidden to configure both EN_VREFINT=1 and ULP=1 if the device is
     in Stop mode or in Sleep/Low-power sleep mode */
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80042e8:	4b19      	ldr	r3, [pc, #100]	; (8004350 <HAL_PWR_EnterSTOPMode+0x68>)
{
 80042ea:	b5f0      	push	{r4, r5, r6, r7, lr}
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80042ec:	681e      	ldr	r6, [r3, #0]
{
 80042ee:	0005      	movs	r5, r0
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80042f0:	2080      	movs	r0, #128	; 0x80
 80042f2:	0034      	movs	r4, r6
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80042f4:	2701      	movs	r7, #1
 80042f6:	4a17      	ldr	r2, [pc, #92]	; (8004354 <HAL_PWR_EnterSTOPMode+0x6c>)
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80042f8:	0080      	lsls	r0, r0, #2
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80042fa:	6a12      	ldr	r2, [r2, #32]
  ulpbit = READ_BIT(PWR->CR, PWR_CR_ULP);
 80042fc:	4004      	ands	r4, r0
  vrefinbit = READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT);
 80042fe:	403a      	ands	r2, r7
  if((ulpbit != 0) && (vrefinbit != 0))
 8004300:	4206      	tst	r6, r0
 8004302:	d005      	beq.n	8004310 <HAL_PWR_EnterSTOPMode+0x28>
 8004304:	2a00      	cmp	r2, #0
 8004306:	d003      	beq.n	8004310 <HAL_PWR_EnterSTOPMode+0x28>
  {
    CLEAR_BIT(PWR->CR, PWR_CR_ULP);
 8004308:	6818      	ldr	r0, [r3, #0]
 800430a:	4e13      	ldr	r6, [pc, #76]	; (8004358 <HAL_PWR_EnterSTOPMode+0x70>)
 800430c:	4030      	ands	r0, r6
 800430e:	6018      	str	r0, [r3, #0]

  /* Select the regulator state in Stop mode ---------------------------------*/
  tmpreg = PWR->CR;
  
  /* Clear PDDS and LPDS bits */
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004310:	2603      	movs	r6, #3
  tmpreg = PWR->CR;
 8004312:	6818      	ldr	r0, [r3, #0]
  CLEAR_BIT(tmpreg, (PWR_CR_PDDS | PWR_CR_LPSDSR));
 8004314:	43b0      	bics	r0, r6

 /* Set LPSDSR bit according to PWR_Regulator value */
  SET_BIT(tmpreg, Regulator);
 8004316:	4328      	orrs	r0, r5

  /* Store the new value */
  PWR->CR = tmpreg;

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8004318:	2504      	movs	r5, #4
  PWR->CR = tmpreg;
 800431a:	6018      	str	r0, [r3, #0]
  SET_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800431c:	480f      	ldr	r0, [pc, #60]	; (800435c <HAL_PWR_EnterSTOPMode+0x74>)
 800431e:	6906      	ldr	r6, [r0, #16]
 8004320:	4335      	orrs	r5, r6
 8004322:	6105      	str	r5, [r0, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if(STOPEntry == PWR_STOPENTRY_WFI)
 8004324:	2901      	cmp	r1, #1
 8004326:	d10e      	bne.n	8004346 <HAL_PWR_EnterSTOPMode+0x5e>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004328:	bf30      	wfi
    __WFE();
    __WFE();
  }
 
  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800432a:	2504      	movs	r5, #4
 800432c:	6901      	ldr	r1, [r0, #16]
 800432e:	43a9      	bics	r1, r5
 8004330:	6101      	str	r1, [r0, #16]

  if((ulpbit != 0) && (vrefinbit != 0))
 8004332:	2c00      	cmp	r4, #0
 8004334:	d006      	beq.n	8004344 <HAL_PWR_EnterSTOPMode+0x5c>
 8004336:	2a00      	cmp	r2, #0
 8004338:	d004      	beq.n	8004344 <HAL_PWR_EnterSTOPMode+0x5c>
  {
    SET_BIT(PWR->CR, PWR_CR_ULP);
 800433a:	2280      	movs	r2, #128	; 0x80
 800433c:	6819      	ldr	r1, [r3, #0]
 800433e:	0092      	lsls	r2, r2, #2
 8004340:	430a      	orrs	r2, r1
 8004342:	601a      	str	r2, [r3, #0]
  }
}
 8004344:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __SEV();
 8004346:	bf40      	sev
    __WFE();
 8004348:	bf20      	wfe
    __WFE();
 800434a:	bf20      	wfe
 800434c:	e7ed      	b.n	800432a <HAL_PWR_EnterSTOPMode+0x42>
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	40007000 	.word	0x40007000
 8004354:	40010000 	.word	0x40010000
 8004358:	fffffdff 	.word	0xfffffdff
 800435c:	e000ed00 	.word	0xe000ed00

08004360 <HAL_PWREx_EnableFastWakeUp>:
  * @retval None
  */
void HAL_PWREx_EnableFastWakeUp(void)
{
  /* Enable the fast wake up */
  SET_BIT(PWR->CR, PWR_CR_FWU);
 8004360:	2380      	movs	r3, #128	; 0x80
 8004362:	4a03      	ldr	r2, [pc, #12]	; (8004370 <HAL_PWREx_EnableFastWakeUp+0x10>)
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	6811      	ldr	r1, [r2, #0]
 8004368:	430b      	orrs	r3, r1
 800436a:	6013      	str	r3, [r2, #0]
}
 800436c:	4770      	bx	lr
 800436e:	46c0      	nop			; (mov r8, r8)
 8004370:	40007000 	.word	0x40007000

08004374 <HAL_PWREx_EnableUltraLowPower>:
  * @retval None
  */
void HAL_PWREx_EnableUltraLowPower(void)
{
  /* Enable the Ultra Low Power mode */
  SET_BIT(PWR->CR, PWR_CR_ULP);
 8004374:	2380      	movs	r3, #128	; 0x80
 8004376:	4a03      	ldr	r2, [pc, #12]	; (8004384 <HAL_PWREx_EnableUltraLowPower+0x10>)
 8004378:	009b      	lsls	r3, r3, #2
 800437a:	6811      	ldr	r1, [r2, #0]
 800437c:	430b      	orrs	r3, r1
 800437e:	6013      	str	r3, [r2, #0]
}
 8004380:	4770      	bx	lr
 8004382:	46c0      	nop			; (mov r8, r8)
 8004384:	40007000 	.word	0x40007000

08004388 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004388:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <HAL_RCC_GetSysClockFreq+0x78>)
{
 800438c:	b570      	push	{r4, r5, r6, lr}
  tmpreg = RCC->CFGR;
 800438e:	68dc      	ldr	r4, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8004390:	4022      	ands	r2, r4
 8004392:	2a08      	cmp	r2, #8
 8004394:	d031      	beq.n	80043fa <HAL_RCC_GetSysClockFreq+0x72>
 8004396:	2a0c      	cmp	r2, #12
 8004398:	d009      	beq.n	80043ae <HAL_RCC_GetSysClockFreq+0x26>
 800439a:	2a04      	cmp	r2, #4
 800439c:	d125      	bne.n	80043ea <HAL_RCC_GetSysClockFreq+0x62>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800439e:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 80043a0:	4b18      	ldr	r3, [pc, #96]	; (8004404 <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043a2:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 80043a4:	17c0      	asrs	r0, r0, #31
 80043a6:	4018      	ands	r0, r3
 80043a8:	4b17      	ldr	r3, [pc, #92]	; (8004408 <HAL_RCC_GetSysClockFreq+0x80>)
 80043aa:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80043ae:	02a2      	lsls	r2, r4, #10
 80043b0:	4816      	ldr	r0, [pc, #88]	; (800440c <HAL_RCC_GetSysClockFreq+0x84>)
 80043b2:	0f12      	lsrs	r2, r2, #28
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043b4:	5c80      	ldrb	r0, [r0, r2]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043b6:	2280      	movs	r2, #128	; 0x80
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043b8:	0224      	lsls	r4, r4, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ba:	68d9      	ldr	r1, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043bc:	0fa4      	lsrs	r4, r4, #30
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043be:	0252      	lsls	r2, r2, #9
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80043c0:	3401      	adds	r4, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043c2:	4211      	tst	r1, r2
 80043c4:	d009      	beq.n	80043da <HAL_RCC_GetSysClockFreq+0x52>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043c6:	4a12      	ldr	r2, [pc, #72]	; (8004410 <HAL_RCC_GetSysClockFreq+0x88>)
 80043c8:	2300      	movs	r3, #0
 80043ca:	2100      	movs	r1, #0
 80043cc:	f7fc f8da 	bl	8000584 <__aeabi_lmul>
 80043d0:	0022      	movs	r2, r4
 80043d2:	2300      	movs	r3, #0
 80043d4:	f7fc f8b6 	bl	8000544 <__aeabi_uldivmod>
 80043d8:	e7e8      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	2310      	movs	r3, #16
 80043de:	421a      	tst	r2, r3
 80043e0:	d001      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x5e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80043e2:	4a0c      	ldr	r2, [pc, #48]	; (8004414 <HAL_RCC_GetSysClockFreq+0x8c>)
 80043e4:	e7f0      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x40>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80043e6:	4a08      	ldr	r2, [pc, #32]	; (8004408 <HAL_RCC_GetSysClockFreq+0x80>)
 80043e8:	e7ee      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x40>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80043ea:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80043ec:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80043ee:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80043f0:	041b      	lsls	r3, r3, #16
 80043f2:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80043f4:	3301      	adds	r3, #1
 80043f6:	4098      	lsls	r0, r3
      break;
 80043f8:	e7d8      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 80043fa:	4805      	ldr	r0, [pc, #20]	; (8004410 <HAL_RCC_GetSysClockFreq+0x88>)
 80043fc:	e7d6      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x24>
 80043fe:	46c0      	nop			; (mov r8, r8)
 8004400:	40021000 	.word	0x40021000
 8004404:	ff48e500 	.word	0xff48e500
 8004408:	00f42400 	.word	0x00f42400
 800440c:	0800f17c 	.word	0x0800f17c
 8004410:	007a1200 	.word	0x007a1200
 8004414:	003d0900 	.word	0x003d0900

08004418 <HAL_RCC_OscConfig>:
{
 8004418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441a:	0005      	movs	r5, r0
 800441c:	b085      	sub	sp, #20
  if(RCC_OscInitStruct == NULL)
 800441e:	2800      	cmp	r0, #0
 8004420:	d059      	beq.n	80044d6 <HAL_RCC_OscConfig+0xbe>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004422:	230c      	movs	r3, #12
 8004424:	4cb8      	ldr	r4, [pc, #736]	; (8004708 <HAL_RCC_OscConfig+0x2f0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004426:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004428:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800442a:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442c:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800442e:	2380      	movs	r3, #128	; 0x80
 8004430:	025b      	lsls	r3, r3, #9
 8004432:	0019      	movs	r1, r3
 8004434:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004436:	07d2      	lsls	r2, r2, #31
 8004438:	d441      	bmi.n	80044be <HAL_RCC_OscConfig+0xa6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800443a:	682b      	ldr	r3, [r5, #0]
 800443c:	079b      	lsls	r3, r3, #30
 800443e:	d500      	bpl.n	8004442 <HAL_RCC_OscConfig+0x2a>
 8004440:	e08a      	b.n	8004558 <HAL_RCC_OscConfig+0x140>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004442:	682b      	ldr	r3, [r5, #0]
 8004444:	06db      	lsls	r3, r3, #27
 8004446:	d528      	bpl.n	800449a <HAL_RCC_OscConfig+0x82>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004448:	2e00      	cmp	r6, #0
 800444a:	d000      	beq.n	800444e <HAL_RCC_OscConfig+0x36>
 800444c:	e0e3      	b.n	8004616 <HAL_RCC_OscConfig+0x1fe>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	059b      	lsls	r3, r3, #22
 8004452:	d502      	bpl.n	800445a <HAL_RCC_OscConfig+0x42>
 8004454:	69eb      	ldr	r3, [r5, #28]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03d      	beq.n	80044d6 <HAL_RCC_OscConfig+0xbe>
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800445a:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800445c:	6862      	ldr	r2, [r4, #4]
 800445e:	49ab      	ldr	r1, [pc, #684]	; (800470c <HAL_RCC_OscConfig+0x2f4>)
 8004460:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004462:	400a      	ands	r2, r1
 8004464:	431a      	orrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004466:	0b5b      	lsrs	r3, r3, #13
 8004468:	3301      	adds	r3, #1
 800446a:	023f      	lsls	r7, r7, #8
 800446c:	409f      	lsls	r7, r3
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800446e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004470:	6861      	ldr	r1, [r4, #4]
 8004472:	6a2a      	ldr	r2, [r5, #32]
 8004474:	0209      	lsls	r1, r1, #8
 8004476:	0a09      	lsrs	r1, r1, #8
 8004478:	0612      	lsls	r2, r2, #24
 800447a:	430a      	orrs	r2, r1
 800447c:	6062      	str	r2, [r4, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800447e:	68e1      	ldr	r1, [r4, #12]
 8004480:	48a3      	ldr	r0, [pc, #652]	; (8004710 <HAL_RCC_OscConfig+0x2f8>)
 8004482:	060b      	lsls	r3, r1, #24
 8004484:	0f1b      	lsrs	r3, r3, #28
 8004486:	5cc3      	ldrb	r3, [r0, r3]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004488:	4aa2      	ldr	r2, [pc, #648]	; (8004714 <HAL_RCC_OscConfig+0x2fc>)
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800448a:	40df      	lsrs	r7, r3
        status = HAL_InitTick (uwTickPrio);
 800448c:	4ba2      	ldr	r3, [pc, #648]	; (8004718 <HAL_RCC_OscConfig+0x300>)
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800448e:	6017      	str	r7, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	f7fe fb7b 	bl	8002b8c <HAL_InitTick>
        if(status != HAL_OK)
 8004496:	2800      	cmp	r0, #0
 8004498:	d134      	bne.n	8004504 <HAL_RCC_OscConfig+0xec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800449a:	682b      	ldr	r3, [r5, #0]
 800449c:	071b      	lsls	r3, r3, #28
 800449e:	d500      	bpl.n	80044a2 <HAL_RCC_OscConfig+0x8a>
 80044a0:	e0f0      	b.n	8004684 <HAL_RCC_OscConfig+0x26c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	075b      	lsls	r3, r3, #29
 80044a6:	d500      	bpl.n	80044aa <HAL_RCC_OscConfig+0x92>
 80044a8:	e112      	b.n	80046d0 <HAL_RCC_OscConfig+0x2b8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044aa:	682b      	ldr	r3, [r5, #0]
 80044ac:	069b      	lsls	r3, r3, #26
 80044ae:	d500      	bpl.n	80044b2 <HAL_RCC_OscConfig+0x9a>
 80044b0:	e197      	b.n	80047e2 <HAL_RCC_OscConfig+0x3ca>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044b2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d000      	beq.n	80044ba <HAL_RCC_OscConfig+0xa2>
 80044b8:	e1c6      	b.n	8004848 <HAL_RCC_OscConfig+0x430>
  return HAL_OK;
 80044ba:	2000      	movs	r0, #0
 80044bc:	e022      	b.n	8004504 <HAL_RCC_OscConfig+0xec>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044be:	2e08      	cmp	r6, #8
 80044c0:	d003      	beq.n	80044ca <HAL_RCC_OscConfig+0xb2>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044c2:	2e0c      	cmp	r6, #12
 80044c4:	d109      	bne.n	80044da <HAL_RCC_OscConfig+0xc2>
 80044c6:	2f00      	cmp	r7, #0
 80044c8:	d007      	beq.n	80044da <HAL_RCC_OscConfig+0xc2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	039b      	lsls	r3, r3, #14
 80044ce:	d5b4      	bpl.n	800443a <HAL_RCC_OscConfig+0x22>
 80044d0:	686b      	ldr	r3, [r5, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1b1      	bne.n	800443a <HAL_RCC_OscConfig+0x22>
          return HAL_ERROR;
 80044d6:	2001      	movs	r0, #1
 80044d8:	e014      	b.n	8004504 <HAL_RCC_OscConfig+0xec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044da:	686a      	ldr	r2, [r5, #4]
 80044dc:	428a      	cmp	r2, r1
 80044de:	d113      	bne.n	8004508 <HAL_RCC_OscConfig+0xf0>
 80044e0:	6822      	ldr	r2, [r4, #0]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80044e6:	f7fe fb53 	bl	8002b90 <HAL_GetTick>
 80044ea:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80044ec:	2280      	movs	r2, #128	; 0x80
 80044ee:	6823      	ldr	r3, [r4, #0]
 80044f0:	0292      	lsls	r2, r2, #10
 80044f2:	4213      	tst	r3, r2
 80044f4:	d1a1      	bne.n	800443a <HAL_RCC_OscConfig+0x22>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044f6:	f7fe fb4b 	bl	8002b90 <HAL_GetTick>
 80044fa:	9b00      	ldr	r3, [sp, #0]
 80044fc:	1ac0      	subs	r0, r0, r3
 80044fe:	2864      	cmp	r0, #100	; 0x64
 8004500:	d9f4      	bls.n	80044ec <HAL_RCC_OscConfig+0xd4>
            return HAL_TIMEOUT;
 8004502:	2003      	movs	r0, #3
}
 8004504:	b005      	add	sp, #20
 8004506:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004508:	21a0      	movs	r1, #160	; 0xa0
 800450a:	02c9      	lsls	r1, r1, #11
 800450c:	428a      	cmp	r2, r1
 800450e:	d105      	bne.n	800451c <HAL_RCC_OscConfig+0x104>
 8004510:	2280      	movs	r2, #128	; 0x80
 8004512:	6821      	ldr	r1, [r4, #0]
 8004514:	02d2      	lsls	r2, r2, #11
 8004516:	430a      	orrs	r2, r1
 8004518:	6022      	str	r2, [r4, #0]
 800451a:	e7e1      	b.n	80044e0 <HAL_RCC_OscConfig+0xc8>
 800451c:	6821      	ldr	r1, [r4, #0]
 800451e:	487f      	ldr	r0, [pc, #508]	; (800471c <HAL_RCC_OscConfig+0x304>)
 8004520:	4001      	ands	r1, r0
 8004522:	6021      	str	r1, [r4, #0]
 8004524:	6821      	ldr	r1, [r4, #0]
 8004526:	400b      	ands	r3, r1
 8004528:	9303      	str	r3, [sp, #12]
 800452a:	9b03      	ldr	r3, [sp, #12]
 800452c:	497c      	ldr	r1, [pc, #496]	; (8004720 <HAL_RCC_OscConfig+0x308>)
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	400b      	ands	r3, r1
 8004532:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004534:	2a00      	cmp	r2, #0
 8004536:	d1d6      	bne.n	80044e6 <HAL_RCC_OscConfig+0xce>
        tickstart = HAL_GetTick();
 8004538:	f7fe fb2a 	bl	8002b90 <HAL_GetTick>
 800453c:	9000      	str	r0, [sp, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800453e:	2280      	movs	r2, #128	; 0x80
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	0292      	lsls	r2, r2, #10
 8004544:	4213      	tst	r3, r2
 8004546:	d100      	bne.n	800454a <HAL_RCC_OscConfig+0x132>
 8004548:	e777      	b.n	800443a <HAL_RCC_OscConfig+0x22>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800454a:	f7fe fb21 	bl	8002b90 <HAL_GetTick>
 800454e:	9b00      	ldr	r3, [sp, #0]
 8004550:	1ac0      	subs	r0, r0, r3
 8004552:	2864      	cmp	r0, #100	; 0x64
 8004554:	d9f3      	bls.n	800453e <HAL_RCC_OscConfig+0x126>
 8004556:	e7d4      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004558:	2220      	movs	r2, #32
    hsi_state = RCC_OscInitStruct->HSIState;
 800455a:	68eb      	ldr	r3, [r5, #12]
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800455c:	4213      	tst	r3, r2
 800455e:	d003      	beq.n	8004568 <HAL_RCC_OscConfig+0x150>
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004560:	6821      	ldr	r1, [r4, #0]
      hsi_state &= ~RCC_CR_HSIOUTEN;
 8004562:	4393      	bics	r3, r2
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004564:	4311      	orrs	r1, r2
 8004566:	6021      	str	r1, [r4, #0]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004568:	2e04      	cmp	r6, #4
 800456a:	d003      	beq.n	8004574 <HAL_RCC_OscConfig+0x15c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800456c:	2e0c      	cmp	r6, #12
 800456e:	d124      	bne.n	80045ba <HAL_RCC_OscConfig+0x1a2>
 8004570:	2f00      	cmp	r7, #0
 8004572:	d122      	bne.n	80045ba <HAL_RCC_OscConfig+0x1a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004574:	6822      	ldr	r2, [r4, #0]
 8004576:	0752      	lsls	r2, r2, #29
 8004578:	d501      	bpl.n	800457e <HAL_RCC_OscConfig+0x166>
 800457a:	2b00      	cmp	r3, #0
 800457c:	d0ab      	beq.n	80044d6 <HAL_RCC_OscConfig+0xbe>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457e:	6861      	ldr	r1, [r4, #4]
 8004580:	692a      	ldr	r2, [r5, #16]
 8004582:	4868      	ldr	r0, [pc, #416]	; (8004724 <HAL_RCC_OscConfig+0x30c>)
 8004584:	0212      	lsls	r2, r2, #8
 8004586:	4001      	ands	r1, r0
 8004588:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800458a:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800458c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800458e:	6822      	ldr	r2, [r4, #0]
 8004590:	438a      	bics	r2, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004596:	f7ff fef7 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 800459a:	68e3      	ldr	r3, [r4, #12]
 800459c:	4a5c      	ldr	r2, [pc, #368]	; (8004710 <HAL_RCC_OscConfig+0x2f8>)
 800459e:	061b      	lsls	r3, r3, #24
 80045a0:	0f1b      	lsrs	r3, r3, #28
 80045a2:	5cd3      	ldrb	r3, [r2, r3]
 80045a4:	495b      	ldr	r1, [pc, #364]	; (8004714 <HAL_RCC_OscConfig+0x2fc>)
 80045a6:	40d8      	lsrs	r0, r3
      status = HAL_InitTick (uwTickPrio);
 80045a8:	4b5b      	ldr	r3, [pc, #364]	; (8004718 <HAL_RCC_OscConfig+0x300>)
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045aa:	6008      	str	r0, [r1, #0]
      status = HAL_InitTick (uwTickPrio);
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	f7fe faed 	bl	8002b8c <HAL_InitTick>
      if(status != HAL_OK)
 80045b2:	2800      	cmp	r0, #0
 80045b4:	d100      	bne.n	80045b8 <HAL_RCC_OscConfig+0x1a0>
 80045b6:	e744      	b.n	8004442 <HAL_RCC_OscConfig+0x2a>
 80045b8:	e7a4      	b.n	8004504 <HAL_RCC_OscConfig+0xec>
      if(hsi_state != RCC_HSI_OFF)
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d019      	beq.n	80045f2 <HAL_RCC_OscConfig+0x1da>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80045be:	2109      	movs	r1, #9
 80045c0:	6822      	ldr	r2, [r4, #0]
 80045c2:	438a      	bics	r2, r1
 80045c4:	4313      	orrs	r3, r2
 80045c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045c8:	f7fe fae2 	bl	8002b90 <HAL_GetTick>
 80045cc:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045ce:	2204      	movs	r2, #4
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	4213      	tst	r3, r2
 80045d4:	d007      	beq.n	80045e6 <HAL_RCC_OscConfig+0x1ce>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045d6:	6862      	ldr	r2, [r4, #4]
 80045d8:	692b      	ldr	r3, [r5, #16]
 80045da:	4952      	ldr	r1, [pc, #328]	; (8004724 <HAL_RCC_OscConfig+0x30c>)
 80045dc:	021b      	lsls	r3, r3, #8
 80045de:	400a      	ands	r2, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	6063      	str	r3, [r4, #4]
 80045e4:	e72d      	b.n	8004442 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045e6:	f7fe fad3 	bl	8002b90 <HAL_GetTick>
 80045ea:	1bc0      	subs	r0, r0, r7
 80045ec:	2802      	cmp	r0, #2
 80045ee:	d9ee      	bls.n	80045ce <HAL_RCC_OscConfig+0x1b6>
 80045f0:	e787      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_DISABLE();
 80045f2:	2201      	movs	r2, #1
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	4393      	bics	r3, r2
 80045f8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80045fa:	f7fe fac9 	bl	8002b90 <HAL_GetTick>
 80045fe:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004600:	2204      	movs	r2, #4
 8004602:	6823      	ldr	r3, [r4, #0]
 8004604:	4213      	tst	r3, r2
 8004606:	d100      	bne.n	800460a <HAL_RCC_OscConfig+0x1f2>
 8004608:	e71b      	b.n	8004442 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460a:	f7fe fac1 	bl	8002b90 <HAL_GetTick>
 800460e:	1bc0      	subs	r0, r0, r7
 8004610:	2802      	cmp	r0, #2
 8004612:	d9f5      	bls.n	8004600 <HAL_RCC_OscConfig+0x1e8>
 8004614:	e775      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004616:	69eb      	ldr	r3, [r5, #28]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d020      	beq.n	800465e <HAL_RCC_OscConfig+0x246>
        __HAL_RCC_MSI_ENABLE();
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	6822      	ldr	r2, [r4, #0]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	4313      	orrs	r3, r2
 8004624:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004626:	f7fe fab3 	bl	8002b90 <HAL_GetTick>
 800462a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800462c:	2280      	movs	r2, #128	; 0x80
 800462e:	6823      	ldr	r3, [r4, #0]
 8004630:	0092      	lsls	r2, r2, #2
 8004632:	4213      	tst	r3, r2
 8004634:	d00d      	beq.n	8004652 <HAL_RCC_OscConfig+0x23a>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004636:	6863      	ldr	r3, [r4, #4]
 8004638:	4a34      	ldr	r2, [pc, #208]	; (800470c <HAL_RCC_OscConfig+0x2f4>)
 800463a:	4013      	ands	r3, r2
 800463c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800463e:	4313      	orrs	r3, r2
 8004640:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004642:	6862      	ldr	r2, [r4, #4]
 8004644:	6a2b      	ldr	r3, [r5, #32]
 8004646:	0212      	lsls	r2, r2, #8
 8004648:	061b      	lsls	r3, r3, #24
 800464a:	0a12      	lsrs	r2, r2, #8
 800464c:	4313      	orrs	r3, r2
 800464e:	6063      	str	r3, [r4, #4]
 8004650:	e723      	b.n	800449a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004652:	f7fe fa9d 	bl	8002b90 <HAL_GetTick>
 8004656:	1bc0      	subs	r0, r0, r7
 8004658:	2802      	cmp	r0, #2
 800465a:	d9e7      	bls.n	800462c <HAL_RCC_OscConfig+0x214>
 800465c:	e751      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_MSI_DISABLE();
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	4a31      	ldr	r2, [pc, #196]	; (8004728 <HAL_RCC_OscConfig+0x310>)
 8004662:	4013      	ands	r3, r2
 8004664:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8004666:	f7fe fa93 	bl	8002b90 <HAL_GetTick>
 800466a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800466c:	2280      	movs	r2, #128	; 0x80
 800466e:	6823      	ldr	r3, [r4, #0]
 8004670:	0092      	lsls	r2, r2, #2
 8004672:	4213      	tst	r3, r2
 8004674:	d100      	bne.n	8004678 <HAL_RCC_OscConfig+0x260>
 8004676:	e710      	b.n	800449a <HAL_RCC_OscConfig+0x82>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004678:	f7fe fa8a 	bl	8002b90 <HAL_GetTick>
 800467c:	1bc0      	subs	r0, r0, r7
 800467e:	2802      	cmp	r0, #2
 8004680:	d9f4      	bls.n	800466c <HAL_RCC_OscConfig+0x254>
 8004682:	e73e      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004684:	696a      	ldr	r2, [r5, #20]
 8004686:	2301      	movs	r3, #1
 8004688:	2a00      	cmp	r2, #0
 800468a:	d010      	beq.n	80046ae <HAL_RCC_OscConfig+0x296>
      __HAL_RCC_LSI_ENABLE();
 800468c:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800468e:	4313      	orrs	r3, r2
 8004690:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8004692:	f7fe fa7d 	bl	8002b90 <HAL_GetTick>
 8004696:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004698:	2202      	movs	r2, #2
 800469a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800469c:	4213      	tst	r3, r2
 800469e:	d000      	beq.n	80046a2 <HAL_RCC_OscConfig+0x28a>
 80046a0:	e6ff      	b.n	80044a2 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046a2:	f7fe fa75 	bl	8002b90 <HAL_GetTick>
 80046a6:	1bc0      	subs	r0, r0, r7
 80046a8:	2802      	cmp	r0, #2
 80046aa:	d9f5      	bls.n	8004698 <HAL_RCC_OscConfig+0x280>
 80046ac:	e729      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_LSI_DISABLE();
 80046ae:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80046b0:	439a      	bics	r2, r3
 80046b2:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80046b4:	f7fe fa6c 	bl	8002b90 <HAL_GetTick>
 80046b8:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80046ba:	2202      	movs	r2, #2
 80046bc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80046be:	4213      	tst	r3, r2
 80046c0:	d100      	bne.n	80046c4 <HAL_RCC_OscConfig+0x2ac>
 80046c2:	e6ee      	b.n	80044a2 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046c4:	f7fe fa64 	bl	8002b90 <HAL_GetTick>
 80046c8:	1bc0      	subs	r0, r0, r7
 80046ca:	2802      	cmp	r0, #2
 80046cc:	d9f5      	bls.n	80046ba <HAL_RCC_OscConfig+0x2a2>
 80046ce:	e718      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d0:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80046d2:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046d6:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 80046d8:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046da:	421a      	tst	r2, r3
 80046dc:	d104      	bne.n	80046e8 <HAL_RCC_OscConfig+0x2d0>
      __HAL_RCC_PWR_CLK_ENABLE();
 80046de:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80046e0:	4313      	orrs	r3, r2
 80046e2:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 80046e4:	2301      	movs	r3, #1
 80046e6:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e8:	2280      	movs	r2, #128	; 0x80
 80046ea:	4f10      	ldr	r7, [pc, #64]	; (800472c <HAL_RCC_OscConfig+0x314>)
 80046ec:	0052      	lsls	r2, r2, #1
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	4213      	tst	r3, r2
 80046f2:	d01d      	beq.n	8004730 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046f4:	2280      	movs	r2, #128	; 0x80
 80046f6:	68ab      	ldr	r3, [r5, #8]
 80046f8:	0052      	lsls	r2, r2, #1
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d12c      	bne.n	8004758 <HAL_RCC_OscConfig+0x340>
 80046fe:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004700:	4313      	orrs	r3, r2
 8004702:	6523      	str	r3, [r4, #80]	; 0x50
 8004704:	e04d      	b.n	80047a2 <HAL_RCC_OscConfig+0x38a>
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	40021000 	.word	0x40021000
 800470c:	ffff1fff 	.word	0xffff1fff
 8004710:	0800f185 	.word	0x0800f185
 8004714:	20000060 	.word	0x20000060
 8004718:	20000068 	.word	0x20000068
 800471c:	fffeffff 	.word	0xfffeffff
 8004720:	fffbffff 	.word	0xfffbffff
 8004724:	ffffe0ff 	.word	0xffffe0ff
 8004728:	fffffeff 	.word	0xfffffeff
 800472c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004730:	2280      	movs	r2, #128	; 0x80
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	0052      	lsls	r2, r2, #1
 8004736:	4313      	orrs	r3, r2
 8004738:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800473a:	f7fe fa29 	bl	8002b90 <HAL_GetTick>
 800473e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004740:	2280      	movs	r2, #128	; 0x80
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	0052      	lsls	r2, r2, #1
 8004746:	4213      	tst	r3, r2
 8004748:	d1d4      	bne.n	80046f4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800474a:	f7fe fa21 	bl	8002b90 <HAL_GetTick>
 800474e:	9b01      	ldr	r3, [sp, #4]
 8004750:	1ac0      	subs	r0, r0, r3
 8004752:	2864      	cmp	r0, #100	; 0x64
 8004754:	d9f4      	bls.n	8004740 <HAL_RCC_OscConfig+0x328>
 8004756:	e6d4      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004758:	2b00      	cmp	r3, #0
 800475a:	d116      	bne.n	800478a <HAL_RCC_OscConfig+0x372>
 800475c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800475e:	4a6b      	ldr	r2, [pc, #428]	; (800490c <HAL_RCC_OscConfig+0x4f4>)
 8004760:	4013      	ands	r3, r2
 8004762:	6523      	str	r3, [r4, #80]	; 0x50
 8004764:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004766:	4a6a      	ldr	r2, [pc, #424]	; (8004910 <HAL_RCC_OscConfig+0x4f8>)
 8004768:	4013      	ands	r3, r2
 800476a:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 800476c:	f7fe fa10 	bl	8002b90 <HAL_GetTick>
 8004770:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004772:	2280      	movs	r2, #128	; 0x80
 8004774:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004776:	0092      	lsls	r2, r2, #2
 8004778:	4213      	tst	r3, r2
 800477a:	d01a      	beq.n	80047b2 <HAL_RCC_OscConfig+0x39a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800477c:	f7fe fa08 	bl	8002b90 <HAL_GetTick>
 8004780:	4b64      	ldr	r3, [pc, #400]	; (8004914 <HAL_RCC_OscConfig+0x4fc>)
 8004782:	1bc0      	subs	r0, r0, r7
 8004784:	4298      	cmp	r0, r3
 8004786:	d9f4      	bls.n	8004772 <HAL_RCC_OscConfig+0x35a>
 8004788:	e6bb      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478a:	21a0      	movs	r1, #160	; 0xa0
 800478c:	00c9      	lsls	r1, r1, #3
 800478e:	428b      	cmp	r3, r1
 8004790:	d118      	bne.n	80047c4 <HAL_RCC_OscConfig+0x3ac>
 8004792:	2380      	movs	r3, #128	; 0x80
 8004794:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	430b      	orrs	r3, r1
 800479a:	6523      	str	r3, [r4, #80]	; 0x50
 800479c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800479e:	431a      	orrs	r2, r3
 80047a0:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80047a2:	f7fe f9f5 	bl	8002b90 <HAL_GetTick>
 80047a6:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80047a8:	2280      	movs	r2, #128	; 0x80
 80047aa:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047ac:	0092      	lsls	r2, r2, #2
 80047ae:	4213      	tst	r3, r2
 80047b0:	d010      	beq.n	80047d4 <HAL_RCC_OscConfig+0x3bc>
    if(pwrclkchanged == SET)
 80047b2:	9b00      	ldr	r3, [sp, #0]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d000      	beq.n	80047ba <HAL_RCC_OscConfig+0x3a2>
 80047b8:	e677      	b.n	80044aa <HAL_RCC_OscConfig+0x92>
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80047bc:	4a56      	ldr	r2, [pc, #344]	; (8004918 <HAL_RCC_OscConfig+0x500>)
 80047be:	4013      	ands	r3, r2
 80047c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80047c2:	e672      	b.n	80044aa <HAL_RCC_OscConfig+0x92>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c4:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047c6:	4a51      	ldr	r2, [pc, #324]	; (800490c <HAL_RCC_OscConfig+0x4f4>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	6523      	str	r3, [r4, #80]	; 0x50
 80047cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80047ce:	4a50      	ldr	r2, [pc, #320]	; (8004910 <HAL_RCC_OscConfig+0x4f8>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	e796      	b.n	8004702 <HAL_RCC_OscConfig+0x2ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fe f9dc 	bl	8002b90 <HAL_GetTick>
 80047d8:	4b4e      	ldr	r3, [pc, #312]	; (8004914 <HAL_RCC_OscConfig+0x4fc>)
 80047da:	1bc0      	subs	r0, r0, r7
 80047dc:	4298      	cmp	r0, r3
 80047de:	d9e3      	bls.n	80047a8 <HAL_RCC_OscConfig+0x390>
 80047e0:	e68f      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047e2:	69aa      	ldr	r2, [r5, #24]
 80047e4:	2101      	movs	r1, #1
 80047e6:	4b4d      	ldr	r3, [pc, #308]	; (800491c <HAL_RCC_OscConfig+0x504>)
 80047e8:	2a00      	cmp	r2, #0
 80047ea:	d018      	beq.n	800481e <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI48_ENABLE();
 80047ec:	68a2      	ldr	r2, [r4, #8]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	60a2      	str	r2, [r4, #8]
 80047f2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80047f4:	430a      	orrs	r2, r1
 80047f6:	6362      	str	r2, [r4, #52]	; 0x34
 80047f8:	2280      	movs	r2, #128	; 0x80
 80047fa:	6a19      	ldr	r1, [r3, #32]
 80047fc:	0192      	lsls	r2, r2, #6
 80047fe:	430a      	orrs	r2, r1
 8004800:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8004802:	f7fe f9c5 	bl	8002b90 <HAL_GetTick>
 8004806:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004808:	2202      	movs	r2, #2
 800480a:	68a3      	ldr	r3, [r4, #8]
 800480c:	4213      	tst	r3, r2
 800480e:	d000      	beq.n	8004812 <HAL_RCC_OscConfig+0x3fa>
 8004810:	e64f      	b.n	80044b2 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004812:	f7fe f9bd 	bl	8002b90 <HAL_GetTick>
 8004816:	1bc0      	subs	r0, r0, r7
 8004818:	2802      	cmp	r0, #2
 800481a:	d9f5      	bls.n	8004808 <HAL_RCC_OscConfig+0x3f0>
 800481c:	e671      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI48_DISABLE();
 800481e:	68a2      	ldr	r2, [r4, #8]
 8004820:	438a      	bics	r2, r1
 8004822:	60a2      	str	r2, [r4, #8]
 8004824:	6a1a      	ldr	r2, [r3, #32]
 8004826:	493e      	ldr	r1, [pc, #248]	; (8004920 <HAL_RCC_OscConfig+0x508>)
 8004828:	400a      	ands	r2, r1
 800482a:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800482c:	f7fe f9b0 	bl	8002b90 <HAL_GetTick>
 8004830:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004832:	2202      	movs	r2, #2
 8004834:	68a3      	ldr	r3, [r4, #8]
 8004836:	4213      	tst	r3, r2
 8004838:	d100      	bne.n	800483c <HAL_RCC_OscConfig+0x424>
 800483a:	e63a      	b.n	80044b2 <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800483c:	f7fe f9a8 	bl	8002b90 <HAL_GetTick>
 8004840:	1bc0      	subs	r0, r0, r7
 8004842:	2802      	cmp	r0, #2
 8004844:	d9f5      	bls.n	8004832 <HAL_RCC_OscConfig+0x41a>
 8004846:	e65c      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004848:	2e0c      	cmp	r6, #12
 800484a:	d043      	beq.n	80048d4 <HAL_RCC_OscConfig+0x4bc>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800484c:	4a35      	ldr	r2, [pc, #212]	; (8004924 <HAL_RCC_OscConfig+0x50c>)
 800484e:	2b02      	cmp	r3, #2
 8004850:	d12e      	bne.n	80048b0 <HAL_RCC_OscConfig+0x498>
        __HAL_RCC_PLL_DISABLE();
 8004852:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004854:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8004856:	4013      	ands	r3, r2
 8004858:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800485a:	f7fe f999 	bl	8002b90 <HAL_GetTick>
 800485e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004860:	04bf      	lsls	r7, r7, #18
 8004862:	6823      	ldr	r3, [r4, #0]
 8004864:	423b      	tst	r3, r7
 8004866:	d11d      	bne.n	80048a4 <HAL_RCC_OscConfig+0x48c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004868:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800486a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800486c:	68e2      	ldr	r2, [r4, #12]
 800486e:	430b      	orrs	r3, r1
 8004870:	492d      	ldr	r1, [pc, #180]	; (8004928 <HAL_RCC_OscConfig+0x510>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004872:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004874:	400a      	ands	r2, r1
 8004876:	4313      	orrs	r3, r2
 8004878:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800487a:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487c:	4313      	orrs	r3, r2
 800487e:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	6822      	ldr	r2, [r4, #0]
 8004884:	045b      	lsls	r3, r3, #17
 8004886:	4313      	orrs	r3, r2
 8004888:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800488a:	f7fe f981 	bl	8002b90 <HAL_GetTick>
 800488e:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004890:	6823      	ldr	r3, [r4, #0]
 8004892:	4233      	tst	r3, r6
 8004894:	d000      	beq.n	8004898 <HAL_RCC_OscConfig+0x480>
 8004896:	e610      	b.n	80044ba <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004898:	f7fe f97a 	bl	8002b90 <HAL_GetTick>
 800489c:	1b40      	subs	r0, r0, r5
 800489e:	2802      	cmp	r0, #2
 80048a0:	d9f6      	bls.n	8004890 <HAL_RCC_OscConfig+0x478>
 80048a2:	e62e      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048a4:	f7fe f974 	bl	8002b90 <HAL_GetTick>
 80048a8:	1b80      	subs	r0, r0, r6
 80048aa:	2802      	cmp	r0, #2
 80048ac:	d9d9      	bls.n	8004862 <HAL_RCC_OscConfig+0x44a>
 80048ae:	e628      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_PLL_DISABLE();
 80048b0:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048b2:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80048b4:	4013      	ands	r3, r2
 80048b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80048b8:	f7fe f96a 	bl	8002b90 <HAL_GetTick>
 80048bc:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80048be:	04b6      	lsls	r6, r6, #18
 80048c0:	6823      	ldr	r3, [r4, #0]
 80048c2:	4233      	tst	r3, r6
 80048c4:	d100      	bne.n	80048c8 <HAL_RCC_OscConfig+0x4b0>
 80048c6:	e5f8      	b.n	80044ba <HAL_RCC_OscConfig+0xa2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048c8:	f7fe f962 	bl	8002b90 <HAL_GetTick>
 80048cc:	1b40      	subs	r0, r0, r5
 80048ce:	2802      	cmp	r0, #2
 80048d0:	d9f6      	bls.n	80048c0 <HAL_RCC_OscConfig+0x4a8>
 80048d2:	e616      	b.n	8004502 <HAL_RCC_OscConfig+0xea>
        return HAL_ERROR;
 80048d4:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d100      	bne.n	80048dc <HAL_RCC_OscConfig+0x4c4>
 80048da:	e613      	b.n	8004504 <HAL_RCC_OscConfig+0xec>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048dc:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 80048de:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048e0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80048e2:	0252      	lsls	r2, r2, #9
 80048e4:	401a      	ands	r2, r3
 80048e6:	428a      	cmp	r2, r1
 80048e8:	d000      	beq.n	80048ec <HAL_RCC_OscConfig+0x4d4>
 80048ea:	e5f4      	b.n	80044d6 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80048ec:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80048f0:	0392      	lsls	r2, r2, #14
 80048f2:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f4:	428a      	cmp	r2, r1
 80048f6:	d000      	beq.n	80048fa <HAL_RCC_OscConfig+0x4e2>
 80048f8:	e5ed      	b.n	80044d6 <HAL_RCC_OscConfig+0xbe>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80048fa:	22c0      	movs	r2, #192	; 0xc0
 80048fc:	0412      	lsls	r2, r2, #16
 80048fe:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004900:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8004902:	4293      	cmp	r3, r2
 8004904:	d100      	bne.n	8004908 <HAL_RCC_OscConfig+0x4f0>
 8004906:	e5d8      	b.n	80044ba <HAL_RCC_OscConfig+0xa2>
 8004908:	e5e5      	b.n	80044d6 <HAL_RCC_OscConfig+0xbe>
 800490a:	46c0      	nop			; (mov r8, r8)
 800490c:	fffffeff 	.word	0xfffffeff
 8004910:	fffffbff 	.word	0xfffffbff
 8004914:	00001388 	.word	0x00001388
 8004918:	efffffff 	.word	0xefffffff
 800491c:	40010000 	.word	0x40010000
 8004920:	ffffdfff 	.word	0xffffdfff
 8004924:	feffffff 	.word	0xfeffffff
 8004928:	ff02ffff 	.word	0xff02ffff

0800492c <HAL_RCC_ClockConfig>:
{
 800492c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800492e:	1e04      	subs	r4, r0, #0
 8004930:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8004932:	d101      	bne.n	8004938 <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8004934:	2001      	movs	r0, #1
}
 8004936:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004938:	2501      	movs	r5, #1
 800493a:	4e5b      	ldr	r6, [pc, #364]	; (8004aa8 <HAL_RCC_ClockConfig+0x17c>)
 800493c:	9a01      	ldr	r2, [sp, #4]
 800493e:	6833      	ldr	r3, [r6, #0]
 8004940:	402b      	ands	r3, r5
 8004942:	4293      	cmp	r3, r2
 8004944:	d331      	bcc.n	80049aa <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004946:	6822      	ldr	r2, [r4, #0]
 8004948:	0793      	lsls	r3, r2, #30
 800494a:	d443      	bmi.n	80049d4 <HAL_RCC_ClockConfig+0xa8>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800494c:	07d2      	lsls	r2, r2, #31
 800494e:	d449      	bmi.n	80049e4 <HAL_RCC_ClockConfig+0xb8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004950:	2501      	movs	r5, #1
 8004952:	6833      	ldr	r3, [r6, #0]
 8004954:	9a01      	ldr	r2, [sp, #4]
 8004956:	402b      	ands	r3, r5
 8004958:	4293      	cmp	r3, r2
 800495a:	d909      	bls.n	8004970 <HAL_RCC_ClockConfig+0x44>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495c:	6833      	ldr	r3, [r6, #0]
 800495e:	43ab      	bics	r3, r5
 8004960:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8004962:	f7fe f915 	bl	8002b90 <HAL_GetTick>
 8004966:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004968:	6833      	ldr	r3, [r6, #0]
 800496a:	422b      	tst	r3, r5
 800496c:	d000      	beq.n	8004970 <HAL_RCC_ClockConfig+0x44>
 800496e:	e08c      	b.n	8004a8a <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004970:	6822      	ldr	r2, [r4, #0]
 8004972:	4d4e      	ldr	r5, [pc, #312]	; (8004aac <HAL_RCC_ClockConfig+0x180>)
 8004974:	0753      	lsls	r3, r2, #29
 8004976:	d500      	bpl.n	800497a <HAL_RCC_ClockConfig+0x4e>
 8004978:	e08f      	b.n	8004a9a <HAL_RCC_ClockConfig+0x16e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	0712      	lsls	r2, r2, #28
 800497c:	d506      	bpl.n	800498c <HAL_RCC_ClockConfig+0x60>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800497e:	68ea      	ldr	r2, [r5, #12]
 8004980:	6923      	ldr	r3, [r4, #16]
 8004982:	494b      	ldr	r1, [pc, #300]	; (8004ab0 <HAL_RCC_ClockConfig+0x184>)
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	400a      	ands	r2, r1
 8004988:	4313      	orrs	r3, r2
 800498a:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800498c:	f7ff fcfc 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 8004990:	68eb      	ldr	r3, [r5, #12]
 8004992:	4a48      	ldr	r2, [pc, #288]	; (8004ab4 <HAL_RCC_ClockConfig+0x188>)
 8004994:	061b      	lsls	r3, r3, #24
 8004996:	0f1b      	lsrs	r3, r3, #28
 8004998:	5cd3      	ldrb	r3, [r2, r3]
 800499a:	4947      	ldr	r1, [pc, #284]	; (8004ab8 <HAL_RCC_ClockConfig+0x18c>)
 800499c:	40d8      	lsrs	r0, r3
  status = HAL_InitTick(uwTickPrio);
 800499e:	4b47      	ldr	r3, [pc, #284]	; (8004abc <HAL_RCC_ClockConfig+0x190>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049a0:	6008      	str	r0, [r1, #0]
  status = HAL_InitTick(uwTickPrio);
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	f7fe f8f2 	bl	8002b8c <HAL_InitTick>
  if(status != HAL_OK)
 80049a8:	e7c5      	b.n	8004936 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	6833      	ldr	r3, [r6, #0]
 80049ac:	9a01      	ldr	r2, [sp, #4]
 80049ae:	43ab      	bics	r3, r5
 80049b0:	4313      	orrs	r3, r2
 80049b2:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80049b4:	f7fe f8ec 	bl	8002b90 <HAL_GetTick>
 80049b8:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ba:	6833      	ldr	r3, [r6, #0]
 80049bc:	9a01      	ldr	r2, [sp, #4]
 80049be:	402b      	ands	r3, r5
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d0c0      	beq.n	8004946 <HAL_RCC_ClockConfig+0x1a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049c4:	f7fe f8e4 	bl	8002b90 <HAL_GetTick>
 80049c8:	4b3d      	ldr	r3, [pc, #244]	; (8004ac0 <HAL_RCC_ClockConfig+0x194>)
 80049ca:	1bc0      	subs	r0, r0, r7
 80049cc:	4298      	cmp	r0, r3
 80049ce:	d9f4      	bls.n	80049ba <HAL_RCC_ClockConfig+0x8e>
        return HAL_TIMEOUT;
 80049d0:	2003      	movs	r0, #3
 80049d2:	e7b0      	b.n	8004936 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049d4:	20f0      	movs	r0, #240	; 0xf0
 80049d6:	4935      	ldr	r1, [pc, #212]	; (8004aac <HAL_RCC_ClockConfig+0x180>)
 80049d8:	68cb      	ldr	r3, [r1, #12]
 80049da:	4383      	bics	r3, r0
 80049dc:	68a0      	ldr	r0, [r4, #8]
 80049de:	4303      	orrs	r3, r0
 80049e0:	60cb      	str	r3, [r1, #12]
 80049e2:	e7b3      	b.n	800494c <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049e4:	4d31      	ldr	r5, [pc, #196]	; (8004aac <HAL_RCC_ClockConfig+0x180>)
 80049e6:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049e8:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ea:	2a02      	cmp	r2, #2
 80049ec:	d118      	bne.n	8004a20 <HAL_RCC_ClockConfig+0xf4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80049ee:	039b      	lsls	r3, r3, #14
 80049f0:	d5a0      	bpl.n	8004934 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049f2:	2103      	movs	r1, #3
 80049f4:	68eb      	ldr	r3, [r5, #12]
 80049f6:	438b      	bics	r3, r1
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60eb      	str	r3, [r5, #12]
    tickstart = HAL_GetTick();
 80049fc:	f7fe f8c8 	bl	8002b90 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a00:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8004a02:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d118      	bne.n	8004a3a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a08:	220c      	movs	r2, #12
 8004a0a:	68eb      	ldr	r3, [r5, #12]
 8004a0c:	4013      	ands	r3, r2
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d09e      	beq.n	8004950 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a12:	f7fe f8bd 	bl	8002b90 <HAL_GetTick>
 8004a16:	4b2a      	ldr	r3, [pc, #168]	; (8004ac0 <HAL_RCC_ClockConfig+0x194>)
 8004a18:	1bc0      	subs	r0, r0, r7
 8004a1a:	4298      	cmp	r0, r3
 8004a1c:	d9f4      	bls.n	8004a08 <HAL_RCC_ClockConfig+0xdc>
 8004a1e:	e7d7      	b.n	80049d0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a20:	2a03      	cmp	r2, #3
 8004a22:	d102      	bne.n	8004a2a <HAL_RCC_ClockConfig+0xfe>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a24:	019b      	lsls	r3, r3, #6
 8004a26:	d4e4      	bmi.n	80049f2 <HAL_RCC_ClockConfig+0xc6>
 8004a28:	e784      	b.n	8004934 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a2a:	2a01      	cmp	r2, #1
 8004a2c:	d102      	bne.n	8004a34 <HAL_RCC_ClockConfig+0x108>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a2e:	075b      	lsls	r3, r3, #29
 8004a30:	d4df      	bmi.n	80049f2 <HAL_RCC_ClockConfig+0xc6>
 8004a32:	e77f      	b.n	8004934 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8004a34:	059b      	lsls	r3, r3, #22
 8004a36:	d4dc      	bmi.n	80049f2 <HAL_RCC_ClockConfig+0xc6>
 8004a38:	e77c      	b.n	8004934 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d10b      	bne.n	8004a56 <HAL_RCC_ClockConfig+0x12a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a3e:	220c      	movs	r2, #12
 8004a40:	68eb      	ldr	r3, [r5, #12]
 8004a42:	4013      	ands	r3, r2
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d083      	beq.n	8004950 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a48:	f7fe f8a2 	bl	8002b90 <HAL_GetTick>
 8004a4c:	4b1c      	ldr	r3, [pc, #112]	; (8004ac0 <HAL_RCC_ClockConfig+0x194>)
 8004a4e:	1bc0      	subs	r0, r0, r7
 8004a50:	4298      	cmp	r0, r3
 8004a52:	d9f4      	bls.n	8004a3e <HAL_RCC_ClockConfig+0x112>
 8004a54:	e7bc      	b.n	80049d0 <HAL_RCC_ClockConfig+0xa4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d011      	beq.n	8004a7e <HAL_RCC_ClockConfig+0x152>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a5a:	220c      	movs	r2, #12
 8004a5c:	68eb      	ldr	r3, [r5, #12]
 8004a5e:	4213      	tst	r3, r2
 8004a60:	d100      	bne.n	8004a64 <HAL_RCC_ClockConfig+0x138>
 8004a62:	e775      	b.n	8004950 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a64:	f7fe f894 	bl	8002b90 <HAL_GetTick>
 8004a68:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <HAL_RCC_ClockConfig+0x194>)
 8004a6a:	1bc0      	subs	r0, r0, r7
 8004a6c:	4298      	cmp	r0, r3
 8004a6e:	d9f4      	bls.n	8004a5a <HAL_RCC_ClockConfig+0x12e>
 8004a70:	e7ae      	b.n	80049d0 <HAL_RCC_ClockConfig+0xa4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a72:	f7fe f88d 	bl	8002b90 <HAL_GetTick>
 8004a76:	4b12      	ldr	r3, [pc, #72]	; (8004ac0 <HAL_RCC_ClockConfig+0x194>)
 8004a78:	1bc0      	subs	r0, r0, r7
 8004a7a:	4298      	cmp	r0, r3
 8004a7c:	d8a8      	bhi.n	80049d0 <HAL_RCC_ClockConfig+0xa4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a7e:	220c      	movs	r2, #12
 8004a80:	68eb      	ldr	r3, [r5, #12]
 8004a82:	4013      	ands	r3, r2
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d1f4      	bne.n	8004a72 <HAL_RCC_ClockConfig+0x146>
 8004a88:	e762      	b.n	8004950 <HAL_RCC_ClockConfig+0x24>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a8a:	f7fe f881 	bl	8002b90 <HAL_GetTick>
 8004a8e:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <HAL_RCC_ClockConfig+0x194>)
 8004a90:	1bc0      	subs	r0, r0, r7
 8004a92:	4298      	cmp	r0, r3
 8004a94:	d800      	bhi.n	8004a98 <HAL_RCC_ClockConfig+0x16c>
 8004a96:	e767      	b.n	8004968 <HAL_RCC_ClockConfig+0x3c>
 8004a98:	e79a      	b.n	80049d0 <HAL_RCC_ClockConfig+0xa4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a9a:	68eb      	ldr	r3, [r5, #12]
 8004a9c:	4909      	ldr	r1, [pc, #36]	; (8004ac4 <HAL_RCC_ClockConfig+0x198>)
 8004a9e:	400b      	ands	r3, r1
 8004aa0:	68e1      	ldr	r1, [r4, #12]
 8004aa2:	430b      	orrs	r3, r1
 8004aa4:	60eb      	str	r3, [r5, #12]
 8004aa6:	e768      	b.n	800497a <HAL_RCC_ClockConfig+0x4e>
 8004aa8:	40022000 	.word	0x40022000
 8004aac:	40021000 	.word	0x40021000
 8004ab0:	ffffc7ff 	.word	0xffffc7ff
 8004ab4:	0800f185 	.word	0x0800f185
 8004ab8:	20000060 	.word	0x20000060
 8004abc:	20000068 	.word	0x20000068
 8004ac0:	00001388 	.word	0x00001388
 8004ac4:	fffff8ff 	.word	0xfffff8ff

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ac8:	4b04      	ldr	r3, [pc, #16]	; (8004adc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004aca:	4a05      	ldr	r2, [pc, #20]	; (8004ae0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	4905      	ldr	r1, [pc, #20]	; (8004ae4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ad0:	055b      	lsls	r3, r3, #21
 8004ad2:	0f5b      	lsrs	r3, r3, #29
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	6810      	ldr	r0, [r2, #0]
 8004ad8:	40d8      	lsrs	r0, r3
}
 8004ada:	4770      	bx	lr
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	20000060 	.word	0x20000060
 8004ae4:	0800f195 	.word	0x0800f195

08004ae8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ae8:	4b04      	ldr	r3, [pc, #16]	; (8004afc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004aea:	4a05      	ldr	r2, [pc, #20]	; (8004b00 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004aec:	68db      	ldr	r3, [r3, #12]
 8004aee:	4905      	ldr	r1, [pc, #20]	; (8004b04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004af0:	049b      	lsls	r3, r3, #18
 8004af2:	0f5b      	lsrs	r3, r3, #29
 8004af4:	5ccb      	ldrb	r3, [r1, r3]
 8004af6:	6810      	ldr	r0, [r2, #0]
 8004af8:	40d8      	lsrs	r0, r3
}
 8004afa:	4770      	bx	lr
 8004afc:	40021000 	.word	0x40021000
 8004b00:	20000060 	.word	0x20000060
 8004b04:	0800f195 	.word	0x0800f195

08004b08 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	6803      	ldr	r3, [r0, #0]
{
 8004b0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b0c:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b0e:	069b      	lsls	r3, r3, #26
 8004b10:	d53d      	bpl.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x86>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b12:	2380      	movs	r3, #128	; 0x80
  FlagStatus       pwrclkchanged = RESET;
 8004b14:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b16:	4c5f      	ldr	r4, [pc, #380]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004b18:	055b      	lsls	r3, r3, #21
 8004b1a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8004b1c:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1e:	421a      	tst	r2, r3
 8004b20:	d104      	bne.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b22:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004b24:	4313      	orrs	r3, r2
 8004b26:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2c:	2780      	movs	r7, #128	; 0x80
 8004b2e:	4e5a      	ldr	r6, [pc, #360]	; (8004c98 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8004b30:	007f      	lsls	r7, r7, #1
 8004b32:	6833      	ldr	r3, [r6, #0]
 8004b34:	423b      	tst	r3, r7
 8004b36:	d06c      	beq.n	8004c12 <HAL_RCCEx_PeriphCLKConfig+0x10a>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004b38:	6868      	ldr	r0, [r5, #4]
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004b3a:	6822      	ldr	r2, [r4, #0]
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004b3c:	0001      	movs	r1, r0
 8004b3e:	23c0      	movs	r3, #192	; 0xc0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004b40:	4042      	eors	r2, r0
 8004b42:	20c0      	movs	r0, #192	; 0xc0
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004b44:	029b      	lsls	r3, r3, #10
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004b46:	0380      	lsls	r0, r0, #14
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004b48:	4019      	ands	r1, r3
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004b4a:	4202      	tst	r2, r0
 8004b4c:	d000      	beq.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004b4e:	e071      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004b50:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8004b52:	0010      	movs	r0, r2
 8004b54:	4018      	ands	r0, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004b56:	421a      	tst	r2, r3
 8004b58:	d000      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8004b5a:	e074      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x13e>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b5c:	6869      	ldr	r1, [r5, #4]
 8004b5e:	23c0      	movs	r3, #192	; 0xc0
 8004b60:	000a      	movs	r2, r1
 8004b62:	029b      	lsls	r3, r3, #10
 8004b64:	401a      	ands	r2, r3
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d107      	bne.n	8004b7a <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004b6a:	6823      	ldr	r3, [r4, #0]
 8004b6c:	484b      	ldr	r0, [pc, #300]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004b6e:	4003      	ands	r3, r0
 8004b70:	20c0      	movs	r0, #192	; 0xc0
 8004b72:	0380      	lsls	r0, r0, #14
 8004b74:	4001      	ands	r1, r0
 8004b76:	430b      	orrs	r3, r1
 8004b78:	6023      	str	r3, [r4, #0]
 8004b7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004b7c:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004b7e:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b80:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d103      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b88:	4a45      	ldr	r2, [pc, #276]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004b8e:	682b      	ldr	r3, [r5, #0]
 8004b90:	07da      	lsls	r2, r3, #31
 8004b92:	d506      	bpl.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004b94:	2003      	movs	r0, #3
 8004b96:	493f      	ldr	r1, [pc, #252]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004b98:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004b9a:	4382      	bics	r2, r0
 8004b9c:	68a8      	ldr	r0, [r5, #8]
 8004b9e:	4302      	orrs	r2, r0
 8004ba0:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ba2:	079a      	lsls	r2, r3, #30
 8004ba4:	d506      	bpl.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ba6:	200c      	movs	r0, #12
 8004ba8:	493a      	ldr	r1, [pc, #232]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004baa:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004bac:	4382      	bics	r2, r0
 8004bae:	68e8      	ldr	r0, [r5, #12]
 8004bb0:	4302      	orrs	r2, r0
 8004bb2:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004bb4:	075a      	lsls	r2, r3, #29
 8004bb6:	d506      	bpl.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004bb8:	4936      	ldr	r1, [pc, #216]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004bba:	483a      	ldr	r0, [pc, #232]	; (8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8004bbc:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004bbe:	4002      	ands	r2, r0
 8004bc0:	6928      	ldr	r0, [r5, #16]
 8004bc2:	4302      	orrs	r2, r0
 8004bc4:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004bc6:	071a      	lsls	r2, r3, #28
 8004bc8:	d506      	bpl.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004bca:	4932      	ldr	r1, [pc, #200]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004bcc:	4836      	ldr	r0, [pc, #216]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8004bce:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004bd0:	4002      	ands	r2, r0
 8004bd2:	6968      	ldr	r0, [r5, #20]
 8004bd4:	4302      	orrs	r2, r0
 8004bd6:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bd8:	05da      	lsls	r2, r3, #23
 8004bda:	d506      	bpl.n	8004bea <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bdc:	492d      	ldr	r1, [pc, #180]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004bde:	4833      	ldr	r0, [pc, #204]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8004be0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004be2:	4002      	ands	r2, r0
 8004be4:	69a8      	ldr	r0, [r5, #24]
 8004be6:	4302      	orrs	r2, r0
 8004be8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004bea:	065a      	lsls	r2, r3, #25
 8004bec:	d506      	bpl.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0xf4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bee:	4929      	ldr	r1, [pc, #164]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004bf0:	482f      	ldr	r0, [pc, #188]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8004bf2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8004bf4:	4002      	ands	r2, r0
 8004bf6:	6a28      	ldr	r0, [r5, #32]
 8004bf8:	4302      	orrs	r2, r0
 8004bfa:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8004bfc:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004bfe:	061b      	lsls	r3, r3, #24
 8004c00:	d517      	bpl.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004c02:	4a24      	ldr	r2, [pc, #144]	; (8004c94 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004c04:	492b      	ldr	r1, [pc, #172]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c06:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8004c08:	400b      	ands	r3, r1
 8004c0a:	69e9      	ldr	r1, [r5, #28]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c10:	e00f      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c12:	6833      	ldr	r3, [r6, #0]
 8004c14:	433b      	orrs	r3, r7
 8004c16:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004c18:	f7fd ffba 	bl	8002b90 <HAL_GetTick>
 8004c1c:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c1e:	6833      	ldr	r3, [r6, #0]
 8004c20:	423b      	tst	r3, r7
 8004c22:	d189      	bne.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c24:	f7fd ffb4 	bl	8002b90 <HAL_GetTick>
 8004c28:	9b01      	ldr	r3, [sp, #4]
 8004c2a:	1ac0      	subs	r0, r0, r3
 8004c2c:	2864      	cmp	r0, #100	; 0x64
 8004c2e:	d9f6      	bls.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x116>
          return HAL_TIMEOUT;
 8004c30:	2003      	movs	r0, #3
}
 8004c32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d000      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x132>
 8004c38:	e78a      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x48>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c3a:	6822      	ldr	r2, [r4, #0]
          return HAL_ERROR;
 8004c3c:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c3e:	0392      	lsls	r2, r2, #14
 8004c40:	d400      	bmi.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004c42:	e785      	b.n	8004b50 <HAL_RCCEx_PeriphCLKConfig+0x48>
 8004c44:	e7f5      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004c46:	4288      	cmp	r0, r1
 8004c48:	d100      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x144>
 8004c4a:	e787      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004c4c:	682b      	ldr	r3, [r5, #0]
 8004c4e:	069b      	lsls	r3, r3, #26
 8004c50:	d400      	bmi.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004c52:	e783      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c54:	2180      	movs	r1, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c56:	6d23      	ldr	r3, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c58:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8004c5a:	0309      	lsls	r1, r1, #12
 8004c5c:	4301      	orrs	r1, r0
 8004c5e:	6521      	str	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c60:	6d21      	ldr	r1, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c62:	4a12      	ldr	r2, [pc, #72]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c64:	4814      	ldr	r0, [pc, #80]	; (8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004c66:	401a      	ands	r2, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c68:	4001      	ands	r1, r0
 8004c6a:	6521      	str	r1, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8004c6c:	6522      	str	r2, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004c6e:	05db      	lsls	r3, r3, #23
 8004c70:	d400      	bmi.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004c72:	e773      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8004c74:	f7fd ff8c 	bl	8002b90 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c78:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8004c7a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c7c:	00bf      	lsls	r7, r7, #2
 8004c7e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004c80:	423b      	tst	r3, r7
 8004c82:	d000      	beq.n	8004c86 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8004c84:	e76a      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fd ff83 	bl	8002b90 <HAL_GetTick>
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004c8c:	1b80      	subs	r0, r0, r6
 8004c8e:	4298      	cmp	r0, r3
 8004c90:	d9f5      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x176>
 8004c92:	e7cd      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40007000 	.word	0x40007000
 8004c9c:	ffcfffff 	.word	0xffcfffff
 8004ca0:	efffffff 	.word	0xefffffff
 8004ca4:	fffff3ff 	.word	0xfffff3ff
 8004ca8:	ffffcfff 	.word	0xffffcfff
 8004cac:	fffcffff 	.word	0xfffcffff
 8004cb0:	fbffffff 	.word	0xfbffffff
 8004cb4:	fff3ffff 	.word	0xfff3ffff
 8004cb8:	fff7ffff 	.word	0xfff7ffff
 8004cbc:	00001388 	.word	0x00001388

08004cc0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8004cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc2:	2702      	movs	r7, #2

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004cc4:	1c45      	adds	r5, r0, #1
 8004cc6:	7feb      	ldrb	r3, [r5, #31]
{
 8004cc8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8004cca:	0038      	movs	r0, r7
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d027      	beq.n	8004d20 <HAL_RTC_DeactivateAlarm+0x60>
 8004cd0:	2301      	movs	r3, #1

  hrtc->State = HAL_RTC_STATE_BUSY;

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cd2:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cd4:	19e6      	adds	r6, r4, r7
  __HAL_LOCK(hrtc);
 8004cd6:	77eb      	strb	r3, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004cd8:	77f7      	strb	r7, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	625a      	str	r2, [r3, #36]	; 0x24
 8004cde:	3a77      	subs	r2, #119	; 0x77
 8004ce0:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8004ce2:	32ad      	adds	r2, #173	; 0xad
 8004ce4:	4291      	cmp	r1, r2
 8004ce6:	d12a      	bne.n	8004d3e <HAL_RTC_DeactivateAlarm+0x7e>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004ce8:	689a      	ldr	r2, [r3, #8]
 8004cea:	4922      	ldr	r1, [pc, #136]	; (8004d74 <HAL_RTC_DeactivateAlarm+0xb4>)
    tickstart = HAL_GetTick();

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004cec:	27fa      	movs	r7, #250	; 0xfa
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8004cee:	400a      	ands	r2, r1
 8004cf0:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	4920      	ldr	r1, [pc, #128]	; (8004d78 <HAL_RTC_DeactivateAlarm+0xb8>)
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004cf6:	00bf      	lsls	r7, r7, #2
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004cfc:	f7fd ff48 	bl	8002b90 <HAL_GetTick>
 8004d00:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8004d02:	2201      	movs	r2, #1
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	401a      	ands	r2, r3
 8004d0a:	9201      	str	r2, [sp, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	4213      	tst	r3, r2
 8004d10:	d007      	beq.n	8004d22 <HAL_RTC_DeactivateAlarm+0x62>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d12:	22ff      	movs	r2, #255	; 0xff
 8004d14:	6823      	ldr	r3, [r4, #0]

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004d16:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d18:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8004d1e:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
}
 8004d20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004d22:	f7fd ff35 	bl	8002b90 <HAL_GetTick>
 8004d26:	9b00      	ldr	r3, [sp, #0]
 8004d28:	1ac0      	subs	r0, r0, r3
 8004d2a:	42b8      	cmp	r0, r7
 8004d2c:	d9e9      	bls.n	8004d02 <HAL_RTC_DeactivateAlarm+0x42>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d2e:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d30:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004d32:	6823      	ldr	r3, [r4, #0]
 8004d34:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004d36:	77f0      	strb	r0, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004d38:	9b01      	ldr	r3, [sp, #4]
 8004d3a:	77eb      	strb	r3, [r5, #31]
        return HAL_TIMEOUT;
 8004d3c:	e7f0      	b.n	8004d20 <HAL_RTC_DeactivateAlarm+0x60>
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8004d3e:	689a      	ldr	r2, [r3, #8]
 8004d40:	490e      	ldr	r1, [pc, #56]	; (8004d7c <HAL_RTC_DeactivateAlarm+0xbc>)
 8004d42:	400a      	ands	r2, r1
 8004d44:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	490d      	ldr	r1, [pc, #52]	; (8004d80 <HAL_RTC_DeactivateAlarm+0xc0>)
 8004d4a:	400a      	ands	r2, r1
 8004d4c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8004d4e:	f7fd ff1f 	bl	8002b90 <HAL_GetTick>
 8004d52:	9000      	str	r0, [sp, #0]
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	001a      	movs	r2, r3
 8004d5a:	403a      	ands	r2, r7
 8004d5c:	9201      	str	r2, [sp, #4]
 8004d5e:	423b      	tst	r3, r7
 8004d60:	d1d7      	bne.n	8004d12 <HAL_RTC_DeactivateAlarm+0x52>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004d62:	f7fd ff15 	bl	8002b90 <HAL_GetTick>
 8004d66:	9b00      	ldr	r3, [sp, #0]
 8004d68:	1ac0      	subs	r0, r0, r3
 8004d6a:	23fa      	movs	r3, #250	; 0xfa
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4298      	cmp	r0, r3
 8004d70:	d9f0      	bls.n	8004d54 <HAL_RTC_DeactivateAlarm+0x94>
 8004d72:	e7dc      	b.n	8004d2e <HAL_RTC_DeactivateAlarm+0x6e>
 8004d74:	fffffeff 	.word	0xfffffeff
 8004d78:	ffffefff 	.word	0xffffefff
 8004d7c:	fffffdff 	.word	0xfffffdff
 8004d80:	ffffdfff 	.word	0xffffdfff

08004d84 <HAL_RTC_AlarmIRQHandler>:
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004d84:	6803      	ldr	r3, [r0, #0]
{
 8004d86:	b510      	push	{r4, lr}
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004d88:	689a      	ldr	r2, [r3, #8]
{
 8004d8a:	0004      	movs	r4, r0
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8004d8c:	04d2      	lsls	r2, r2, #19
 8004d8e:	d50a      	bpl.n	8004da6 <HAL_RTC_AlarmIRQHandler+0x22>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	05db      	lsls	r3, r3, #23
 8004d94:	d507      	bpl.n	8004da6 <HAL_RTC_AlarmIRQHandler+0x22>
    {
      /* AlarmA callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8004d96:	f7fd fd54 	bl	8002842 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8004d9a:	6821      	ldr	r1, [r4, #0]
 8004d9c:	4b0e      	ldr	r3, [pc, #56]	; (8004dd8 <HAL_RTC_AlarmIRQHandler+0x54>)
 8004d9e:	68ca      	ldr	r2, [r1, #12]
 8004da0:	b2d2      	uxtb	r2, r2
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60cb      	str	r3, [r1, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8004da6:	6823      	ldr	r3, [r4, #0]
 8004da8:	689a      	ldr	r2, [r3, #8]
 8004daa:	0492      	lsls	r2, r2, #18
 8004dac:	d50b      	bpl.n	8004dc6 <HAL_RTC_AlarmIRQHandler+0x42>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	059b      	lsls	r3, r3, #22
 8004db2:	d508      	bpl.n	8004dc6 <HAL_RTC_AlarmIRQHandler+0x42>
    {
      /* AlarmB callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8004db4:	0020      	movs	r0, r4
 8004db6:	f000 faf9 	bl	80053ac <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8004dba:	6821      	ldr	r1, [r4, #0]
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <HAL_RTC_AlarmIRQHandler+0x58>)
 8004dbe:	68ca      	ldr	r2, [r1, #12]
 8004dc0:	b2d2      	uxtb	r2, r2
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	60cb      	str	r3, [r1, #12]
    }
  }
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8004dc6:	2280      	movs	r2, #128	; 0x80
 8004dc8:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RTC_AlarmIRQHandler+0x5c>)
 8004dca:	0292      	lsls	r2, r2, #10
 8004dcc:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	3402      	adds	r4, #2
 8004dd2:	77e3      	strb	r3, [r4, #31]
}
 8004dd4:	bd10      	pop	{r4, pc}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	fffffe7f 	.word	0xfffffe7f
 8004ddc:	fffffd7f 	.word	0xfffffd7f
 8004de0:	40010400 	.word	0x40010400

08004de4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004de4:	21a0      	movs	r1, #160	; 0xa0
 8004de6:	6802      	ldr	r2, [r0, #0]
{
 8004de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004dea:	68d3      	ldr	r3, [r2, #12]
{
 8004dec:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8004dee:	438b      	bics	r3, r1
 8004df0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8004df2:	f7fd fecd 	bl	8002b90 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004df6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8004df8:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dfa:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004dfc:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	4233      	tst	r3, r6
 8004e04:	d001      	beq.n	8004e0a <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8004e06:	2000      	movs	r0, #0
}
 8004e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e0a:	f7fd fec1 	bl	8002b90 <HAL_GetTick>
 8004e0e:	1b40      	subs	r0, r0, r5
 8004e10:	42b8      	cmp	r0, r7
 8004e12:	d9f4      	bls.n	8004dfe <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8004e14:	2003      	movs	r0, #3
 8004e16:	e7f7      	b.n	8004e08 <HAL_RTC_WaitForSynchro+0x24>

08004e18 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e1a:	2640      	movs	r6, #64	; 0x40
 8004e1c:	6803      	ldr	r3, [r0, #0]
{
 8004e1e:	0004      	movs	r4, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	4232      	tst	r2, r6
 8004e24:	d001      	beq.n	8004e2a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8004e26:	2000      	movs	r0, #0
}
 8004e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	4252      	negs	r2, r2
 8004e2e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8004e30:	f7fd feae 	bl	8002b90 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e34:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8004e36:	0005      	movs	r5, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e38:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004e3a:	6823      	ldr	r3, [r4, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	4233      	tst	r3, r6
 8004e40:	d1f1      	bne.n	8004e26 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004e42:	f7fd fea5 	bl	8002b90 <HAL_GetTick>
 8004e46:	1b40      	subs	r0, r0, r5
 8004e48:	42b8      	cmp	r0, r7
 8004e4a:	d9f6      	bls.n	8004e3a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 8004e4c:	2003      	movs	r0, #3
 8004e4e:	e7eb      	b.n	8004e28 <RTC_EnterInitMode+0x10>

08004e50 <HAL_RTC_Init>:
{
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004e54:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8004e56:	2800      	cmp	r0, #0
 8004e58:	d01a      	beq.n	8004e90 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8004e5a:	1c86      	adds	r6, r0, #2
 8004e5c:	7ff3      	ldrb	r3, [r6, #31]
 8004e5e:	b2da      	uxtb	r2, r3
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8004e64:	1943      	adds	r3, r0, r5
 8004e66:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8004e68:	f7fd fb00 	bl	800246c <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e6c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e6e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004e70:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e72:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e74:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004e76:	625a      	str	r2, [r3, #36]	; 0x24
 8004e78:	3a77      	subs	r2, #119	; 0x77
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004e7c:	f7ff ffcc 	bl	8004e18 <RTC_EnterInitMode>
 8004e80:	6823      	ldr	r3, [r4, #0]
 8004e82:	1e05      	subs	r5, r0, #0
 8004e84:	d006      	beq.n	8004e94 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004e86:	22ff      	movs	r2, #255	; 0xff
 8004e88:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004e8a:	2304      	movs	r3, #4
 8004e8c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 8004e8e:	2501      	movs	r5, #1
}
 8004e90:	0028      	movs	r0, r5
 8004e92:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	491b      	ldr	r1, [pc, #108]	; (8004f04 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e98:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004e9a:	400a      	ands	r2, r1
 8004e9c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004e9e:	6862      	ldr	r2, [r4, #4]
 8004ea0:	6899      	ldr	r1, [r3, #8]
 8004ea2:	4302      	orrs	r2, r0
 8004ea4:	69a0      	ldr	r0, [r4, #24]
 8004ea6:	4302      	orrs	r2, r0
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004eac:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004eae:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004eb0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004eb2:	68a2      	ldr	r2, [r4, #8]
 8004eb4:	6919      	ldr	r1, [r3, #16]
 8004eb6:	0412      	lsls	r2, r2, #16
 8004eb8:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004eba:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004ebc:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004ebe:	68da      	ldr	r2, [r3, #12]
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8004ec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ec6:	397d      	subs	r1, #125	; 0x7d
 8004ec8:	438a      	bics	r2, r1
 8004eca:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8004ecc:	69e2      	ldr	r2, [r4, #28]
 8004ece:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8004ed0:	4302      	orrs	r2, r0
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	069b      	lsls	r3, r3, #26
 8004eda:	d40c      	bmi.n	8004ef6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004edc:	0020      	movs	r0, r4
 8004ede:	f7ff ff81 	bl	8004de4 <HAL_RTC_WaitForSynchro>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d007      	beq.n	8004ef6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ee6:	22ff      	movs	r2, #255	; 0xff
 8004ee8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 8004eea:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004eee:	2304      	movs	r3, #4
 8004ef0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 8004ef2:	77e5      	strb	r5, [r4, #31]
 8004ef4:	e7cb      	b.n	8004e8e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ef6:	22ff      	movs	r2, #255	; 0xff
 8004ef8:	6823      	ldr	r3, [r4, #0]
 8004efa:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8004efc:	2301      	movs	r3, #1
 8004efe:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 8004f00:	e7c6      	b.n	8004e90 <HAL_RTC_Init+0x40>
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	ff8fffbf 	.word	0xff8fffbf

08004f08 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004f08:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 8004f0a:	2809      	cmp	r0, #9
 8004f0c:	d803      	bhi.n	8004f16 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8004f0e:	011b      	lsls	r3, r3, #4
 8004f10:	4318      	orrs	r0, r3
 8004f12:	b2c0      	uxtb	r0, r0
}
 8004f14:	4770      	bx	lr
    Param -= 10U;
 8004f16:	380a      	subs	r0, #10
    bcdhigh++;
 8004f18:	3301      	adds	r3, #1
    Param -= 10U;
 8004f1a:	b2c0      	uxtb	r0, r0
 8004f1c:	e7f5      	b.n	8004f0a <RTC_ByteToBcd2+0x2>
	...

08004f20 <HAL_RTC_SetTime>:
{
 8004f20:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8004f22:	1c43      	adds	r3, r0, #1
{
 8004f24:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8004f26:	9301      	str	r3, [sp, #4]
{
 8004f28:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 8004f2a:	7fd9      	ldrb	r1, [r3, #31]
 8004f2c:	2302      	movs	r3, #2
{
 8004f2e:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8004f30:	001f      	movs	r7, r3
 8004f32:	2901      	cmp	r1, #1
 8004f34:	d036      	beq.n	8004fa4 <HAL_RTC_SetTime+0x84>
 8004f36:	2101      	movs	r1, #1
 8004f38:	1840      	adds	r0, r0, r1
 8004f3a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f3c:	18e9      	adds	r1, r5, r3
 8004f3e:	77cb      	strb	r3, [r1, #31]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f40:	682f      	ldr	r7, [r5, #0]
 8004f42:	7820      	ldrb	r0, [r4, #0]
 8004f44:	7866      	ldrb	r6, [r4, #1]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004f46:	9102      	str	r1, [sp, #8]
 8004f48:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 8004f4a:	2a00      	cmp	r2, #0
 8004f4c:	d12d      	bne.n	8004faa <HAL_RTC_SetTime+0x8a>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004f4e:	68ba      	ldr	r2, [r7, #8]
 8004f50:	0011      	movs	r1, r2
 8004f52:	4019      	ands	r1, r3
 8004f54:	421a      	tst	r2, r3
 8004f56:	d100      	bne.n	8004f5a <HAL_RTC_SetTime+0x3a>
      sTime->TimeFormat = 0x00U;
 8004f58:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f5a:	f7ff ffd5 	bl	8004f08 <RTC_ByteToBcd2>
 8004f5e:	9003      	str	r0, [sp, #12]
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004f60:	0030      	movs	r0, r6
 8004f62:	f7ff ffd1 	bl	8004f08 <RTC_ByteToBcd2>
 8004f66:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004f68:	78a0      	ldrb	r0, [r4, #2]
 8004f6a:	f7ff ffcd 	bl	8004f08 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004f6e:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f70:	9a03      	ldr	r2, [sp, #12]
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004f72:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004f74:	4303      	orrs	r3, r0
 8004f76:	0412      	lsls	r2, r2, #16
 8004f78:	4313      	orrs	r3, r2
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004f7a:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004f7c:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004f7e:	23ca      	movs	r3, #202	; 0xca
 8004f80:	627b      	str	r3, [r7, #36]	; 0x24
 8004f82:	3b77      	subs	r3, #119	; 0x77
 8004f84:	627b      	str	r3, [r7, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004f86:	0028      	movs	r0, r5
 8004f88:	f7ff ff46 	bl	8004e18 <RTC_EnterInitMode>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	1e07      	subs	r7, r0, #0
 8004f90:	d019      	beq.n	8004fc6 <HAL_RTC_SetTime+0xa6>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004f92:	22ff      	movs	r2, #255	; 0xff
 8004f94:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004f96:	2304      	movs	r3, #4
 8004f98:	9a02      	ldr	r2, [sp, #8]
 8004f9a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	9a01      	ldr	r2, [sp, #4]
 8004fa0:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8004fa2:	2701      	movs	r7, #1
}
 8004fa4:	0038      	movs	r0, r7
 8004fa6:	b005      	add	sp, #20
 8004fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	0011      	movs	r1, r2
 8004fae:	4019      	ands	r1, r3
 8004fb0:	421a      	tst	r2, r3
 8004fb2:	d100      	bne.n	8004fb6 <HAL_RTC_SetTime+0x96>
      sTime->TimeFormat = 0x00U;
 8004fb4:	70e1      	strb	r1, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 8004fb6:	78a3      	ldrb	r3, [r4, #2]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004fb8:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004fba:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004fbc:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004fbe:	431e      	orrs	r6, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004fc0:	78e3      	ldrb	r3, [r4, #3]
 8004fc2:	041b      	lsls	r3, r3, #16
 8004fc4:	e7da      	b.n	8004f7c <HAL_RTC_SetTime+0x5c>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fc6:	4a16      	ldr	r2, [pc, #88]	; (8005020 <HAL_RTC_SetTime+0x100>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004fc8:	4916      	ldr	r1, [pc, #88]	; (8005024 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004fca:	4016      	ands	r6, r2
 8004fcc:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004fce:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fd0:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fd6:	68e2      	ldr	r2, [r4, #12]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	4302      	orrs	r2, r0
 8004fdc:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004fde:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004fe0:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004fe2:	68da      	ldr	r2, [r3, #12]
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	069b      	lsls	r3, r3, #26
 8004fec:	d40d      	bmi.n	800500a <HAL_RTC_SetTime+0xea>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004fee:	0028      	movs	r0, r5
 8004ff0:	f7ff fef8 	bl	8004de4 <HAL_RTC_WaitForSynchro>
 8004ff4:	2800      	cmp	r0, #0
 8004ff6:	d008      	beq.n	800500a <HAL_RTC_SetTime+0xea>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004ff8:	22ff      	movs	r2, #255	; 0xff
 8004ffa:	682b      	ldr	r3, [r5, #0]
 8004ffc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004ffe:	2304      	movs	r3, #4
 8005000:	9a02      	ldr	r2, [sp, #8]
 8005002:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 8005004:	9b01      	ldr	r3, [sp, #4]
 8005006:	77df      	strb	r7, [r3, #31]
 8005008:	e7cb      	b.n	8004fa2 <HAL_RTC_SetTime+0x82>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800500a:	22ff      	movs	r2, #255	; 0xff
 800500c:	682b      	ldr	r3, [r5, #0]
 800500e:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8005010:	2301      	movs	r3, #1
 8005012:	9a02      	ldr	r2, [sp, #8]
 8005014:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8005016:	2300      	movs	r3, #0
 8005018:	9a01      	ldr	r2, [sp, #4]
 800501a:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 800501c:	e7c2      	b.n	8004fa4 <HAL_RTC_SetTime+0x84>
 800501e:	46c0      	nop			; (mov r8, r8)
 8005020:	007f7f7f 	.word	0x007f7f7f
 8005024:	fffbffff 	.word	0xfffbffff

08005028 <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 8005028:	2302      	movs	r3, #2
{
 800502a:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 800502c:	1c47      	adds	r7, r0, #1
{
 800502e:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8005030:	7ff9      	ldrb	r1, [r7, #31]
{
 8005032:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8005034:	001d      	movs	r5, r3
{
 8005036:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005038:	2901      	cmp	r1, #1
 800503a:	d036      	beq.n	80050aa <HAL_RTC_SetDate+0x82>
 800503c:	2101      	movs	r1, #1
 800503e:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005040:	18c1      	adds	r1, r0, r3
 8005042:	77cb      	strb	r3, [r1, #31]
 8005044:	9101      	str	r1, [sp, #4]
                  ((uint32_t)sDate->WeekDay << 13U));
 8005046:	7831      	ldrb	r1, [r6, #0]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005048:	78f0      	ldrb	r0, [r6, #3]
                  ((uint32_t)sDate->WeekDay << 13U));
 800504a:	0349      	lsls	r1, r1, #13
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800504c:	7873      	ldrb	r3, [r6, #1]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800504e:	78b5      	ldrb	r5, [r6, #2]
                  ((uint32_t)sDate->WeekDay << 13U));
 8005050:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005052:	2a00      	cmp	r2, #0
 8005054:	d14c      	bne.n	80050f0 <HAL_RTC_SetDate+0xc8>
 8005056:	3210      	adds	r2, #16
 8005058:	4213      	tst	r3, r2
 800505a:	d002      	beq.n	8005062 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800505c:	4393      	bics	r3, r2
 800505e:	330a      	adds	r3, #10
 8005060:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005062:	f7ff ff51 	bl	8004f08 <RTC_ByteToBcd2>
 8005066:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005068:	7870      	ldrb	r0, [r6, #1]
 800506a:	f7ff ff4d 	bl	8004f08 <RTC_ByteToBcd2>
 800506e:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005070:	0028      	movs	r0, r5
 8005072:	f7ff ff49 	bl	8004f08 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005076:	9b03      	ldr	r3, [sp, #12]
 8005078:	9a02      	ldr	r2, [sp, #8]
 800507a:	041b      	lsls	r3, r3, #16
 800507c:	4310      	orrs	r0, r2
 800507e:	4303      	orrs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005080:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005082:	431e      	orrs	r6, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005084:	22ca      	movs	r2, #202	; 0xca
 8005086:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005088:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800508a:	625a      	str	r2, [r3, #36]	; 0x24
 800508c:	3a77      	subs	r2, #119	; 0x77
 800508e:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8005090:	f7ff fec2 	bl	8004e18 <RTC_EnterInitMode>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	1e05      	subs	r5, r0, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800509a:	22ff      	movs	r2, #255	; 0xff
 800509c:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800509e:	2304      	movs	r3, #4
 80050a0:	9a01      	ldr	r2, [sp, #4]
 80050a2:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80050a4:	2300      	movs	r3, #0
 80050a6:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 80050a8:	2501      	movs	r5, #1
}
 80050aa:	0028      	movs	r0, r5
 80050ac:	b005      	add	sp, #20
 80050ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80050b0:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80050b2:	4a13      	ldr	r2, [pc, #76]	; (8005100 <HAL_RTC_SetDate+0xd8>)
 80050b4:	4032      	ands	r2, r6
 80050b6:	605a      	str	r2, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	438a      	bics	r2, r1
 80050bc:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	069b      	lsls	r3, r3, #26
 80050c2:	d40c      	bmi.n	80050de <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80050c4:	0020      	movs	r0, r4
 80050c6:	f7ff fe8d 	bl	8004de4 <HAL_RTC_WaitForSynchro>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d007      	beq.n	80050de <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050ce:	22ff      	movs	r2, #255	; 0xff
 80050d0:	6823      	ldr	r3, [r4, #0]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80050d4:	2304      	movs	r3, #4
 80050d6:	9a01      	ldr	r2, [sp, #4]
 80050d8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80050da:	77fd      	strb	r5, [r7, #31]
 80050dc:	e7e4      	b.n	80050a8 <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80050de:	22ff      	movs	r2, #255	; 0xff
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80050e4:	2301      	movs	r3, #1
 80050e6:	9a01      	ldr	r2, [sp, #4]
 80050e8:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80050ea:	2300      	movs	r3, #0
 80050ec:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80050ee:	e7dc      	b.n	80050aa <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050f0:	9a02      	ldr	r2, [sp, #8]
 80050f2:	0400      	lsls	r0, r0, #16
 80050f4:	4310      	orrs	r0, r2
 80050f6:	4328      	orrs	r0, r5
                  (((uint32_t)sDate->Month) << 8U) | \
 80050f8:	021e      	lsls	r6, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80050fa:	4306      	orrs	r6, r0
 80050fc:	e7c2      	b.n	8005084 <HAL_RTC_SetDate+0x5c>
 80050fe:	46c0      	nop			; (mov r8, r8)
 8005100:	00ffff3f 	.word	0x00ffff3f

08005104 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8005104:	2302      	movs	r3, #2
{
 8005106:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005108:	000d      	movs	r5, r1
  __HAL_LOCK(hrtc);
 800510a:	1c41      	adds	r1, r0, #1
 800510c:	7fce      	ldrb	r6, [r1, #31]
{
 800510e:	0004      	movs	r4, r0
 8005110:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8005112:	0018      	movs	r0, r3
 8005114:	2e01      	cmp	r6, #1
 8005116:	d100      	bne.n	800511a <HAL_RTC_SetAlarm_IT+0x16>
 8005118:	e097      	b.n	800524a <HAL_RTC_SetAlarm_IT+0x146>
 800511a:	3801      	subs	r0, #1
 800511c:	77c8      	strb	r0, [r1, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800511e:	18e1      	adds	r1, r4, r3
 8005120:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8005122:	7869      	ldrb	r1, [r5, #1]
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005124:	6826      	ldr	r6, [r4, #0]
 8005126:	9101      	str	r1, [sp, #4]
 8005128:	7828      	ldrb	r0, [r5, #0]
 800512a:	78af      	ldrb	r7, [r5, #2]
 800512c:	333e      	adds	r3, #62	; 0x3e
  if (Format == RTC_FORMAT_BIN)
 800512e:	2a00      	cmp	r2, #0
 8005130:	d165      	bne.n	80051fe <HAL_RTC_SetAlarm_IT+0xfa>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005132:	68b2      	ldr	r2, [r6, #8]
 8005134:	0011      	movs	r1, r2
 8005136:	4019      	ands	r1, r3
 8005138:	421a      	tst	r2, r3
 800513a:	d100      	bne.n	800513e <HAL_RTC_SetAlarm_IT+0x3a>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800513c:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800513e:	f7ff fee3 	bl	8004f08 <RTC_ByteToBcd2>
 8005142:	9002      	str	r0, [sp, #8]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005144:	9801      	ldr	r0, [sp, #4]
 8005146:	f7ff fedf 	bl	8004f08 <RTC_ByteToBcd2>
 800514a:	9001      	str	r0, [sp, #4]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800514c:	0038      	movs	r0, r7
 800514e:	f7ff fedb 	bl	8004f08 <RTC_ByteToBcd2>
 8005152:	0007      	movs	r7, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005154:	1c6b      	adds	r3, r5, #1
 8005156:	7fd8      	ldrb	r0, [r3, #31]
 8005158:	f7ff fed6 	bl	8004f08 <RTC_ByteToBcd2>
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800515c:	696a      	ldr	r2, [r5, #20]
 800515e:	69eb      	ldr	r3, [r5, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005160:	0600      	lsls	r0, r0, #24
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005162:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8005164:	78ea      	ldrb	r2, [r5, #3]
 8005166:	0412      	lsls	r2, r2, #16
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005168:	4313      	orrs	r3, r2
 800516a:	431f      	orrs	r7, r3
 800516c:	9b02      	ldr	r3, [sp, #8]
 800516e:	041b      	lsls	r3, r3, #16
 8005170:	431f      	orrs	r7, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005172:	9b01      	ldr	r3, [sp, #4]
 8005174:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8005176:	431f      	orrs	r7, r3
 8005178:	4307      	orrs	r7, r0
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800517a:	69ab      	ldr	r3, [r5, #24]
 800517c:	686a      	ldr	r2, [r5, #4]
 800517e:	431a      	orrs	r2, r3
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005180:	23ca      	movs	r3, #202	; 0xca
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005182:	9201      	str	r2, [sp, #4]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005184:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8005186:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005188:	3b77      	subs	r3, #119	; 0x77
 800518a:	6273      	str	r3, [r6, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 800518c:	33ad      	adds	r3, #173	; 0xad
 800518e:	429a      	cmp	r2, r3
 8005190:	d15d      	bne.n	800524e <HAL_RTC_SetAlarm_IT+0x14a>
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005192:	68b3      	ldr	r3, [r6, #8]
 8005194:	4a42      	ldr	r2, [pc, #264]	; (80052a0 <HAL_RTC_SetAlarm_IT+0x19c>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005196:	2501      	movs	r5, #1
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005198:	4013      	ands	r3, r2
 800519a:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800519c:	68f2      	ldr	r2, [r6, #12]
 800519e:	4b41      	ldr	r3, [pc, #260]	; (80052a4 <HAL_RTC_SetAlarm_IT+0x1a0>)
 80051a0:	b2d2      	uxtb	r2, r2
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 80051a6:	f7fd fcf3 	bl	8002b90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051aa:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 80051ac:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80051ae:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80051b0:	6823      	ldr	r3, [r4, #0]
 80051b2:	68da      	ldr	r2, [r3, #12]
 80051b4:	0011      	movs	r1, r2
 80051b6:	4029      	ands	r1, r5
 80051b8:	9103      	str	r1, [sp, #12]
 80051ba:	422a      	tst	r2, r5
 80051bc:	d036      	beq.n	800522c <HAL_RTC_SetAlarm_IT+0x128>
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051be:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80051c0:	61df      	str	r7, [r3, #28]
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80051c4:	2280      	movs	r2, #128	; 0x80
 80051c6:	6899      	ldr	r1, [r3, #8]
 80051c8:	0052      	lsls	r2, r2, #1
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80051ce:	2280      	movs	r2, #128	; 0x80
 80051d0:	6899      	ldr	r1, [r3, #8]
 80051d2:	0152      	lsls	r2, r2, #5
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80051d4:	430a      	orrs	r2, r1
 80051d6:	609a      	str	r2, [r3, #8]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80051d8:	2280      	movs	r2, #128	; 0x80
 80051da:	4b33      	ldr	r3, [pc, #204]	; (80052a8 <HAL_RTC_SetAlarm_IT+0x1a4>)
 80051dc:	0292      	lsls	r2, r2, #10
 80051de:	6819      	ldr	r1, [r3, #0]
  __HAL_UNLOCK(hrtc);
 80051e0:	2000      	movs	r0, #0
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80051e2:	4311      	orrs	r1, r2
 80051e4:	6019      	str	r1, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80051e6:	6899      	ldr	r1, [r3, #8]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80051ec:	22ff      	movs	r2, #255	; 0xff
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80051f2:	3afe      	subs	r2, #254	; 0xfe
 80051f4:	1ca3      	adds	r3, r4, #2
  __HAL_UNLOCK(hrtc);
 80051f6:	18a4      	adds	r4, r4, r2
  hrtc->State = HAL_RTC_STATE_READY;
 80051f8:	77da      	strb	r2, [r3, #31]
  __HAL_UNLOCK(hrtc);
 80051fa:	77e0      	strb	r0, [r4, #31]
  return HAL_OK;
 80051fc:	e025      	b.n	800524a <HAL_RTC_SetAlarm_IT+0x146>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80051fe:	68b2      	ldr	r2, [r6, #8]
 8005200:	0011      	movs	r1, r2
 8005202:	4019      	ands	r1, r3
 8005204:	421a      	tst	r2, r3
 8005206:	d100      	bne.n	800520a <HAL_RTC_SetAlarm_IT+0x106>
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005208:	70e9      	strb	r1, [r5, #3]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800520a:	69eb      	ldr	r3, [r5, #28]
 800520c:	696a      	ldr	r2, [r5, #20]
 800520e:	0400      	lsls	r0, r0, #16
 8005210:	4313      	orrs	r3, r2
 8005212:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005214:	9b01      	ldr	r3, [sp, #4]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005216:	4307      	orrs	r7, r0
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8005218:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800521a:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800521c:	78eb      	ldrb	r3, [r5, #3]
 800521e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005220:	431f      	orrs	r7, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8005222:	1c6b      	adds	r3, r5, #1
 8005224:	7fdb      	ldrb	r3, [r3, #31]
 8005226:	061b      	lsls	r3, r3, #24
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8005228:	431f      	orrs	r7, r3
 800522a:	e7a6      	b.n	800517a <HAL_RTC_SetAlarm_IT+0x76>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800522c:	f7fd fcb0 	bl	8002b90 <HAL_GetTick>
 8005230:	9b02      	ldr	r3, [sp, #8]
 8005232:	1ac0      	subs	r0, r0, r3
 8005234:	42b0      	cmp	r0, r6
 8005236:	d9bb      	bls.n	80051b0 <HAL_RTC_SetAlarm_IT+0xac>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005238:	22ff      	movs	r2, #255	; 0xff
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800523a:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005240:	1ca3      	adds	r3, r4, #2
 8005242:	77d8      	strb	r0, [r3, #31]
        __HAL_UNLOCK(hrtc);
 8005244:	9b03      	ldr	r3, [sp, #12]
 8005246:	3401      	adds	r4, #1
 8005248:	77e3      	strb	r3, [r4, #31]
}
 800524a:	b005      	add	sp, #20
 800524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800524e:	68b3      	ldr	r3, [r6, #8]
 8005250:	4a16      	ldr	r2, [pc, #88]	; (80052ac <HAL_RTC_SetAlarm_IT+0x1a8>)
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8005252:	2502      	movs	r5, #2
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8005254:	4013      	ands	r3, r2
 8005256:	60b3      	str	r3, [r6, #8]
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8005258:	68f2      	ldr	r2, [r6, #12]
 800525a:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <HAL_RTC_SetAlarm_IT+0x1ac>)
 800525c:	b2d2      	uxtb	r2, r2
 800525e:	4313      	orrs	r3, r2
 8005260:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8005262:	f7fd fc95 	bl	8002b90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005266:	26fa      	movs	r6, #250	; 0xfa
    tickstart = HAL_GetTick();
 8005268:	9002      	str	r0, [sp, #8]
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800526a:	00b6      	lsls	r6, r6, #2
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800526c:	6823      	ldr	r3, [r4, #0]
 800526e:	68da      	ldr	r2, [r3, #12]
 8005270:	0011      	movs	r1, r2
 8005272:	4029      	ands	r1, r5
 8005274:	9103      	str	r1, [sp, #12]
 8005276:	422a      	tst	r2, r5
 8005278:	d00b      	beq.n	8005292 <HAL_RTC_SetAlarm_IT+0x18e>
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800527a:	9a01      	ldr	r2, [sp, #4]
    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800527c:	621f      	str	r7, [r3, #32]
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800527e:	649a      	str	r2, [r3, #72]	; 0x48
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8005280:	2280      	movs	r2, #128	; 0x80
 8005282:	6899      	ldr	r1, [r3, #8]
 8005284:	0092      	lsls	r2, r2, #2
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800528a:	2280      	movs	r2, #128	; 0x80
 800528c:	6899      	ldr	r1, [r3, #8]
 800528e:	0192      	lsls	r2, r2, #6
 8005290:	e7a0      	b.n	80051d4 <HAL_RTC_SetAlarm_IT+0xd0>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005292:	f7fd fc7d 	bl	8002b90 <HAL_GetTick>
 8005296:	9b02      	ldr	r3, [sp, #8]
 8005298:	1ac0      	subs	r0, r0, r3
 800529a:	42b0      	cmp	r0, r6
 800529c:	d9e6      	bls.n	800526c <HAL_RTC_SetAlarm_IT+0x168>
 800529e:	e7cb      	b.n	8005238 <HAL_RTC_SetAlarm_IT+0x134>
 80052a0:	fffffeff 	.word	0xfffffeff
 80052a4:	fffffe7f 	.word	0xfffffe7f
 80052a8:	40010400 	.word	0x40010400
 80052ac:	fffffdff 	.word	0xfffffdff
 80052b0:	fffffd7f 	.word	0xfffffd7f

080052b4 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80052b4:	0902      	lsrs	r2, r0, #4
{
 80052b6:	0003      	movs	r3, r0
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 80052b8:	200a      	movs	r0, #10
 80052ba:	4350      	muls	r0, r2
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 80052bc:	220f      	movs	r2, #15
 80052be:	4013      	ands	r3, r2
 80052c0:	18c0      	adds	r0, r0, r3
 80052c2:	b2c0      	uxtb	r0, r0
}
 80052c4:	4770      	bx	lr
	...

080052c8 <HAL_RTC_GetTime>:
{
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	000c      	movs	r4, r1
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80052cc:	6801      	ldr	r1, [r0, #0]
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80052ce:	203f      	movs	r0, #63	; 0x3f
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80052d0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80052d2:	6063      	str	r3, [r4, #4]
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80052d4:	690b      	ldr	r3, [r1, #16]
 80052d6:	045b      	lsls	r3, r3, #17
 80052d8:	0c5b      	lsrs	r3, r3, #17
 80052da:	60a3      	str	r3, [r4, #8]
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80052dc:	680b      	ldr	r3, [r1, #0]
 80052de:	490e      	ldr	r1, [pc, #56]	; (8005318 <HAL_RTC_GetTime+0x50>)
 80052e0:	400b      	ands	r3, r1
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80052e2:	0c19      	lsrs	r1, r3, #16
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80052e4:	0a1e      	lsrs	r6, r3, #8
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80052e6:	b2dd      	uxtb	r5, r3
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80052e8:	2340      	movs	r3, #64	; 0x40
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80052ea:	4008      	ands	r0, r1
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80052ec:	b2f6      	uxtb	r6, r6
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80052ee:	4019      	ands	r1, r3
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 80052f0:	7020      	strb	r0, [r4, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 80052f2:	7066      	strb	r6, [r4, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 80052f4:	70a5      	strb	r5, [r4, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 80052f6:	70e1      	strb	r1, [r4, #3]
  if (Format == RTC_FORMAT_BIN)
 80052f8:	2a00      	cmp	r2, #0
 80052fa:	d10a      	bne.n	8005312 <HAL_RTC_GetTime+0x4a>
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80052fc:	f7ff ffda 	bl	80052b4 <RTC_Bcd2ToByte>
 8005300:	7020      	strb	r0, [r4, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005302:	0030      	movs	r0, r6
 8005304:	f7ff ffd6 	bl	80052b4 <RTC_Bcd2ToByte>
 8005308:	7060      	strb	r0, [r4, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800530a:	0028      	movs	r0, r5
 800530c:	f7ff ffd2 	bl	80052b4 <RTC_Bcd2ToByte>
 8005310:	70a0      	strb	r0, [r4, #2]
}
 8005312:	2000      	movs	r0, #0
 8005314:	bd70      	pop	{r4, r5, r6, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	007f7f7f 	.word	0x007f7f7f

0800531c <HAL_RTC_GetDate>:
{
 800531c:	b570      	push	{r4, r5, r6, lr}
 800531e:	000c      	movs	r4, r1
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005320:	6803      	ldr	r3, [r0, #0]
 8005322:	490e      	ldr	r1, [pc, #56]	; (800535c <HAL_RTC_GetDate+0x40>)
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	400b      	ands	r3, r1
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005328:	0c18      	lsrs	r0, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800532a:	04dd      	lsls	r5, r3, #19
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800532c:	b2de      	uxtb	r6, r3
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800532e:	041b      	lsls	r3, r3, #16
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005330:	0eed      	lsrs	r5, r5, #27
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8005332:	0f5b      	lsrs	r3, r3, #29
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8005334:	70e0      	strb	r0, [r4, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8005336:	7065      	strb	r5, [r4, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005338:	70a6      	strb	r6, [r4, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800533a:	7023      	strb	r3, [r4, #0]
  if (Format == RTC_FORMAT_BIN)
 800533c:	2a00      	cmp	r2, #0
 800533e:	d10a      	bne.n	8005356 <HAL_RTC_GetDate+0x3a>
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005340:	f7ff ffb8 	bl	80052b4 <RTC_Bcd2ToByte>
 8005344:	70e0      	strb	r0, [r4, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005346:	0028      	movs	r0, r5
 8005348:	f7ff ffb4 	bl	80052b4 <RTC_Bcd2ToByte>
 800534c:	7060      	strb	r0, [r4, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800534e:	0030      	movs	r0, r6
 8005350:	f7ff ffb0 	bl	80052b4 <RTC_Bcd2ToByte>
 8005354:	70a0      	strb	r0, [r4, #2]
}
 8005356:	2000      	movs	r0, #0
 8005358:	bd70      	pop	{r4, r5, r6, pc}
 800535a:	46c0      	nop			; (mov r8, r8)
 800535c:	00ffff3f 	.word	0x00ffff3f

08005360 <HAL_RTCEx_BKUPWrite>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005360:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 8005362:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005364:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8005366:	18c9      	adds	r1, r1, r3

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8005368:	600a      	str	r2, [r1, #0]
}
 800536a:	4770      	bx	lr

0800536c <HAL_RTCEx_BKUPRead>:
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 800536c:	6803      	ldr	r3, [r0, #0]
  tmp += (BackupRegister * 4U);
 800536e:	0089      	lsls	r1, r1, #2
  tmp = (uint32_t) & (hrtc->Instance->BKP0R);
 8005370:	3350      	adds	r3, #80	; 0x50
  tmp += (BackupRegister * 4U);
 8005372:	18c9      	adds	r1, r1, r3

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8005374:	6808      	ldr	r0, [r1, #0]
}
 8005376:	4770      	bx	lr

08005378 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005378:	2202      	movs	r2, #2
{
 800537a:	b510      	push	{r4, lr}
  __HAL_LOCK(hrtc);
 800537c:	1c41      	adds	r1, r0, #1
 800537e:	7fcc      	ldrb	r4, [r1, #31]
{
 8005380:	0003      	movs	r3, r0
  __HAL_LOCK(hrtc);
 8005382:	0010      	movs	r0, r2
 8005384:	2c01      	cmp	r4, #1
 8005386:	d010      	beq.n	80053aa <HAL_RTCEx_EnableBypassShadow+0x32>

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005388:	1898      	adds	r0, r3, r2
 800538a:	77c2      	strb	r2, [r0, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	32c8      	adds	r2, #200	; 0xc8
 8005390:	625a      	str	r2, [r3, #36]	; 0x24
 8005392:	3a77      	subs	r2, #119	; 0x77
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 8005396:	689c      	ldr	r4, [r3, #8]
 8005398:	3a33      	subs	r2, #51	; 0x33
 800539a:	4322      	orrs	r2, r4
 800539c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800539e:	22ff      	movs	r2, #255	; 0xff
 80053a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80053a2:	2301      	movs	r3, #1
 80053a4:	77c3      	strb	r3, [r0, #31]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80053a6:	2000      	movs	r0, #0
 80053a8:	77c8      	strb	r0, [r1, #31]

  return HAL_OK;
}
 80053aa:	bd10      	pop	{r4, pc}

080053ac <HAL_RTCEx_AlarmBEventCallback>:
 80053ac:	4770      	bx	lr
	...

080053b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80053b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053b2:	001f      	movs	r7, r3
 80053b4:	b085      	sub	sp, #20
 80053b6:	000e      	movs	r6, r1
 80053b8:	9201      	str	r2, [sp, #4]
 80053ba:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80053bc:	f7fd fbe8 	bl	8002b90 <HAL_GetTick>
 80053c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053c2:	19dd      	adds	r5, r3, r7
 80053c4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 80053c6:	f7fd fbe3 	bl	8002b90 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ca:	4b27      	ldr	r3, [pc, #156]	; (8005468 <SPI_WaitFlagStateUntilTimeout+0xb8>)
  tmp_tickstart = HAL_GetTick();
 80053cc:	9000      	str	r0, [sp, #0]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	015b      	lsls	r3, r3, #5
 80053d2:	0d1b      	lsrs	r3, r3, #20
 80053d4:	436b      	muls	r3, r5

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053d6:	6822      	ldr	r2, [r4, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 80053d8:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053da:	6893      	ldr	r3, [r2, #8]
 80053dc:	4033      	ands	r3, r6
 80053de:	1b9b      	subs	r3, r3, r6
 80053e0:	4259      	negs	r1, r3
 80053e2:	414b      	adcs	r3, r1
 80053e4:	9901      	ldr	r1, [sp, #4]
 80053e6:	428b      	cmp	r3, r1
 80053e8:	d101      	bne.n	80053ee <SPI_WaitFlagStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 80053ea:	2000      	movs	r0, #0
 80053ec:	e032      	b.n	8005454 <SPI_WaitFlagStateUntilTimeout+0xa4>
    if (Timeout != HAL_MAX_DELAY)
 80053ee:	1c7b      	adds	r3, r7, #1
 80053f0:	d0f3      	beq.n	80053da <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80053f2:	f7fd fbcd 	bl	8002b90 <HAL_GetTick>
 80053f6:	9b00      	ldr	r3, [sp, #0]
 80053f8:	1ac0      	subs	r0, r0, r3
 80053fa:	42a8      	cmp	r0, r5
 80053fc:	d32c      	bcc.n	8005458 <SPI_WaitFlagStateUntilTimeout+0xa8>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80053fe:	21e0      	movs	r1, #224	; 0xe0
 8005400:	6823      	ldr	r3, [r4, #0]
 8005402:	685a      	ldr	r2, [r3, #4]
 8005404:	438a      	bics	r2, r1
 8005406:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005408:	2282      	movs	r2, #130	; 0x82
 800540a:	6861      	ldr	r1, [r4, #4]
 800540c:	0052      	lsls	r2, r2, #1
 800540e:	4291      	cmp	r1, r2
 8005410:	d10c      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x7c>
 8005412:	2180      	movs	r1, #128	; 0x80
 8005414:	68a2      	ldr	r2, [r4, #8]
 8005416:	0209      	lsls	r1, r1, #8
 8005418:	428a      	cmp	r2, r1
 800541a:	d003      	beq.n	8005424 <SPI_WaitFlagStateUntilTimeout+0x74>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	00c9      	lsls	r1, r1, #3
 8005420:	428a      	cmp	r2, r1
 8005422:	d103      	bne.n	800542c <SPI_WaitFlagStateUntilTimeout+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8005424:	2140      	movs	r1, #64	; 0x40
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	438a      	bics	r2, r1
 800542a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800542c:	2180      	movs	r1, #128	; 0x80
 800542e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005430:	0189      	lsls	r1, r1, #6
 8005432:	428a      	cmp	r2, r1
 8005434:	d106      	bne.n	8005444 <SPI_WaitFlagStateUntilTimeout+0x94>
          SPI_RESET_CRC(hspi);
 8005436:	6819      	ldr	r1, [r3, #0]
 8005438:	480c      	ldr	r0, [pc, #48]	; (800546c <SPI_WaitFlagStateUntilTimeout+0xbc>)
 800543a:	4001      	ands	r1, r0
 800543c:	6019      	str	r1, [r3, #0]
 800543e:	6819      	ldr	r1, [r3, #0]
 8005440:	430a      	orrs	r2, r1
 8005442:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8005444:	0023      	movs	r3, r4
 8005446:	2201      	movs	r2, #1
 8005448:	3351      	adds	r3, #81	; 0x51
 800544a:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800544c:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800544e:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8005450:	3450      	adds	r4, #80	; 0x50
 8005452:	7023      	strb	r3, [r4, #0]
}
 8005454:	b005      	add	sp, #20
 8005456:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8005458:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 800545a:	1e5a      	subs	r2, r3, #1
 800545c:	4193      	sbcs	r3, r2
 800545e:	425b      	negs	r3, r3
 8005460:	401d      	ands	r5, r3
      count--;
 8005462:	9b03      	ldr	r3, [sp, #12]
 8005464:	3b01      	subs	r3, #1
 8005466:	e7b6      	b.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0x26>
 8005468:	20000060 	.word	0x20000060
 800546c:	ffffdfff 	.word	0xffffdfff

08005470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005470:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005472:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <SPI_EndRxTxTransaction+0x60>)
{
 8005474:	0004      	movs	r4, r0
 8005476:	000d      	movs	r5, r1
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005478:	6818      	ldr	r0, [r3, #0]
 800547a:	4916      	ldr	r1, [pc, #88]	; (80054d4 <SPI_EndRxTxTransaction+0x64>)
{
 800547c:	0016      	movs	r6, r2
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800547e:	f7fa fe73 	bl	8000168 <__udivsi3>
 8005482:	23fa      	movs	r3, #250	; 0xfa
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4343      	muls	r3, r0
 8005488:	9303      	str	r3, [sp, #12]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548a:	2382      	movs	r3, #130	; 0x82
 800548c:	6861      	ldr	r1, [r4, #4]
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800548e:	2280      	movs	r2, #128	; 0x80
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005490:	005b      	lsls	r3, r3, #1
 8005492:	4299      	cmp	r1, r3
 8005494:	d10f      	bne.n	80054b6 <SPI_EndRxTxTransaction+0x46>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005496:	002b      	movs	r3, r5
 8005498:	2200      	movs	r2, #0
 800549a:	2180      	movs	r1, #128	; 0x80
 800549c:	0020      	movs	r0, r4
 800549e:	9600      	str	r6, [sp, #0]
 80054a0:	f7ff ff86 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 80054a4:	2800      	cmp	r0, #0
 80054a6:	d010      	beq.n	80054ca <SPI_EndRxTxTransaction+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054a8:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
 80054aa:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80054ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80054ae:	4313      	orrs	r3, r2
 80054b0:	6563      	str	r3, [r4, #84]	; 0x54
  }

  return HAL_OK;
}
 80054b2:	b004      	add	sp, #16
 80054b4:	bd70      	pop	{r4, r5, r6, pc}
      if (count == 0U)
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d006      	beq.n	80054ca <SPI_EndRxTxTransaction+0x5a>
      count--;
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	3b01      	subs	r3, #1
 80054c0:	9303      	str	r3, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80054c2:	6823      	ldr	r3, [r4, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	4213      	tst	r3, r2
 80054c8:	d1f5      	bne.n	80054b6 <SPI_EndRxTxTransaction+0x46>
  return HAL_OK;
 80054ca:	2000      	movs	r0, #0
 80054cc:	e7f1      	b.n	80054b2 <SPI_EndRxTxTransaction+0x42>
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	20000060 	.word	0x20000060
 80054d4:	016e3600 	.word	0x016e3600

080054d8 <HAL_SPI_MspInit>:
}
 80054d8:	4770      	bx	lr
	...

080054dc <HAL_SPI_Init>:
{
 80054dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054de:	0004      	movs	r4, r0
    return HAL_ERROR;
 80054e0:	2001      	movs	r0, #1
  if (hspi == NULL)
 80054e2:	2c00      	cmp	r4, #0
 80054e4:	d05a      	beq.n	800559c <HAL_SPI_Init+0xc0>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80054e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d158      	bne.n	800559e <HAL_SPI_Init+0xc2>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80054ec:	2282      	movs	r2, #130	; 0x82
 80054ee:	6861      	ldr	r1, [r4, #4]
 80054f0:	0052      	lsls	r2, r2, #1
 80054f2:	4291      	cmp	r1, r2
 80054f4:	d000      	beq.n	80054f8 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054f6:	61e3      	str	r3, [r4, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80054f8:	0025      	movs	r5, r4
 80054fa:	3551      	adds	r5, #81	; 0x51
 80054fc:	782b      	ldrb	r3, [r5, #0]
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <HAL_SPI_Init+0x34>
    hspi->Lock = HAL_UNLOCKED;
 8005504:	0023      	movs	r3, r4
 8005506:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 8005508:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800550a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 800550c:	f7ff ffe4 	bl	80054d8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005510:	2702      	movs	r7, #2
  __HAL_SPI_DISABLE(hspi);
 8005512:	2240      	movs	r2, #64	; 0x40
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005514:	2682      	movs	r6, #130	; 0x82
  hspi->State = HAL_SPI_STATE_BUSY;
 8005516:	702f      	strb	r7, [r5, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005518:	2784      	movs	r7, #132	; 0x84
  __HAL_SPI_DISABLE(hspi);
 800551a:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800551c:	0076      	lsls	r6, r6, #1
  __HAL_SPI_DISABLE(hspi);
 800551e:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005520:	023f      	lsls	r7, r7, #8
  __HAL_SPI_DISABLE(hspi);
 8005522:	4393      	bics	r3, r2
 8005524:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005526:	6863      	ldr	r3, [r4, #4]
 8005528:	69a2      	ldr	r2, [r4, #24]
 800552a:	4033      	ands	r3, r6
 800552c:	68a6      	ldr	r6, [r4, #8]
 800552e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005530:	403e      	ands	r6, r7
 8005532:	2780      	movs	r7, #128	; 0x80
 8005534:	4333      	orrs	r3, r6
 8005536:	68e6      	ldr	r6, [r4, #12]
 8005538:	013f      	lsls	r7, r7, #4
 800553a:	403e      	ands	r6, r7
 800553c:	2702      	movs	r7, #2
 800553e:	4333      	orrs	r3, r6
 8005540:	6926      	ldr	r6, [r4, #16]
 8005542:	403e      	ands	r6, r7
 8005544:	4333      	orrs	r3, r6
 8005546:	6966      	ldr	r6, [r4, #20]
 8005548:	3f01      	subs	r7, #1
 800554a:	403e      	ands	r6, r7
 800554c:	4333      	orrs	r3, r6
 800554e:	2680      	movs	r6, #128	; 0x80
 8005550:	00b6      	lsls	r6, r6, #2
 8005552:	4016      	ands	r6, r2
 8005554:	4333      	orrs	r3, r6
 8005556:	69e6      	ldr	r6, [r4, #28]
 8005558:	3737      	adds	r7, #55	; 0x37
 800555a:	403e      	ands	r6, r7
 800555c:	4333      	orrs	r3, r6
 800555e:	6a26      	ldr	r6, [r4, #32]
 8005560:	3748      	adds	r7, #72	; 0x48
 8005562:	403e      	ands	r6, r7
 8005564:	4333      	orrs	r3, r6
 8005566:	2680      	movs	r6, #128	; 0x80
 8005568:	0007      	movs	r7, r0
 800556a:	01b6      	lsls	r6, r6, #6
 800556c:	4037      	ands	r7, r6
 800556e:	433b      	orrs	r3, r7
 8005570:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005572:	2304      	movs	r3, #4
 8005574:	2710      	movs	r7, #16
 8005576:	0c12      	lsrs	r2, r2, #16
 8005578:	401a      	ands	r2, r3
 800557a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800557c:	403b      	ands	r3, r7
 800557e:	431a      	orrs	r2, r3
 8005580:	604a      	str	r2, [r1, #4]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005582:	42b0      	cmp	r0, r6
 8005584:	d102      	bne.n	800558c <HAL_SPI_Init+0xb0>
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8005586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005588:	b29b      	uxth	r3, r3
 800558a:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800558c:	69cb      	ldr	r3, [r1, #28]
 800558e:	4a06      	ldr	r2, [pc, #24]	; (80055a8 <HAL_SPI_Init+0xcc>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005590:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005592:	4013      	ands	r3, r2
 8005594:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8005596:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005598:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800559a:	702b      	strb	r3, [r5, #0]
}
 800559c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800559e:	2300      	movs	r3, #0
 80055a0:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055a2:	6163      	str	r3, [r4, #20]
 80055a4:	e7a8      	b.n	80054f8 <HAL_SPI_Init+0x1c>
 80055a6:	46c0      	nop			; (mov r8, r8)
 80055a8:	fffff7ff 	.word	0xfffff7ff

080055ac <HAL_SPI_TransmitReceive>:
{
 80055ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055ae:	001f      	movs	r7, r3
  __HAL_LOCK(hspi);
 80055b0:	0003      	movs	r3, r0
{
 80055b2:	b087      	sub	sp, #28
 80055b4:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(hspi);
 80055b6:	3350      	adds	r3, #80	; 0x50
 80055b8:	781a      	ldrb	r2, [r3, #0]
{
 80055ba:	0004      	movs	r4, r0
 80055bc:	000e      	movs	r6, r1
  __HAL_LOCK(hspi);
 80055be:	2502      	movs	r5, #2
 80055c0:	2a01      	cmp	r2, #1
 80055c2:	d100      	bne.n	80055c6 <HAL_SPI_TransmitReceive+0x1a>
 80055c4:	e0a8      	b.n	8005718 <HAL_SPI_TransmitReceive+0x16c>
 80055c6:	2201      	movs	r2, #1
 80055c8:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80055ca:	f7fd fae1 	bl	8002b90 <HAL_GetTick>
  tmp_state           = hspi->State;
 80055ce:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80055d0:	9002      	str	r0, [sp, #8]
  tmp_state           = hspi->State;
 80055d2:	3351      	adds	r3, #81	; 0x51
 80055d4:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80055d6:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 80055d8:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d00b      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x4a>
 80055de:	2382      	movs	r3, #130	; 0x82
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4299      	cmp	r1, r3
 80055e4:	d000      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x3c>
 80055e6:	e090      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80055e8:	68a3      	ldr	r3, [r4, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d000      	beq.n	80055f0 <HAL_SPI_TransmitReceive+0x44>
 80055ee:	e08c      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
 80055f0:	2a04      	cmp	r2, #4
 80055f2:	d000      	beq.n	80055f6 <HAL_SPI_TransmitReceive+0x4a>
 80055f4:	e089      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
    errorcode = HAL_ERROR;
 80055f6:	2501      	movs	r5, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	d100      	bne.n	80055fe <HAL_SPI_TransmitReceive+0x52>
 80055fc:	e085      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
 80055fe:	9b03      	ldr	r3, [sp, #12]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d100      	bne.n	8005606 <HAL_SPI_TransmitReceive+0x5a>
 8005604:	e081      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
 8005606:	2f00      	cmp	r7, #0
 8005608:	d100      	bne.n	800560c <HAL_SPI_TransmitReceive+0x60>
 800560a:	e07e      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800560c:	0023      	movs	r3, r4
 800560e:	3351      	adds	r3, #81	; 0x51
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	2a04      	cmp	r2, #4
 8005614:	d001      	beq.n	800561a <HAL_SPI_TransmitReceive+0x6e>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005616:	2205      	movs	r2, #5
 8005618:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800561c:	2080      	movs	r0, #128	; 0x80
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800561e:	9a03      	ldr	r2, [sp, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005620:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005622:	63a2      	str	r2, [r4, #56]	; 0x38
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005624:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 8005626:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005628:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800562a:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxXferSize  = Size;
 800562c:	87a7      	strh	r7, [r4, #60]	; 0x3c
    SPI_RESET_CRC(hspi);
 800562e:	6823      	ldr	r3, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005630:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005632:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005634:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005636:	0180      	lsls	r0, r0, #6
 8005638:	4282      	cmp	r2, r0
 800563a:	d106      	bne.n	800564a <HAL_SPI_TransmitReceive+0x9e>
    SPI_RESET_CRC(hspi);
 800563c:	6818      	ldr	r0, [r3, #0]
 800563e:	4d82      	ldr	r5, [pc, #520]	; (8005848 <HAL_SPI_TransmitReceive+0x29c>)
 8005640:	4028      	ands	r0, r5
 8005642:	6018      	str	r0, [r3, #0]
 8005644:	6818      	ldr	r0, [r3, #0]
 8005646:	4302      	orrs	r2, r0
 8005648:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800564a:	2240      	movs	r2, #64	; 0x40
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	4210      	tst	r0, r2
 8005650:	d102      	bne.n	8005658 <HAL_SPI_TransmitReceive+0xac>
    __HAL_SPI_ENABLE(hspi);
 8005652:	6818      	ldr	r0, [r3, #0]
 8005654:	4302      	orrs	r2, r0
 8005656:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005658:	2280      	movs	r2, #128	; 0x80
 800565a:	68e0      	ldr	r0, [r4, #12]
 800565c:	0112      	lsls	r2, r2, #4
 800565e:	4290      	cmp	r0, r2
 8005660:	d000      	beq.n	8005664 <HAL_SPI_TransmitReceive+0xb8>
 8005662:	e072      	b.n	800574a <HAL_SPI_TransmitReceive+0x19e>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005664:	2900      	cmp	r1, #0
 8005666:	d001      	beq.n	800566c <HAL_SPI_TransmitReceive+0xc0>
 8005668:	2f01      	cmp	r7, #1
 800566a:	d107      	bne.n	800567c <HAL_SPI_TransmitReceive+0xd0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800566c:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800566e:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005670:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8005672:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005674:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8005676:	3b01      	subs	r3, #1
 8005678:	b29b      	uxth	r3, r3
 800567a:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800567c:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 800567e:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005680:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005682:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005684:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8005686:	2b00      	cmp	r3, #0
 8005688:	d118      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x110>
 800568a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800568c:	2b00      	cmp	r3, #0
 800568e:	d115      	bne.n	80056bc <HAL_SPI_TransmitReceive+0x110>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005690:	2380      	movs	r3, #128	; 0x80
 8005692:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005694:	019b      	lsls	r3, r3, #6
 8005696:	429a      	cmp	r2, r3
 8005698:	d000      	beq.n	800569c <HAL_SPI_TransmitReceive+0xf0>
 800569a:	e0b1      	b.n	8005800 <HAL_SPI_TransmitReceive+0x254>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 800569c:	2201      	movs	r2, #1
 800569e:	9b02      	ldr	r3, [sp, #8]
 80056a0:	0011      	movs	r1, r2
 80056a2:	9300      	str	r3, [sp, #0]
 80056a4:	0020      	movs	r0, r4
 80056a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80056a8:	f7ff fe82 	bl	80053b0 <SPI_WaitFlagStateUntilTimeout>
 80056ac:	2800      	cmp	r0, #0
 80056ae:	d100      	bne.n	80056b2 <HAL_SPI_TransmitReceive+0x106>
 80056b0:	e0a4      	b.n	80057fc <HAL_SPI_TransmitReceive+0x250>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80056b2:	2302      	movs	r3, #2
 80056b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80056b6:	4313      	orrs	r3, r2
 80056b8:	6563      	str	r3, [r4, #84]	; 0x54
 80056ba:	e025      	b.n	8005708 <HAL_SPI_TransmitReceive+0x15c>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	689a      	ldr	r2, [r3, #8]
 80056c0:	4232      	tst	r2, r6
 80056c2:	d005      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x124>
 80056c4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	d002      	beq.n	80056d0 <HAL_SPI_TransmitReceive+0x124>
 80056ca:	2d01      	cmp	r5, #1
 80056cc:	d027      	beq.n	800571e <HAL_SPI_TransmitReceive+0x172>
{
 80056ce:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056d0:	6898      	ldr	r0, [r3, #8]
 80056d2:	2101      	movs	r1, #1
 80056d4:	0002      	movs	r2, r0
 80056d6:	400a      	ands	r2, r1
 80056d8:	4208      	tst	r0, r1
 80056da:	d00c      	beq.n	80056f6 <HAL_SPI_TransmitReceive+0x14a>
 80056dc:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 80056de:	2900      	cmp	r1, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_SPI_TransmitReceive+0x14a>
        txallowed = 1U;
 80056e2:	0015      	movs	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056e4:	68d9      	ldr	r1, [r3, #12]
 80056e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80056e8:	8019      	strh	r1, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056ea:	3302      	adds	r3, #2
 80056ec:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80056ee:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80056f0:	3b01      	subs	r3, #1
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056f6:	f7fd fa4b 	bl	8002b90 <HAL_GetTick>
 80056fa:	9b02      	ldr	r3, [sp, #8]
 80056fc:	1ac0      	subs	r0, r0, r3
 80056fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005700:	4298      	cmp	r0, r3
 8005702:	d3bf      	bcc.n	8005684 <HAL_SPI_TransmitReceive+0xd8>
 8005704:	3301      	adds	r3, #1
 8005706:	d0bd      	beq.n	8005684 <HAL_SPI_TransmitReceive+0xd8>
      errorcode = HAL_TIMEOUT;
 8005708:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 800570a:	0023      	movs	r3, r4
 800570c:	2201      	movs	r2, #1
 800570e:	3351      	adds	r3, #81	; 0x51
 8005710:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8005712:	2300      	movs	r3, #0
 8005714:	3450      	adds	r4, #80	; 0x50
 8005716:	7023      	strb	r3, [r4, #0]
}
 8005718:	0028      	movs	r0, r5
 800571a:	b007      	add	sp, #28
 800571c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800571e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005720:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005722:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005724:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005726:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8005728:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800572a:	3a01      	subs	r2, #1
 800572c:	b292      	uxth	r2, r2
 800572e:	86e2      	strh	r2, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005730:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005732:	b295      	uxth	r5, r2
 8005734:	2a00      	cmp	r2, #0
 8005736:	d1ca      	bne.n	80056ce <HAL_SPI_TransmitReceive+0x122>
 8005738:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800573a:	42ba      	cmp	r2, r7
 800573c:	d1c7      	bne.n	80056ce <HAL_SPI_TransmitReceive+0x122>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800573e:	2280      	movs	r2, #128	; 0x80
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	0152      	lsls	r2, r2, #5
 8005744:	430a      	orrs	r2, r1
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	e7c2      	b.n	80056d0 <HAL_SPI_TransmitReceive+0x124>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574a:	2900      	cmp	r1, #0
 800574c:	d001      	beq.n	8005752 <HAL_SPI_TransmitReceive+0x1a6>
 800574e:	2f01      	cmp	r7, #1
 8005750:	d108      	bne.n	8005764 <HAL_SPI_TransmitReceive+0x1b8>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005752:	7832      	ldrb	r2, [r6, #0]
 8005754:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005756:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005758:	3301      	adds	r3, #1
 800575a:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800575c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800575e:	3b01      	subs	r3, #1
 8005760:	b29b      	uxth	r3, r3
 8005762:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8005764:	2780      	movs	r7, #128	; 0x80
        txallowed = 1U;
 8005766:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005768:	2602      	movs	r6, #2
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800576a:	01bf      	lsls	r7, r7, #6
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800576c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800576e:	2b00      	cmp	r3, #0
 8005770:	d103      	bne.n	800577a <HAL_SPI_TransmitReceive+0x1ce>
 8005772:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8005774:	2b00      	cmp	r3, #0
 8005776:	d100      	bne.n	800577a <HAL_SPI_TransmitReceive+0x1ce>
 8005778:	e78a      	b.n	8005690 <HAL_SPI_TransmitReceive+0xe4>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800577a:	6823      	ldr	r3, [r4, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	4232      	tst	r2, r6
 8005780:	d005      	beq.n	800578e <HAL_SPI_TransmitReceive+0x1e2>
 8005782:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8005784:	2a00      	cmp	r2, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_TransmitReceive+0x1e2>
 8005788:	2d01      	cmp	r5, #1
 800578a:	d01f      	beq.n	80057cc <HAL_SPI_TransmitReceive+0x220>
        txallowed = 1U;
 800578c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	2101      	movs	r1, #1
 8005792:	6898      	ldr	r0, [r3, #8]
 8005794:	0002      	movs	r2, r0
 8005796:	400a      	ands	r2, r1
 8005798:	4208      	tst	r0, r1
 800579a:	d00d      	beq.n	80057b8 <HAL_SPI_TransmitReceive+0x20c>
 800579c:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800579e:	2900      	cmp	r1, #0
 80057a0:	d00a      	beq.n	80057b8 <HAL_SPI_TransmitReceive+0x20c>
        txallowed = 1U;
 80057a2:	0015      	movs	r5, r2
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057a4:	68d9      	ldr	r1, [r3, #12]
 80057a6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057a8:	7019      	strb	r1, [r3, #0]
        hspi->pRxBuffPtr++;
 80057aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80057ac:	3301      	adds	r3, #1
 80057ae:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80057b0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057b8:	f7fd f9ea 	bl	8002b90 <HAL_GetTick>
 80057bc:	9b02      	ldr	r3, [sp, #8]
 80057be:	1ac0      	subs	r0, r0, r3
 80057c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80057c2:	4298      	cmp	r0, r3
 80057c4:	d3d2      	bcc.n	800576c <HAL_SPI_TransmitReceive+0x1c0>
 80057c6:	3301      	adds	r3, #1
 80057c8:	d0d0      	beq.n	800576c <HAL_SPI_TransmitReceive+0x1c0>
 80057ca:	e79d      	b.n	8005708 <HAL_SPI_TransmitReceive+0x15c>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80057cc:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80057ce:	7812      	ldrb	r2, [r2, #0]
 80057d0:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80057d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80057d4:	3301      	adds	r3, #1
 80057d6:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80057d8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29b      	uxth	r3, r3
 80057de:	86e3      	strh	r3, [r4, #54]	; 0x36
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80057e0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80057e2:	b29d      	uxth	r5, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1d1      	bne.n	800578c <HAL_SPI_TransmitReceive+0x1e0>
 80057e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80057ea:	6822      	ldr	r2, [r4, #0]
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80057ec:	42bb      	cmp	r3, r7
 80057ee:	d1cd      	bne.n	800578c <HAL_SPI_TransmitReceive+0x1e0>
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80057f0:	2380      	movs	r3, #128	; 0x80
 80057f2:	6811      	ldr	r1, [r2, #0]
 80057f4:	015b      	lsls	r3, r3, #5
 80057f6:	430b      	orrs	r3, r1
 80057f8:	6013      	str	r3, [r2, #0]
 80057fa:	e7c8      	b.n	800578e <HAL_SPI_TransmitReceive+0x1e2>
    READ_REG(hspi->Instance->DR);
 80057fc:	6823      	ldr	r3, [r4, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005800:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005802:	2500      	movs	r5, #0
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8005804:	6893      	ldr	r3, [r2, #8]
 8005806:	06db      	lsls	r3, r3, #27
 8005808:	d506      	bpl.n	8005818 <HAL_SPI_TransmitReceive+0x26c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800580a:	2302      	movs	r3, #2
 800580c:	6d61      	ldr	r1, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800580e:	3501      	adds	r5, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8005810:	430b      	orrs	r3, r1
 8005812:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8005814:	4b0d      	ldr	r3, [pc, #52]	; (800584c <HAL_SPI_TransmitReceive+0x2a0>)
 8005816:	6093      	str	r3, [r2, #8]
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005818:	0020      	movs	r0, r4
 800581a:	9a02      	ldr	r2, [sp, #8]
 800581c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800581e:	f7ff fe27 	bl	8005470 <SPI_EndRxTxTransaction>
 8005822:	2800      	cmp	r0, #0
 8005824:	d003      	beq.n	800582e <HAL_SPI_TransmitReceive+0x282>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005826:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 8005828:	2501      	movs	r5, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800582a:	6563      	str	r3, [r4, #84]	; 0x54
    goto error;
 800582c:	e76d      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800582e:	68a3      	ldr	r3, [r4, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d000      	beq.n	8005836 <HAL_SPI_TransmitReceive+0x28a>
 8005834:	e769      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005836:	9305      	str	r3, [sp, #20]
 8005838:	6823      	ldr	r3, [r4, #0]
 800583a:	68da      	ldr	r2, [r3, #12]
 800583c:	9205      	str	r2, [sp, #20]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	9305      	str	r3, [sp, #20]
 8005842:	9b05      	ldr	r3, [sp, #20]
 8005844:	e761      	b.n	800570a <HAL_SPI_TransmitReceive+0x15e>
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	ffffdfff 	.word	0xffffdfff
 800584c:	0000ffef 	.word	0x0000ffef

08005850 <HAL_SPI_GetState>:
  return hspi->State;
 8005850:	3051      	adds	r0, #81	; 0x51
 8005852:	7800      	ldrb	r0, [r0, #0]
 8005854:	b2c0      	uxtb	r0, r0
}
 8005856:	4770      	bx	lr

08005858 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005858:	6803      	ldr	r3, [r0, #0]
 800585a:	490b      	ldr	r1, [pc, #44]	; (8005888 <UART_EndRxTransfer+0x30>)
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	400a      	ands	r2, r1
 8005860:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	3123      	adds	r1, #35	; 0x23
 8005866:	31ff      	adds	r1, #255	; 0xff
 8005868:	438a      	bics	r2, r1
 800586a:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800586c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800586e:	428a      	cmp	r2, r1
 8005870:	d103      	bne.n	800587a <UART_EndRxTransfer+0x22>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	310f      	adds	r1, #15
 8005876:	438a      	bics	r2, r1
 8005878:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800587a:	2320      	movs	r3, #32
 800587c:	67c3      	str	r3, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	2300      	movs	r3, #0
 8005880:	6603      	str	r3, [r0, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005882:	6643      	str	r3, [r0, #100]	; 0x64
}
 8005884:	4770      	bx	lr
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	fffffedf 	.word	0xfffffedf

0800588c <HAL_UART_Transmit_DMA>:
{
 800588c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800588e:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8005890:	6f82      	ldr	r2, [r0, #120]	; 0x78
{
 8005892:	0004      	movs	r4, r0
    return HAL_BUSY;
 8005894:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8005896:	2a20      	cmp	r2, #32
 8005898:	d13a      	bne.n	8005910 <HAL_UART_Transmit_DMA+0x84>
      return HAL_ERROR;
 800589a:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800589c:	2900      	cmp	r1, #0
 800589e:	d037      	beq.n	8005910 <HAL_UART_Transmit_DMA+0x84>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d035      	beq.n	8005910 <HAL_UART_Transmit_DMA+0x84>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a4:	2280      	movs	r2, #128	; 0x80
 80058a6:	68a0      	ldr	r0, [r4, #8]
 80058a8:	0152      	lsls	r2, r2, #5
 80058aa:	4290      	cmp	r0, r2
 80058ac:	d106      	bne.n	80058bc <HAL_UART_Transmit_DMA+0x30>
 80058ae:	6922      	ldr	r2, [r4, #16]
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	d103      	bne.n	80058bc <HAL_UART_Transmit_DMA+0x30>
      if ((((uint32_t)pData) & 1U) != 0U)
 80058b4:	3201      	adds	r2, #1
      return HAL_ERROR;
 80058b6:	0010      	movs	r0, r2
      if ((((uint32_t)pData) & 1U) != 0U)
 80058b8:	4211      	tst	r1, r2
 80058ba:	d129      	bne.n	8005910 <HAL_UART_Transmit_DMA+0x84>
    __HAL_LOCK(huart);
 80058bc:	0025      	movs	r5, r4
 80058be:	3574      	adds	r5, #116	; 0x74
 80058c0:	782a      	ldrb	r2, [r5, #0]
    return HAL_BUSY;
 80058c2:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 80058c4:	2a01      	cmp	r2, #1
 80058c6:	d023      	beq.n	8005910 <HAL_UART_Transmit_DMA+0x84>
 80058c8:	2201      	movs	r2, #1
 80058ca:	702a      	strb	r2, [r5, #0]
    huart->TxXferSize  = Size;
 80058cc:	0022      	movs	r2, r4
 80058ce:	3250      	adds	r2, #80	; 0x50
    huart->pTxBuffPtr  = pData;
 80058d0:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d2:	2600      	movs	r6, #0
    huart->TxXferSize  = Size;
 80058d4:	8013      	strh	r3, [r2, #0]
    huart->TxXferCount = Size;
 80058d6:	8053      	strh	r3, [r2, #2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058d8:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058da:	1d27      	adds	r7, r4, #4
 80058dc:	67fe      	str	r6, [r7, #124]	; 0x7c
    if (huart->hdmatx != NULL)
 80058de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058e0:	67a2      	str	r2, [r4, #120]	; 0x78
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80058e2:	6822      	ldr	r2, [r4, #0]
 80058e4:	9201      	str	r2, [sp, #4]
    if (huart->hdmatx != NULL)
 80058e6:	42b0      	cmp	r0, r6
 80058e8:	d013      	beq.n	8005912 <HAL_UART_Transmit_DMA+0x86>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80058ea:	4a0f      	ldr	r2, [pc, #60]	; (8005928 <HAL_UART_Transmit_DMA+0x9c>)
      huart->hdmatx->XferAbortCallback = NULL;
 80058ec:	6386      	str	r6, [r0, #56]	; 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80058ee:	62c2      	str	r2, [r0, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80058f0:	4a0e      	ldr	r2, [pc, #56]	; (800592c <HAL_UART_Transmit_DMA+0xa0>)
 80058f2:	6302      	str	r2, [r0, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80058f4:	4a0e      	ldr	r2, [pc, #56]	; (8005930 <HAL_UART_Transmit_DMA+0xa4>)
 80058f6:	6342      	str	r2, [r0, #52]	; 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80058f8:	9a01      	ldr	r2, [sp, #4]
 80058fa:	3228      	adds	r2, #40	; 0x28
 80058fc:	f7fe fa60 	bl	8003dc0 <HAL_DMA_Start_IT>
 8005900:	42b0      	cmp	r0, r6
 8005902:	d006      	beq.n	8005912 <HAL_UART_Transmit_DMA+0x86>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005904:	2310      	movs	r3, #16
        return HAL_ERROR;
 8005906:	2001      	movs	r0, #1
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005908:	67fb      	str	r3, [r7, #124]	; 0x7c
        huart->gState = HAL_UART_STATE_READY;
 800590a:	18db      	adds	r3, r3, r3
        __HAL_UNLOCK(huart);
 800590c:	702e      	strb	r6, [r5, #0]
        huart->gState = HAL_UART_STATE_READY;
 800590e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8005910:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005912:	2240      	movs	r2, #64	; 0x40
    __HAL_UNLOCK(huart);
 8005914:	2000      	movs	r0, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005916:	6823      	ldr	r3, [r4, #0]
    __HAL_UNLOCK(huart);
 8005918:	3474      	adds	r4, #116	; 0x74
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800591a:	621a      	str	r2, [r3, #32]
    __HAL_UNLOCK(huart);
 800591c:	7020      	strb	r0, [r4, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800591e:	6899      	ldr	r1, [r3, #8]
 8005920:	1892      	adds	r2, r2, r2
 8005922:	430a      	orrs	r2, r1
 8005924:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8005926:	e7f3      	b.n	8005910 <HAL_UART_Transmit_DMA+0x84>
 8005928:	08005935 	.word	0x08005935
 800592c:	0800596b 	.word	0x0800596b
 8005930:	08005977 	.word	0x08005977

08005934 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005934:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005936:	681b      	ldr	r3, [r3, #0]
{
 8005938:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	2320      	movs	r3, #32
 800593e:	0011      	movs	r1, r2
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005940:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005942:	4019      	ands	r1, r3
 8005944:	421a      	tst	r2, r3
 8005946:	d10c      	bne.n	8005962 <UART_DMATransmitCplt+0x2e>
  {
    huart->TxXferCount = 0U;
 8005948:	0003      	movs	r3, r0
 800594a:	3352      	adds	r3, #82	; 0x52
 800594c:	8019      	strh	r1, [r3, #0]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800594e:	2180      	movs	r1, #128	; 0x80
 8005950:	6803      	ldr	r3, [r0, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	438a      	bics	r2, r1
 8005956:	609a      	str	r2, [r3, #8]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005958:	2240      	movs	r2, #64	; 0x40
 800595a:	6819      	ldr	r1, [r3, #0]
 800595c:	430a      	orrs	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005960:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8005962:	f7fd fa87 	bl	8002e74 <HAL_UART_TxCpltCallback>
}
 8005966:	e7fb      	b.n	8005960 <UART_DMATransmitCplt+0x2c>

08005968 <HAL_UART_TxHalfCpltCallback>:
 8005968:	4770      	bx	lr

0800596a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800596a:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800596c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800596e:	f7ff fffb 	bl	8005968 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005972:	bd10      	pop	{r4, pc}

08005974 <HAL_UART_ErrorCallback>:
 8005974:	4770      	bx	lr

08005976 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005976:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005978:	6a84      	ldr	r4, [r0, #40]	; 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800597a:	6823      	ldr	r3, [r4, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800597c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800597e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005980:	689a      	ldr	r2, [r3, #8]
 8005982:	0612      	lsls	r2, r2, #24
 8005984:	d50b      	bpl.n	800599e <UART_DMAError+0x28>
 8005986:	2821      	cmp	r0, #33	; 0x21
 8005988:	d109      	bne.n	800599e <UART_DMAError+0x28>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800598a:	0022      	movs	r2, r4
 800598c:	2000      	movs	r0, #0
 800598e:	3252      	adds	r2, #82	; 0x52
 8005990:	8010      	strh	r0, [r2, #0]
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	30c0      	adds	r0, #192	; 0xc0
 8005996:	4382      	bics	r2, r0
 8005998:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800599a:	2220      	movs	r2, #32
 800599c:	67a2      	str	r2, [r4, #120]	; 0x78
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	065b      	lsls	r3, r3, #25
 80059a2:	d508      	bpl.n	80059b6 <UART_DMAError+0x40>
 80059a4:	2922      	cmp	r1, #34	; 0x22
 80059a6:	d106      	bne.n	80059b6 <UART_DMAError+0x40>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80059a8:	0023      	movs	r3, r4
 80059aa:	2200      	movs	r2, #0
 80059ac:	335a      	adds	r3, #90	; 0x5a
    UART_EndRxTransfer(huart);
 80059ae:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80059b0:	801a      	strh	r2, [r3, #0]
    UART_EndRxTransfer(huart);
 80059b2:	f7ff ff51 	bl	8005858 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059b6:	2310      	movs	r3, #16
 80059b8:	1d22      	adds	r2, r4, #4
 80059ba:	6fd1      	ldr	r1, [r2, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059bc:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80059be:	430b      	orrs	r3, r1
 80059c0:	67d3      	str	r3, [r2, #124]	; 0x7c
  HAL_UART_ErrorCallback(huart);
 80059c2:	f7ff ffd7 	bl	8005974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059c6:	bd10      	pop	{r4, pc}

080059c8 <UART_DMAAbortOnError>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80059c8:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	0002      	movs	r2, r0
{
 80059ce:	b510      	push	{r4, lr}
  huart->RxXferCount = 0U;
 80059d0:	325a      	adds	r2, #90	; 0x5a
 80059d2:	8013      	strh	r3, [r2, #0]
  huart->TxXferCount = 0U;
 80059d4:	3a08      	subs	r2, #8
 80059d6:	8013      	strh	r3, [r2, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059d8:	f7ff ffcc 	bl	8005974 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059dc:	bd10      	pop	{r4, pc}

080059de <HAL_UARTEx_RxEventCallback>:
}
 80059de:	4770      	bx	lr

080059e0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059e0:	6803      	ldr	r3, [r0, #0]
{
 80059e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059e4:	69d9      	ldr	r1, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80059e6:	4a85      	ldr	r2, [pc, #532]	; (8005bfc <HAL_UART_IRQHandler+0x21c>)
{
 80059e8:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ea:	6818      	ldr	r0, [r3, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059ec:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 80059ee:	4211      	tst	r1, r2
 80059f0:	d10b      	bne.n	8005a0a <HAL_UART_IRQHandler+0x2a>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80059f2:	2220      	movs	r2, #32
 80059f4:	4211      	tst	r1, r2
 80059f6:	d100      	bne.n	80059fa <HAL_UART_IRQHandler+0x1a>
 80059f8:	e076      	b.n	8005ae8 <HAL_UART_IRQHandler+0x108>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80059fa:	4210      	tst	r0, r2
 80059fc:	d100      	bne.n	8005a00 <HAL_UART_IRQHandler+0x20>
 80059fe:	e073      	b.n	8005ae8 <HAL_UART_IRQHandler+0x108>
      if (huart->RxISR != NULL)
 8005a00:	6e63      	ldr	r3, [r4, #100]	; 0x64
      huart->TxISR(huart);
 8005a02:	0020      	movs	r0, r4
    if (huart->TxISR != NULL)
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d165      	bne.n	8005ad4 <HAL_UART_IRQHandler+0xf4>
 8005a08:	e065      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	0037      	movs	r7, r6
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a0e:	4d7c      	ldr	r5, [pc, #496]	; (8005c00 <HAL_UART_IRQHandler+0x220>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005a10:	4017      	ands	r7, r2
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005a12:	4005      	ands	r5, r0
 8005a14:	433d      	orrs	r5, r7
 8005a16:	d067      	beq.n	8005ae8 <HAL_UART_IRQHandler+0x108>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a18:	1d25      	adds	r5, r4, #4
 8005a1a:	4211      	tst	r1, r2
 8005a1c:	d005      	beq.n	8005a2a <HAL_UART_IRQHandler+0x4a>
 8005a1e:	05c6      	lsls	r6, r0, #23
 8005a20:	d503      	bpl.n	8005a2a <HAL_UART_IRQHandler+0x4a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a22:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a24:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005a26:	4332      	orrs	r2, r6
 8005a28:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	4211      	tst	r1, r2
 8005a2e:	d006      	beq.n	8005a3e <HAL_UART_IRQHandler+0x5e>
 8005a30:	2f00      	cmp	r7, #0
 8005a32:	d004      	beq.n	8005a3e <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005a34:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a36:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005a38:	1892      	adds	r2, r2, r2
 8005a3a:	4332      	orrs	r2, r6
 8005a3c:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a3e:	2204      	movs	r2, #4
 8005a40:	4211      	tst	r1, r2
 8005a42:	d006      	beq.n	8005a52 <HAL_UART_IRQHandler+0x72>
 8005a44:	2f00      	cmp	r7, #0
 8005a46:	d004      	beq.n	8005a52 <HAL_UART_IRQHandler+0x72>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a48:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a4a:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005a4c:	3a02      	subs	r2, #2
 8005a4e:	4332      	orrs	r2, r6
 8005a50:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a52:	2208      	movs	r2, #8
 8005a54:	4211      	tst	r1, r2
 8005a56:	d007      	beq.n	8005a68 <HAL_UART_IRQHandler+0x88>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005a58:	2620      	movs	r6, #32
 8005a5a:	4006      	ands	r6, r0
 8005a5c:	433e      	orrs	r6, r7
 8005a5e:	d003      	beq.n	8005a68 <HAL_UART_IRQHandler+0x88>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a60:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a62:	6fee      	ldr	r6, [r5, #124]	; 0x7c
 8005a64:	4332      	orrs	r2, r6
 8005a66:	67ea      	str	r2, [r5, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a68:	2280      	movs	r2, #128	; 0x80
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	4211      	tst	r1, r2
 8005a6e:	d006      	beq.n	8005a7e <HAL_UART_IRQHandler+0x9e>
 8005a70:	0146      	lsls	r6, r0, #5
 8005a72:	d504      	bpl.n	8005a7e <HAL_UART_IRQHandler+0x9e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a74:	621a      	str	r2, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a76:	2320      	movs	r3, #32
 8005a78:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	67eb      	str	r3, [r5, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a7e:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d028      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005a84:	2320      	movs	r3, #32
 8005a86:	4219      	tst	r1, r3
 8005a88:	d006      	beq.n	8005a98 <HAL_UART_IRQHandler+0xb8>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005a8a:	4218      	tst	r0, r3
 8005a8c:	d004      	beq.n	8005a98 <HAL_UART_IRQHandler+0xb8>
        if (huart->RxISR != NULL)
 8005a8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d001      	beq.n	8005a98 <HAL_UART_IRQHandler+0xb8>
          huart->RxISR(huart);
 8005a94:	0020      	movs	r0, r4
 8005a96:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a98:	2240      	movs	r2, #64	; 0x40
 8005a9a:	6827      	ldr	r7, [r4, #0]
      errorcode = huart->ErrorCode;
 8005a9c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a9e:	68be      	ldr	r6, [r7, #8]
        UART_EndRxTransfer(huart);
 8005aa0:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa2:	4016      	ands	r6, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005aa4:	3a18      	subs	r2, #24
 8005aa6:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aa8:	431e      	orrs	r6, r3
 8005aaa:	d019      	beq.n	8005ae0 <HAL_UART_IRQHandler+0x100>
        UART_EndRxTransfer(huart);
 8005aac:	f7ff fed4 	bl	8005858 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab0:	2240      	movs	r2, #64	; 0x40
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4213      	tst	r3, r2
 8005ab6:	d00f      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xf8>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8005aba:	6f20      	ldr	r0, [r4, #112]	; 0x70
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005abc:	4393      	bics	r3, r2
 8005abe:	60bb      	str	r3, [r7, #8]
          if (huart->hdmarx != NULL)
 8005ac0:	2800      	cmp	r0, #0
 8005ac2:	d009      	beq.n	8005ad8 <HAL_UART_IRQHandler+0xf8>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac4:	4b4f      	ldr	r3, [pc, #316]	; (8005c04 <HAL_UART_IRQHandler+0x224>)
 8005ac6:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ac8:	f7fe f9da 	bl	8003e80 <HAL_DMA_Abort_IT>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d002      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ad0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005ad2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005ad4:	4798      	blx	r3
}
 8005ad6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            HAL_UART_ErrorCallback(huart);
 8005ad8:	0020      	movs	r0, r4
 8005ada:	f7ff ff4b 	bl	8005974 <HAL_UART_ErrorCallback>
 8005ade:	e7fa      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
        HAL_UART_ErrorCallback(huart);
 8005ae0:	f7ff ff48 	bl	8005974 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	67ee      	str	r6, [r5, #124]	; 0x7c
 8005ae6:	e7f6      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae8:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8005aea:	2d01      	cmp	r5, #1
 8005aec:	d161      	bne.n	8005bb2 <HAL_UART_IRQHandler+0x1d2>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005aee:	2210      	movs	r2, #16
 8005af0:	4211      	tst	r1, r2
 8005af2:	d05e      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x1d2>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005af4:	4210      	tst	r0, r2
 8005af6:	d05c      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x1d2>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005af8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afa:	6899      	ldr	r1, [r3, #8]
 8005afc:	2640      	movs	r6, #64	; 0x40
 8005afe:	000f      	movs	r7, r1
 8005b00:	4037      	ands	r7, r6
 8005b02:	4231      	tst	r1, r6
 8005b04:	d038      	beq.n	8005b78 <HAL_UART_IRQHandler+0x198>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b06:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8005b08:	680f      	ldr	r7, [r1, #0]
 8005b0a:	9100      	str	r1, [sp, #0]
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	b289      	uxth	r1, r1
      if (  (nb_remaining_rx_data > 0U)
 8005b10:	2900      	cmp	r1, #0
 8005b12:	d0e0      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005b14:	2058      	movs	r0, #88	; 0x58
 8005b16:	4684      	mov	ip, r0
 8005b18:	44a4      	add	ip, r4
 8005b1a:	4660      	mov	r0, ip
 8005b1c:	8800      	ldrh	r0, [r0, #0]
 8005b1e:	4288      	cmp	r0, r1
 8005b20:	d9d9      	bls.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
        huart->RxXferCount = nb_remaining_rx_data;
 8005b22:	205a      	movs	r0, #90	; 0x5a
 8005b24:	4684      	mov	ip, r0
 8005b26:	44a4      	add	ip, r4
 8005b28:	4660      	mov	r0, ip
 8005b2a:	8001      	strh	r1, [r0, #0]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005b2c:	683f      	ldr	r7, [r7, #0]
 8005b2e:	2120      	movs	r1, #32
 8005b30:	0038      	movs	r0, r7
 8005b32:	4008      	ands	r0, r1
 8005b34:	9001      	str	r0, [sp, #4]
 8005b36:	420f      	tst	r7, r1
 8005b38:	d112      	bne.n	8005b60 <HAL_UART_IRQHandler+0x180>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b3a:	681f      	ldr	r7, [r3, #0]
 8005b3c:	4832      	ldr	r0, [pc, #200]	; (8005c08 <HAL_UART_IRQHandler+0x228>)
 8005b3e:	4007      	ands	r7, r0
 8005b40:	601f      	str	r7, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b42:	689f      	ldr	r7, [r3, #8]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b44:	9800      	ldr	r0, [sp, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b46:	43af      	bics	r7, r5
 8005b48:	609f      	str	r7, [r3, #8]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b4a:	689d      	ldr	r5, [r3, #8]
 8005b4c:	43b5      	bics	r5, r6
 8005b4e:	609d      	str	r5, [r3, #8]
          huart->RxState = HAL_UART_STATE_READY;
 8005b50:	67e1      	str	r1, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b52:	9901      	ldr	r1, [sp, #4]
 8005b54:	6621      	str	r1, [r4, #96]	; 0x60
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b56:	6819      	ldr	r1, [r3, #0]
 8005b58:	4391      	bics	r1, r2
 8005b5a:	6019      	str	r1, [r3, #0]
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b5c:	f7fe f970 	bl	8003e40 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b60:	0023      	movs	r3, r4
 8005b62:	0022      	movs	r2, r4
 8005b64:	335a      	adds	r3, #90	; 0x5a
 8005b66:	3258      	adds	r2, #88	; 0x58
 8005b68:	881b      	ldrh	r3, [r3, #0]
 8005b6a:	8811      	ldrh	r1, [r2, #0]
 8005b6c:	1ac9      	subs	r1, r1, r3
 8005b6e:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b70:	0020      	movs	r0, r4
 8005b72:	f7ff ff34 	bl	80059de <HAL_UARTEx_RxEventCallback>
 8005b76:	e7ae      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b78:	0026      	movs	r6, r4
 8005b7a:	0021      	movs	r1, r4
 8005b7c:	365a      	adds	r6, #90	; 0x5a
 8005b7e:	8830      	ldrh	r0, [r6, #0]
      if (  (huart->RxXferCount > 0U)
 8005b80:	8836      	ldrh	r6, [r6, #0]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b82:	3158      	adds	r1, #88	; 0x58
 8005b84:	8809      	ldrh	r1, [r1, #0]
 8005b86:	b280      	uxth	r0, r0
      if (  (huart->RxXferCount > 0U)
 8005b88:	2e00      	cmp	r6, #0
 8005b8a:	d0a4      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b8c:	1a09      	subs	r1, r1, r0
 8005b8e:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d0a0      	beq.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b94:	6818      	ldr	r0, [r3, #0]
 8005b96:	4e1d      	ldr	r6, [pc, #116]	; (8005c0c <HAL_UART_IRQHandler+0x22c>)
 8005b98:	4030      	ands	r0, r6
 8005b9a:	6018      	str	r0, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	6898      	ldr	r0, [r3, #8]
 8005b9e:	43a8      	bics	r0, r5
 8005ba0:	6098      	str	r0, [r3, #8]
        huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	2020      	movs	r0, #32
 8005ba4:	67e0      	str	r0, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba6:	6627      	str	r7, [r4, #96]	; 0x60
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba8:	6818      	ldr	r0, [r3, #0]
        huart->RxISR = NULL;
 8005baa:	6667      	str	r7, [r4, #100]	; 0x64
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bac:	4390      	bics	r0, r2
 8005bae:	6018      	str	r0, [r3, #0]
 8005bb0:	e7de      	b.n	8005b70 <HAL_UART_IRQHandler+0x190>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bb2:	2280      	movs	r2, #128	; 0x80
 8005bb4:	0352      	lsls	r2, r2, #13
 8005bb6:	4211      	tst	r1, r2
 8005bb8:	d006      	beq.n	8005bc8 <HAL_UART_IRQHandler+0x1e8>
 8005bba:	0276      	lsls	r6, r6, #9
 8005bbc:	d504      	bpl.n	8005bc8 <HAL_UART_IRQHandler+0x1e8>
    HAL_UARTEx_WakeupCallback(huart);
 8005bbe:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bc0:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8005bc2:	f000 fb57 	bl	8006274 <HAL_UARTEx_WakeupCallback>
    return;
 8005bc6:	e786      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005bc8:	2280      	movs	r2, #128	; 0x80
 8005bca:	4211      	tst	r1, r2
 8005bcc:	d003      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x1f6>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005bce:	4210      	tst	r0, r2
 8005bd0:	d001      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x1f6>
    if (huart->TxISR != NULL)
 8005bd2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8005bd4:	e715      	b.n	8005a02 <HAL_UART_IRQHandler+0x22>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005bd6:	2540      	movs	r5, #64	; 0x40
 8005bd8:	4229      	tst	r1, r5
 8005bda:	d100      	bne.n	8005bde <HAL_UART_IRQHandler+0x1fe>
 8005bdc:	e77b      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
 8005bde:	4228      	tst	r0, r5
 8005be0:	d100      	bne.n	8005be4 <HAL_UART_IRQHandler+0x204>
 8005be2:	e778      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be4:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005be6:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005be8:	43aa      	bics	r2, r5
 8005bea:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005bec:	2320      	movs	r3, #32
 8005bee:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->TxISR = NULL;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	66a3      	str	r3, [r4, #104]	; 0x68
  HAL_UART_TxCpltCallback(huart);
 8005bf4:	f7fd f93e 	bl	8002e74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bf8:	e76d      	b.n	8005ad6 <HAL_UART_IRQHandler+0xf6>
 8005bfa:	46c0      	nop			; (mov r8, r8)
 8005bfc:	0000080f 	.word	0x0000080f
 8005c00:	04000120 	.word	0x04000120
 8005c04:	080059c9 	.word	0x080059c9
 8005c08:	fffffeff 	.word	0xfffffeff
 8005c0c:	fffffedf 	.word	0xfffffedf

08005c10 <UART_RxISR_8BIT>:
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
  uint16_t uhMask = huart->Mask;
 8005c10:	0003      	movs	r3, r0
{
 8005c12:	b510      	push	{r4, lr}
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c14:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8005c16:	335c      	adds	r3, #92	; 0x5c
 8005c18:	881a      	ldrh	r2, [r3, #0]
{
 8005c1a:	0004      	movs	r4, r0
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c1c:	6803      	ldr	r3, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1e:	2922      	cmp	r1, #34	; 0x22
 8005c20:	d131      	bne.n	8005c86 <UART_RxISR_8BIT+0x76>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c24:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8005c26:	4013      	ands	r3, r2
    huart->pRxBuffPtr++;
    huart->RxXferCount--;
 8005c28:	0002      	movs	r2, r0
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c2a:	700b      	strb	r3, [r1, #0]
    huart->pRxBuffPtr++;
 8005c2c:	6d43      	ldr	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005c2e:	325a      	adds	r2, #90	; 0x5a
    huart->pRxBuffPtr++;
 8005c30:	3301      	adds	r3, #1
 8005c32:	6543      	str	r3, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8005c34:	8813      	ldrh	r3, [r2, #0]
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	8013      	strh	r3, [r2, #0]

    if (huart->RxXferCount == 0U)
 8005c3c:	8813      	ldrh	r3, [r2, #0]
 8005c3e:	b299      	uxth	r1, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d11b      	bne.n	8005c7c <UART_RxISR_8BIT+0x6c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c44:	6803      	ldr	r3, [r0, #0]
 8005c46:	4812      	ldr	r0, [pc, #72]	; (8005c90 <UART_RxISR_8BIT+0x80>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	4002      	ands	r2, r0
 8005c4c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	3023      	adds	r0, #35	; 0x23
 8005c52:	30ff      	adds	r0, #255	; 0xff
 8005c54:	4382      	bics	r2, r0
 8005c56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c58:	2220      	movs	r2, #32
 8005c5a:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c5c:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8005c5e:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c60:	4282      	cmp	r2, r0
 8005c62:	d10c      	bne.n	8005c7e <UART_RxISR_8BIT+0x6e>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c64:	2110      	movs	r1, #16
 8005c66:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c68:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6a:	438a      	bics	r2, r1
 8005c6c:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c6e:	0023      	movs	r3, r4
 8005c70:	3358      	adds	r3, #88	; 0x58
 8005c72:	8819      	ldrh	r1, [r3, #0]
 8005c74:	f7ff feb3 	bl	80059de <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c7c:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005c7e:	0020      	movs	r0, r4
 8005c80:	f7fd f900 	bl	8002e84 <HAL_UART_RxCpltCallback>
 8005c84:	e7f8      	b.n	8005c78 <UART_RxISR_8BIT+0x68>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c86:	2208      	movs	r2, #8
 8005c88:	6999      	ldr	r1, [r3, #24]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	619a      	str	r2, [r3, #24]
}
 8005c8e:	e7f5      	b.n	8005c7c <UART_RxISR_8BIT+0x6c>
 8005c90:	fffffedf 	.word	0xfffffedf

08005c94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005c94:	b510      	push	{r4, lr}
 8005c96:	0004      	movs	r4, r0
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005c98:	0003      	movs	r3, r0
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c9a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
  uint16_t uhMask = huart->Mask;
 8005c9c:	335c      	adds	r3, #92	; 0x5c
 8005c9e:	8818      	ldrh	r0, [r3, #0]
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ca0:	6823      	ldr	r3, [r4, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ca2:	2a22      	cmp	r2, #34	; 0x22
 8005ca4:	d12f      	bne.n	8005d06 <UART_RxISR_16BIT+0x72>
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ca6:	6a59      	ldr	r1, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ca8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    *tmp = (uint16_t)(uhdata & uhMask);
 8005caa:	4001      	ands	r1, r0
 8005cac:	8011      	strh	r1, [r2, #0]
    huart->pRxBuffPtr += 2U;
    huart->RxXferCount--;
 8005cae:	0021      	movs	r1, r4
    huart->pRxBuffPtr += 2U;
 8005cb0:	3202      	adds	r2, #2
    huart->RxXferCount--;
 8005cb2:	315a      	adds	r1, #90	; 0x5a
    huart->pRxBuffPtr += 2U;
 8005cb4:	6562      	str	r2, [r4, #84]	; 0x54
    huart->RxXferCount--;
 8005cb6:	880a      	ldrh	r2, [r1, #0]
 8005cb8:	3a01      	subs	r2, #1
 8005cba:	b292      	uxth	r2, r2
 8005cbc:	800a      	strh	r2, [r1, #0]

    if (huart->RxXferCount == 0U)
 8005cbe:	880a      	ldrh	r2, [r1, #0]
 8005cc0:	b291      	uxth	r1, r2
 8005cc2:	2a00      	cmp	r2, #0
 8005cc4:	d11a      	bne.n	8005cfc <UART_RxISR_16BIT+0x68>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	4811      	ldr	r0, [pc, #68]	; (8005d10 <UART_RxISR_16BIT+0x7c>)
 8005cca:	4002      	ands	r2, r0
 8005ccc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	3023      	adds	r0, #35	; 0x23
 8005cd2:	30ff      	adds	r0, #255	; 0xff
 8005cd4:	4382      	bics	r2, r0
 8005cd6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	2220      	movs	r2, #32
 8005cda:	67e2      	str	r2, [r4, #124]	; 0x7c
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cdc:	6e22      	ldr	r2, [r4, #96]	; 0x60
      huart->RxISR = NULL;
 8005cde:	6661      	str	r1, [r4, #100]	; 0x64
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce0:	4282      	cmp	r2, r0
 8005ce2:	d10c      	bne.n	8005cfe <UART_RxISR_16BIT+0x6a>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce4:	2110      	movs	r1, #16
 8005ce6:	681a      	ldr	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ce8:	0020      	movs	r0, r4
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cea:	438a      	bics	r2, r1
 8005cec:	601a      	str	r2, [r3, #0]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cee:	0023      	movs	r3, r4
 8005cf0:	3358      	adds	r3, #88	; 0x58
 8005cf2:	8819      	ldrh	r1, [r3, #0]
 8005cf4:	f7ff fe73 	bl	80059de <HAL_UARTEx_RxEventCallback>
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	6623      	str	r3, [r4, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005cfc:	bd10      	pop	{r4, pc}
        HAL_UART_RxCpltCallback(huart);
 8005cfe:	0020      	movs	r0, r4
 8005d00:	f7fd f8c0 	bl	8002e84 <HAL_UART_RxCpltCallback>
 8005d04:	e7f8      	b.n	8005cf8 <UART_RxISR_16BIT+0x64>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d06:	2208      	movs	r2, #8
 8005d08:	6999      	ldr	r1, [r3, #24]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	619a      	str	r2, [r3, #24]
}
 8005d0e:	e7f5      	b.n	8005cfc <UART_RxISR_16BIT+0x68>
 8005d10:	fffffedf 	.word	0xfffffedf

08005d14 <UART_SetConfig>:
{
 8005d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d16:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d18:	6925      	ldr	r5, [r4, #16]
 8005d1a:	68a1      	ldr	r1, [r4, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d1c:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d1e:	4329      	orrs	r1, r5
 8005d20:	6965      	ldr	r5, [r4, #20]
 8005d22:	69c3      	ldr	r3, [r0, #28]
 8005d24:	4329      	orrs	r1, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d26:	6810      	ldr	r0, [r2, #0]
 8005d28:	4d78      	ldr	r5, [pc, #480]	; (8005f0c <UART_SetConfig+0x1f8>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d2a:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d2c:	4028      	ands	r0, r5
 8005d2e:	4301      	orrs	r1, r0
 8005d30:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d32:	6851      	ldr	r1, [r2, #4]
 8005d34:	4876      	ldr	r0, [pc, #472]	; (8005f10 <UART_SetConfig+0x1fc>)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d36:	4d77      	ldr	r5, [pc, #476]	; (8005f14 <UART_SetConfig+0x200>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d38:	4001      	ands	r1, r0
 8005d3a:	68e0      	ldr	r0, [r4, #12]
 8005d3c:	4301      	orrs	r1, r0
 8005d3e:	6051      	str	r1, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d40:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d42:	42aa      	cmp	r2, r5
 8005d44:	d001      	beq.n	8005d4a <UART_SetConfig+0x36>
    tmpreg |= huart->Init.OneBitSampling;
 8005d46:	6a21      	ldr	r1, [r4, #32]
 8005d48:	4308      	orrs	r0, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d4a:	6891      	ldr	r1, [r2, #8]
 8005d4c:	4e72      	ldr	r6, [pc, #456]	; (8005f18 <UART_SetConfig+0x204>)
 8005d4e:	4031      	ands	r1, r6
 8005d50:	4301      	orrs	r1, r0
 8005d52:	6091      	str	r1, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d54:	4971      	ldr	r1, [pc, #452]	; (8005f1c <UART_SetConfig+0x208>)
 8005d56:	428a      	cmp	r2, r1
 8005d58:	d10f      	bne.n	8005d7a <UART_SetConfig+0x66>
 8005d5a:	2103      	movs	r1, #3
 8005d5c:	4a70      	ldr	r2, [pc, #448]	; (8005f20 <UART_SetConfig+0x20c>)
 8005d5e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d60:	400a      	ands	r2, r1
 8005d62:	3a01      	subs	r2, #1
 8005d64:	496f      	ldr	r1, [pc, #444]	; (8005f24 <UART_SetConfig+0x210>)
 8005d66:	2a02      	cmp	r2, #2
 8005d68:	d910      	bls.n	8005d8c <UART_SetConfig+0x78>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6a:	2280      	movs	r2, #128	; 0x80
 8005d6c:	0212      	lsls	r2, r2, #8
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d000      	beq.n	8005d74 <UART_SetConfig+0x60>
 8005d72:	e0a2      	b.n	8005eba <UART_SetConfig+0x1a6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d74:	f7fe feb8 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
 8005d78:	e0c3      	b.n	8005f02 <UART_SetConfig+0x1ee>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d7a:	496b      	ldr	r1, [pc, #428]	; (8005f28 <UART_SetConfig+0x214>)
 8005d7c:	428a      	cmp	r2, r1
 8005d7e:	d118      	bne.n	8005db2 <UART_SetConfig+0x9e>
 8005d80:	200c      	movs	r0, #12
 8005d82:	4a67      	ldr	r2, [pc, #412]	; (8005f20 <UART_SetConfig+0x20c>)
 8005d84:	4967      	ldr	r1, [pc, #412]	; (8005f24 <UART_SetConfig+0x210>)
 8005d86:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005d88:	3103      	adds	r1, #3
 8005d8a:	4002      	ands	r2, r0
 8005d8c:	5c88      	ldrb	r0, [r1, r2]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d8e:	2280      	movs	r2, #128	; 0x80
 8005d90:	0212      	lsls	r2, r2, #8
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d000      	beq.n	8005d98 <UART_SetConfig+0x84>
 8005d96:	e082      	b.n	8005e9e <UART_SetConfig+0x18a>
    switch (clocksource)
 8005d98:	2808      	cmp	r0, #8
 8005d9a:	d824      	bhi.n	8005de6 <UART_SetConfig+0xd2>
 8005d9c:	f7fa f9d0 	bl	8000140 <__gnu_thumb1_case_shi>
 8005da0:	ffea00af 	.word	0xffea00af
 8005da4:	0023005c 	.word	0x0023005c
 8005da8:	0023007c 	.word	0x0023007c
 8005dac:	00230023 	.word	0x00230023
 8005db0:	0067      	.short	0x0067
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005db2:	495e      	ldr	r1, [pc, #376]	; (8005f2c <UART_SetConfig+0x218>)
 8005db4:	428a      	cmp	r2, r1
 8005db6:	d100      	bne.n	8005dba <UART_SetConfig+0xa6>
 8005db8:	e09d      	b.n	8005ef6 <UART_SetConfig+0x1e2>
 8005dba:	495d      	ldr	r1, [pc, #372]	; (8005f30 <UART_SetConfig+0x21c>)
 8005dbc:	428a      	cmp	r2, r1
 8005dbe:	d100      	bne.n	8005dc2 <UART_SetConfig+0xae>
 8005dc0:	e099      	b.n	8005ef6 <UART_SetConfig+0x1e2>
 8005dc2:	42aa      	cmp	r2, r5
 8005dc4:	d10f      	bne.n	8005de6 <UART_SetConfig+0xd2>
 8005dc6:	21c0      	movs	r1, #192	; 0xc0
 8005dc8:	2080      	movs	r0, #128	; 0x80
 8005dca:	4a55      	ldr	r2, [pc, #340]	; (8005f20 <UART_SetConfig+0x20c>)
 8005dcc:	0109      	lsls	r1, r1, #4
 8005dce:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8005dd0:	0100      	lsls	r0, r0, #4
 8005dd2:	400b      	ands	r3, r1
 8005dd4:	4283      	cmp	r3, r0
 8005dd6:	d016      	beq.n	8005e06 <UART_SetConfig+0xf2>
 8005dd8:	d807      	bhi.n	8005dea <UART_SetConfig+0xd6>
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <UART_SetConfig+0xe0>
 8005dde:	2280      	movs	r2, #128	; 0x80
 8005de0:	00d2      	lsls	r2, r2, #3
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d035      	beq.n	8005e52 <UART_SetConfig+0x13e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005de6:	2001      	movs	r0, #1
 8005de8:	e009      	b.n	8005dfe <UART_SetConfig+0xea>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dea:	428b      	cmp	r3, r1
 8005dec:	d1fb      	bne.n	8005de6 <UART_SetConfig+0xd2>
 8005dee:	2080      	movs	r0, #128	; 0x80
 8005df0:	0200      	lsls	r0, r0, #8
 8005df2:	e012      	b.n	8005e1a <UART_SetConfig+0x106>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df4:	f7fe fe68 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	d10e      	bne.n	8005e1a <UART_SetConfig+0x106>
 8005dfc:	2000      	movs	r0, #0
  huart->RxISR = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8005e02:	66a3      	str	r3, [r4, #104]	; 0x68
}
 8005e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e06:	2310      	movs	r3, #16
 8005e08:	6810      	ldr	r0, [r2, #0]
 8005e0a:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005e0c:	4243      	negs	r3, r0
 8005e0e:	4158      	adcs	r0, r3
 8005e10:	4b48      	ldr	r3, [pc, #288]	; (8005f34 <UART_SetConfig+0x220>)
 8005e12:	4240      	negs	r0, r0
 8005e14:	4018      	ands	r0, r3
 8005e16:	4b48      	ldr	r3, [pc, #288]	; (8005f38 <UART_SetConfig+0x224>)
 8005e18:	18c0      	adds	r0, r0, r3
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e1a:	2203      	movs	r2, #3
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	435a      	muls	r2, r3
 8005e20:	4290      	cmp	r0, r2
 8005e22:	d3e0      	bcc.n	8005de6 <UART_SetConfig+0xd2>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005e24:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005e26:	4290      	cmp	r0, r2
 8005e28:	d8dd      	bhi.n	8005de6 <UART_SetConfig+0xd2>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005e2a:	2700      	movs	r7, #0
 8005e2c:	0e02      	lsrs	r2, r0, #24
 8005e2e:	0201      	lsls	r1, r0, #8
 8005e30:	085e      	lsrs	r6, r3, #1
 8005e32:	1989      	adds	r1, r1, r6
 8005e34:	417a      	adcs	r2, r7
 8005e36:	0008      	movs	r0, r1
 8005e38:	0011      	movs	r1, r2
 8005e3a:	001a      	movs	r2, r3
 8005e3c:	003b      	movs	r3, r7
 8005e3e:	f7fa fb81 	bl	8000544 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e42:	4b3e      	ldr	r3, [pc, #248]	; (8005f3c <UART_SetConfig+0x228>)
 8005e44:	18c2      	adds	r2, r0, r3
 8005e46:	4b3e      	ldr	r3, [pc, #248]	; (8005f40 <UART_SetConfig+0x22c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d8cc      	bhi.n	8005de6 <UART_SetConfig+0xd2>
        huart->Instance->BRR = usartdiv;
 8005e4c:	6823      	ldr	r3, [r4, #0]
 8005e4e:	60d8      	str	r0, [r3, #12]
 8005e50:	e7d4      	b.n	8005dfc <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e52:	f7fe fa99 	bl	8004388 <HAL_RCC_GetSysClockFreq>
        break;
 8005e56:	e7cf      	b.n	8005df8 <UART_SetConfig+0xe4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e58:	2210      	movs	r2, #16
 8005e5a:	4b31      	ldr	r3, [pc, #196]	; (8005f20 <UART_SetConfig+0x20c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4013      	ands	r3, r2
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005e60:	425a      	negs	r2, r3
 8005e62:	4153      	adcs	r3, r2
 8005e64:	4a33      	ldr	r2, [pc, #204]	; (8005f34 <UART_SetConfig+0x220>)
 8005e66:	425b      	negs	r3, r3
 8005e68:	4013      	ands	r3, r2
 8005e6a:	4a33      	ldr	r2, [pc, #204]	; (8005f38 <UART_SetConfig+0x224>)
 8005e6c:	189b      	adds	r3, r3, r2
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005e6e:	6861      	ldr	r1, [r4, #4]
 8005e70:	0058      	lsls	r0, r3, #1
 8005e72:	084b      	lsrs	r3, r1, #1
 8005e74:	18c0      	adds	r0, r0, r3
 8005e76:	f7fa f977 	bl	8000168 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e7a:	4932      	ldr	r1, [pc, #200]	; (8005f44 <UART_SetConfig+0x230>)
 8005e7c:	b282      	uxth	r2, r0
 8005e7e:	3a10      	subs	r2, #16
 8005e80:	0403      	lsls	r3, r0, #16
 8005e82:	428a      	cmp	r2, r1
 8005e84:	d8af      	bhi.n	8005de6 <UART_SetConfig+0xd2>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e86:	220f      	movs	r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e88:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005e8a:	4390      	bics	r0, r2
 8005e8c:	b280      	uxth	r0, r0
        huart->Instance->BRR = brrtemp;
 8005e8e:	6822      	ldr	r2, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005e90:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 8005e92:	4318      	orrs	r0, r3
 8005e94:	60d0      	str	r0, [r2, #12]
 8005e96:	e7b1      	b.n	8005dfc <UART_SetConfig+0xe8>
        pclk = HAL_RCC_GetSysClockFreq();
 8005e98:	f7fe fa76 	bl	8004388 <HAL_RCC_GetSysClockFreq>
 8005e9c:	e031      	b.n	8005f02 <UART_SetConfig+0x1ee>
    switch (clocksource)
 8005e9e:	2808      	cmp	r0, #8
 8005ea0:	d8a1      	bhi.n	8005de6 <UART_SetConfig+0xd2>
 8005ea2:	f7fa f939 	bl	8000118 <__gnu_thumb1_case_sqi>
 8005ea6:	0a05      	.short	0x0a05
 8005ea8:	a022a00d 	.word	0xa022a00d
 8005eac:	a0a0      	.short	0xa0a0
 8005eae:	25          	.byte	0x25
 8005eaf:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8005eb0:	f7fe fe0a 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d0a1      	beq.n	8005dfc <UART_SetConfig+0xe8>
 8005eb8:	e00d      	b.n	8005ed6 <UART_SetConfig+0x1c2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005eba:	f7fe fe15 	bl	8004ae8 <HAL_RCC_GetPCLK2Freq>
        break;
 8005ebe:	e7f9      	b.n	8005eb4 <UART_SetConfig+0x1a0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ec0:	4b17      	ldr	r3, [pc, #92]	; (8005f20 <UART_SetConfig+0x20c>)
 8005ec2:	6818      	ldr	r0, [r3, #0]
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8005ec8:	4243      	negs	r3, r0
 8005eca:	4158      	adcs	r0, r3
 8005ecc:	4b19      	ldr	r3, [pc, #100]	; (8005f34 <UART_SetConfig+0x220>)
 8005ece:	4240      	negs	r0, r0
 8005ed0:	4018      	ands	r0, r3
 8005ed2:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <UART_SetConfig+0x224>)
 8005ed4:	18c0      	adds	r0, r0, r3
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ed6:	6861      	ldr	r1, [r4, #4]
 8005ed8:	084b      	lsrs	r3, r1, #1
 8005eda:	1818      	adds	r0, r3, r0
 8005edc:	f7fa f944 	bl	8000168 <__udivsi3>
 8005ee0:	b280      	uxth	r0, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ee2:	0002      	movs	r2, r0
 8005ee4:	4b17      	ldr	r3, [pc, #92]	; (8005f44 <UART_SetConfig+0x230>)
 8005ee6:	3a10      	subs	r2, #16
 8005ee8:	e7ae      	b.n	8005e48 <UART_SetConfig+0x134>
        pclk = HAL_RCC_GetSysClockFreq();
 8005eea:	f7fe fa4d 	bl	8004388 <HAL_RCC_GetSysClockFreq>
        break;
 8005eee:	e7e1      	b.n	8005eb4 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8005ef0:	2080      	movs	r0, #128	; 0x80
 8005ef2:	0200      	lsls	r0, r0, #8
 8005ef4:	e7ef      	b.n	8005ed6 <UART_SetConfig+0x1c2>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ef6:	2280      	movs	r2, #128	; 0x80
 8005ef8:	0212      	lsls	r2, r2, #8
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d1d8      	bne.n	8005eb0 <UART_SetConfig+0x19c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005efe:	f7fe fde3 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
        pclk = HAL_RCC_GetSysClockFreq();
 8005f02:	1e03      	subs	r3, r0, #0
    if (pclk != 0U)
 8005f04:	d100      	bne.n	8005f08 <UART_SetConfig+0x1f4>
 8005f06:	e779      	b.n	8005dfc <UART_SetConfig+0xe8>
 8005f08:	e7b1      	b.n	8005e6e <UART_SetConfig+0x15a>
 8005f0a:	46c0      	nop			; (mov r8, r8)
 8005f0c:	efff69f3 	.word	0xefff69f3
 8005f10:	ffffcfff 	.word	0xffffcfff
 8005f14:	40004800 	.word	0x40004800
 8005f18:	fffff4ff 	.word	0xfffff4ff
 8005f1c:	40013800 	.word	0x40013800
 8005f20:	40021000 	.word	0x40021000
 8005f24:	0800f19d 	.word	0x0800f19d
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	40004c00 	.word	0x40004c00
 8005f30:	40005000 	.word	0x40005000
 8005f34:	00b71b00 	.word	0x00b71b00
 8005f38:	003d0900 	.word	0x003d0900
 8005f3c:	fffffd00 	.word	0xfffffd00
 8005f40:	000ffcff 	.word	0x000ffcff
 8005f44:	0000ffef 	.word	0x0000ffef

08005f48 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f48:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8005f4a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f4c:	07da      	lsls	r2, r3, #31
 8005f4e:	d506      	bpl.n	8005f5e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f50:	6801      	ldr	r1, [r0, #0]
 8005f52:	4c28      	ldr	r4, [pc, #160]	; (8005ff4 <UART_AdvFeatureConfig+0xac>)
 8005f54:	684a      	ldr	r2, [r1, #4]
 8005f56:	4022      	ands	r2, r4
 8005f58:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005f5a:	4322      	orrs	r2, r4
 8005f5c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f5e:	079a      	lsls	r2, r3, #30
 8005f60:	d506      	bpl.n	8005f70 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005f62:	6801      	ldr	r1, [r0, #0]
 8005f64:	4c24      	ldr	r4, [pc, #144]	; (8005ff8 <UART_AdvFeatureConfig+0xb0>)
 8005f66:	684a      	ldr	r2, [r1, #4]
 8005f68:	4022      	ands	r2, r4
 8005f6a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8005f6c:	4322      	orrs	r2, r4
 8005f6e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005f70:	075a      	lsls	r2, r3, #29
 8005f72:	d506      	bpl.n	8005f82 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005f74:	6801      	ldr	r1, [r0, #0]
 8005f76:	4c21      	ldr	r4, [pc, #132]	; (8005ffc <UART_AdvFeatureConfig+0xb4>)
 8005f78:	684a      	ldr	r2, [r1, #4]
 8005f7a:	4022      	ands	r2, r4
 8005f7c:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8005f7e:	4322      	orrs	r2, r4
 8005f80:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f82:	071a      	lsls	r2, r3, #28
 8005f84:	d506      	bpl.n	8005f94 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f86:	6801      	ldr	r1, [r0, #0]
 8005f88:	4c1d      	ldr	r4, [pc, #116]	; (8006000 <UART_AdvFeatureConfig+0xb8>)
 8005f8a:	684a      	ldr	r2, [r1, #4]
 8005f8c:	4022      	ands	r2, r4
 8005f8e:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8005f90:	4322      	orrs	r2, r4
 8005f92:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f94:	06da      	lsls	r2, r3, #27
 8005f96:	d506      	bpl.n	8005fa6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f98:	6801      	ldr	r1, [r0, #0]
 8005f9a:	4c1a      	ldr	r4, [pc, #104]	; (8006004 <UART_AdvFeatureConfig+0xbc>)
 8005f9c:	688a      	ldr	r2, [r1, #8]
 8005f9e:	4022      	ands	r2, r4
 8005fa0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8005fa2:	4322      	orrs	r2, r4
 8005fa4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005fa6:	069a      	lsls	r2, r3, #26
 8005fa8:	d506      	bpl.n	8005fb8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005faa:	6801      	ldr	r1, [r0, #0]
 8005fac:	4c16      	ldr	r4, [pc, #88]	; (8006008 <UART_AdvFeatureConfig+0xc0>)
 8005fae:	688a      	ldr	r2, [r1, #8]
 8005fb0:	4022      	ands	r2, r4
 8005fb2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8005fb4:	4322      	orrs	r2, r4
 8005fb6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005fb8:	065a      	lsls	r2, r3, #25
 8005fba:	d510      	bpl.n	8005fde <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005fbc:	6801      	ldr	r1, [r0, #0]
 8005fbe:	4d13      	ldr	r5, [pc, #76]	; (800600c <UART_AdvFeatureConfig+0xc4>)
 8005fc0:	684a      	ldr	r2, [r1, #4]
 8005fc2:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005fc4:	402a      	ands	r2, r5
 8005fc6:	4322      	orrs	r2, r4
 8005fc8:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005fca:	2280      	movs	r2, #128	; 0x80
 8005fcc:	0352      	lsls	r2, r2, #13
 8005fce:	4294      	cmp	r4, r2
 8005fd0:	d105      	bne.n	8005fde <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005fd2:	684a      	ldr	r2, [r1, #4]
 8005fd4:	4c0e      	ldr	r4, [pc, #56]	; (8006010 <UART_AdvFeatureConfig+0xc8>)
 8005fd6:	4022      	ands	r2, r4
 8005fd8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8005fda:	4322      	orrs	r2, r4
 8005fdc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005fde:	061b      	lsls	r3, r3, #24
 8005fe0:	d506      	bpl.n	8005ff0 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005fe2:	6802      	ldr	r2, [r0, #0]
 8005fe4:	490b      	ldr	r1, [pc, #44]	; (8006014 <UART_AdvFeatureConfig+0xcc>)
 8005fe6:	6853      	ldr	r3, [r2, #4]
 8005fe8:	400b      	ands	r3, r1
 8005fea:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005fec:	430b      	orrs	r3, r1
 8005fee:	6053      	str	r3, [r2, #4]
}
 8005ff0:	bd30      	pop	{r4, r5, pc}
 8005ff2:	46c0      	nop			; (mov r8, r8)
 8005ff4:	fffdffff 	.word	0xfffdffff
 8005ff8:	fffeffff 	.word	0xfffeffff
 8005ffc:	fffbffff 	.word	0xfffbffff
 8006000:	ffff7fff 	.word	0xffff7fff
 8006004:	ffffefff 	.word	0xffffefff
 8006008:	ffffdfff 	.word	0xffffdfff
 800600c:	ffefffff 	.word	0xffefffff
 8006010:	ff9fffff 	.word	0xff9fffff
 8006014:	fff7ffff 	.word	0xfff7ffff

08006018 <UART_WaitOnFlagUntilTimeout>:
{
 8006018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800601a:	2780      	movs	r7, #128	; 0x80
{
 800601c:	0004      	movs	r4, r0
 800601e:	000d      	movs	r5, r1
 8006020:	0016      	movs	r6, r2
 8006022:	9301      	str	r3, [sp, #4]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006024:	013f      	lsls	r7, r7, #4
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	6822      	ldr	r2, [r4, #0]
 8006028:	69d3      	ldr	r3, [r2, #28]
 800602a:	402b      	ands	r3, r5
 800602c:	1b5b      	subs	r3, r3, r5
 800602e:	4259      	negs	r1, r3
 8006030:	414b      	adcs	r3, r1
 8006032:	42b3      	cmp	r3, r6
 8006034:	d001      	beq.n	800603a <UART_WaitOnFlagUntilTimeout+0x22>
  return HAL_OK;
 8006036:	2000      	movs	r0, #0
 8006038:	e01c      	b.n	8006074 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 800603a:	9b08      	ldr	r3, [sp, #32]
 800603c:	3301      	adds	r3, #1
 800603e:	d0f3      	beq.n	8006028 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006040:	f7fc fda6 	bl	8002b90 <HAL_GetTick>
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	9a08      	ldr	r2, [sp, #32]
 8006048:	1ac0      	subs	r0, r0, r3
 800604a:	6823      	ldr	r3, [r4, #0]
 800604c:	4290      	cmp	r0, r2
 800604e:	d801      	bhi.n	8006054 <UART_WaitOnFlagUntilTimeout+0x3c>
 8006050:	2a00      	cmp	r2, #0
 8006052:	d110      	bne.n	8006076 <UART_WaitOnFlagUntilTimeout+0x5e>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4913      	ldr	r1, [pc, #76]	; (80060a4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 8006058:	400a      	ands	r2, r1
 800605a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	31a3      	adds	r1, #163	; 0xa3
 8006060:	31ff      	adds	r1, #255	; 0xff
 8006062:	438a      	bics	r2, r1
 8006064:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006066:	2320      	movs	r3, #32
 8006068:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800606a:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 800606c:	2300      	movs	r3, #0
          return HAL_TIMEOUT;
 800606e:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8006070:	3474      	adds	r4, #116	; 0x74
 8006072:	7023      	strb	r3, [r4, #0]
}
 8006074:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006076:	2104      	movs	r1, #4
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	420a      	tst	r2, r1
 800607c:	d0d3      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800607e:	69da      	ldr	r2, [r3, #28]
 8006080:	423a      	tst	r2, r7
 8006082:	d0d0      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006084:	621f      	str	r7, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	4906      	ldr	r1, [pc, #24]	; (80060a4 <UART_WaitOnFlagUntilTimeout+0x8c>)
 800608a:	400a      	ands	r2, r1
 800608c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800608e:	689a      	ldr	r2, [r3, #8]
 8006090:	31a3      	adds	r1, #163	; 0xa3
 8006092:	31ff      	adds	r1, #255	; 0xff
 8006094:	438a      	bics	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006098:	2320      	movs	r3, #32
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800609a:	1d22      	adds	r2, r4, #4
          huart->gState = HAL_UART_STATE_READY;
 800609c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800609e:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060a0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80060a2:	e7e3      	b.n	800606c <UART_WaitOnFlagUntilTimeout+0x54>
 80060a4:	fffffe5f 	.word	0xfffffe5f

080060a8 <UART_CheckIdleState>:
{
 80060a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060aa:	2600      	movs	r6, #0
{
 80060ac:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	1d03      	adds	r3, r0, #4
 80060b0:	67de      	str	r6, [r3, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80060b2:	f7fc fd6d 	bl	8002b90 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060b6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80060b8:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	071b      	lsls	r3, r3, #28
 80060be:	d416      	bmi.n	80060ee <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80060c0:	6823      	ldr	r3, [r4, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	075b      	lsls	r3, r3, #29
 80060c6:	d50a      	bpl.n	80060de <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060c8:	2180      	movs	r1, #128	; 0x80
 80060ca:	4b0f      	ldr	r3, [pc, #60]	; (8006108 <UART_CheckIdleState+0x60>)
 80060cc:	2200      	movs	r2, #0
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	0020      	movs	r0, r4
 80060d2:	002b      	movs	r3, r5
 80060d4:	03c9      	lsls	r1, r1, #15
 80060d6:	f7ff ff9f 	bl	8006018 <UART_WaitOnFlagUntilTimeout>
 80060da:	2800      	cmp	r0, #0
 80060dc:	d112      	bne.n	8006104 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80060de:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80060e2:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80060e4:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e6:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 80060e8:	3474      	adds	r4, #116	; 0x74
 80060ea:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80060ec:	e00b      	b.n	8006106 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060ee:	2180      	movs	r1, #128	; 0x80
 80060f0:	4b05      	ldr	r3, [pc, #20]	; (8006108 <UART_CheckIdleState+0x60>)
 80060f2:	0032      	movs	r2, r6
 80060f4:	9300      	str	r3, [sp, #0]
 80060f6:	0389      	lsls	r1, r1, #14
 80060f8:	0003      	movs	r3, r0
 80060fa:	0020      	movs	r0, r4
 80060fc:	f7ff ff8c 	bl	8006018 <UART_WaitOnFlagUntilTimeout>
 8006100:	2800      	cmp	r0, #0
 8006102:	d0dd      	beq.n	80060c0 <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8006104:	2003      	movs	r0, #3
}
 8006106:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 8006108:	01ffffff 	.word	0x01ffffff

0800610c <HAL_UART_Init>:
{
 800610c:	b510      	push	{r4, lr}
 800610e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8006110:	d101      	bne.n	8006116 <HAL_UART_Init+0xa>
    return HAL_ERROR;
 8006112:	2001      	movs	r0, #1
}
 8006114:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006116:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8006118:	2b00      	cmp	r3, #0
 800611a:	d104      	bne.n	8006126 <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 800611c:	0002      	movs	r2, r0
 800611e:	3274      	adds	r2, #116	; 0x74
 8006120:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8006122:	f7fc fdab 	bl	8002c7c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8006126:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006128:	2101      	movs	r1, #1
 800612a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800612c:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 800612e:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006130:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8006132:	438b      	bics	r3, r1
 8006134:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006136:	f7ff fded 	bl	8005d14 <UART_SetConfig>
 800613a:	2801      	cmp	r0, #1
 800613c:	d0e9      	beq.n	8006112 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800613e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006140:	2b00      	cmp	r3, #0
 8006142:	d002      	beq.n	800614a <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8006144:	0020      	movs	r0, r4
 8006146:	f7ff feff 	bl	8005f48 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	4907      	ldr	r1, [pc, #28]	; (800616c <HAL_UART_Init+0x60>)
 800614e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8006150:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006152:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006154:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006156:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	438a      	bics	r2, r1
 800615c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800615e:	2201      	movs	r2, #1
 8006160:	6819      	ldr	r1, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8006166:	f7ff ff9f 	bl	80060a8 <UART_CheckIdleState>
 800616a:	e7d3      	b.n	8006114 <HAL_UART_Init+0x8>
 800616c:	ffffb7ff 	.word	0xffffb7ff

08006170 <UART_Start_Receive_IT>:
  huart->RxXferSize  = Size;
 8006170:	0003      	movs	r3, r0
 8006172:	3358      	adds	r3, #88	; 0x58
{
 8006174:	b510      	push	{r4, lr}
  huart->pRxBuffPtr  = pData;
 8006176:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006178:	801a      	strh	r2, [r3, #0]
  huart->RxXferCount = Size;
 800617a:	805a      	strh	r2, [r3, #2]
  UART_MASK_COMPUTATION(huart);
 800617c:	2380      	movs	r3, #128	; 0x80
 800617e:	6881      	ldr	r1, [r0, #8]
 8006180:	015b      	lsls	r3, r3, #5
 8006182:	4299      	cmp	r1, r3
 8006184:	d128      	bne.n	80061d8 <UART_Start_Receive_IT+0x68>
 8006186:	6903      	ldr	r3, [r0, #16]
 8006188:	1e5a      	subs	r2, r3, #1
 800618a:	4193      	sbcs	r3, r2
 800618c:	22ff      	movs	r2, #255	; 0xff
 800618e:	425b      	negs	r3, r3
 8006190:	4393      	bics	r3, r2
 8006192:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <UART_Start_Receive_IT+0x90>)
 8006194:	189b      	adds	r3, r3, r2
 8006196:	0002      	movs	r2, r0
 8006198:	325c      	adds	r2, #92	; 0x5c
 800619a:	8013      	strh	r3, [r2, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800619c:	2200      	movs	r2, #0
 800619e:	1d03      	adds	r3, r0, #4
 80061a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a2:	2322      	movs	r3, #34	; 0x22
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a4:	6802      	ldr	r2, [r0, #0]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061a6:	67c3      	str	r3, [r0, #124]	; 0x7c
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061a8:	6894      	ldr	r4, [r2, #8]
 80061aa:	3b21      	subs	r3, #33	; 0x21
 80061ac:	4323      	orrs	r3, r4
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061ae:	2480      	movs	r4, #128	; 0x80
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061b0:	6093      	str	r3, [r2, #8]
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b2:	0164      	lsls	r4, r4, #5
    huart->RxISR = UART_RxISR_8BIT;
 80061b4:	4b13      	ldr	r3, [pc, #76]	; (8006204 <UART_Start_Receive_IT+0x94>)
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061b6:	42a1      	cmp	r1, r4
 80061b8:	d103      	bne.n	80061c2 <UART_Start_Receive_IT+0x52>
 80061ba:	6901      	ldr	r1, [r0, #16]
 80061bc:	2900      	cmp	r1, #0
 80061be:	d100      	bne.n	80061c2 <UART_Start_Receive_IT+0x52>
    huart->RxISR = UART_RxISR_16BIT;
 80061c0:	4b11      	ldr	r3, [pc, #68]	; (8006208 <UART_Start_Receive_IT+0x98>)
 80061c2:	6643      	str	r3, [r0, #100]	; 0x64
  __HAL_UNLOCK(huart);
 80061c4:	0003      	movs	r3, r0
 80061c6:	2000      	movs	r0, #0
 80061c8:	3374      	adds	r3, #116	; 0x74
 80061ca:	7018      	strb	r0, [r3, #0]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80061cc:	2390      	movs	r3, #144	; 0x90
 80061ce:	6811      	ldr	r1, [r2, #0]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	430b      	orrs	r3, r1
 80061d4:	6013      	str	r3, [r2, #0]
}
 80061d6:	bd10      	pop	{r4, pc}
  UART_MASK_COMPUTATION(huart);
 80061d8:	2900      	cmp	r1, #0
 80061da:	d105      	bne.n	80061e8 <UART_Start_Receive_IT+0x78>
 80061dc:	6902      	ldr	r2, [r0, #16]
 80061de:	237f      	movs	r3, #127	; 0x7f
 80061e0:	2a00      	cmp	r2, #0
 80061e2:	d1d8      	bne.n	8006196 <UART_Start_Receive_IT+0x26>
 80061e4:	3380      	adds	r3, #128	; 0x80
 80061e6:	e7d6      	b.n	8006196 <UART_Start_Receive_IT+0x26>
 80061e8:	2280      	movs	r2, #128	; 0x80
 80061ea:	2300      	movs	r3, #0
 80061ec:	0552      	lsls	r2, r2, #21
 80061ee:	4291      	cmp	r1, r2
 80061f0:	d1d1      	bne.n	8006196 <UART_Start_Receive_IT+0x26>
 80061f2:	6902      	ldr	r2, [r0, #16]
 80061f4:	337f      	adds	r3, #127	; 0x7f
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	d0cd      	beq.n	8006196 <UART_Start_Receive_IT+0x26>
 80061fa:	3b40      	subs	r3, #64	; 0x40
 80061fc:	e7cb      	b.n	8006196 <UART_Start_Receive_IT+0x26>
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	000001ff 	.word	0x000001ff
 8006204:	08005c11 	.word	0x08005c11
 8006208:	08005c95 	.word	0x08005c95

0800620c <HAL_UART_Receive_IT>:
{
 800620c:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 800620e:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
{
 8006210:	0003      	movs	r3, r0
    return HAL_BUSY;
 8006212:	2002      	movs	r0, #2
  if (huart->RxState == HAL_UART_STATE_READY)
 8006214:	2c20      	cmp	r4, #32
 8006216:	d129      	bne.n	800626c <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 8006218:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 800621a:	2900      	cmp	r1, #0
 800621c:	d026      	beq.n	800626c <HAL_UART_Receive_IT+0x60>
 800621e:	2a00      	cmp	r2, #0
 8006220:	d024      	beq.n	800626c <HAL_UART_Receive_IT+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006222:	2080      	movs	r0, #128	; 0x80
 8006224:	689c      	ldr	r4, [r3, #8]
 8006226:	0140      	lsls	r0, r0, #5
 8006228:	4284      	cmp	r4, r0
 800622a:	d106      	bne.n	800623a <HAL_UART_Receive_IT+0x2e>
 800622c:	6918      	ldr	r0, [r3, #16]
 800622e:	2800      	cmp	r0, #0
 8006230:	d103      	bne.n	800623a <HAL_UART_Receive_IT+0x2e>
      if ((((uint32_t)pData) & 1U) != 0U)
 8006232:	2401      	movs	r4, #1
      return HAL_ERROR;
 8006234:	0020      	movs	r0, r4
      if ((((uint32_t)pData) & 1U) != 0U)
 8006236:	4221      	tst	r1, r4
 8006238:	d118      	bne.n	800626c <HAL_UART_Receive_IT+0x60>
    __HAL_LOCK(huart);
 800623a:	001c      	movs	r4, r3
 800623c:	3474      	adds	r4, #116	; 0x74
 800623e:	7825      	ldrb	r5, [r4, #0]
    return HAL_BUSY;
 8006240:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8006242:	2d01      	cmp	r5, #1
 8006244:	d012      	beq.n	800626c <HAL_UART_Receive_IT+0x60>
 8006246:	3801      	subs	r0, #1
 8006248:	7020      	strb	r0, [r4, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	2000      	movs	r0, #0
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800624c:	4c08      	ldr	r4, [pc, #32]	; (8006270 <HAL_UART_Receive_IT+0x64>)
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624e:	6618      	str	r0, [r3, #96]	; 0x60
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006250:	6818      	ldr	r0, [r3, #0]
 8006252:	42a0      	cmp	r0, r4
 8006254:	d007      	beq.n	8006266 <HAL_UART_Receive_IT+0x5a>
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006256:	6844      	ldr	r4, [r0, #4]
 8006258:	0224      	lsls	r4, r4, #8
 800625a:	d504      	bpl.n	8006266 <HAL_UART_Receive_IT+0x5a>
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800625c:	2480      	movs	r4, #128	; 0x80
 800625e:	6805      	ldr	r5, [r0, #0]
 8006260:	04e4      	lsls	r4, r4, #19
 8006262:	432c      	orrs	r4, r5
 8006264:	6004      	str	r4, [r0, #0]
    return(UART_Start_Receive_IT(huart, pData, Size));
 8006266:	0018      	movs	r0, r3
 8006268:	f7ff ff82 	bl	8006170 <UART_Start_Receive_IT>
}
 800626c:	bd70      	pop	{r4, r5, r6, pc}
 800626e:	46c0      	nop			; (mov r8, r8)
 8006270:	40004800 	.word	0x40004800

08006274 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006274:	4770      	bx	lr
	...

08006278 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006278:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 800627a:	0005      	movs	r5, r0
{
 800627c:	b085      	sub	sp, #20
 800627e:	9102      	str	r1, [sp, #8]
 8006280:	9203      	str	r2, [sp, #12]
  __HAL_LOCK(huart);
 8006282:	3574      	adds	r5, #116	; 0x74
 8006284:	782b      	ldrb	r3, [r5, #0]
{
 8006286:	0004      	movs	r4, r0
 8006288:	000f      	movs	r7, r1
  __HAL_LOCK(huart);
 800628a:	2002      	movs	r0, #2
{
 800628c:	ae02      	add	r6, sp, #8
  __HAL_LOCK(huart);
 800628e:	2b01      	cmp	r3, #1
 8006290:	d030      	beq.n	80062f4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7c>

  huart->gState = HAL_UART_STATE_BUSY;
 8006292:	2324      	movs	r3, #36	; 0x24
  __HAL_LOCK(huart);
 8006294:	3801      	subs	r0, #1
 8006296:	7028      	strb	r0, [r5, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006298:	67a3      	str	r3, [r4, #120]	; 0x78

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800629a:	6823      	ldr	r3, [r4, #0]
 800629c:	6819      	ldr	r1, [r3, #0]
 800629e:	4381      	bics	r1, r0
 80062a0:	6019      	str	r1, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 80062a2:	6899      	ldr	r1, [r3, #8]
 80062a4:	4815      	ldr	r0, [pc, #84]	; (80062fc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x84>)
 80062a6:	4001      	ands	r1, r0
 80062a8:	4339      	orrs	r1, r7
 80062aa:	6099      	str	r1, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 80062ac:	2f00      	cmp	r7, #0
 80062ae:	d10c      	bne.n	80062ca <HAL_UARTEx_StopModeWakeUpSourceConfig+0x52>
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80062b0:	2010      	movs	r0, #16
 80062b2:	685a      	ldr	r2, [r3, #4]
 80062b4:	79b1      	ldrb	r1, [r6, #6]
 80062b6:	4382      	bics	r2, r0
 80062b8:	88b0      	ldrh	r0, [r6, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80062ba:	0609      	lsls	r1, r1, #24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 80062bc:	4302      	orrs	r2, r0
 80062be:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80062c0:	685a      	ldr	r2, [r3, #4]
 80062c2:	0212      	lsls	r2, r2, #8
 80062c4:	0a12      	lsrs	r2, r2, #8
 80062c6:	430a      	orrs	r2, r1
 80062c8:	605a      	str	r2, [r3, #4]
  __HAL_UART_ENABLE(huart);
 80062ca:	2201      	movs	r2, #1
 80062cc:	6819      	ldr	r1, [r3, #0]
 80062ce:	430a      	orrs	r2, r1
 80062d0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80062d2:	f7fc fc5d 	bl	8002b90 <HAL_GetTick>
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062d6:	2180      	movs	r1, #128	; 0x80
 80062d8:	4a09      	ldr	r2, [pc, #36]	; (8006300 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x88>)
  tickstart = HAL_GetTick();
 80062da:	0003      	movs	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062dc:	9200      	str	r2, [sp, #0]
 80062de:	0020      	movs	r0, r4
 80062e0:	2200      	movs	r2, #0
 80062e2:	03c9      	lsls	r1, r1, #15
 80062e4:	f7ff fe98 	bl	8006018 <UART_WaitOnFlagUntilTimeout>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d105      	bne.n	80062f8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80062ec:	2320      	movs	r3, #32
 80062ee:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80062f0:	2300      	movs	r3, #0
 80062f2:	702b      	strb	r3, [r5, #0]
}
 80062f4:	b005      	add	sp, #20
 80062f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_TIMEOUT;
 80062f8:	2003      	movs	r0, #3
 80062fa:	e7f9      	b.n	80062f0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x78>
 80062fc:	ffcfffff 	.word	0xffcfffff
 8006300:	01ffffff 	.word	0x01ffffff

08006304 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8006304:	0001      	movs	r1, r0
 8006306:	2302      	movs	r3, #2
{
 8006308:	b510      	push	{r4, lr}
  __HAL_LOCK(huart);
 800630a:	3174      	adds	r1, #116	; 0x74
 800630c:	780c      	ldrb	r4, [r1, #0]
{
 800630e:	0002      	movs	r2, r0
  __HAL_LOCK(huart);
 8006310:	0018      	movs	r0, r3
 8006312:	2c01      	cmp	r4, #1
 8006314:	d005      	beq.n	8006322 <HAL_UARTEx_EnableStopMode+0x1e>
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	6810      	ldr	r0, [r2, #0]
 800631a:	4303      	orrs	r3, r0
  __HAL_UNLOCK(huart);
 800631c:	2000      	movs	r0, #0
  SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 800631e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(huart);
 8006320:	7008      	strb	r0, [r1, #0]
}
 8006322:	bd10      	pop	{r4, pc}

08006324 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8006324:	b510      	push	{r4, lr}
 8006326:	0004      	movs	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 8006328:	2210      	movs	r2, #16
 800632a:	2100      	movs	r1, #0
 800632c:	30f1      	adds	r0, #241	; 0xf1
 800632e:	f006 f89c 	bl	800c46a <memset1>
    ctx->M_n = 0;
 8006332:	0023      	movs	r3, r4
 8006334:	2100      	movs	r1, #0
 8006336:	33fc      	adds	r3, #252	; 0xfc
    memset1( ctx->rijndael.ksch, '\0', 240 );
 8006338:	22f0      	movs	r2, #240	; 0xf0
 800633a:	0020      	movs	r0, r4
    ctx->M_n = 0;
 800633c:	6199      	str	r1, [r3, #24]
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800633e:	f006 f894 	bl	800c46a <memset1>
}
 8006342:	bd10      	pop	{r4, pc}

08006344 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 8006344:	b510      	push	{r4, lr}
 8006346:	0002      	movs	r2, r0
 8006348:	0008      	movs	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800634a:	2110      	movs	r1, #16
 800634c:	f000 f9a0 	bl	8006690 <lorawan_aes_set_key>
}
 8006350:	bd10      	pop	{r4, pc}

08006352 <AES_CMAC_Update>:
void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 8006352:	0003      	movs	r3, r0
{
 8006354:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006356:	0004      	movs	r4, r0
    if( ctx->M_n > 0 )
 8006358:	33fc      	adds	r3, #252	; 0xfc
 800635a:	6998      	ldr	r0, [r3, #24]
    {
        mlen = MIN( 16 - ctx->M_n, len );
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800635c:	1ca3      	adds	r3, r4, #2
{
 800635e:	b087      	sub	sp, #28
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006360:	33ff      	adds	r3, #255	; 0xff
{
 8006362:	000e      	movs	r6, r1
 8006364:	0015      	movs	r5, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006366:	9301      	str	r3, [sp, #4]
    if( ctx->M_n > 0 )
 8006368:	2800      	cmp	r0, #0
 800636a:	d036      	beq.n	80063da <AES_CMAC_Update+0x88>
        mlen = MIN( 16 - ctx->M_n, len );
 800636c:	2710      	movs	r7, #16
 800636e:	1a3f      	subs	r7, r7, r0
 8006370:	9700      	str	r7, [sp, #0]
 8006372:	4297      	cmp	r7, r2
 8006374:	d900      	bls.n	8006378 <AES_CMAC_Update+0x26>
 8006376:	9200      	str	r2, [sp, #0]
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 8006378:	466b      	mov	r3, sp
 800637a:	881a      	ldrh	r2, [r3, #0]
 800637c:	1ca3      	adds	r3, r4, #2
 800637e:	33ff      	adds	r3, #255	; 0xff
 8006380:	0031      	movs	r1, r6
 8006382:	1818      	adds	r0, r3, r0
 8006384:	f006 f85c 	bl	800c440 <memcpy1>
        ctx->M_n += mlen;
 8006388:	0022      	movs	r2, r4
 800638a:	32fc      	adds	r2, #252	; 0xfc
 800638c:	6993      	ldr	r3, [r2, #24]
 800638e:	9900      	ldr	r1, [sp, #0]
 8006390:	18cb      	adds	r3, r1, r3
 8006392:	6193      	str	r3, [r2, #24]
        if( ctx->M_n < 16 || len == mlen )
 8006394:	2b0f      	cmp	r3, #15
 8006396:	d929      	bls.n	80063ec <AES_CMAC_Update+0x9a>
 8006398:	42af      	cmp	r7, r5
 800639a:	d227      	bcs.n	80063ec <AES_CMAC_Update+0x9a>
 800639c:	0023      	movs	r3, r4
 800639e:	1ca1      	adds	r1, r4, #2
 80063a0:	33f1      	adds	r3, #241	; 0xf1
 80063a2:	31ff      	adds	r1, #255	; 0xff
            return;
        XOR( ctx->M_last, ctx->X );
 80063a4:	781a      	ldrb	r2, [r3, #0]
 80063a6:	7c18      	ldrb	r0, [r3, #16]
 80063a8:	4042      	eors	r2, r0
 80063aa:	701a      	strb	r2, [r3, #0]
 80063ac:	3301      	adds	r3, #1
 80063ae:	428b      	cmp	r3, r1
 80063b0:	d1f8      	bne.n	80063a4 <AES_CMAC_Update+0x52>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80063b2:	0027      	movs	r7, r4
 80063b4:	37f1      	adds	r7, #241	; 0xf1
 80063b6:	2210      	movs	r2, #16
 80063b8:	0039      	movs	r1, r7
 80063ba:	a802      	add	r0, sp, #8
 80063bc:	f006 f840 	bl	800c440 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 80063c0:	a902      	add	r1, sp, #8
 80063c2:	0022      	movs	r2, r4
 80063c4:	0008      	movs	r0, r1
 80063c6:	f000 f9e5 	bl	8006794 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 80063ca:	2210      	movs	r2, #16
 80063cc:	0038      	movs	r0, r7
 80063ce:	a902      	add	r1, sp, #8
 80063d0:	f006 f836 	bl	800c440 <memcpy1>

        data += mlen;
 80063d4:	9b00      	ldr	r3, [sp, #0]
 80063d6:	18f6      	adds	r6, r6, r3
        len -= mlen;
 80063d8:	1aed      	subs	r5, r5, r3
    }
    while( len > 16 )
 80063da:	2d10      	cmp	r5, #16
 80063dc:	d808      	bhi.n	80063f0 <AES_CMAC_Update+0x9e>

        data += 16;
        len -= 16;
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 80063de:	0031      	movs	r1, r6
 80063e0:	9801      	ldr	r0, [sp, #4]
 80063e2:	b2aa      	uxth	r2, r5
    ctx->M_n = len;
 80063e4:	34fc      	adds	r4, #252	; 0xfc
    memcpy1( ctx->M_last, data, len );
 80063e6:	f006 f82b 	bl	800c440 <memcpy1>
    ctx->M_n = len;
 80063ea:	61a5      	str	r5, [r4, #24]
}
 80063ec:	b007      	add	sp, #28
 80063ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f0:	0023      	movs	r3, r4
 80063f2:	0032      	movs	r2, r6
 80063f4:	1ca0      	adds	r0, r4, #2
 80063f6:	33f1      	adds	r3, #241	; 0xf1
 80063f8:	30ff      	adds	r0, #255	; 0xff
        XOR( data, ctx->X );
 80063fa:	7819      	ldrb	r1, [r3, #0]
 80063fc:	7817      	ldrb	r7, [r2, #0]
 80063fe:	3201      	adds	r2, #1
 8006400:	4079      	eors	r1, r7
 8006402:	7019      	strb	r1, [r3, #0]
 8006404:	3301      	adds	r3, #1
 8006406:	4283      	cmp	r3, r0
 8006408:	d1f7      	bne.n	80063fa <AES_CMAC_Update+0xa8>
        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800640a:	0027      	movs	r7, r4
 800640c:	37f1      	adds	r7, #241	; 0xf1
 800640e:	2210      	movs	r2, #16
 8006410:	0039      	movs	r1, r7
 8006412:	a802      	add	r0, sp, #8
 8006414:	f006 f814 	bl	800c440 <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 8006418:	a902      	add	r1, sp, #8
 800641a:	0022      	movs	r2, r4
 800641c:	0008      	movs	r0, r1
 800641e:	f000 f9b9 	bl	8006794 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8006422:	2210      	movs	r2, #16
 8006424:	0038      	movs	r0, r7
 8006426:	a902      	add	r1, sp, #8
 8006428:	f006 f80a 	bl	800c440 <memcpy1>
        data += 16;
 800642c:	3610      	adds	r6, #16
        len -= 16;
 800642e:	3d10      	subs	r5, #16
 8006430:	e7d3      	b.n	80063da <AES_CMAC_Update+0x88>

08006432 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 8006432:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006434:	000c      	movs	r4, r1
 8006436:	b08b      	sub	sp, #44	; 0x2c
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 8006438:	2210      	movs	r2, #16
 800643a:	2100      	movs	r1, #0
{
 800643c:	9001      	str	r0, [sp, #4]
    memset1( K, '\0', 16 );
 800643e:	a802      	add	r0, sp, #8
 8006440:	f006 f813 	bl	800c46a <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 8006444:	a902      	add	r1, sp, #8
 8006446:	0022      	movs	r2, r4
 8006448:	0008      	movs	r0, r1
 800644a:	f000 f9a3 	bl	8006794 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800644e:	ab02      	add	r3, sp, #8
 8006450:	781a      	ldrb	r2, [r3, #0]
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 8006452:	2100      	movs	r1, #0
    if( K[0] & 0x80 )
 8006454:	2a7f      	cmp	r2, #127	; 0x7f
 8006456:	d940      	bls.n	80064da <AES_CMAC_Final+0xa8>
        LSHIFT( K, K );
 8006458:	7818      	ldrb	r0, [r3, #0]
 800645a:	785a      	ldrb	r2, [r3, #1]
 800645c:	0040      	lsls	r0, r0, #1
 800645e:	09d2      	lsrs	r2, r2, #7
 8006460:	4302      	orrs	r2, r0
 8006462:	3101      	adds	r1, #1
 8006464:	701a      	strb	r2, [r3, #0]
 8006466:	3301      	adds	r3, #1
 8006468:	290f      	cmp	r1, #15
 800646a:	d1f5      	bne.n	8006458 <AES_CMAC_Final+0x26>
 800646c:	ab02      	add	r3, sp, #8
 800646e:	7bda      	ldrb	r2, [r3, #15]
        K[15] ^= 0x87;
 8006470:	2379      	movs	r3, #121	; 0x79
        LSHIFT( K, K );
 8006472:	0052      	lsls	r2, r2, #1
        K[15] ^= 0x87;
 8006474:	425b      	negs	r3, r3
 8006476:	4053      	eors	r3, r2

    if( ctx->M_n == 16 )
 8006478:	0027      	movs	r7, r4
 800647a:	37fc      	adds	r7, #252	; 0xfc
 800647c:	69b8      	ldr	r0, [r7, #24]
        LSHIFT( K, K );
 800647e:	b2db      	uxtb	r3, r3
        K[15] ^= 0x87;
 8006480:	aa02      	add	r2, sp, #8
 8006482:	73d3      	strb	r3, [r2, #15]
    if( ctx->M_n == 16 )
 8006484:	2810      	cmp	r0, #16
 8006486:	d136      	bne.n	80064f6 <AES_CMAC_Final+0xc4>
 8006488:	0020      	movs	r0, r4
 800648a:	1ca3      	adds	r3, r4, #2
 800648c:	3012      	adds	r0, #18
 800648e:	33ff      	adds	r3, #255	; 0xff
 8006490:	30ff      	adds	r0, #255	; 0xff
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 8006492:	7819      	ldrb	r1, [r3, #0]
 8006494:	7815      	ldrb	r5, [r2, #0]
 8006496:	3201      	adds	r2, #1
 8006498:	4069      	eors	r1, r5
 800649a:	7019      	strb	r1, [r3, #0]
 800649c:	3301      	adds	r3, #1
 800649e:	4298      	cmp	r0, r3
 80064a0:	d1f7      	bne.n	8006492 <AES_CMAC_Final+0x60>
 80064a2:	0023      	movs	r3, r4
 80064a4:	33f1      	adds	r3, #241	; 0xf1
 80064a6:	0019      	movs	r1, r3
 80064a8:	1ca0      	adds	r0, r4, #2
 80064aa:	30ff      	adds	r0, #255	; 0xff
        while( ++ctx->M_n < 16 )
            ctx->M_last[ctx->M_n] = 0;

        XOR( K, ctx->M_last );
    }
    XOR( ctx->M_last, ctx->X );
 80064ac:	781a      	ldrb	r2, [r3, #0]
 80064ae:	7c1d      	ldrb	r5, [r3, #16]
 80064b0:	406a      	eors	r2, r5
 80064b2:	701a      	strb	r2, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	4283      	cmp	r3, r0
 80064b8:	d1f8      	bne.n	80064ac <AES_CMAC_Final+0x7a>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 80064ba:	a806      	add	r0, sp, #24
 80064bc:	2210      	movs	r2, #16
 80064be:	f005 ffbf 	bl	800c440 <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 80064c2:	0022      	movs	r2, r4
 80064c4:	9901      	ldr	r1, [sp, #4]
 80064c6:	a806      	add	r0, sp, #24
 80064c8:	f000 f964 	bl	8006794 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 80064cc:	2210      	movs	r2, #16
 80064ce:	2100      	movs	r1, #0
 80064d0:	a802      	add	r0, sp, #8
 80064d2:	f005 ffca 	bl	800c46a <memset1>
}
 80064d6:	b00b      	add	sp, #44	; 0x2c
 80064d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LSHIFT( K, K );
 80064da:	7818      	ldrb	r0, [r3, #0]
 80064dc:	785a      	ldrb	r2, [r3, #1]
 80064de:	0040      	lsls	r0, r0, #1
 80064e0:	09d2      	lsrs	r2, r2, #7
 80064e2:	4302      	orrs	r2, r0
 80064e4:	3101      	adds	r1, #1
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	3301      	adds	r3, #1
 80064ea:	290f      	cmp	r1, #15
 80064ec:	d1f5      	bne.n	80064da <AES_CMAC_Final+0xa8>
 80064ee:	ab02      	add	r3, sp, #8
 80064f0:	7bdb      	ldrb	r3, [r3, #15]
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	e7c0      	b.n	8006478 <AES_CMAC_Final+0x46>
        if( K[0] & 0x80 )
 80064f6:	2200      	movs	r2, #0
            LSHIFT( K, K );
 80064f8:	2100      	movs	r1, #0
        if( K[0] & 0x80 )
 80064fa:	ab02      	add	r3, sp, #8
 80064fc:	569a      	ldrsb	r2, [r3, r2]
 80064fe:	428a      	cmp	r2, r1
 8006500:	da34      	bge.n	800656c <AES_CMAC_Final+0x13a>
            LSHIFT( K, K );
 8006502:	781d      	ldrb	r5, [r3, #0]
 8006504:	785a      	ldrb	r2, [r3, #1]
 8006506:	006d      	lsls	r5, r5, #1
 8006508:	09d2      	lsrs	r2, r2, #7
 800650a:	432a      	orrs	r2, r5
 800650c:	3101      	adds	r1, #1
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	3301      	adds	r3, #1
 8006512:	290f      	cmp	r1, #15
 8006514:	d1f5      	bne.n	8006502 <AES_CMAC_Final+0xd0>
 8006516:	ab02      	add	r3, sp, #8
 8006518:	7bda      	ldrb	r2, [r3, #15]
            K[15] ^= 0x87;
 800651a:	2379      	movs	r3, #121	; 0x79
            LSHIFT( K, K );
 800651c:	0052      	lsls	r2, r2, #1
            K[15] ^= 0x87;
 800651e:	425b      	negs	r3, r3
 8006520:	4053      	eors	r3, r2
            LSHIFT( K, K );
 8006522:	b2db      	uxtb	r3, r3
            K[15] ^= 0x87;
 8006524:	aa02      	add	r2, sp, #8
 8006526:	73d3      	strb	r3, [r2, #15]
        ctx->M_last[ctx->M_n] = 0x80;
 8006528:	2280      	movs	r2, #128	; 0x80
 800652a:	1823      	adds	r3, r4, r0
 800652c:	33ff      	adds	r3, #255	; 0xff
            ctx->M_last[ctx->M_n] = 0;
 800652e:	1c46      	adds	r6, r0, #1
 8006530:	2500      	movs	r5, #0
        ctx->M_last[ctx->M_n] = 0x80;
 8006532:	709a      	strb	r2, [r3, #2]
            ctx->M_last[ctx->M_n] = 0;
 8006534:	2e10      	cmp	r6, #16
 8006536:	d801      	bhi.n	800653c <AES_CMAC_Final+0x10a>
 8006538:	350f      	adds	r5, #15
 800653a:	1a2d      	subs	r5, r5, r0
 800653c:	3003      	adds	r0, #3
 800653e:	30ff      	adds	r0, #255	; 0xff
 8006540:	002a      	movs	r2, r5
 8006542:	2100      	movs	r1, #0
 8006544:	1820      	adds	r0, r4, r0
 8006546:	f008 f93b 	bl	800e7c0 <memset>
 800654a:	0020      	movs	r0, r4
        while( ++ctx->M_n < 16 )
 800654c:	19ad      	adds	r5, r5, r6
 800654e:	1ca3      	adds	r3, r4, #2
 8006550:	3012      	adds	r0, #18
 8006552:	61bd      	str	r5, [r7, #24]
 8006554:	33ff      	adds	r3, #255	; 0xff
 8006556:	aa02      	add	r2, sp, #8
 8006558:	30ff      	adds	r0, #255	; 0xff
        XOR( K, ctx->M_last );
 800655a:	7819      	ldrb	r1, [r3, #0]
 800655c:	7815      	ldrb	r5, [r2, #0]
 800655e:	3201      	adds	r2, #1
 8006560:	4069      	eors	r1, r5
 8006562:	7019      	strb	r1, [r3, #0]
 8006564:	3301      	adds	r3, #1
 8006566:	4298      	cmp	r0, r3
 8006568:	d1f7      	bne.n	800655a <AES_CMAC_Final+0x128>
 800656a:	e79a      	b.n	80064a2 <AES_CMAC_Final+0x70>
            LSHIFT( K, K );
 800656c:	781d      	ldrb	r5, [r3, #0]
 800656e:	785a      	ldrb	r2, [r3, #1]
 8006570:	006d      	lsls	r5, r5, #1
 8006572:	09d2      	lsrs	r2, r2, #7
 8006574:	432a      	orrs	r2, r5
 8006576:	3101      	adds	r1, #1
 8006578:	701a      	strb	r2, [r3, #0]
 800657a:	3301      	adds	r3, #1
 800657c:	290f      	cmp	r1, #15
 800657e:	d1f5      	bne.n	800656c <AES_CMAC_Final+0x13a>
 8006580:	ab02      	add	r3, sp, #8
 8006582:	7bdb      	ldrb	r3, [r3, #15]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	e7cc      	b.n	8006522 <AES_CMAC_Final+0xf0>

08006588 <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 8006588:	780a      	ldrb	r2, [r1, #0]
 800658a:	7803      	ldrb	r3, [r0, #0]
 800658c:	4053      	eors	r3, r2
 800658e:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 8006590:	784a      	ldrb	r2, [r1, #1]
 8006592:	7843      	ldrb	r3, [r0, #1]
 8006594:	4053      	eors	r3, r2
 8006596:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 8006598:	788a      	ldrb	r2, [r1, #2]
 800659a:	7883      	ldrb	r3, [r0, #2]
 800659c:	4053      	eors	r3, r2
 800659e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80065a0:	78ca      	ldrb	r2, [r1, #3]
 80065a2:	78c3      	ldrb	r3, [r0, #3]
 80065a4:	4053      	eors	r3, r2
 80065a6:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80065a8:	790a      	ldrb	r2, [r1, #4]
 80065aa:	7903      	ldrb	r3, [r0, #4]
 80065ac:	4053      	eors	r3, r2
 80065ae:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80065b0:	794a      	ldrb	r2, [r1, #5]
 80065b2:	7943      	ldrb	r3, [r0, #5]
 80065b4:	4053      	eors	r3, r2
 80065b6:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80065b8:	798a      	ldrb	r2, [r1, #6]
 80065ba:	7983      	ldrb	r3, [r0, #6]
 80065bc:	4053      	eors	r3, r2
 80065be:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80065c0:	79ca      	ldrb	r2, [r1, #7]
 80065c2:	79c3      	ldrb	r3, [r0, #7]
 80065c4:	4053      	eors	r3, r2
 80065c6:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80065c8:	7a0a      	ldrb	r2, [r1, #8]
 80065ca:	7a03      	ldrb	r3, [r0, #8]
 80065cc:	4053      	eors	r3, r2
 80065ce:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 80065d0:	7a4a      	ldrb	r2, [r1, #9]
 80065d2:	7a43      	ldrb	r3, [r0, #9]
 80065d4:	4053      	eors	r3, r2
 80065d6:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 80065d8:	7a8a      	ldrb	r2, [r1, #10]
 80065da:	7a83      	ldrb	r3, [r0, #10]
 80065dc:	4053      	eors	r3, r2
 80065de:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 80065e0:	7aca      	ldrb	r2, [r1, #11]
 80065e2:	7ac3      	ldrb	r3, [r0, #11]
 80065e4:	4053      	eors	r3, r2
 80065e6:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 80065e8:	7b0a      	ldrb	r2, [r1, #12]
 80065ea:	7b03      	ldrb	r3, [r0, #12]
 80065ec:	4053      	eors	r3, r2
 80065ee:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 80065f0:	7b4a      	ldrb	r2, [r1, #13]
 80065f2:	7b43      	ldrb	r3, [r0, #13]
 80065f4:	4053      	eors	r3, r2
 80065f6:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 80065f8:	7b8a      	ldrb	r2, [r1, #14]
 80065fa:	7b83      	ldrb	r3, [r0, #14]
 80065fc:	4053      	eors	r3, r2
 80065fe:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8006600:	7bca      	ldrb	r2, [r1, #15]
 8006602:	7bc3      	ldrb	r3, [r0, #15]
 8006604:	4053      	eors	r3, r2
 8006606:	73c3      	strb	r3, [r0, #15]
#endif
}
 8006608:	4770      	bx	lr

0800660a <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800660a:	b510      	push	{r4, lr}
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800660c:	780b      	ldrb	r3, [r1, #0]
 800660e:	7814      	ldrb	r4, [r2, #0]
 8006610:	4063      	eors	r3, r4
 8006612:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8006614:	7854      	ldrb	r4, [r2, #1]
 8006616:	784b      	ldrb	r3, [r1, #1]
 8006618:	4063      	eors	r3, r4
 800661a:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800661c:	7894      	ldrb	r4, [r2, #2]
 800661e:	788b      	ldrb	r3, [r1, #2]
 8006620:	4063      	eors	r3, r4
 8006622:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8006624:	78d4      	ldrb	r4, [r2, #3]
 8006626:	78cb      	ldrb	r3, [r1, #3]
 8006628:	4063      	eors	r3, r4
 800662a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800662c:	7914      	ldrb	r4, [r2, #4]
 800662e:	790b      	ldrb	r3, [r1, #4]
 8006630:	4063      	eors	r3, r4
 8006632:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8006634:	7954      	ldrb	r4, [r2, #5]
 8006636:	794b      	ldrb	r3, [r1, #5]
 8006638:	4063      	eors	r3, r4
 800663a:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800663c:	7994      	ldrb	r4, [r2, #6]
 800663e:	798b      	ldrb	r3, [r1, #6]
 8006640:	4063      	eors	r3, r4
 8006642:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8006644:	79d4      	ldrb	r4, [r2, #7]
 8006646:	79cb      	ldrb	r3, [r1, #7]
 8006648:	4063      	eors	r3, r4
 800664a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800664c:	7a14      	ldrb	r4, [r2, #8]
 800664e:	7a0b      	ldrb	r3, [r1, #8]
 8006650:	4063      	eors	r3, r4
 8006652:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8006654:	7a4b      	ldrb	r3, [r1, #9]
 8006656:	7a54      	ldrb	r4, [r2, #9]
 8006658:	4063      	eors	r3, r4
 800665a:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800665c:	7a8b      	ldrb	r3, [r1, #10]
 800665e:	7a94      	ldrb	r4, [r2, #10]
 8006660:	4063      	eors	r3, r4
 8006662:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8006664:	7ad4      	ldrb	r4, [r2, #11]
 8006666:	7acb      	ldrb	r3, [r1, #11]
 8006668:	4063      	eors	r3, r4
 800666a:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800666c:	7b14      	ldrb	r4, [r2, #12]
 800666e:	7b0b      	ldrb	r3, [r1, #12]
 8006670:	4063      	eors	r3, r4
 8006672:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8006674:	7b54      	ldrb	r4, [r2, #13]
 8006676:	7b4b      	ldrb	r3, [r1, #13]
 8006678:	4063      	eors	r3, r4
 800667a:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800667c:	7b94      	ldrb	r4, [r2, #14]
 800667e:	7b8b      	ldrb	r3, [r1, #14]
 8006680:	4063      	eors	r3, r4
 8006682:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8006684:	7bcb      	ldrb	r3, [r1, #15]
 8006686:	7bd2      	ldrb	r2, [r2, #15]
 8006688:	4053      	eors	r3, r2
 800668a:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800668c:	bd10      	pop	{r4, pc}
	...

08006690 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8006690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006692:	0014      	movs	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8006694:	000a      	movs	r2, r1
 8006696:	3a10      	subs	r2, #16
 8006698:	b2d2      	uxtb	r2, r2
{
 800669a:	000e      	movs	r6, r1
 800669c:	b087      	sub	sp, #28
    switch( keylen )
 800669e:	2a10      	cmp	r2, #16
 80066a0:	d803      	bhi.n	80066aa <lorawan_aes_set_key+0x1a>
 80066a2:	4b3a      	ldr	r3, [pc, #232]	; (800678c <lorawan_aes_set_key+0xfc>)
 80066a4:	40d3      	lsrs	r3, r2
 80066a6:	07db      	lsls	r3, r3, #31
 80066a8:	d405      	bmi.n	80066b6 <lorawan_aes_set_key+0x26>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 80066aa:	2300      	movs	r3, #0
        return ( uint8_t )-1;
 80066ac:	20ff      	movs	r0, #255	; 0xff
        ctx->rnd = 0;
 80066ae:	34f0      	adds	r4, #240	; 0xf0
 80066b0:	7023      	strb	r3, [r4, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 80066b2:	b007      	add	sp, #28
 80066b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch( keylen )
 80066b6:	2300      	movs	r3, #0
        *d++ = *s++;
 80066b8:	5cc2      	ldrb	r2, [r0, r3]
 80066ba:	54e2      	strb	r2, [r4, r3]
 80066bc:	3301      	adds	r3, #1
    while( nn-- )
 80066be:	429e      	cmp	r6, r3
 80066c0:	d1fa      	bne.n	80066b8 <lorawan_aes_set_key+0x28>
    hi = (keylen + 28) << 2;
 80066c2:	0033      	movs	r3, r6
    ctx->rnd = (hi >> 4) - 1;
 80066c4:	0022      	movs	r2, r4
    hi = (keylen + 28) << 2;
 80066c6:	331c      	adds	r3, #28
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	9305      	str	r3, [sp, #20]
    ctx->rnd = (hi >> 4) - 1;
 80066ce:	091b      	lsrs	r3, r3, #4
 80066d0:	3b01      	subs	r3, #1
 80066d2:	32f0      	adds	r2, #240	; 0xf0
 80066d4:	7013      	strb	r3, [r2, #0]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80066d6:	2301      	movs	r3, #1
    ctx->rnd = (hi >> 4) - 1;
 80066d8:	0035      	movs	r5, r6
            t0 = s_box(t0);
 80066da:	4f2d      	ldr	r7, [pc, #180]	; (8006790 <lorawan_aes_set_key+0x100>)
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 80066dc:	9304      	str	r3, [sp, #16]
        t0 = ctx->ksch[cc - 4];
 80066de:	1963      	adds	r3, r4, r5
 80066e0:	1f1a      	subs	r2, r3, #4
 80066e2:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 80066e4:	0031      	movs	r1, r6
        t0 = ctx->ksch[cc - 4];
 80066e6:	9200      	str	r2, [sp, #0]
        t1 = ctx->ksch[cc - 3];
 80066e8:	1eda      	subs	r2, r3, #3
 80066ea:	7812      	ldrb	r2, [r2, #0]
        if( cc % keylen == 0 )
 80066ec:	0028      	movs	r0, r5
        t1 = ctx->ksch[cc - 3];
 80066ee:	9201      	str	r2, [sp, #4]
        t2 = ctx->ksch[cc - 2];
 80066f0:	1e9a      	subs	r2, r3, #2
        t3 = ctx->ksch[cc - 1];
 80066f2:	3b01      	subs	r3, #1
        t2 = ctx->ksch[cc - 2];
 80066f4:	7812      	ldrb	r2, [r2, #0]
        t3 = ctx->ksch[cc - 1];
 80066f6:	781b      	ldrb	r3, [r3, #0]
        t2 = ctx->ksch[cc - 2];
 80066f8:	9202      	str	r2, [sp, #8]
        t3 = ctx->ksch[cc - 1];
 80066fa:	9303      	str	r3, [sp, #12]
        if( cc % keylen == 0 )
 80066fc:	f7f9 fdba 	bl	8000274 <__aeabi_uidivmod>
 8006700:	b2c9      	uxtb	r1, r1
 8006702:	2900      	cmp	r1, #0
 8006704:	d130      	bne.n	8006768 <lorawan_aes_set_key+0xd8>
            rc = f2(rc);
 8006706:	201b      	movs	r0, #27
            t0 = s_box(t1) ^ rc;
 8006708:	9b01      	ldr	r3, [sp, #4]
 800670a:	9a04      	ldr	r2, [sp, #16]
 800670c:	5cfb      	ldrb	r3, [r7, r3]
 800670e:	4053      	eors	r3, r2
            t1 = s_box(t2);
 8006710:	9a02      	ldr	r2, [sp, #8]
 8006712:	5cba      	ldrb	r2, [r7, r2]
 8006714:	9201      	str	r2, [sp, #4]
            t2 = s_box(t3);
 8006716:	9a03      	ldr	r2, [sp, #12]
 8006718:	5cba      	ldrb	r2, [r7, r2]
 800671a:	9202      	str	r2, [sp, #8]
            t3 = s_box(tt);
 800671c:	9a00      	ldr	r2, [sp, #0]
            t0 = s_box(t1) ^ rc;
 800671e:	9300      	str	r3, [sp, #0]
            t3 = s_box(tt);
 8006720:	5cba      	ldrb	r2, [r7, r2]
 8006722:	9203      	str	r2, [sp, #12]
            rc = f2(rc);
 8006724:	9a04      	ldr	r2, [sp, #16]
 8006726:	09d1      	lsrs	r1, r2, #7
 8006728:	4341      	muls	r1, r0
 800672a:	0052      	lsls	r2, r2, #1
 800672c:	b2d2      	uxtb	r2, r2
 800672e:	4051      	eors	r1, r2
 8006730:	9104      	str	r1, [sp, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8006732:	1bab      	subs	r3, r5, r6
 8006734:	b2db      	uxtb	r3, r3
 8006736:	5ce2      	ldrb	r2, [r4, r3]
 8006738:	9900      	ldr	r1, [sp, #0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800673a:	18e3      	adds	r3, r4, r3
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800673c:	4051      	eors	r1, r2
 800673e:	5561      	strb	r1, [r4, r5]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8006740:	785a      	ldrb	r2, [r3, #1]
 8006742:	9801      	ldr	r0, [sp, #4]
 8006744:	1961      	adds	r1, r4, r5
 8006746:	4050      	eors	r0, r2
 8006748:	7048      	strb	r0, [r1, #1]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800674a:	789a      	ldrb	r2, [r3, #2]
 800674c:	9802      	ldr	r0, [sp, #8]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800674e:	3504      	adds	r5, #4
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8006750:	4050      	eors	r0, r2
 8006752:	7088      	strb	r0, [r1, #2]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8006754:	78db      	ldrb	r3, [r3, #3]
 8006756:	9a03      	ldr	r2, [sp, #12]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006758:	b2ed      	uxtb	r5, r5
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800675a:	405a      	eors	r2, r3
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800675c:	9b05      	ldr	r3, [sp, #20]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800675e:	70ca      	strb	r2, [r1, #3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8006760:	42ab      	cmp	r3, r5
 8006762:	d8bc      	bhi.n	80066de <lorawan_aes_set_key+0x4e>
    return 0;
 8006764:	2000      	movs	r0, #0
 8006766:	e7a4      	b.n	80066b2 <lorawan_aes_set_key+0x22>
        else if( keylen > 24 && cc % keylen == 16 )
 8006768:	2e18      	cmp	r6, #24
 800676a:	d9e2      	bls.n	8006732 <lorawan_aes_set_key+0xa2>
 800676c:	2910      	cmp	r1, #16
 800676e:	d1e0      	bne.n	8006732 <lorawan_aes_set_key+0xa2>
            t0 = s_box(t0);
 8006770:	9b00      	ldr	r3, [sp, #0]
 8006772:	5cfb      	ldrb	r3, [r7, r3]
 8006774:	9300      	str	r3, [sp, #0]
            t1 = s_box(t1);
 8006776:	9b01      	ldr	r3, [sp, #4]
 8006778:	5cfb      	ldrb	r3, [r7, r3]
 800677a:	9301      	str	r3, [sp, #4]
            t2 = s_box(t2);
 800677c:	9b02      	ldr	r3, [sp, #8]
 800677e:	5cfb      	ldrb	r3, [r7, r3]
 8006780:	9302      	str	r3, [sp, #8]
            t3 = s_box(t3);
 8006782:	9b03      	ldr	r3, [sp, #12]
 8006784:	5cfb      	ldrb	r3, [r7, r3]
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	e7d3      	b.n	8006732 <lorawan_aes_set_key+0xa2>
 800678a:	46c0      	nop			; (mov r8, r8)
 800678c:	00010101 	.word	0x00010101
 8006790:	0800f3ad 	.word	0x0800f3ad

08006794 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 8006794:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( ctx->rnd )
 8006796:	0014      	movs	r4, r2
{
 8006798:	b0a7      	sub	sp, #156	; 0x9c
 800679a:	0016      	movs	r6, r2
 800679c:	9121      	str	r1, [sp, #132]	; 0x84
    if( ctx->rnd )
 800679e:	32f0      	adds	r2, #240	; 0xf0
 80067a0:	7812      	ldrb	r2, [r2, #0]
{
 80067a2:	0003      	movs	r3, r0
    if( ctx->rnd )
 80067a4:	3410      	adds	r4, #16
#endif
        shift_sub_rows( s1 );
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
    }
    else
        return ( uint8_t )-1;
 80067a6:	20ff      	movs	r0, #255	; 0xff
    if( ctx->rnd )
 80067a8:	9201      	str	r2, [sp, #4]
 80067aa:	2a00      	cmp	r2, #0
 80067ac:	d100      	bne.n	80067b0 <lorawan_aes_encrypt+0x1c>
 80067ae:	e08d      	b.n	80068cc <lorawan_aes_encrypt+0x138>
        copy_and_key( s1, in, ctx->ksch );
 80067b0:	0019      	movs	r1, r3
 80067b2:	0032      	movs	r2, r6
 80067b4:	a822      	add	r0, sp, #136	; 0x88
 80067b6:	f7ff ff28 	bl	800660a <copy_and_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 80067ba:	2301      	movs	r3, #1
 80067bc:	9403      	str	r4, [sp, #12]
 80067be:	9302      	str	r3, [sp, #8]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80067c0:	9b03      	ldr	r3, [sp, #12]
 80067c2:	9320      	str	r3, [sp, #128]	; 0x80
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80067c4:	ab22      	add	r3, sp, #136	; 0x88
 80067c6:	781b      	ldrb	r3, [r3, #0]
 80067c8:	9304      	str	r3, [sp, #16]
 80067ca:	ab22      	add	r3, sp, #136	; 0x88
 80067cc:	795b      	ldrb	r3, [r3, #5]
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	ab22      	add	r3, sp, #136	; 0x88
 80067d2:	7a9f      	ldrb	r7, [r3, #10]
 80067d4:	4b92      	ldr	r3, [pc, #584]	; (8006a20 <lorawan_aes_encrypt+0x28c>)
 80067d6:	5dda      	ldrb	r2, [r3, r7]
 80067d8:	9206      	str	r2, [sp, #24]
 80067da:	aa22      	add	r2, sp, #136	; 0x88
 80067dc:	7bd2      	ldrb	r2, [r2, #15]
 80067de:	9207      	str	r2, [sp, #28]
 80067e0:	5c9a      	ldrb	r2, [r3, r2]
 80067e2:	9208      	str	r2, [sp, #32]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80067e4:	9a04      	ldr	r2, [sp, #16]
 80067e6:	5c9c      	ldrb	r4, [r3, r2]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80067e8:	9a05      	ldr	r2, [sp, #20]
 80067ea:	5c98      	ldrb	r0, [r3, r2]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 80067ec:	aa22      	add	r2, sp, #136	; 0x88
 80067ee:	7912      	ldrb	r2, [r2, #4]
 80067f0:	9209      	str	r2, [sp, #36]	; 0x24
 80067f2:	aa22      	add	r2, sp, #136	; 0x88
 80067f4:	7a52      	ldrb	r2, [r2, #9]
 80067f6:	920a      	str	r2, [sp, #40]	; 0x28
 80067f8:	aa22      	add	r2, sp, #136	; 0x88
 80067fa:	7b92      	ldrb	r2, [r2, #14]
 80067fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80067fe:	5c9a      	ldrb	r2, [r3, r2]
 8006800:	920c      	str	r2, [sp, #48]	; 0x30
 8006802:	aa22      	add	r2, sp, #136	; 0x88
 8006804:	78d2      	ldrb	r2, [r2, #3]
 8006806:	920d      	str	r2, [sp, #52]	; 0x34
 8006808:	5c9a      	ldrb	r2, [r3, r2]
 800680a:	4694      	mov	ip, r2
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800680c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800680e:	5c9a      	ldrb	r2, [r3, r2]
 8006810:	920e      	str	r2, [sp, #56]	; 0x38
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006812:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006814:	5c9a      	ldrb	r2, [r3, r2]
 8006816:	920f      	str	r2, [sp, #60]	; 0x3c
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006818:	aa22      	add	r2, sp, #136	; 0x88
 800681a:	7a12      	ldrb	r2, [r2, #8]
 800681c:	9210      	str	r2, [sp, #64]	; 0x40
 800681e:	aa22      	add	r2, sp, #136	; 0x88
 8006820:	7b52      	ldrb	r2, [r2, #13]
 8006822:	9211      	str	r2, [sp, #68]	; 0x44
 8006824:	aa22      	add	r2, sp, #136	; 0x88
 8006826:	7892      	ldrb	r2, [r2, #2]
 8006828:	9212      	str	r2, [sp, #72]	; 0x48
 800682a:	5c9a      	ldrb	r2, [r3, r2]
 800682c:	9213      	str	r2, [sp, #76]	; 0x4c
 800682e:	aa22      	add	r2, sp, #136	; 0x88
 8006830:	79d2      	ldrb	r2, [r2, #7]
 8006832:	9214      	str	r2, [sp, #80]	; 0x50
 8006834:	5c9a      	ldrb	r2, [r3, r2]
 8006836:	9215      	str	r2, [sp, #84]	; 0x54
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8006838:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800683a:	5c9a      	ldrb	r2, [r3, r2]
 800683c:	9216      	str	r2, [sp, #88]	; 0x58
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800683e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006840:	5c9a      	ldrb	r2, [r3, r2]
 8006842:	9217      	str	r2, [sp, #92]	; 0x5c
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8006844:	aa22      	add	r2, sp, #136	; 0x88
 8006846:	7b12      	ldrb	r2, [r2, #12]
 8006848:	9218      	str	r2, [sp, #96]	; 0x60
 800684a:	aa22      	add	r2, sp, #136	; 0x88
 800684c:	7852      	ldrb	r2, [r2, #1]
 800684e:	9219      	str	r2, [sp, #100]	; 0x64
 8006850:	aa22      	add	r2, sp, #136	; 0x88
 8006852:	7992      	ldrb	r2, [r2, #6]
 8006854:	921a      	str	r2, [sp, #104]	; 0x68
 8006856:	5c9a      	ldrb	r2, [r3, r2]
 8006858:	921b      	str	r2, [sp, #108]	; 0x6c
 800685a:	aa22      	add	r2, sp, #136	; 0x88
 800685c:	7ad2      	ldrb	r2, [r2, #11]
 800685e:	921c      	str	r2, [sp, #112]	; 0x70
 8006860:	5c9a      	ldrb	r2, [r3, r2]
 8006862:	921d      	str	r2, [sp, #116]	; 0x74
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8006864:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006866:	5c9a      	ldrb	r2, [r3, r2]
 8006868:	921e      	str	r2, [sp, #120]	; 0x78
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800686a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800686c:	5c9b      	ldrb	r3, [r3, r2]
        for( r = 1 ; r < ctx->rnd ; ++r )
 800686e:	9a02      	ldr	r2, [sp, #8]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8006870:	931f      	str	r3, [sp, #124]	; 0x7c
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006872:	9b03      	ldr	r3, [sp, #12]
 8006874:	3310      	adds	r3, #16
 8006876:	9303      	str	r3, [sp, #12]
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	4293      	cmp	r3, r2
 800687c:	d128      	bne.n	80068d0 <lorawan_aes_encrypt+0x13c>
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800687e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006880:	ab22      	add	r3, sp, #136	; 0x88
 8006882:	711a      	strb	r2, [r3, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006884:	9a16      	ldr	r2, [sp, #88]	; 0x58
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006886:	7058      	strb	r0, [r3, #1]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8006888:	721a      	strb	r2, [r3, #8]
 800688a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800688c:	701c      	strb	r4, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800688e:	731a      	strb	r2, [r3, #12]
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006890:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006892:	9821      	ldr	r0, [sp, #132]	; 0x84
    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8006894:	715a      	strb	r2, [r3, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8006896:	9a17      	ldr	r2, [sp, #92]	; 0x5c
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8006898:	a922      	add	r1, sp, #136	; 0x88
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800689a:	725a      	strb	r2, [r3, #9]
 800689c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800689e:	735a      	strb	r2, [r3, #13]
    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 80068a0:	9a06      	ldr	r2, [sp, #24]
 80068a2:	709a      	strb	r2, [r3, #2]
 80068a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80068a6:	729a      	strb	r2, [r3, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 80068a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80068aa:	719a      	strb	r2, [r3, #6]
 80068ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80068ae:	739a      	strb	r2, [r3, #14]
    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 80068b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068b2:	73da      	strb	r2, [r3, #15]
 80068b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80068b6:	72da      	strb	r2, [r3, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 80068b8:	4662      	mov	r2, ip
 80068ba:	71da      	strb	r2, [r3, #7]
 80068bc:	9a08      	ldr	r2, [sp, #32]
 80068be:	70da      	strb	r2, [r3, #3]
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 80068c0:	9b01      	ldr	r3, [sp, #4]
 80068c2:	011a      	lsls	r2, r3, #4
 80068c4:	18b2      	adds	r2, r6, r2
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 80068c6:	f7ff fea0 	bl	800660a <copy_and_key>
    return 0;
 80068ca:	2000      	movs	r0, #0
}
 80068cc:	b027      	add	sp, #156	; 0x9c
 80068ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 80068d0:	4b54      	ldr	r3, [pc, #336]	; (8006a24 <lorawan_aes_encrypt+0x290>)
 80068d2:	9d04      	ldr	r5, [sp, #16]
 80068d4:	9908      	ldr	r1, [sp, #32]
 80068d6:	9a06      	ldr	r2, [sp, #24]
 80068d8:	5d5d      	ldrb	r5, [r3, r5]
 80068da:	404a      	eors	r2, r1
 80068dc:	4055      	eors	r5, r2
 80068de:	9905      	ldr	r1, [sp, #20]
 80068e0:	4a51      	ldr	r2, [pc, #324]	; (8006a28 <lorawan_aes_encrypt+0x294>)
 80068e2:	5c51      	ldrb	r1, [r2, r1]
 80068e4:	404d      	eors	r5, r1
 80068e6:	a922      	add	r1, sp, #136	; 0x88
 80068e8:	700d      	strb	r5, [r1, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 80068ea:	9d05      	ldr	r5, [sp, #20]
 80068ec:	9908      	ldr	r1, [sp, #32]
 80068ee:	5d5d      	ldrb	r5, [r3, r5]
 80068f0:	4061      	eors	r1, r4
 80068f2:	4069      	eors	r1, r5
 80068f4:	5dd5      	ldrb	r5, [r2, r7]
 80068f6:	4069      	eors	r1, r5
 80068f8:	ad22      	add	r5, sp, #136	; 0x88
 80068fa:	7069      	strb	r1, [r5, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 80068fc:	0021      	movs	r1, r4
 80068fe:	5ddc      	ldrb	r4, [r3, r7]
 8006900:	4041      	eors	r1, r0
 8006902:	404c      	eors	r4, r1
 8006904:	9907      	ldr	r1, [sp, #28]
 8006906:	5c51      	ldrb	r1, [r2, r1]
 8006908:	404c      	eors	r4, r1
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800690a:	9906      	ldr	r1, [sp, #24]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800690c:	70ac      	strb	r4, [r5, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800690e:	4041      	eors	r1, r0
 8006910:	0008      	movs	r0, r1
 8006912:	9904      	ldr	r1, [sp, #16]
 8006914:	5c51      	ldrb	r1, [r2, r1]
 8006916:	4041      	eors	r1, r0
 8006918:	9807      	ldr	r0, [sp, #28]
 800691a:	5c18      	ldrb	r0, [r3, r0]
 800691c:	4041      	eors	r1, r0
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800691e:	4660      	mov	r0, ip
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8006920:	70e9      	strb	r1, [r5, #3]
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006922:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006924:	4041      	eors	r1, r0
 8006926:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006928:	5c18      	ldrb	r0, [r3, r0]
 800692a:	4041      	eors	r1, r0
 800692c:	980a      	ldr	r0, [sp, #40]	; 0x28
 800692e:	5c10      	ldrb	r0, [r2, r0]
 8006930:	4041      	eors	r1, r0
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006932:	4660      	mov	r0, ip
    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8006934:	7129      	strb	r1, [r5, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8006936:	990e      	ldr	r1, [sp, #56]	; 0x38
 8006938:	4048      	eors	r0, r1
 800693a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800693c:	5c59      	ldrb	r1, [r3, r1]
 800693e:	4041      	eors	r1, r0
 8006940:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006942:	5c10      	ldrb	r0, [r2, r0]
 8006944:	4041      	eors	r1, r0
 8006946:	7169      	strb	r1, [r5, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8006948:	980e      	ldr	r0, [sp, #56]	; 0x38
 800694a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800694c:	4048      	eors	r0, r1
 800694e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006950:	5c59      	ldrb	r1, [r3, r1]
 8006952:	4041      	eors	r1, r0
 8006954:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006956:	5c10      	ldrb	r0, [r2, r0]
 8006958:	4041      	eors	r1, r0
 800695a:	71a9      	strb	r1, [r5, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800695c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800695e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006960:	4041      	eors	r1, r0
 8006962:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006964:	5c10      	ldrb	r0, [r2, r0]
 8006966:	4048      	eors	r0, r1
 8006968:	990d      	ldr	r1, [sp, #52]	; 0x34
 800696a:	5c59      	ldrb	r1, [r3, r1]
 800696c:	4048      	eors	r0, r1
 800696e:	71e8      	strb	r0, [r5, #7]
    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8006970:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006972:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006974:	4041      	eors	r1, r0
 8006976:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006978:	5c18      	ldrb	r0, [r3, r0]
 800697a:	4041      	eors	r1, r0
 800697c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800697e:	5c10      	ldrb	r0, [r2, r0]
 8006980:	4041      	eors	r1, r0
 8006982:	7229      	strb	r1, [r5, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8006984:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006986:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006988:	4048      	eors	r0, r1
 800698a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800698c:	5c59      	ldrb	r1, [r3, r1]
 800698e:	4041      	eors	r1, r0
 8006990:	9812      	ldr	r0, [sp, #72]	; 0x48
 8006992:	5c10      	ldrb	r0, [r2, r0]
 8006994:	4041      	eors	r1, r0
 8006996:	7269      	strb	r1, [r5, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8006998:	9816      	ldr	r0, [sp, #88]	; 0x58
 800699a:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800699c:	4048      	eors	r0, r1
 800699e:	9912      	ldr	r1, [sp, #72]	; 0x48
 80069a0:	5c59      	ldrb	r1, [r3, r1]
 80069a2:	4041      	eors	r1, r0
 80069a4:	9814      	ldr	r0, [sp, #80]	; 0x50
 80069a6:	5c10      	ldrb	r0, [r2, r0]
 80069a8:	4041      	eors	r1, r0
 80069aa:	72a9      	strb	r1, [r5, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 80069ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80069ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80069b0:	4041      	eors	r1, r0
 80069b2:	9810      	ldr	r0, [sp, #64]	; 0x40
 80069b4:	5c10      	ldrb	r0, [r2, r0]
 80069b6:	4048      	eors	r0, r1
 80069b8:	9914      	ldr	r1, [sp, #80]	; 0x50
 80069ba:	5c59      	ldrb	r1, [r3, r1]
 80069bc:	4048      	eors	r0, r1
 80069be:	72e8      	strb	r0, [r5, #11]
    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 80069c0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 80069c2:	981d      	ldr	r0, [sp, #116]	; 0x74
 80069c4:	4041      	eors	r1, r0
 80069c6:	9818      	ldr	r0, [sp, #96]	; 0x60
 80069c8:	5c18      	ldrb	r0, [r3, r0]
 80069ca:	4041      	eors	r1, r0
 80069cc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80069ce:	5c10      	ldrb	r0, [r2, r0]
 80069d0:	4041      	eors	r1, r0
 80069d2:	7329      	strb	r1, [r5, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 80069d4:	981d      	ldr	r0, [sp, #116]	; 0x74
 80069d6:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069d8:	4048      	eors	r0, r1
 80069da:	9919      	ldr	r1, [sp, #100]	; 0x64
 80069dc:	5c59      	ldrb	r1, [r3, r1]
 80069de:	4041      	eors	r1, r0
 80069e0:	981a      	ldr	r0, [sp, #104]	; 0x68
 80069e2:	5c10      	ldrb	r0, [r2, r0]
 80069e4:	4041      	eors	r1, r0
 80069e6:	7369      	strb	r1, [r5, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 80069e8:	981e      	ldr	r0, [sp, #120]	; 0x78
 80069ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80069ec:	4048      	eors	r0, r1
 80069ee:	991a      	ldr	r1, [sp, #104]	; 0x68
 80069f0:	5c59      	ldrb	r1, [r3, r1]
 80069f2:	4041      	eors	r1, r0
 80069f4:	981c      	ldr	r0, [sp, #112]	; 0x70
 80069f6:	5c10      	ldrb	r0, [r2, r0]
 80069f8:	4041      	eors	r1, r0
 80069fa:	73a9      	strb	r1, [r5, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 80069fc:	981f      	ldr	r0, [sp, #124]	; 0x7c
 80069fe:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8006a00:	4041      	eors	r1, r0
 8006a02:	9818      	ldr	r0, [sp, #96]	; 0x60
 8006a04:	5c12      	ldrb	r2, [r2, r0]
    xor_block(d, k);
 8006a06:	0028      	movs	r0, r5
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8006a08:	4051      	eors	r1, r2
 8006a0a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006a0c:	5c9b      	ldrb	r3, [r3, r2]
 8006a0e:	4059      	eors	r1, r3
 8006a10:	73e9      	strb	r1, [r5, #15]
    xor_block(d, k);
 8006a12:	9920      	ldr	r1, [sp, #128]	; 0x80
 8006a14:	f7ff fdb8 	bl	8006588 <xor_block>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8006a18:	9b02      	ldr	r3, [sp, #8]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	e6ce      	b.n	80067be <lorawan_aes_encrypt+0x2a>
 8006a20:	0800f3ad 	.word	0x0800f3ad
 8006a24:	0800f2ad 	.word	0x0800f2ad
 8006a28:	0800f1ad 	.word	0x0800f1ad

08006a2c <SecureElementGetKeyByID>:
{
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006a2c:	4b0a      	ldr	r3, [pc, #40]	; (8006a58 <SecureElementGetKeyByID+0x2c>)
{
 8006a2e:	b5f0      	push	{r4, r5, r6, r7, lr}
        if (SeNvm->KeyList[i].KeyID == keyID)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	2511      	movs	r5, #17
 8006a34:	0016      	movs	r6, r2
 8006a36:	2300      	movs	r3, #0
 8006a38:	3610      	adds	r6, #16
 8006a3a:	002c      	movs	r4, r5
 8006a3c:	435c      	muls	r4, r3
 8006a3e:	5d37      	ldrb	r7, [r6, r4]
 8006a40:	4287      	cmp	r7, r0
 8006a42:	d104      	bne.n	8006a4e <SecureElementGetKeyByID+0x22>
        {
            *keyItem = &(SeNvm->KeyList[i]);
            return SECURE_ELEMENT_SUCCESS;
 8006a44:	2000      	movs	r0, #0
            *keyItem = &(SeNvm->KeyList[i]);
 8006a46:	3410      	adds	r4, #16
 8006a48:	1912      	adds	r2, r2, r4
 8006a4a:	600a      	str	r2, [r1, #0]
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 8006a4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 8006a4e:	3301      	adds	r3, #1
 8006a50:	2b0a      	cmp	r3, #10
 8006a52:	d1f2      	bne.n	8006a3a <SecureElementGetKeyByID+0xe>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006a54:	2003      	movs	r0, #3
 8006a56:	e7f9      	b.n	8006a4c <SecureElementGetKeyByID+0x20>
 8006a58:	2000054c 	.word	0x2000054c

08006a5c <ComputeCmac>:
{
 8006a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a5e:	b0cf      	sub	sp, #316	; 0x13c
 8006a60:	0006      	movs	r6, r0
 8006a62:	000d      	movs	r5, r1
 8006a64:	0017      	movs	r7, r2
        return SECURE_ELEMENT_ERROR_NPE;
 8006a66:	2402      	movs	r4, #2
{
 8006a68:	9301      	str	r3, [sp, #4]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8006a6a:	2900      	cmp	r1, #0
 8006a6c:	d023      	beq.n	8006ab6 <ComputeCmac+0x5a>
 8006a6e:	9b54      	ldr	r3, [sp, #336]	; 0x150
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d020      	beq.n	8006ab6 <ComputeCmac+0x5a>
    AES_CMAC_Init( aesCmacCtx );
 8006a74:	a808      	add	r0, sp, #32
 8006a76:	f7ff fc55 	bl	8006324 <AES_CMAC_Init>
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8006a7a:	9801      	ldr	r0, [sp, #4]
 8006a7c:	a903      	add	r1, sp, #12
 8006a7e:	f7ff ffd5 	bl	8006a2c <SecureElementGetKeyByID>
 8006a82:	1e04      	subs	r4, r0, #0
    if( retval == SECURE_ELEMENT_SUCCESS )
 8006a84:	d117      	bne.n	8006ab6 <ComputeCmac+0x5a>
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8006a86:	9903      	ldr	r1, [sp, #12]
 8006a88:	a808      	add	r0, sp, #32
 8006a8a:	3101      	adds	r1, #1
 8006a8c:	f7ff fc5a 	bl	8006344 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8006a90:	2e00      	cmp	r6, #0
 8006a92:	d004      	beq.n	8006a9e <ComputeCmac+0x42>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 8006a94:	2210      	movs	r2, #16
 8006a96:	0031      	movs	r1, r6
 8006a98:	a808      	add	r0, sp, #32
 8006a9a:	f7ff fc5a 	bl	8006352 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8006a9e:	003a      	movs	r2, r7
 8006aa0:	0029      	movs	r1, r5
 8006aa2:	a808      	add	r0, sp, #32
 8006aa4:	f7ff fc55 	bl	8006352 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8006aa8:	a908      	add	r1, sp, #32
 8006aaa:	a804      	add	r0, sp, #16
 8006aac:	f7ff fcc1 	bl	8006432 <AES_CMAC_Final>
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 8006ab0:	9b04      	ldr	r3, [sp, #16]
 8006ab2:	9a54      	ldr	r2, [sp, #336]	; 0x150
 8006ab4:	6013      	str	r3, [r2, #0]
}
 8006ab6:	0020      	movs	r0, r4
 8006ab8:	b04f      	add	sp, #316	; 0x13c
 8006aba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006abc <PrintKey>:
{
 8006abc:	b510      	push	{r4, lr}
 8006abe:	b092      	sub	sp, #72	; 0x48
    retval = SecureElementGetKeyByID(key, &keyItem);
 8006ac0:	a911      	add	r1, sp, #68	; 0x44
{
 8006ac2:	0004      	movs	r4, r0
    retval = SecureElementGetKeyByID(key, &keyItem);
 8006ac4:	f7ff ffb2 	bl	8006a2c <SecureElementGetKeyByID>
 8006ac8:	1e01      	subs	r1, r0, #0
    if (retval == SECURE_ELEMENT_SUCCESS)
 8006aca:	d133      	bne.n	8006b34 <PrintKey+0x78>
        if (key == APP_KEY)
 8006acc:	2c02      	cmp	r4, #2
 8006ace:	d033      	beq.n	8006b38 <PrintKey+0x7c>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8006ad0:	4b1b      	ldr	r3, [pc, #108]	; (8006b40 <PrintKey+0x84>)
 8006ad2:	2c03      	cmp	r4, #3
 8006ad4:	d003      	beq.n	8006ade <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 8006ad6:	4b1b      	ldr	r3, [pc, #108]	; (8006b44 <PrintKey+0x88>)
 8006ad8:	2c01      	cmp	r4, #1
 8006ada:	d100      	bne.n	8006ade <PrintKey+0x22>
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 8006adc:	4b1a      	ldr	r3, [pc, #104]	; (8006b48 <PrintKey+0x8c>)
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 8006ade:	000a      	movs	r2, r1
 8006ae0:	2002      	movs	r0, #2
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8006ae2:	f007 f83b 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006ae6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006ae8:	4b18      	ldr	r3, [pc, #96]	; (8006b4c <PrintKey+0x90>)
 8006aea:	7c11      	ldrb	r1, [r2, #16]
 8006aec:	2002      	movs	r0, #2
 8006aee:	910f      	str	r1, [sp, #60]	; 0x3c
 8006af0:	7bd1      	ldrb	r1, [r2, #15]
 8006af2:	910e      	str	r1, [sp, #56]	; 0x38
 8006af4:	7b91      	ldrb	r1, [r2, #14]
 8006af6:	910d      	str	r1, [sp, #52]	; 0x34
 8006af8:	7b51      	ldrb	r1, [r2, #13]
 8006afa:	910c      	str	r1, [sp, #48]	; 0x30
 8006afc:	7b11      	ldrb	r1, [r2, #12]
 8006afe:	910b      	str	r1, [sp, #44]	; 0x2c
 8006b00:	7ad1      	ldrb	r1, [r2, #11]
 8006b02:	910a      	str	r1, [sp, #40]	; 0x28
 8006b04:	7a91      	ldrb	r1, [r2, #10]
 8006b06:	9109      	str	r1, [sp, #36]	; 0x24
 8006b08:	7a51      	ldrb	r1, [r2, #9]
 8006b0a:	9108      	str	r1, [sp, #32]
 8006b0c:	7a11      	ldrb	r1, [r2, #8]
 8006b0e:	9107      	str	r1, [sp, #28]
 8006b10:	79d1      	ldrb	r1, [r2, #7]
 8006b12:	9106      	str	r1, [sp, #24]
 8006b14:	7991      	ldrb	r1, [r2, #6]
 8006b16:	9105      	str	r1, [sp, #20]
 8006b18:	7951      	ldrb	r1, [r2, #5]
 8006b1a:	9104      	str	r1, [sp, #16]
 8006b1c:	7911      	ldrb	r1, [r2, #4]
 8006b1e:	9103      	str	r1, [sp, #12]
 8006b20:	78d1      	ldrb	r1, [r2, #3]
 8006b22:	9102      	str	r1, [sp, #8]
 8006b24:	7891      	ldrb	r1, [r2, #2]
 8006b26:	9101      	str	r1, [sp, #4]
 8006b28:	7852      	ldrb	r2, [r2, #1]
 8006b2a:	9200      	str	r2, [sp, #0]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	0011      	movs	r1, r2
 8006b30:	f007 f814 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8006b34:	b012      	add	sp, #72	; 0x48
 8006b36:	bd10      	pop	{r4, pc}
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 8006b38:	0002      	movs	r2, r0
 8006b3a:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <PrintKey+0x94>)
 8006b3c:	0020      	movs	r0, r4
 8006b3e:	e7d0      	b.n	8006ae2 <PrintKey+0x26>
 8006b40:	0800f9f0 	.word	0x0800f9f0
 8006b44:	0800f9c6 	.word	0x0800f9c6
 8006b48:	0800f9db 	.word	0x0800f9db
 8006b4c:	0800fa1a 	.word	0x0800fa1a
 8006b50:	0800fa05 	.word	0x0800fa05

08006b54 <SecureElementInit>:
{
 8006b54:	b510      	push	{r4, lr}
 8006b56:	b0b0      	sub	sp, #192	; 0xc0
    SecureElementNvmData_t seNvmInit =
 8006b58:	22b0      	movs	r2, #176	; 0xb0
 8006b5a:	2100      	movs	r1, #0
{
 8006b5c:	0004      	movs	r4, r0
    SecureElementNvmData_t seNvmInit =
 8006b5e:	a804      	add	r0, sp, #16
 8006b60:	f007 fe2e 	bl	800e7c0 <memset>
 8006b64:	2210      	movs	r2, #16
 8006b66:	4921      	ldr	r1, [pc, #132]	; (8006bec <SecureElementInit+0x98>)
 8006b68:	4668      	mov	r0, sp
 8006b6a:	f007 fe6f 	bl	800e84c <memcpy>
 8006b6e:	2011      	movs	r0, #17
 8006b70:	2244      	movs	r2, #68	; 0x44
 8006b72:	491f      	ldr	r1, [pc, #124]	; (8006bf0 <SecureElementInit+0x9c>)
 8006b74:	4468      	add	r0, sp
 8006b76:	f007 fe69 	bl	800e84c <memcpy>
 8006b7a:	2365      	movs	r3, #101	; 0x65
 8006b7c:	227f      	movs	r2, #127	; 0x7f
 8006b7e:	446b      	add	r3, sp
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	2376      	movs	r3, #118	; 0x76
 8006b84:	3201      	adds	r2, #1
 8006b86:	446b      	add	r3, sp
 8006b88:	701a      	strb	r2, [r3, #0]
 8006b8a:	2387      	movs	r3, #135	; 0x87
 8006b8c:	3201      	adds	r2, #1
 8006b8e:	446b      	add	r3, sp
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	ab26      	add	r3, sp, #152	; 0x98
 8006b94:	3201      	adds	r2, #1
 8006b96:	701a      	strb	r2, [r3, #0]
 8006b98:	23a9      	movs	r3, #169	; 0xa9
 8006b9a:	3201      	adds	r2, #1
 8006b9c:	446b      	add	r3, sp
        return SECURE_ELEMENT_ERROR_NPE;
 8006b9e:	2002      	movs	r0, #2
    SecureElementNvmData_t seNvmInit =
 8006ba0:	701a      	strb	r2, [r3, #0]
    if( nvm == NULL )
 8006ba2:	2c00      	cmp	r4, #0
 8006ba4:	d01f      	beq.n	8006be6 <SecureElementInit+0x92>
    SeNvm = nvm;
 8006ba6:	4b13      	ldr	r3, [pc, #76]	; (8006bf4 <SecureElementInit+0xa0>)
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006ba8:	4669      	mov	r1, sp
 8006baa:	0020      	movs	r0, r4
 8006bac:	323d      	adds	r2, #61	; 0x3d
    SeNvm = nvm;
 8006bae:	601c      	str	r4, [r3, #0]
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 8006bb0:	f005 fc46 	bl	800c440 <memcpy1>
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4b10      	ldr	r3, [pc, #64]	; (8006bf8 <SecureElementInit+0xa4>)
 8006bb8:	0011      	movs	r1, r2
 8006bba:	2002      	movs	r0, #2
 8006bbc:	f006 ffce 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	f7ff ff7b 	bl	8006abc <PrintKey>
    PrintKey(NWK_KEY);
 8006bc6:	2001      	movs	r0, #1
 8006bc8:	f7ff ff78 	bl	8006abc <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 8006bcc:	2200      	movs	r2, #0
 8006bce:	4b0b      	ldr	r3, [pc, #44]	; (8006bfc <SecureElementInit+0xa8>)
 8006bd0:	0011      	movs	r1, r2
 8006bd2:	2002      	movs	r0, #2
 8006bd4:	f006 ffc2 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 8006bd8:	2003      	movs	r0, #3
 8006bda:	f7ff ff6f 	bl	8006abc <PrintKey>
    PrintKey(NWK_S_KEY);
 8006bde:	2002      	movs	r0, #2
 8006be0:	f7ff ff6c 	bl	8006abc <PrintKey>
    return SECURE_ELEMENT_SUCCESS;
 8006be4:	2000      	movs	r0, #0
}
 8006be6:	b030      	add	sp, #192	; 0xc0
 8006be8:	bd10      	pop	{r4, pc}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	0800fa96 	.word	0x0800fa96
 8006bf0:	0800faa7 	.word	0x0800faa7
 8006bf4:	2000054c 	.word	0x2000054c
 8006bf8:	0800fa6c 	.word	0x0800fa6c
 8006bfc:	0800fa81 	.word	0x0800fa81

08006c00 <SecureElementComputeAesCmac>:
#endif /* LORAWAN_KMS */
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 8006c00:	b513      	push	{r0, r1, r4, lr}
 8006c02:	0004      	movs	r4, r0
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006c04:	2003      	movs	r0, #3
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 8006c06:	2b7e      	cmp	r3, #126	; 0x7e
 8006c08:	d804      	bhi.n	8006c14 <SecureElementComputeAesCmac+0x14>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8006c0a:	9804      	ldr	r0, [sp, #16]
 8006c0c:	9000      	str	r0, [sp, #0]
 8006c0e:	0020      	movs	r0, r4
 8006c10:	f7ff ff24 	bl	8006a5c <ComputeCmac>
}
 8006c14:	bd16      	pop	{r1, r2, r4, pc}

08006c16 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 8006c16:	b530      	push	{r4, r5, lr}
 8006c18:	0005      	movs	r5, r0
 8006c1a:	0014      	movs	r4, r2
    if( buffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006c1c:	2002      	movs	r0, #2
{
 8006c1e:	b085      	sub	sp, #20
    if( buffer == NULL )
 8006c20:	2d00      	cmp	r5, #0
 8006c22:	d00e      	beq.n	8006c42 <SecureElementVerifyAesCmac+0x2c>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 8006c24:	2000      	movs	r0, #0
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8006c26:	aa03      	add	r2, sp, #12
 8006c28:	9200      	str	r2, [sp, #0]
 8006c2a:	000a      	movs	r2, r1
 8006c2c:	0029      	movs	r1, r5
    uint32_t              compCmac = 0;
 8006c2e:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 8006c30:	f7ff ff14 	bl	8006a5c <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006c34:	2800      	cmp	r0, #0
 8006c36:	d104      	bne.n	8006c42 <SecureElementVerifyAesCmac+0x2c>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 8006c38:	9803      	ldr	r0, [sp, #12]
 8006c3a:	1b00      	subs	r0, r0, r4
 8006c3c:	1e43      	subs	r3, r0, #1
 8006c3e:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 8006c40:	b2c0      	uxtb	r0, r0
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 8006c42:	b005      	add	sp, #20
 8006c44:	bd30      	pop	{r4, r5, pc}

08006c46 <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 8006c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c48:	b0c1      	sub	sp, #260	; 0x104
 8006c4a:	000e      	movs	r6, r1
 8006c4c:	0015      	movs	r5, r2
 8006c4e:	001f      	movs	r7, r3
    if( buffer == NULL || encBuffer == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006c50:	2402      	movs	r4, #2
{
 8006c52:	9001      	str	r0, [sp, #4]
    if( buffer == NULL || encBuffer == NULL )
 8006c54:	2800      	cmp	r0, #0
 8006c56:	d01b      	beq.n	8006c90 <SecureElementAesEncrypt+0x4a>
 8006c58:	2f00      	cmp	r7, #0
 8006c5a:	d019      	beq.n	8006c90 <SecureElementAesEncrypt+0x4a>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 8006c5c:	230f      	movs	r3, #15
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8006c5e:	3403      	adds	r4, #3
    if( ( size % 16 ) != 0 )
 8006c60:	4019      	ands	r1, r3
 8006c62:	421e      	tst	r6, r3
 8006c64:	d114      	bne.n	8006c90 <SecureElementAesEncrypt+0x4a>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 8006c66:	22f0      	movs	r2, #240	; 0xf0
 8006c68:	a803      	add	r0, sp, #12
 8006c6a:	f005 fbfe 	bl	800c46a <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 8006c6e:	0028      	movs	r0, r5
 8006c70:	a902      	add	r1, sp, #8
 8006c72:	f7ff fedb 	bl	8006a2c <SecureElementGetKeyByID>
 8006c76:	1e04      	subs	r4, r0, #0

    if( retval == SECURE_ELEMENT_SUCCESS )
 8006c78:	d10a      	bne.n	8006c90 <SecureElementAesEncrypt+0x4a>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 8006c7a:	9802      	ldr	r0, [sp, #8]
 8006c7c:	2110      	movs	r1, #16
 8006c7e:	3001      	adds	r0, #1
 8006c80:	aa03      	add	r2, sp, #12
 8006c82:	f7ff fd05 	bl	8006690 <lorawan_aes_set_key>

        uint8_t block = 0;

        while( size != 0 )
 8006c86:	0035      	movs	r5, r6
 8006c88:	1b70      	subs	r0, r6, r5
 8006c8a:	b2c0      	uxtb	r0, r0
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	d102      	bne.n	8006c96 <SecureElementAesEncrypt+0x50>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 8006c90:	0020      	movs	r0, r4
 8006c92:	b041      	add	sp, #260	; 0x104
 8006c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8006c96:	9b01      	ldr	r3, [sp, #4]
 8006c98:	1839      	adds	r1, r7, r0
 8006c9a:	aa03      	add	r2, sp, #12
 8006c9c:	1818      	adds	r0, r3, r0
            size  = size - 16;
 8006c9e:	3d10      	subs	r5, #16
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 8006ca0:	f7ff fd78 	bl	8006794 <lorawan_aes_encrypt>
            size  = size - 16;
 8006ca4:	b2ad      	uxth	r5, r5
 8006ca6:	e7ef      	b.n	8006c88 <SecureElementAesEncrypt+0x42>

08006ca8 <SecureElementSetKey.part.0>:
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006caa:	4e19      	ldr	r6, [pc, #100]	; (8006d10 <SecureElementSetKey.part.0+0x68>)
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006cac:	000d      	movs	r5, r1
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006cae:	6832      	ldr	r2, [r6, #0]
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	0014      	movs	r4, r2
 8006cb4:	2111      	movs	r1, #17
SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
 8006cb6:	b085      	sub	sp, #20
        if( SeNvm->KeyList[i].KeyID == keyID )
 8006cb8:	3410      	adds	r4, #16
 8006cba:	000f      	movs	r7, r1
 8006cbc:	435f      	muls	r7, r3
 8006cbe:	5de7      	ldrb	r7, [r4, r7]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	4287      	cmp	r7, r0
 8006cc4:	d120      	bne.n	8006d08 <SecureElementSetKey.part.0+0x60>
            if ( keyID == MC_KEY_0 )
 8006cc6:	4359      	muls	r1, r3
 8006cc8:	000c      	movs	r4, r1
 8006cca:	2880      	cmp	r0, #128	; 0x80
 8006ccc:	d115      	bne.n	8006cfa <SecureElementSetKey.part.0+0x52>
                uint8_t               decryptedKey[16] = { 0 };
 8006cce:	2100      	movs	r1, #0
 8006cd0:	220c      	movs	r2, #12
 8006cd2:	a801      	add	r0, sp, #4
 8006cd4:	9100      	str	r1, [sp, #0]
 8006cd6:	f007 fd73 	bl	800e7c0 <memset>
                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 8006cda:	227f      	movs	r2, #127	; 0x7f
 8006cdc:	2110      	movs	r1, #16
 8006cde:	0028      	movs	r0, r5
 8006ce0:	466b      	mov	r3, sp
 8006ce2:	f7ff ffb0 	bl	8006c46 <SecureElementAesEncrypt>
 8006ce6:	0005      	movs	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8006ce8:	6830      	ldr	r0, [r6, #0]
 8006cea:	2210      	movs	r2, #16
 8006cec:	4669      	mov	r1, sp
 8006cee:	1900      	adds	r0, r0, r4
 8006cf0:	f005 fba6 	bl	800c440 <memcpy1>
}
 8006cf4:	0028      	movs	r0, r5
 8006cf6:	b005      	add	sp, #20
 8006cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8006cfa:	1850      	adds	r0, r2, r1
 8006cfc:	0029      	movs	r1, r5
 8006cfe:	2210      	movs	r2, #16
 8006d00:	f005 fb9e 	bl	800c440 <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8006d04:	2500      	movs	r5, #0
 8006d06:	e7f5      	b.n	8006cf4 <SecureElementSetKey.part.0+0x4c>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8006d08:	2b0a      	cmp	r3, #10
 8006d0a:	d1d6      	bne.n	8006cba <SecureElementSetKey.part.0+0x12>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006d0c:	2503      	movs	r5, #3
 8006d0e:	e7f1      	b.n	8006cf4 <SecureElementSetKey.part.0+0x4c>
 8006d10:	2000054c 	.word	0x2000054c

08006d14 <SecureElementSetKey>:
        return SECURE_ELEMENT_ERROR_NPE;
 8006d14:	2302      	movs	r3, #2
{
 8006d16:	b510      	push	{r4, lr}
    if( key == NULL )
 8006d18:	2900      	cmp	r1, #0
 8006d1a:	d002      	beq.n	8006d22 <SecureElementSetKey+0xe>
 8006d1c:	f7ff ffc4 	bl	8006ca8 <SecureElementSetKey.part.0>
 8006d20:	0003      	movs	r3, r0
}
 8006d22:	0018      	movs	r0, r3
 8006d24:	bd10      	pop	{r4, pc}

08006d26 <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 8006d26:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006d28:	0005      	movs	r5, r0
 8006d2a:	000e      	movs	r6, r1
 8006d2c:	0014      	movs	r4, r2
    if( input == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006d2e:	2002      	movs	r0, #2
    if( input == NULL )
 8006d30:	2d00      	cmp	r5, #0
 8006d32:	d016      	beq.n	8006d62 <SecureElementDeriveAndStoreKey+0x3c>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 8006d34:	2a7f      	cmp	r2, #127	; 0x7f
 8006d36:	d102      	bne.n	8006d3e <SecureElementDeriveAndStoreKey+0x18>
    {
        if( rootKeyID != MC_ROOT_KEY )
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8006d38:	3001      	adds	r0, #1
        if( rootKeyID != MC_ROOT_KEY )
 8006d3a:	2904      	cmp	r1, #4
 8006d3c:	d111      	bne.n	8006d62 <SecureElementDeriveAndStoreKey+0x3c>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 8006d3e:	2100      	movs	r1, #0
 8006d40:	220c      	movs	r2, #12
 8006d42:	a801      	add	r0, sp, #4
 8006d44:	9100      	str	r1, [sp, #0]
 8006d46:	f007 fd3b 	bl	800e7c0 <memset>
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 8006d4a:	466b      	mov	r3, sp
 8006d4c:	0032      	movs	r2, r6
 8006d4e:	2110      	movs	r1, #16
 8006d50:	0028      	movs	r0, r5
 8006d52:	f7ff ff78 	bl	8006c46 <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d103      	bne.n	8006d62 <SecureElementDeriveAndStoreKey+0x3c>
    if( key == NULL )
 8006d5a:	4669      	mov	r1, sp
 8006d5c:	0020      	movs	r0, r4
 8006d5e:	f7ff ffa3 	bl	8006ca8 <SecureElementSetKey.part.0>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 8006d62:	b004      	add	sp, #16
 8006d64:	bd70      	pop	{r4, r5, r6, pc}

08006d66 <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 8006d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d68:	001d      	movs	r5, r3
 8006d6a:	ab06      	add	r3, sp, #24
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006d6c:	2002      	movs	r0, #2
{
 8006d6e:	781f      	ldrb	r7, [r3, #0]
 8006d70:	9e07      	ldr	r6, [sp, #28]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 8006d72:	2d00      	cmp	r5, #0
 8006d74:	d037      	beq.n	8006de6 <SecureElementProcessJoinAccept+0x80>
 8006d76:	2e00      	cmp	r6, #0
 8006d78:	d035      	beq.n	8006de6 <SecureElementProcessJoinAccept+0x80>
 8006d7a:	9b08      	ldr	r3, [sp, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d032      	beq.n	8006de6 <SecureElementProcessJoinAccept+0x80>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8006d80:	3003      	adds	r0, #3
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 8006d82:	2f21      	cmp	r7, #33	; 0x21
 8006d84:	d82f      	bhi.n	8006de6 <SecureElementProcessJoinAccept+0x80>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8006d86:	b2bc      	uxth	r4, r7
 8006d88:	0022      	movs	r2, r4
 8006d8a:	0029      	movs	r1, r5
 8006d8c:	0030      	movs	r0, r6
 8006d8e:	f005 fb57 	bl	800c440 <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8006d92:	1e61      	subs	r1, r4, #1
 8006d94:	1c73      	adds	r3, r6, #1
 8006d96:	2201      	movs	r2, #1
 8006d98:	b289      	uxth	r1, r1
 8006d9a:	1c68      	adds	r0, r5, #1
 8006d9c:	f7ff ff53 	bl	8006c46 <SecureElementAesEncrypt>
 8006da0:	0003      	movs	r3, r0
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8006da2:	2007      	movs	r0, #7
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d11e      	bne.n	8006de6 <SecureElementProcessJoinAccept+0x80>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8006da8:	7af3      	ldrb	r3, [r6, #11]
 8006daa:	9a08      	ldr	r2, [sp, #32]
 8006dac:	40c3      	lsrs	r3, r0
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8006dae:	3803      	subs	r0, #3
    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 8006db0:	7013      	strb	r3, [r2, #0]
    if( *versionMinor == 0 )
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d117      	bne.n	8006de6 <SecureElementProcessJoinAccept+0x80>
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006db6:	19f2      	adds	r2, r6, r7
 8006db8:	1e93      	subs	r3, r2, #2
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006dba:	1e51      	subs	r1, r2, #1
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006dbc:	781b      	ldrb	r3, [r3, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006dbe:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 8006dc0:	041b      	lsls	r3, r3, #16
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006dc2:	0609      	lsls	r1, r1, #24
 8006dc4:	430b      	orrs	r3, r1
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8006dc6:	1f11      	subs	r1, r2, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8006dc8:	3a03      	subs	r2, #3
    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 8006dca:	7809      	ldrb	r1, [r1, #0]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 8006dcc:	7812      	ldrb	r2, [r2, #0]
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	0212      	lsls	r2, r2, #8
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8006dd2:	1f21      	subs	r1, r4, #4
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 8006dd4:	431a      	orrs	r2, r3
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8006dd6:	0030      	movs	r0, r6
 8006dd8:	2301      	movs	r3, #1
 8006dda:	b289      	uxth	r1, r1
 8006ddc:	f7ff ff1b 	bl	8006c16 <SecureElementVerifyAesCmac>
 8006de0:	1e43      	subs	r3, r0, #1
 8006de2:	4198      	sbcs	r0, r3
        return SECURE_ELEMENT_ERROR_NPE;
 8006de4:	b2c0      	uxtb	r0, r0
    }

    return SECURE_ELEMENT_SUCCESS;
}
 8006de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006de8 <SecureElementRandomNumber>:

SecureElementStatus_t SecureElementRandomNumber( uint32_t* randomNum )
{
 8006de8:	b510      	push	{r4, lr}
 8006dea:	0004      	movs	r4, r0
    if( randomNum == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006dec:	2002      	movs	r0, #2
    if( randomNum == NULL )
 8006dee:	2c00      	cmp	r4, #0
 8006df0:	d004      	beq.n	8006dfc <SecureElementRandomNumber+0x14>
    }
    *randomNum = Radio.Random();
 8006df2:	4b03      	ldr	r3, [pc, #12]	; (8006e00 <SecureElementRandomNumber+0x18>)
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	4798      	blx	r3
 8006df8:	6020      	str	r0, [r4, #0]
    return SECURE_ELEMENT_SUCCESS;
 8006dfa:	2000      	movs	r0, #0
}
 8006dfc:	bd10      	pop	{r4, pc}
 8006dfe:	46c0      	nop			; (mov r8, r8)
 8006e00:	0800f64c 	.word	0x0800f64c

08006e04 <SecureElementSetDevEui>:

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 8006e04:	0001      	movs	r1, r0
 8006e06:	b510      	push	{r4, lr}
    if( devEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006e08:	2002      	movs	r0, #2
    if( devEui == NULL )
 8006e0a:	2900      	cmp	r1, #0
 8006e0c:	d005      	beq.n	8006e1a <SecureElementSetDevEui+0x16>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 8006e0e:	4b03      	ldr	r3, [pc, #12]	; (8006e1c <SecureElementSetDevEui+0x18>)
 8006e10:	2208      	movs	r2, #8
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	f005 fb14 	bl	800c440 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8006e18:	2000      	movs	r0, #0
}
 8006e1a:	bd10      	pop	{r4, pc}
 8006e1c:	2000054c 	.word	0x2000054c

08006e20 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
    return SeNvm->DevEui;
 8006e20:	4b01      	ldr	r3, [pc, #4]	; (8006e28 <SecureElementGetDevEui+0x8>)
 8006e22:	6818      	ldr	r0, [r3, #0]
}
 8006e24:	4770      	bx	lr
 8006e26:	46c0      	nop			; (mov r8, r8)
 8006e28:	2000054c 	.word	0x2000054c

08006e2c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 8006e2c:	0001      	movs	r1, r0
 8006e2e:	b510      	push	{r4, lr}
    if( joinEui == NULL )
    {
        return SECURE_ELEMENT_ERROR_NPE;
 8006e30:	2002      	movs	r0, #2
    if( joinEui == NULL )
 8006e32:	2900      	cmp	r1, #0
 8006e34:	d006      	beq.n	8006e44 <SecureElementSetJoinEui+0x18>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 8006e36:	4b04      	ldr	r3, [pc, #16]	; (8006e48 <SecureElementSetJoinEui+0x1c>)
 8006e38:	2208      	movs	r2, #8
 8006e3a:	6818      	ldr	r0, [r3, #0]
 8006e3c:	3008      	adds	r0, #8
 8006e3e:	f005 faff 	bl	800c440 <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8006e42:	2000      	movs	r0, #0
}
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	46c0      	nop			; (mov r8, r8)
 8006e48:	2000054c 	.word	0x2000054c

08006e4c <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
    return SeNvm->JoinEui;
 8006e4c:	4b01      	ldr	r3, [pc, #4]	; (8006e54 <SecureElementGetJoinEui+0x8>)
 8006e4e:	6818      	ldr	r0, [r3, #0]
 8006e50:	3008      	adds	r0, #8
}
 8006e52:	4770      	bx	lr
 8006e54:	2000054c 	.word	0x2000054c

08006e58 <LmHandlerDeviceTimeReq>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 8006e58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 8006e5a:	230a      	movs	r3, #10
 8006e5c:	a801      	add	r0, sp, #4
 8006e5e:	7003      	strb	r3, [r0, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 8006e60:	f002 ffae 	bl	8009dc0 <LoRaMacMlmeRequest>

    if( status == LORAMAC_STATUS_OK )
 8006e64:	1e43      	subs	r3, r0, #1
 8006e66:	4198      	sbcs	r0, r3
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
    }
}
 8006e68:	4240      	negs	r0, r0
 8006e6a:	b007      	add	sp, #28
 8006e6c:	bd00      	pop	{pc}
	...

08006e70 <McpsConfirm>:
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
    TxParams.IsMcpsConfirm = 1;
 8006e70:	2301      	movs	r3, #1
{
 8006e72:	b570      	push	{r4, r5, r6, lr}
    TxParams.IsMcpsConfirm = 1;
 8006e74:	4c10      	ldr	r4, [pc, #64]	; (8006eb8 <McpsConfirm+0x48>)
{
 8006e76:	0005      	movs	r5, r0
    TxParams.IsMcpsConfirm = 1;
 8006e78:	7023      	strb	r3, [r4, #0]
    TxParams.Status = mcpsConfirm->Status;
 8006e7a:	7843      	ldrb	r3, [r0, #1]
 8006e7c:	0026      	movs	r6, r4
 8006e7e:	7063      	strb	r3, [r4, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 8006e80:	7883      	ldrb	r3, [r0, #2]
 8006e82:	361c      	adds	r6, #28
 8006e84:	7123      	strb	r3, [r4, #4]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 8006e86:	68c3      	ldr	r3, [r0, #12]
 8006e88:	60a3      	str	r3, [r4, #8]
    TxParams.TxPower = mcpsConfirm->TxPower;
 8006e8a:	78c3      	ldrb	r3, [r0, #3]
 8006e8c:	7523      	strb	r3, [r4, #20]
    TxParams.Channel = mcpsConfirm->Channel;
 8006e8e:	6903      	ldr	r3, [r0, #16]
 8006e90:	7563      	strb	r3, [r4, #21]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006e92:	7903      	ldrb	r3, [r0, #4]

    LmHandlerCallbacks->OnTxData( &TxParams );
 8006e94:	0020      	movs	r0, r4
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 8006e96:	70e3      	strb	r3, [r4, #3]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8006e98:	69a3      	ldr	r3, [r4, #24]
 8006e9a:	3430      	adds	r4, #48	; 0x30
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	4798      	blx	r3

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
    {
        if( LmHandlerPackages[i] != NULL )
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d004      	beq.n	8006eb0 <McpsConfirm+0x40>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d001      	beq.n	8006eb0 <McpsConfirm+0x40>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 8006eac:	0028      	movs	r0, r5
 8006eae:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8006eb0:	3604      	adds	r6, #4
 8006eb2:	42a6      	cmp	r6, r4
 8006eb4:	d1f4      	bne.n	8006ea0 <McpsConfirm+0x30>
}
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	20000550 	.word	0x20000550

08006ebc <LmHandlerConfigure>:
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006ebc:	4b5b      	ldr	r3, [pc, #364]	; (800702c <LmHandlerConfigure+0x170>)
{
 8006ebe:	b5f0      	push	{r4, r5, r6, r7, lr}
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006ec0:	001f      	movs	r7, r3
 8006ec2:	3730      	adds	r7, #48	; 0x30
{
 8006ec4:	0001      	movs	r1, r0
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006ec6:	2210      	movs	r2, #16
{
 8006ec8:	b0a1      	sub	sp, #132	; 0x84
    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 8006eca:	0038      	movs	r0, r7
 8006ecc:	9309      	str	r3, [sp, #36]	; 0x24
 8006ece:	f006 ff5b 	bl	800dd88 <UTIL_MEM_cpy_8>
    loraInfo = LoraInfo_GetPtr();
 8006ed2:	f7fb f903 	bl	80020dc <LoraInfo_GetPtr>
    if (0U != ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	783a      	ldrb	r2, [r7, #0]
 8006eda:	6841      	ldr	r1, [r0, #4]
 8006edc:	4093      	lsls	r3, r2
 8006ede:	0008      	movs	r0, r1
 8006ee0:	4018      	ands	r0, r3
 8006ee2:	4219      	tst	r1, r3
 8006ee4:	d00a      	beq.n	8006efc <LmHandlerConfigure+0x40>
        if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 8006ee6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006eea:	3140      	adds	r1, #64	; 0x40
 8006eec:	3054      	adds	r0, #84	; 0x54
 8006eee:	f002 fa5f 	bl	80093b0 <LoRaMacInitialization>
 8006ef2:	1e06      	subs	r6, r0, #0
 8006ef4:	d008      	beq.n	8006f08 <LmHandlerConfigure+0x4c>
            return LORAMAC_HANDLER_ERROR;
 8006ef6:	2001      	movs	r0, #1
 8006ef8:	4240      	negs	r0, r0
 8006efa:	e095      	b.n	8007028 <LmHandlerConfigure+0x16c>
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 8006efc:	2201      	movs	r2, #1
 8006efe:	0001      	movs	r1, r0
 8006f00:	4b4b      	ldr	r3, [pc, #300]	; (8007030 <LmHandlerConfigure+0x174>)
 8006f02:	f006 fe2b 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 8006f06:	e7fe      	b.n	8006f06 <LmHandlerConfigure+0x4a>
    nbNvmData = NvmDataMgmtRestore( );
 8006f08:	f000 fcc3 	bl	8007892 <NvmDataMgmtRestore>
    if( nbNvmData > 0 )
 8006f0c:	1e42      	subs	r2, r0, #1
 8006f0e:	4190      	sbcs	r0, r2
 8006f10:	9b09      	ldr	r3, [sp, #36]	; 0x24
    mibReq.Type = MIB_DEV_EUI;
 8006f12:	ad0e      	add	r5, sp, #56	; 0x38
 8006f14:	3364      	adds	r3, #100	; 0x64
    if( nbNvmData > 0 )
 8006f16:	7018      	strb	r0, [r3, #0]
    mibReq.Type = MIB_DEV_EUI;
 8006f18:	2302      	movs	r3, #2
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f1a:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_EUI;
 8006f1c:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f1e:	f002 fc7d 	bl	800981c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 8006f22:	4c44      	ldr	r4, [pc, #272]	; (8007034 <LmHandlerConfigure+0x178>)
 8006f24:	2208      	movs	r2, #8
 8006f26:	0020      	movs	r0, r4
 8006f28:	6869      	ldr	r1, [r5, #4]
 8006f2a:	f005 fa89 	bl	800c440 <memcpy1>
    mibReq.Type = MIB_JOIN_EUI;
 8006f2e:	2303      	movs	r3, #3
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f30:	0028      	movs	r0, r5
    mibReq.Type = MIB_JOIN_EUI;
 8006f32:	702b      	strb	r3, [r5, #0]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8006f34:	f002 fc72 	bl	800981c <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 8006f38:	0020      	movs	r0, r4
 8006f3a:	2208      	movs	r2, #8
 8006f3c:	6869      	ldr	r1, [r5, #4]
 8006f3e:	3008      	adds	r0, #8
 8006f40:	f005 fa7e 	bl	800c440 <memcpy1>
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f46:	699b      	ldr	r3, [r3, #24]
 8006f48:	68db      	ldr	r3, [r3, #12]
 8006f4a:	4798      	blx	r3
    mibReq.Type = MIB_DEV_ADDR;
 8006f4c:	2306      	movs	r3, #6
    CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
 8006f4e:	6160      	str	r0, [r4, #20]
    mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 8006f50:	6068      	str	r0, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006f52:	0028      	movs	r0, r5
    mibReq.Type = MIB_DEV_ADDR;
 8006f54:	702b      	strb	r3, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006f56:	f002 fd03 	bl	8009960 <LoRaMacMibSetRequestConfirm>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006f5a:	79e2      	ldrb	r2, [r4, #7]
 8006f5c:	0031      	movs	r1, r6
 8006f5e:	9207      	str	r2, [sp, #28]
 8006f60:	79a2      	ldrb	r2, [r4, #6]
 8006f62:	4b35      	ldr	r3, [pc, #212]	; (8007038 <LmHandlerConfigure+0x17c>)
 8006f64:	9206      	str	r2, [sp, #24]
 8006f66:	7962      	ldrb	r2, [r4, #5]
 8006f68:	2002      	movs	r0, #2
 8006f6a:	9205      	str	r2, [sp, #20]
 8006f6c:	7922      	ldrb	r2, [r4, #4]
 8006f6e:	9204      	str	r2, [sp, #16]
 8006f70:	78e2      	ldrb	r2, [r4, #3]
 8006f72:	9203      	str	r2, [sp, #12]
 8006f74:	78a2      	ldrb	r2, [r4, #2]
 8006f76:	9202      	str	r2, [sp, #8]
 8006f78:	7862      	ldrb	r2, [r4, #1]
 8006f7a:	9201      	str	r2, [sp, #4]
 8006f7c:	7822      	ldrb	r2, [r4, #0]
 8006f7e:	9200      	str	r2, [sp, #0]
 8006f80:	0032      	movs	r2, r6
 8006f82:	f006 fdeb 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:  %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 8006f86:	7be2      	ldrb	r2, [r4, #15]
 8006f88:	0031      	movs	r1, r6
 8006f8a:	9207      	str	r2, [sp, #28]
 8006f8c:	7ba2      	ldrb	r2, [r4, #14]
 8006f8e:	4b2b      	ldr	r3, [pc, #172]	; (800703c <LmHandlerConfigure+0x180>)
 8006f90:	9206      	str	r2, [sp, #24]
 8006f92:	7b62      	ldrb	r2, [r4, #13]
 8006f94:	2002      	movs	r0, #2
 8006f96:	9205      	str	r2, [sp, #20]
 8006f98:	7b22      	ldrb	r2, [r4, #12]
 8006f9a:	9204      	str	r2, [sp, #16]
 8006f9c:	7ae2      	ldrb	r2, [r4, #11]
 8006f9e:	9203      	str	r2, [sp, #12]
 8006fa0:	7aa2      	ldrb	r2, [r4, #10]
 8006fa2:	9202      	str	r2, [sp, #8]
 8006fa4:	7a62      	ldrb	r2, [r4, #9]
 8006fa6:	9201      	str	r2, [sp, #4]
 8006fa8:	7a22      	ldrb	r2, [r4, #8]
 8006faa:	9200      	str	r2, [sp, #0]
 8006fac:	0032      	movs	r2, r6
 8006fae:	f006 fdd5 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006fb2:	7d22      	ldrb	r2, [r4, #20]
 8006fb4:	0031      	movs	r1, r6
 8006fb6:	9203      	str	r2, [sp, #12]
 8006fb8:	7d62      	ldrb	r2, [r4, #21]
 8006fba:	4b21      	ldr	r3, [pc, #132]	; (8007040 <LmHandlerConfigure+0x184>)
 8006fbc:	9202      	str	r2, [sp, #8]
 8006fbe:	7da2      	ldrb	r2, [r4, #22]
 8006fc0:	2002      	movs	r0, #2
 8006fc2:	9201      	str	r2, [sp, #4]
 8006fc4:	7de2      	ldrb	r2, [r4, #23]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006fc6:	240f      	movs	r4, #15
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr: %02X:%02X:%02X:%02X\r\n",
 8006fc8:	9200      	str	r2, [sp, #0]
 8006fca:	0032      	movs	r2, r6
 8006fcc:	f006 fdc6 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006fd0:	2301      	movs	r3, #1
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fd2:	0028      	movs	r0, r5
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8006fd4:	712b      	strb	r3, [r5, #4]
    mibReq.Type = MIB_PUBLIC_NETWORK;
 8006fd6:	702c      	strb	r4, [r5, #0]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fd8:	f002 fcc2 	bl	8009960 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_NET_ID;
 8006fdc:	2305      	movs	r3, #5
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fde:	0028      	movs	r0, r5
    mibReq.Type = MIB_NET_ID;
 8006fe0:	702b      	strb	r3, [r5, #0]
    mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 8006fe2:	606e      	str	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm(&mibReq);
 8006fe4:	f002 fcbc 	bl	8009960 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006fe8:	2310      	movs	r3, #16
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006fea:	0028      	movs	r0, r5
    mibReq.Type = MIB_REPEATER_SUPPORT;
 8006fec:	702b      	strb	r3, [r5, #0]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8006fee:	712e      	strb	r6, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006ff0:	f002 fcb6 	bl	8009960 <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8006ff4:	2304      	movs	r3, #4
 8006ff6:	702b      	strb	r3, [r5, #0]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006ff8:	78bb      	ldrb	r3, [r7, #2]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006ffa:	0028      	movs	r0, r5
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8006ffc:	712b      	strb	r3, [r5, #4]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8006ffe:	f002 fcaf 	bl	8009960 <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007002:	a90c      	add	r1, sp, #48	; 0x30
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007004:	7838      	ldrb	r0, [r7, #0]
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8007006:	700c      	strb	r4, [r1, #0]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8007008:	f004 f86e 	bl	800b0e8 <RegionGetPhyParam>
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800700c:	1e43      	subs	r3, r0, #1
 800700e:	4198      	sbcs	r0, r3
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007010:	2322      	movs	r3, #34	; 0x22
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 8007012:	7178      	strb	r0, [r7, #5]
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8007014:	a817      	add	r0, sp, #92	; 0x5c
 8007016:	7003      	strb	r3, [r0, #0]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 8007018:	3b0e      	subs	r3, #14
 800701a:	6043      	str	r3, [r0, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800701c:	f002 fca0 	bl	8009960 <LoRaMacMibSetRequestConfirm>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8007020:	7978      	ldrb	r0, [r7, #5]
 8007022:	f003 f97d 	bl	800a320 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8007026:	0030      	movs	r0, r6
}
 8007028:	b021      	add	sp, #132	; 0x84
 800702a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800702c:	20000550 	.word	0x20000550
 8007030:	0800faec 	.word	0x0800faec
 8007034:	2000006c 	.word	0x2000006c
 8007038:	0800fb35 	.word	0x0800fb35
 800703c:	0800fb6f 	.word	0x0800fb6f
 8007040:	0800fba9 	.word	0x0800fba9

08007044 <LmHandlerProcess>:
{
 8007044:	b570      	push	{r4, r5, r6, lr}
    LoRaMacProcess( );
 8007046:	f001 fc4b 	bl	80088e0 <LoRaMacProcess>
    }
}

static void LmHandlerPackagesProcess( void )
{
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800704a:	4d0c      	ldr	r5, [pc, #48]	; (800707c <LmHandlerProcess+0x38>)
 800704c:	002c      	movs	r4, r5
 800704e:	3530      	adds	r5, #48	; 0x30
 8007050:	341c      	adds	r4, #28
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00b      	beq.n	8007070 <LmHandlerProcess+0x2c>
 8007058:	691a      	ldr	r2, [r3, #16]
 800705a:	2a00      	cmp	r2, #0
 800705c:	d008      	beq.n	8007070 <LmHandlerProcess+0x2c>
    if (( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ))
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d005      	beq.n	8007070 <LmHandlerProcess+0x2c>
        return LmHandlerPackages[id]->IsInitialized( );
 8007064:	4798      	blx	r3
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8007066:	2800      	cmp	r0, #0
 8007068:	d002      	beq.n	8007070 <LmHandlerProcess+0x2c>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
        {
            LmHandlerPackages[i]->Process( );
 800706a:	6823      	ldr	r3, [r4, #0]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007070:	3404      	adds	r4, #4
 8007072:	42a5      	cmp	r5, r4
 8007074:	d1ed      	bne.n	8007052 <LmHandlerProcess+0xe>
    NvmDataMgmtStore( );
 8007076:	f000 fc0a 	bl	800788e <NvmDataMgmtStore>
}
 800707a:	bd70      	pop	{r4, r5, r6, pc}
 800707c:	20000550 	.word	0x20000550

08007080 <LmHandlerJoinStatus>:
{
 8007080:	b500      	push	{lr}
 8007082:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 8007084:	2301      	movs	r3, #1
 8007086:	466a      	mov	r2, sp
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 8007088:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800708a:	7113      	strb	r3, [r2, #4]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800708c:	f002 fbc6 	bl	800981c <LoRaMacMibGetRequestConfirm>
 8007090:	0003      	movs	r3, r0
        return LORAMAC_HANDLER_RESET;
 8007092:	2000      	movs	r0, #0
    if( status == LORAMAC_STATUS_OK )
 8007094:	4283      	cmp	r3, r0
 8007096:	d104      	bne.n	80070a2 <LmHandlerJoinStatus+0x22>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007098:	466b      	mov	r3, sp
 800709a:	7a18      	ldrb	r0, [r3, #8]
 800709c:	1e43      	subs	r3, r0, #1
 800709e:	4198      	sbcs	r0, r3
            return LORAMAC_HANDLER_RESET;
 80070a0:	b2c0      	uxtb	r0, r0
}
 80070a2:	b00b      	add	sp, #44	; 0x2c
 80070a4:	bd00      	pop	{pc}
	...

080070a8 <LmHandlerRequestClass>:
{
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	b08c      	sub	sp, #48	; 0x30
 80070ac:	0005      	movs	r5, r0
    if (LoRaMacIsBusy() == true)
 80070ae:	f001 fc05 	bl	80088bc <LoRaMacIsBusy>
 80070b2:	1e06      	subs	r6, r0, #0
 80070b4:	d146      	bne.n	8007144 <LmHandlerRequestClass+0x9c>
    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 80070b6:	f7ff ffe3 	bl	8007080 <LmHandlerJoinStatus>
 80070ba:	2801      	cmp	r0, #1
 80070bc:	d145      	bne.n	800714a <LmHandlerRequestClass+0xa2>
    mibReq.Type = MIB_DEVICE_CLASS;
 80070be:	ac03      	add	r4, sp, #12
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80070c0:	0020      	movs	r0, r4
    mibReq.Type = MIB_DEVICE_CLASS;
 80070c2:	7026      	strb	r6, [r4, #0]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 80070c4:	f002 fbaa 	bl	800981c <LoRaMacMibGetRequestConfirm>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	d001      	beq.n	80070d0 <LmHandlerRequestClass+0x28>
        switch( newClass )
 80070cc:	2001      	movs	r0, #1
 80070ce:	e03a      	b.n	8007146 <LmHandlerRequestClass+0x9e>
    currentClass = mibReq.Param.Class;
 80070d0:	7923      	ldrb	r3, [r4, #4]
    if( currentClass != newClass )
 80070d2:	42ab      	cmp	r3, r5
 80070d4:	d102      	bne.n	80070dc <LmHandlerRequestClass+0x34>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80070d6:	2000      	movs	r0, #0
}
 80070d8:	b00c      	add	sp, #48	; 0x30
 80070da:	bd70      	pop	{r4, r5, r6, pc}
        switch( newClass )
 80070dc:	2d01      	cmp	r5, #1
 80070de:	d0f5      	beq.n	80070cc <LmHandlerRequestClass+0x24>
 80070e0:	2d02      	cmp	r5, #2
 80070e2:	d018      	beq.n	8007116 <LmHandlerRequestClass+0x6e>
 80070e4:	2d00      	cmp	r5, #0
 80070e6:	d1f7      	bne.n	80070d8 <LmHandlerRequestClass+0x30>
                if( currentClass != CLASS_A )
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d0f4      	beq.n	80070d6 <LmHandlerRequestClass+0x2e>
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80070ec:	0020      	movs	r0, r4
                    mibReq.Param.Class = newClass;
 80070ee:	7125      	strb	r5, [r4, #4]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80070f0:	f002 fc36 	bl	8009960 <LoRaMacMibSetRequestConfirm>
 80070f4:	1e01      	subs	r1, r0, #0
 80070f6:	d1e9      	bne.n	80070cc <LmHandlerRequestClass+0x24>
    }
}

static void DisplayClassUpdate(DeviceClass_t deviceClass)
{
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 80070f8:	2241      	movs	r2, #65	; 0x41
 80070fa:	4b15      	ldr	r3, [pc, #84]	; (8007150 <LmHandlerRequestClass+0xa8>)
 80070fc:	9200      	str	r2, [sp, #0]
 80070fe:	0002      	movs	r2, r0
 8007100:	2002      	movs	r0, #2
 8007102:	f006 fd2b 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007106:	4b13      	ldr	r3, [pc, #76]	; (8007154 <LmHandlerRequestClass+0xac>)
 8007108:	699b      	ldr	r3, [r3, #24]
 800710a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	d0e2      	beq.n	80070d6 <LmHandlerRequestClass+0x2e>
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007110:	2000      	movs	r0, #0
 8007112:	4798      	blx	r3
 8007114:	e7df      	b.n	80070d6 <LmHandlerRequestClass+0x2e>
                if( currentClass != CLASS_A )
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1d8      	bne.n	80070cc <LmHandlerRequestClass+0x24>
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800711a:	0020      	movs	r0, r4
                    mibReq.Param.Class = newClass;
 800711c:	7125      	strb	r5, [r4, #4]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800711e:	f002 fc1f 	bl	8009960 <LoRaMacMibSetRequestConfirm>
 8007122:	2800      	cmp	r0, #0
 8007124:	d1d2      	bne.n	80070cc <LmHandlerRequestClass+0x24>
    MW_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 8007126:	2243      	movs	r2, #67	; 0x43
 8007128:	0001      	movs	r1, r0
 800712a:	4b09      	ldr	r3, [pc, #36]	; (8007150 <LmHandlerRequestClass+0xa8>)
 800712c:	9200      	str	r2, [sp, #0]
 800712e:	0002      	movs	r2, r0
 8007130:	0028      	movs	r0, r5
 8007132:	f006 fd13 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 8007136:	4b07      	ldr	r3, [pc, #28]	; (8007154 <LmHandlerRequestClass+0xac>)
                            LmHandlerCallbacks->OnClassChange( newClass );
 8007138:	0028      	movs	r0, r5
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800713a:	699b      	ldr	r3, [r3, #24]
 800713c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800713e:	2b00      	cmp	r3, #0
 8007140:	d1e7      	bne.n	8007112 <LmHandlerRequestClass+0x6a>
 8007142:	e7c8      	b.n	80070d6 <LmHandlerRequestClass+0x2e>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8007144:	2002      	movs	r0, #2
        switch( newClass )
 8007146:	4240      	negs	r0, r0
 8007148:	e7c6      	b.n	80070d8 <LmHandlerRequestClass+0x30>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800714a:	2003      	movs	r0, #3
 800714c:	e7fb      	b.n	8007146 <LmHandlerRequestClass+0x9e>
 800714e:	46c0      	nop			; (mov r8, r8)
 8007150:	0800fbcf 	.word	0x0800fbcf
 8007154:	20000550 	.word	0x20000550

08007158 <LmHandlerJoin>:
{
 8007158:	b570      	push	{r4, r5, r6, lr}
 800715a:	b08a      	sub	sp, #40	; 0x28
 800715c:	4e1b      	ldr	r6, [pc, #108]	; (80071cc <LmHandlerJoin+0x74>)
 800715e:	4c1c      	ldr	r4, [pc, #112]	; (80071d0 <LmHandlerJoin+0x78>)
 8007160:	ad01      	add	r5, sp, #4
    if ( mode == ACTIVATION_TYPE_OTAA )
 8007162:	2802      	cmp	r0, #2
 8007164:	d10c      	bne.n	8007180 <LmHandlerJoin+0x28>
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8007166:	76b0      	strb	r0, [r6, #26]
        LoRaMacStart();
 8007168:	f002 faf6 	bl	8009758 <LoRaMacStart>
        mlmeReq.Type = MLME_JOIN;
 800716c:	2301      	movs	r3, #1
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800716e:	3430      	adds	r4, #48	; 0x30
        mlmeReq.Type = MLME_JOIN;
 8007170:	702b      	strb	r3, [r5, #0]
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007172:	78e3      	ldrb	r3, [r4, #3]
        LoRaMacMlmeRequest( &mlmeReq );
 8007174:	0028      	movs	r0, r5
        mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 8007176:	712b      	strb	r3, [r5, #4]
        LoRaMacMlmeRequest( &mlmeReq );
 8007178:	f002 fe22 	bl	8009dc0 <LoRaMacMlmeRequest>
}
 800717c:	b00a      	add	sp, #40	; 0x28
 800717e:	bd70      	pop	{r4, r5, r6, pc}
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 8007180:	2301      	movs	r3, #1
 8007182:	76b3      	strb	r3, [r6, #26]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 8007184:	0023      	movs	r3, r4
 8007186:	3330      	adds	r3, #48	; 0x30
 8007188:	78db      	ldrb	r3, [r3, #3]
 800718a:	7633      	strb	r3, [r6, #24]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800718c:	2300      	movs	r3, #0
 800718e:	7673      	strb	r3, [r6, #25]
        if (CtxRestoreDone == false)
 8007190:	0023      	movs	r3, r4
 8007192:	3364      	adds	r3, #100	; 0x64
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d106      	bne.n	80071a8 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800719a:	3327      	adds	r3, #39	; 0x27
 800719c:	702b      	strb	r3, [r5, #0]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800719e:	4b0d      	ldr	r3, [pc, #52]	; (80071d4 <LmHandlerJoin+0x7c>)
            LoRaMacMibSetRequestConfirm(&mibReq);
 80071a0:	0028      	movs	r0, r5
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 80071a2:	606b      	str	r3, [r5, #4]
            LoRaMacMibSetRequestConfirm(&mibReq);
 80071a4:	f002 fbdc 	bl	8009960 <LoRaMacMibSetRequestConfirm>
        LoRaMacStart();
 80071a8:	f002 fad6 	bl	8009758 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80071ac:	2301      	movs	r3, #1
        LoRaMacMibSetRequestConfirm( &mibReq );
 80071ae:	0028      	movs	r0, r5
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80071b0:	702b      	strb	r3, [r5, #0]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80071b2:	712b      	strb	r3, [r5, #4]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80071b4:	f002 fbd4 	bl	8009960 <LoRaMacMibSetRequestConfirm>
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80071b8:	0030      	movs	r0, r6
 80071ba:	69a3      	ldr	r3, [r4, #24]
 80071bc:	3018      	adds	r0, #24
 80071be:	69db      	ldr	r3, [r3, #28]
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80071c0:	3430      	adds	r4, #48	; 0x30
        LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80071c2:	4798      	blx	r3
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 80071c4:	7860      	ldrb	r0, [r4, #1]
 80071c6:	f7ff ff6f 	bl	80070a8 <LmHandlerRequestClass>
}
 80071ca:	e7d7      	b.n	800717c <LmHandlerJoin+0x24>
 80071cc:	2000006c 	.word	0x2000006c
 80071d0:	20000550 	.word	0x20000550
 80071d4:	01000300 	.word	0x01000300

080071d8 <LmHandlerSend>:
{
 80071d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071da:	b089      	sub	sp, #36	; 0x24
 80071dc:	0005      	movs	r5, r0
 80071de:	000f      	movs	r7, r1
 80071e0:	9200      	str	r2, [sp, #0]
 80071e2:	9301      	str	r3, [sp, #4]
    if (LoRaMacIsBusy() == true)
 80071e4:	f001 fb6a 	bl	80088bc <LoRaMacIsBusy>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d14f      	bne.n	800728c <LmHandlerSend+0xb4>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 80071ec:	f7ff ff48 	bl	8007080 <LmHandlerJoinStatus>
 80071f0:	2801      	cmp	r0, #1
 80071f2:	d006      	beq.n	8007202 <LmHandlerSend+0x2a>
        LmHandlerJoin(JoinParams.Mode);
 80071f4:	4b28      	ldr	r3, [pc, #160]	; (8007298 <LmHandlerSend+0xc0>)
 80071f6:	7e98      	ldrb	r0, [r3, #26]
 80071f8:	f7ff ffae 	bl	8007158 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80071fc:	2003      	movs	r0, #3
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 80071fe:	4240      	negs	r0, r0
 8007200:	e032      	b.n	8007268 <LmHandlerSend+0x90>
    if( ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == true ) && ( appData->Port != LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->Port ) && ( appData->Port != 0 ) )
 8007202:	4e26      	ldr	r6, [pc, #152]	; (800729c <LmHandlerSend+0xc4>)
 8007204:	69f3      	ldr	r3, [r6, #28]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	4798      	blx	r3
 800720a:	2800      	cmp	r0, #0
 800720c:	d006      	beq.n	800721c <LmHandlerSend+0x44>
 800720e:	69f2      	ldr	r2, [r6, #28]
 8007210:	782b      	ldrb	r3, [r5, #0]
 8007212:	7812      	ldrb	r2, [r2, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <LmHandlerSend+0x44>
 8007218:	2b00      	cmp	r3, #0
 800721a:	d139      	bne.n	8007290 <LmHandlerSend+0xb8>
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800721c:	0033      	movs	r3, r6
 800721e:	3330      	adds	r3, #48	; 0x30
 8007220:	78db      	ldrb	r3, [r3, #3]
 8007222:	ac03      	add	r4, sp, #12
 8007224:	73a3      	strb	r3, [r4, #14]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8007226:	7868      	ldrb	r0, [r5, #1]
 8007228:	a902      	add	r1, sp, #8
 800722a:	f002 fa9d 	bl	8009768 <LoRaMacQueryTxPossible>
 800722e:	2800      	cmp	r0, #0
 8007230:	d01c      	beq.n	800726c <LmHandlerSend+0x94>
        TxParams.MsgType = LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8007232:	2300      	movs	r3, #0
 8007234:	70b3      	strb	r3, [r6, #2]
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8007236:	7023      	strb	r3, [r4, #0]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8007238:	60a3      	str	r3, [r4, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800723a:	81a3      	strh	r3, [r4, #12]
    TxParams.AppData = *appData;
 800723c:	0033      	movs	r3, r6
 800723e:	330c      	adds	r3, #12
 8007240:	cd06      	ldmia	r5!, {r1, r2}
 8007242:	c306      	stmia	r3!, {r1, r2}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 8007244:	0033      	movs	r3, r6
 8007246:	3330      	adds	r3, #48	; 0x30
 8007248:	78db      	ldrb	r3, [r3, #3]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800724a:	0020      	movs	r0, r4
 800724c:	9901      	ldr	r1, [sp, #4]
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800724e:	7133      	strb	r3, [r6, #4]
    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 8007250:	f002 feb8 	bl	8009fc4 <LoRaMacMcpsRequest>
    if (nextTxIn != NULL)
 8007254:	9b00      	ldr	r3, [sp, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d002      	beq.n	8007260 <LmHandlerSend+0x88>
        *nextTxIn = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800725a:	6923      	ldr	r3, [r4, #16]
 800725c:	9a00      	ldr	r2, [sp, #0]
 800725e:	6013      	str	r3, [r2, #0]
    switch (status)
 8007260:	2811      	cmp	r0, #17
 8007262:	d817      	bhi.n	8007294 <LmHandlerSend+0xbc>
 8007264:	4b0e      	ldr	r3, [pc, #56]	; (80072a0 <LmHandlerSend+0xc8>)
 8007266:	5618      	ldrsb	r0, [r3, r0]
}
 8007268:	b009      	add	sp, #36	; 0x24
 800726a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        TxParams.MsgType = isTxConfirmed;
 800726c:	70b7      	strb	r7, [r6, #2]
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800726e:	782b      	ldrb	r3, [r5, #0]
 8007270:	7123      	strb	r3, [r4, #4]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 8007272:	786b      	ldrb	r3, [r5, #1]
 8007274:	81a3      	strh	r3, [r4, #12]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 8007276:	686b      	ldr	r3, [r5, #4]
 8007278:	60a3      	str	r3, [r4, #8]
        if( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG )
 800727a:	2f00      	cmp	r7, #0
 800727c:	d101      	bne.n	8007282 <LmHandlerSend+0xaa>
            mcpsReq.Type = MCPS_UNCONFIRMED;
 800727e:	7027      	strb	r7, [r4, #0]
 8007280:	e7dc      	b.n	800723c <LmHandlerSend+0x64>
            mcpsReq.Type = MCPS_CONFIRMED;
 8007282:	2301      	movs	r3, #1
 8007284:	7023      	strb	r3, [r4, #0]
            mcpsReq.Req.Confirmed.NbTrials = 8;
 8007286:	3307      	adds	r3, #7
 8007288:	73e3      	strb	r3, [r4, #15]
 800728a:	e7d7      	b.n	800723c <LmHandlerSend+0x64>
        return LORAMAC_HANDLER_BUSY_ERROR;
 800728c:	2002      	movs	r0, #2
 800728e:	e7b6      	b.n	80071fe <LmHandlerSend+0x26>
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
 8007290:	2004      	movs	r0, #4
 8007292:	e7b4      	b.n	80071fe <LmHandlerSend+0x26>
 8007294:	2001      	movs	r0, #1
 8007296:	e7b2      	b.n	80071fe <LmHandlerSend+0x26>
 8007298:	2000006c 	.word	0x2000006c
 800729c:	20000550 	.word	0x20000550
 80072a0:	0800f4ad 	.word	0x0800f4ad

080072a4 <MlmeIndication>:
{
 80072a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80072a6:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 0;
 80072a8:	2000      	movs	r0, #0
 80072aa:	4b14      	ldr	r3, [pc, #80]	; (80072fc <MlmeIndication+0x58>)
 80072ac:	7718      	strb	r0, [r3, #28]
    RxParams.Status = mlmeIndication->Status;
 80072ae:	7862      	ldrb	r2, [r4, #1]
 80072b0:	775a      	strb	r2, [r3, #29]
    RxParams.Rssi = RxStatus->Rssi;
 80072b2:	880d      	ldrh	r5, [r1, #0]
 80072b4:	77dd      	strb	r5, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 80072b6:	788e      	ldrb	r6, [r1, #2]
 80072b8:	1c5d      	adds	r5, r3, #1
 80072ba:	77ee      	strb	r6, [r5, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 80072bc:	001d      	movs	r5, r3
 80072be:	78c9      	ldrb	r1, [r1, #3]
 80072c0:	3528      	adds	r5, #40	; 0x28
 80072c2:	7029      	strb	r1, [r5, #0]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_BEACON_LOCKED )
 80072c4:	2a0e      	cmp	r2, #14
 80072c6:	d005      	beq.n	80072d4 <MlmeIndication+0x30>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80072c8:	331c      	adds	r3, #28
 80072ca:	0019      	movs	r1, r3
 80072cc:	4b0c      	ldr	r3, [pc, #48]	; (8007300 <MlmeIndication+0x5c>)
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	4798      	blx	r3
    switch( mlmeIndication->MlmeIndication )
 80072d4:	7823      	ldrb	r3, [r4, #0]
 80072d6:	2b07      	cmp	r3, #7
 80072d8:	d10e      	bne.n	80072f8 <MlmeIndication+0x54>
            LmHandlerAppData_t appData =
 80072da:	2300      	movs	r3, #0
 80072dc:	466a      	mov	r2, sp
 80072de:	9301      	str	r3, [sp, #4]
 80072e0:	8013      	strh	r3, [r2, #0]
            if( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning( ) == false )
 80072e2:	4b07      	ldr	r3, [pc, #28]	; (8007300 <MlmeIndication+0x5c>)
 80072e4:	69db      	ldr	r3, [r3, #28]
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	4798      	blx	r3
 80072ea:	1e01      	subs	r1, r0, #0
 80072ec:	d104      	bne.n	80072f8 <MlmeIndication+0x54>
                LmHandlerSend( &appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true );
 80072ee:	0002      	movs	r2, r0
 80072f0:	2301      	movs	r3, #1
 80072f2:	4668      	mov	r0, sp
 80072f4:	f7ff ff70 	bl	80071d8 <LmHandlerSend>
}
 80072f8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80072fa:	46c0      	nop			; (mov r8, r8)
 80072fc:	2000006c 	.word	0x2000006c
 8007300:	20000550 	.word	0x20000550

08007304 <LmHandlerGetCurrentClass>:
{
 8007304:	b510      	push	{r4, lr}
 8007306:	0004      	movs	r4, r0
 8007308:	b08a      	sub	sp, #40	; 0x28
    if (deviceClass == NULL)
 800730a:	2800      	cmp	r0, #0
 800730c:	d103      	bne.n	8007316 <LmHandlerGetCurrentClass+0x12>
        return LORAMAC_HANDLER_ERROR;
 800730e:	2001      	movs	r0, #1
 8007310:	4240      	negs	r0, r0
}
 8007312:	b00a      	add	sp, #40	; 0x28
 8007314:	bd10      	pop	{r4, pc}
    mibReq.Type = MIB_DEVICE_CLASS;
 8007316:	2300      	movs	r3, #0
 8007318:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800731a:	a801      	add	r0, sp, #4
    mibReq.Type = MIB_DEVICE_CLASS;
 800731c:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800731e:	f002 fa7d 	bl	800981c <LoRaMacMibGetRequestConfirm>
 8007322:	2800      	cmp	r0, #0
 8007324:	d1f3      	bne.n	800730e <LmHandlerGetCurrentClass+0xa>
    *deviceClass = mibReq.Param.Class;
 8007326:	466b      	mov	r3, sp
 8007328:	7a1b      	ldrb	r3, [r3, #8]
 800732a:	7023      	strb	r3, [r4, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800732c:	e7f1      	b.n	8007312 <LmHandlerGetCurrentClass+0xe>
	...

08007330 <McpsIndication>:
{
 8007330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007332:	b087      	sub	sp, #28
    DeviceClass_t deviceClass = CLASS_A;
 8007334:	2300      	movs	r3, #0
 8007336:	466a      	mov	r2, sp
 8007338:	71d3      	strb	r3, [r2, #7]
    RxParams.IsMcpsIndication = 1;
 800733a:	2201      	movs	r2, #1
 800733c:	4b2d      	ldr	r3, [pc, #180]	; (80073f4 <McpsIndication+0xc4>)
{
 800733e:	0004      	movs	r4, r0
    RxParams.IsMcpsIndication = 1;
 8007340:	771a      	strb	r2, [r3, #28]
    RxParams.Status = mcpsIndication->Status;
 8007342:	7842      	ldrb	r2, [r0, #1]
 8007344:	775a      	strb	r2, [r3, #29]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8007346:	2a00      	cmp	r2, #0
 8007348:	d14a      	bne.n	80073e0 <McpsIndication+0xb0>
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800734a:	7902      	ldrb	r2, [r0, #4]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800734c:	4e2a      	ldr	r6, [pc, #168]	; (80073f8 <McpsIndication+0xc8>)
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800734e:	779a      	strb	r2, [r3, #30]
    RxParams.Rssi = RxStatus->Rssi;
 8007350:	880a      	ldrh	r2, [r1, #0]
 8007352:	77da      	strb	r2, [r3, #31]
    RxParams.Snr = RxStatus->Snr;
 8007354:	7888      	ldrb	r0, [r1, #2]
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	77d0      	strb	r0, [r2, #31]
    RxParams.RxSlot = RxStatus->RxSlot;
 800735a:	001a      	movs	r2, r3
 800735c:	78c9      	ldrb	r1, [r1, #3]
 800735e:	3228      	adds	r2, #40	; 0x28
 8007360:	7011      	strb	r1, [r2, #0]
    appData.Port = mcpsIndication->Port;
 8007362:	4669      	mov	r1, sp
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007364:	6922      	ldr	r2, [r4, #16]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007366:	331c      	adds	r3, #28
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8007368:	609a      	str	r2, [r3, #8]
    appData.Port = mcpsIndication->Port;
 800736a:	78e2      	ldrb	r2, [r4, #3]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800736c:	a802      	add	r0, sp, #8
    appData.Port = mcpsIndication->Port;
 800736e:	720a      	strb	r2, [r1, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 8007370:	7b22      	ldrb	r2, [r4, #12]
 8007372:	724a      	strb	r2, [r1, #9]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007374:	0019      	movs	r1, r3
    appData.Buffer = mcpsIndication->Buffer;
 8007376:	68a2      	ldr	r2, [r4, #8]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 8007378:	69b3      	ldr	r3, [r6, #24]
    appData.Buffer = mcpsIndication->Buffer;
 800737a:	9203      	str	r2, [sp, #12]
    LmHandlerCallbacks->OnRxData(&appData, &RxParams);
 800737c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737e:	4798      	blx	r3
    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 8007380:	69b3      	ldr	r3, [r6, #24]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <McpsIndication+0x60>
 8007388:	7e22      	ldrb	r2, [r4, #24]
 800738a:	2a00      	cmp	r2, #0
 800738c:	d000      	beq.n	8007390 <McpsIndication+0x60>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800738e:	4798      	blx	r3
 8007390:	0037      	movs	r7, r6
{
 8007392:	2500      	movs	r5, #0
 8007394:	371c      	adds	r7, #28
        if( LmHandlerPackages[i] != NULL )
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d00a      	beq.n	80073b2 <McpsIndication+0x82>
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
 800739c:	69da      	ldr	r2, [r3, #28]
 800739e:	2a00      	cmp	r2, #0
 80073a0:	d007      	beq.n	80073b2 <McpsIndication+0x82>
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	78e3      	ldrb	r3, [r4, #3]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d11c      	bne.n	80073e4 <McpsIndication+0xb4>
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	0020      	movs	r0, r4
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 80073b2:	3501      	adds	r5, #1
 80073b4:	b2eb      	uxtb	r3, r5
 80073b6:	3704      	adds	r7, #4
 80073b8:	b26d      	sxtb	r5, r5
 80073ba:	2b05      	cmp	r3, #5
 80073bc:	d1eb      	bne.n	8007396 <McpsIndication+0x66>
    LmHandlerGetCurrentClass(&deviceClass);
 80073be:	466b      	mov	r3, sp
 80073c0:	1dd8      	adds	r0, r3, #7
 80073c2:	f7ff ff9f 	bl	8007304 <LmHandlerGetCurrentClass>
    if ((mcpsIndication->FramePending == true) && (deviceClass == CLASS_A))
 80073c6:	7963      	ldrb	r3, [r4, #5]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d109      	bne.n	80073e0 <McpsIndication+0xb0>
 80073cc:	466a      	mov	r2, sp
 80073ce:	79d1      	ldrb	r1, [r2, #7]
 80073d0:	2900      	cmp	r1, #0
 80073d2:	d105      	bne.n	80073e0 <McpsIndication+0xb0>
        LmHandlerAppData_t appData =
 80073d4:	a804      	add	r0, sp, #16
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80073d6:	000a      	movs	r2, r1
        LmHandlerAppData_t appData =
 80073d8:	8001      	strh	r1, [r0, #0]
 80073da:	6041      	str	r1, [r0, #4]
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, NULL, true);
 80073dc:	f7ff fefc 	bl	80071d8 <LmHandlerSend>
}
 80073e0:	b007      	add	sp, #28
 80073e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
 80073e4:	2d00      	cmp	r5, #0
 80073e6:	d1e4      	bne.n	80073b2 <McpsIndication+0x82>
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
 80073e8:	69f3      	ldr	r3, [r6, #28]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4798      	blx	r3
 80073ee:	2800      	cmp	r0, #0
 80073f0:	d1db      	bne.n	80073aa <McpsIndication+0x7a>
 80073f2:	e7de      	b.n	80073b2 <McpsIndication+0x82>
 80073f4:	2000006c 	.word	0x2000006c
 80073f8:	20000550 	.word	0x20000550

080073fc <LmHandlerGetTxDatarate>:
{
 80073fc:	b510      	push	{r4, lr}
 80073fe:	0004      	movs	r4, r0
 8007400:	b08a      	sub	sp, #40	; 0x28
    if (txDatarate == NULL)
 8007402:	2800      	cmp	r0, #0
 8007404:	d103      	bne.n	800740e <LmHandlerGetTxDatarate+0x12>
        return LORAMAC_HANDLER_ERROR;
 8007406:	2001      	movs	r0, #1
 8007408:	4240      	negs	r0, r0
}
 800740a:	b00a      	add	sp, #40	; 0x28
 800740c:	bd10      	pop	{r4, pc}
    mibGet.Type = MIB_CHANNELS_DATARATE;
 800740e:	231f      	movs	r3, #31
 8007410:	466a      	mov	r2, sp
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8007412:	a801      	add	r0, sp, #4
    mibGet.Type = MIB_CHANNELS_DATARATE;
 8007414:	7113      	strb	r3, [r2, #4]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 8007416:	f002 fa01 	bl	800981c <LoRaMacMibGetRequestConfirm>
 800741a:	2800      	cmp	r0, #0
 800741c:	d1f3      	bne.n	8007406 <LmHandlerGetTxDatarate+0xa>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 800741e:	466b      	mov	r3, sp
 8007420:	2208      	movs	r2, #8
 8007422:	569a      	ldrsb	r2, [r3, r2]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007424:	4b02      	ldr	r3, [pc, #8]	; (8007430 <LmHandlerGetTxDatarate+0x34>)
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8007426:	7022      	strb	r2, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8007428:	3330      	adds	r3, #48	; 0x30
 800742a:	70da      	strb	r2, [r3, #3]
    return LORAMAC_HANDLER_SUCCESS;
 800742c:	e7ed      	b.n	800740a <LmHandlerGetTxDatarate+0xe>
 800742e:	46c0      	nop			; (mov r8, r8)
 8007430:	20000550 	.word	0x20000550

08007434 <MlmeConfirm>:
    TxParams.IsMcpsConfirm = 0;
 8007434:	2300      	movs	r3, #0
{
 8007436:	b5f0      	push	{r4, r5, r6, r7, lr}
    TxParams.IsMcpsConfirm = 0;
 8007438:	4d25      	ldr	r5, [pc, #148]	; (80074d0 <MlmeConfirm+0x9c>)
{
 800743a:	0004      	movs	r4, r0
    TxParams.IsMcpsConfirm = 0;
 800743c:	702b      	strb	r3, [r5, #0]
    TxParams.Status = mlmeConfirm->Status;
 800743e:	7843      	ldrb	r3, [r0, #1]
 8007440:	002e      	movs	r6, r5
 8007442:	706b      	strb	r3, [r5, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 8007444:	69ab      	ldr	r3, [r5, #24]
 8007446:	0028      	movs	r0, r5
 8007448:	002f      	movs	r7, r5
 800744a:	6a1b      	ldr	r3, [r3, #32]
{
 800744c:	b08b      	sub	sp, #44	; 0x2c
    LmHandlerCallbacks->OnTxData( &TxParams );
 800744e:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007450:	361c      	adds	r6, #28
 8007452:	3730      	adds	r7, #48	; 0x30
        if( LmHandlerPackages[i] != NULL )
 8007454:	6833      	ldr	r3, [r6, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d004      	beq.n	8007464 <MlmeConfirm+0x30>
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800745a:	6a1b      	ldr	r3, [r3, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d001      	beq.n	8007464 <MlmeConfirm+0x30>
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 8007460:	0020      	movs	r0, r4
 8007462:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8007464:	3604      	adds	r6, #4
 8007466:	42be      	cmp	r6, r7
 8007468:	d1f4      	bne.n	8007454 <MlmeConfirm+0x20>
    switch( mlmeConfirm->MlmeRequest )
 800746a:	7823      	ldrb	r3, [r4, #0]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d003      	beq.n	8007478 <MlmeConfirm+0x44>
 8007470:	2b04      	cmp	r3, #4
 8007472:	d020      	beq.n	80074b6 <MlmeConfirm+0x82>
}
 8007474:	b00b      	add	sp, #44	; 0x2c
 8007476:	bdf0      	pop	{r4, r5, r6, r7, pc}
            mibReq.Type = MIB_DEV_ADDR;
 8007478:	2306      	movs	r3, #6
 800747a:	af01      	add	r7, sp, #4
            LoRaMacMibGetRequestConfirm( &mibReq );
 800747c:	0038      	movs	r0, r7
            mibReq.Type = MIB_DEV_ADDR;
 800747e:	703b      	strb	r3, [r7, #0]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8007480:	f002 f9cc 	bl	800981c <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 8007484:	4e13      	ldr	r6, [pc, #76]	; (80074d4 <MlmeConfirm+0xa0>)
 8007486:	9b02      	ldr	r3, [sp, #8]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 8007488:	0030      	movs	r0, r6
 800748a:	3018      	adds	r0, #24
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800748c:	6173      	str	r3, [r6, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800748e:	f7ff ffb5 	bl	80073fc <LmHandlerGetTxDatarate>
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8007492:	7863      	ldrb	r3, [r4, #1]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10b      	bne.n	80074b0 <MlmeConfirm+0x7c>
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8007498:	7673      	strb	r3, [r6, #25]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800749a:	002b      	movs	r3, r5
 800749c:	3330      	adds	r3, #48	; 0x30
 800749e:	7858      	ldrb	r0, [r3, #1]
 80074a0:	f7ff fe02 	bl	80070a8 <LmHandlerRequestClass>
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 80074a4:	0030      	movs	r0, r6
 80074a6:	69ab      	ldr	r3, [r5, #24]
 80074a8:	3018      	adds	r0, #24
 80074aa:	69db      	ldr	r3, [r3, #28]
 80074ac:	4798      	blx	r3
        break;
 80074ae:	e7e1      	b.n	8007474 <MlmeConfirm+0x40>
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 80074b0:	23ff      	movs	r3, #255	; 0xff
 80074b2:	7673      	strb	r3, [r6, #25]
 80074b4:	e7f6      	b.n	80074a4 <MlmeConfirm+0x70>
            RxParams.LinkCheck = true;
 80074b6:	4b07      	ldr	r3, [pc, #28]	; (80074d4 <MlmeConfirm+0xa0>)
 80074b8:	2101      	movs	r1, #1
 80074ba:	001a      	movs	r2, r3
 80074bc:	3229      	adds	r2, #41	; 0x29
 80074be:	7011      	strb	r1, [r2, #0]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 80074c0:	001a      	movs	r2, r3
 80074c2:	7a21      	ldrb	r1, [r4, #8]
 80074c4:	322a      	adds	r2, #42	; 0x2a
 80074c6:	7011      	strb	r1, [r2, #0]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 80074c8:	7a62      	ldrb	r2, [r4, #9]
 80074ca:	332b      	adds	r3, #43	; 0x2b
 80074cc:	701a      	strb	r2, [r3, #0]
}
 80074ce:	e7d1      	b.n	8007474 <MlmeConfirm+0x40>
 80074d0:	20000550 	.word	0x20000550
 80074d4:	2000006c 	.word	0x2000006c

080074d8 <LmHandlerPackageRegister>:
{
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	0004      	movs	r4, r0
 80074dc:	000d      	movs	r5, r1
    switch( id )
 80074de:	2800      	cmp	r0, #0
 80074e0:	d002      	beq.n	80074e8 <LmHandlerPackageRegister+0x10>
        return LORAMAC_HANDLER_ERROR;
 80074e2:	2001      	movs	r0, #1
 80074e4:	4240      	negs	r0, r0
}
 80074e6:	bd70      	pop	{r4, r5, r6, pc}
            package = LmhpCompliancePackageFactory( );
 80074e8:	f000 f9cc 	bl	8007884 <LmhpCompliancePackageFactory>
    if( package != NULL )
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d0f8      	beq.n	80074e2 <LmHandlerPackageRegister+0xa>
        LmHandlerPackages[id] = package;
 80074f0:	4a08      	ldr	r2, [pc, #32]	; (8007514 <LmHandlerPackageRegister+0x3c>)
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80074f2:	4909      	ldr	r1, [pc, #36]	; (8007518 <LmHandlerPackageRegister+0x40>)
        LmHandlerPackages[id] = package;
 80074f4:	61d0      	str	r0, [r2, #28]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 80074f6:	6241      	str	r1, [r0, #36]	; 0x24
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80074f8:	6992      	ldr	r2, [r2, #24]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80074fa:	4908      	ldr	r1, [pc, #32]	; (800751c <LmHandlerPackageRegister+0x44>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 80074fc:	6912      	ldr	r2, [r2, #16]
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
 80074fe:	6281      	str	r1, [r0, #40]	; 0x28
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007500:	4907      	ldr	r1, [pc, #28]	; (8007520 <LmHandlerPackageRegister+0x48>)
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 8007502:	6142      	str	r2, [r0, #20]
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 8007504:	62c1      	str	r1, [r0, #44]	; 0x2c
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8007506:	6843      	ldr	r3, [r0, #4]
 8007508:	22f2      	movs	r2, #242	; 0xf2
 800750a:	0028      	movs	r0, r5
 800750c:	4905      	ldr	r1, [pc, #20]	; (8007524 <LmHandlerPackageRegister+0x4c>)
 800750e:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 8007510:	0020      	movs	r0, r4
 8007512:	e7e8      	b.n	80074e6 <LmHandlerPackageRegister+0xe>
 8007514:	20000550 	.word	0x20000550
 8007518:	08007159 	.word	0x08007159
 800751c:	080071d9 	.word	0x080071d9
 8007520:	08006e59 	.word	0x08006e59
 8007524:	200005b5 	.word	0x200005b5

08007528 <LmHandlerInit>:
    LmHandlerCallbacks = handlerCallbacks;
 8007528:	4b0e      	ldr	r3, [pc, #56]	; (8007564 <LmHandlerInit+0x3c>)
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800752a:	4a0f      	ldr	r2, [pc, #60]	; (8007568 <LmHandlerInit+0x40>)
{
 800752c:	b510      	push	{r4, lr}
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800752e:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007530:	4a0e      	ldr	r2, [pc, #56]	; (800756c <LmHandlerInit+0x44>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007532:	490f      	ldr	r1, [pc, #60]	; (8007570 <LmHandlerInit+0x48>)
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 8007534:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 8007536:	4a0f      	ldr	r2, [pc, #60]	; (8007574 <LmHandlerInit+0x4c>)
    LmHandlerCallbacks = handlerCallbacks;
 8007538:	6198      	str	r0, [r3, #24]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800753a:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800753c:	4a0e      	ldr	r2, [pc, #56]	; (8007578 <LmHandlerInit+0x50>)
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800753e:	312c      	adds	r1, #44	; 0x2c
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 8007540:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 8007542:	6802      	ldr	r2, [r0, #0]
 8007544:	641a      	str	r2, [r3, #64]	; 0x40
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 8007546:	6842      	ldr	r2, [r0, #4]
 8007548:	645a      	str	r2, [r3, #68]	; 0x44
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800754a:	6882      	ldr	r2, [r0, #8]
 800754c:	649a      	str	r2, [r3, #72]	; 0x48
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800754e:	4a0b      	ldr	r2, [pc, #44]	; (800757c <LmHandlerInit+0x54>)
 8007550:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007552:	6902      	ldr	r2, [r0, #16]
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007554:	2000      	movs	r0, #0
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 8007556:	651a      	str	r2, [r3, #80]	; 0x50
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 8007558:	f7ff ffbe 	bl	80074d8 <LmHandlerPackageRegister>
 800755c:	1e43      	subs	r3, r0, #1
 800755e:	4198      	sbcs	r0, r3
}
 8007560:	4240      	negs	r0, r0
 8007562:	bd10      	pop	{r4, pc}
 8007564:	20000550 	.word	0x20000550
 8007568:	08006e71 	.word	0x08006e71
 800756c:	08007331 	.word	0x08007331
 8007570:	2000006c 	.word	0x2000006c
 8007574:	08007435 	.word	0x08007435
 8007578:	080072a5 	.word	0x080072a5
 800757c:	0800788d 	.word	0x0800788d

08007580 <LmhpComplianceInit>:
    return &LmhpCompliancePackage;
}

static void LmhpComplianceInit( void *params, uint8_t *dataBuffer, uint8_t dataBufferMaxSize )
{
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8007580:	4b06      	ldr	r3, [pc, #24]	; (800759c <LmhpComplianceInit+0x1c>)
 8007582:	2800      	cmp	r0, #0
 8007584:	d007      	beq.n	8007596 <LmhpComplianceInit+0x16>
 8007586:	2900      	cmp	r1, #0
 8007588:	d005      	beq.n	8007596 <LmhpComplianceInit+0x16>
    {
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
        ComplianceTestState.DataBuffer = dataBuffer;
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800758a:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized = true;
 800758c:	2201      	movs	r2, #1
        LmhpComplianceParams = ( LmhpComplianceParams_t* )params;
 800758e:	6018      	str	r0, [r3, #0]
        ComplianceTestState.DataBuffer = dataBuffer;
 8007590:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.Initialized = true;
 8007592:	711a      	strb	r2, [r3, #4]
    else
    {
        LmhpComplianceParams = NULL;
        ComplianceTestState.Initialized = false;
    }
}
 8007594:	4770      	bx	lr
        LmhpComplianceParams = NULL;
 8007596:	2200      	movs	r2, #0
 8007598:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800759a:	e7fa      	b.n	8007592 <LmhpComplianceInit+0x12>
 800759c:	200006a8 	.word	0x200006a8

080075a0 <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
 80075a0:	4b01      	ldr	r3, [pc, #4]	; (80075a8 <LmhpComplianceIsInitialized+0x8>)
 80075a2:	7918      	ldrb	r0, [r3, #4]
}
 80075a4:	4770      	bx	lr
 80075a6:	46c0      	nop			; (mov r8, r8)
 80075a8:	200006a8 	.word	0x200006a8

080075ac <LmhpComplianceIsRunning>:

static bool LmhpComplianceIsRunning( void )
{
    if( ComplianceTestState.Initialized == false )
 80075ac:	4b02      	ldr	r3, [pc, #8]	; (80075b8 <LmhpComplianceIsRunning+0xc>)
 80075ae:	7918      	ldrb	r0, [r3, #4]
 80075b0:	2800      	cmp	r0, #0
 80075b2:	d000      	beq.n	80075b6 <LmhpComplianceIsRunning+0xa>
    {
        return false;
    }

    return ComplianceTestState.IsRunning;
 80075b4:	7958      	ldrb	r0, [r3, #5]
}
 80075b6:	4770      	bx	lr
 80075b8:	200006a8 	.word	0x200006a8

080075bc <LmhpComplianceProcess>:
}

static void LmhpComplianceProcess( void )
{
    /* Nothing to process */
}
 80075bc:	4770      	bx	lr
	...

080075c0 <LmhpComplianceOnMcpsConfirm>:
    if (ComplianceTestState.Initialized == false)
 80075c0:	4b08      	ldr	r3, [pc, #32]	; (80075e4 <LmhpComplianceOnMcpsConfirm+0x24>)
 80075c2:	791a      	ldrb	r2, [r3, #4]
 80075c4:	2a00      	cmp	r2, #0
 80075c6:	d00b      	beq.n	80075e0 <LmhpComplianceOnMcpsConfirm+0x20>
    if ((ComplianceTestState.IsRunning == true) &&
 80075c8:	795a      	ldrb	r2, [r3, #5]
 80075ca:	2a00      	cmp	r2, #0
 80075cc:	d008      	beq.n	80075e0 <LmhpComplianceOnMcpsConfirm+0x20>
 80075ce:	7802      	ldrb	r2, [r0, #0]
 80075d0:	2a01      	cmp	r2, #1
 80075d2:	d105      	bne.n	80075e0 <LmhpComplianceOnMcpsConfirm+0x20>
        (mcpsConfirm->McpsRequest == MCPS_CONFIRMED) &&
 80075d4:	7902      	ldrb	r2, [r0, #4]
 80075d6:	2a00      	cmp	r2, #0
 80075d8:	d002      	beq.n	80075e0 <LmhpComplianceOnMcpsConfirm+0x20>
        ComplianceTestState.DownLinkCounter++;
 80075da:	8a1a      	ldrh	r2, [r3, #16]
 80075dc:	3201      	adds	r2, #1
 80075de:	821a      	strh	r2, [r3, #16]
}
 80075e0:	4770      	bx	lr
 80075e2:	46c0      	nop			; (mov r8, r8)
 80075e4:	200006a8 	.word	0x200006a8

080075e8 <LmhpComplianceOnMlmeConfirm>:
    if( ComplianceTestState.Initialized == false )
 80075e8:	4b08      	ldr	r3, [pc, #32]	; (800760c <LmhpComplianceOnMlmeConfirm+0x24>)
 80075ea:	791a      	ldrb	r2, [r3, #4]
 80075ec:	2a00      	cmp	r2, #0
 80075ee:	d00b      	beq.n	8007608 <LmhpComplianceOnMlmeConfirm+0x20>
    if( ComplianceTestState.IsRunning == false )
 80075f0:	795a      	ldrb	r2, [r3, #5]
 80075f2:	2a00      	cmp	r2, #0
 80075f4:	d008      	beq.n	8007608 <LmhpComplianceOnMlmeConfirm+0x20>
    if( mlmeConfirm->MlmeRequest == MLME_LINK_CHECK )
 80075f6:	7802      	ldrb	r2, [r0, #0]
 80075f8:	2a04      	cmp	r2, #4
 80075fa:	d105      	bne.n	8007608 <LmhpComplianceOnMlmeConfirm+0x20>
 80075fc:	7a01      	ldrb	r1, [r0, #8]
 80075fe:	7a42      	ldrb	r2, [r0, #9]
        ComplianceTestState.LinkCheck = true;
 8007600:	2001      	movs	r0, #1
        ComplianceTestState.DemodMargin = mlmeConfirm->DemodMargin;
 8007602:	74d9      	strb	r1, [r3, #19]
        ComplianceTestState.LinkCheck = true;
 8007604:	7498      	strb	r0, [r3, #18]
        ComplianceTestState.NbGateways = mlmeConfirm->NbGateways;
 8007606:	751a      	strb	r2, [r3, #20]
}
 8007608:	4770      	bx	lr
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	200006a8 	.word	0x200006a8

08007610 <LmhpComplianceTxProcess.isra.0>:
static LmHandlerErrorStatus_t LmhpComplianceTxProcess( void )
 8007610:	b513      	push	{r0, r1, r4, lr}
    if( ComplianceTestState.Initialized == false )
 8007612:	4c1b      	ldr	r4, [pc, #108]	; (8007680 <LmhpComplianceTxProcess.isra.0+0x70>)
 8007614:	7923      	ldrb	r3, [r4, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d023      	beq.n	8007662 <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.IsRunning == false )
 800761a:	7963      	ldrb	r3, [r4, #5]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d020      	beq.n	8007662 <LmhpComplianceTxProcess.isra.0+0x52>
    if( ComplianceTestState.LinkCheck == true )
 8007620:	7ca2      	ldrb	r2, [r4, #18]
        ComplianceTestState.DataBuffer[0] = 5;
 8007622:	68e3      	ldr	r3, [r4, #12]
    if( ComplianceTestState.LinkCheck == true )
 8007624:	2a00      	cmp	r2, #0
 8007626:	d01d      	beq.n	8007664 <LmhpComplianceTxProcess.isra.0+0x54>
        ComplianceTestState.LinkCheck = false;
 8007628:	2200      	movs	r2, #0
 800762a:	74a2      	strb	r2, [r4, #18]
        ComplianceTestState.DataBufferSize = 3;
 800762c:	3203      	adds	r2, #3
 800762e:	72a2      	strb	r2, [r4, #10]
        ComplianceTestState.DataBuffer[0] = 5;
 8007630:	3202      	adds	r2, #2
 8007632:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[1] = ComplianceTestState.DemodMargin;
 8007634:	7ce2      	ldrb	r2, [r4, #19]
 8007636:	705a      	strb	r2, [r3, #1]
        ComplianceTestState.DataBuffer[2] = ComplianceTestState.NbGateways;
 8007638:	7d22      	ldrb	r2, [r4, #20]
 800763a:	709a      	strb	r2, [r3, #2]
        ComplianceTestState.State = 1;
 800763c:	2201      	movs	r2, #1
 800763e:	71a2      	strb	r2, [r4, #6]
    LmHandlerAppData_t appData =
 8007640:	4669      	mov	r1, sp
 8007642:	22e0      	movs	r2, #224	; 0xe0
    TimerStart( &ComplianceTxNextPacketTimer );
 8007644:	0020      	movs	r0, r4
    LmHandlerAppData_t appData =
 8007646:	700a      	strb	r2, [r1, #0]
 8007648:	7aa2      	ldrb	r2, [r4, #10]
    TimerStart( &ComplianceTxNextPacketTimer );
 800764a:	3018      	adds	r0, #24
    LmHandlerAppData_t appData =
 800764c:	704a      	strb	r2, [r1, #1]
 800764e:	9301      	str	r3, [sp, #4]
    TimerStart( &ComplianceTxNextPacketTimer );
 8007650:	f006 fde4 	bl	800e21c <UTIL_TIMER_Start>
    return LmhpCompliancePackage.OnSendRequest( &appData, ( LmHandlerMsgTypes_t )ComplianceTestState.IsTxConfirmed, NULL, true );
 8007654:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <LmhpComplianceTxProcess.isra.0+0x74>)
 8007656:	79e1      	ldrb	r1, [r4, #7]
 8007658:	2200      	movs	r2, #0
 800765a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 800765c:	4668      	mov	r0, sp
 800765e:	2301      	movs	r3, #1
 8007660:	47a0      	blx	r4
}
 8007662:	bd13      	pop	{r0, r1, r4, pc}
        switch( ComplianceTestState.State )
 8007664:	79a2      	ldrb	r2, [r4, #6]
 8007666:	2a01      	cmp	r2, #1
 8007668:	d002      	beq.n	8007670 <LmhpComplianceTxProcess.isra.0+0x60>
 800766a:	2a04      	cmp	r2, #4
 800766c:	d1e8      	bne.n	8007640 <LmhpComplianceTxProcess.isra.0+0x30>
 800766e:	e7e5      	b.n	800763c <LmhpComplianceTxProcess.isra.0+0x2c>
            ComplianceTestState.DataBufferSize = 2;
 8007670:	2202      	movs	r2, #2
 8007672:	72a2      	strb	r2, [r4, #10]
            ComplianceTestState.DataBuffer[0] = ComplianceTestState.DownLinkCounter >> 8;
 8007674:	8a22      	ldrh	r2, [r4, #16]
 8007676:	0a11      	lsrs	r1, r2, #8
 8007678:	7019      	strb	r1, [r3, #0]
            ComplianceTestState.DataBuffer[1] = ComplianceTestState.DownLinkCounter;
 800767a:	705a      	strb	r2, [r3, #1]
            break;
 800767c:	e7e0      	b.n	8007640 <LmhpComplianceTxProcess.isra.0+0x30>
 800767e:	46c0      	nop			; (mov r8, r8)
 8007680:	200006a8 	.word	0x200006a8
 8007684:	200000a4 	.word	0x200000a4

08007688 <OnComplianceTxNextPacketTimerEvent>:

static void OnComplianceTxNextPacketTimerEvent( void* context )
{
 8007688:	b510      	push	{r4, lr}
    LmhpComplianceTxProcess( );
 800768a:	f7ff ffc1 	bl	8007610 <LmhpComplianceTxProcess.isra.0>
}
 800768e:	bd10      	pop	{r4, pc}

08007690 <LmhpComplianceOnMcpsIndication>:
{
 8007690:	b530      	push	{r4, r5, lr}
    if( ComplianceTestState.Initialized == false )
 8007692:	4c78      	ldr	r4, [pc, #480]	; (8007874 <LmhpComplianceOnMcpsIndication+0x1e4>)
{
 8007694:	0002      	movs	r2, r0
    if( ComplianceTestState.Initialized == false )
 8007696:	7923      	ldrb	r3, [r4, #4]
{
 8007698:	b08d      	sub	sp, #52	; 0x34
    if( ComplianceTestState.Initialized == false )
 800769a:	2b00      	cmp	r3, #0
 800769c:	d044      	beq.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
    if( mcpsIndication->RxData == false )
 800769e:	7b43      	ldrb	r3, [r0, #13]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d041      	beq.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
    if ((ComplianceTestState.IsRunning == true) &&
 80076a4:	7965      	ldrb	r5, [r4, #5]
 80076a6:	2d00      	cmp	r5, #0
 80076a8:	d005      	beq.n	80076b6 <LmhpComplianceOnMcpsIndication+0x26>
 80076aa:	7b83      	ldrb	r3, [r0, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <LmhpComplianceOnMcpsIndication+0x26>
        ComplianceTestState.DownLinkCounter++;
 80076b0:	8a23      	ldrh	r3, [r4, #16]
 80076b2:	3301      	adds	r3, #1
 80076b4:	8223      	strh	r3, [r4, #16]
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 80076b6:	78d0      	ldrb	r0, [r2, #3]
 80076b8:	28e0      	cmp	r0, #224	; 0xe0
 80076ba:	d135      	bne.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
    if( ComplianceTestState.IsRunning == false )
 80076bc:	2d00      	cmp	r5, #0
 80076be:	d135      	bne.n	800772c <LmhpComplianceOnMcpsIndication+0x9c>
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80076c0:	7b11      	ldrb	r1, [r2, #12]
 80076c2:	2904      	cmp	r1, #4
 80076c4:	d130      	bne.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80076c6:	6893      	ldr	r3, [r2, #8]
        if( ( mcpsIndication->BufferSize == 4 ) &&
 80076c8:	781a      	ldrb	r2, [r3, #0]
 80076ca:	2a01      	cmp	r2, #1
 80076cc:	d12c      	bne.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[0] == 0x01 ) &&
 80076ce:	785a      	ldrb	r2, [r3, #1]
 80076d0:	2a01      	cmp	r2, #1
 80076d2:	d129      	bne.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[1] == 0x01 ) &&
 80076d4:	789a      	ldrb	r2, [r3, #2]
 80076d6:	2a01      	cmp	r2, #1
 80076d8:	d126      	bne.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ( mcpsIndication->Buffer[2] == 0x01 ) &&
 80076da:	78db      	ldrb	r3, [r3, #3]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d123      	bne.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 80076e0:	3201      	adds	r2, #1
 80076e2:	72a2      	strb	r2, [r4, #10]
            mibReq.Type = MIB_ADR;
 80076e4:	466a      	mov	r2, sp
            ComplianceTestState.State = 1;
 80076e6:	80e3      	strh	r3, [r4, #6]
            mibReq.Param.AdrEnable = true;
 80076e8:	7413      	strb	r3, [r2, #16]
            ComplianceTestState.Port = 224;
 80076ea:	7220      	strb	r0, [r4, #8]
            mibReq.Type = MIB_ADR;
 80076ec:	7311      	strb	r1, [r2, #12]
            ComplianceTestState.DownLinkCounter = 0;
 80076ee:	6125      	str	r5, [r4, #16]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80076f0:	a803      	add	r0, sp, #12
            ComplianceTestState.IsRunning = true;
 80076f2:	7163      	strb	r3, [r4, #5]
            ComplianceTestState.NbGateways = 0;
 80076f4:	7525      	strb	r5, [r4, #20]
            LoRaMacMibSetRequestConfirm( &mibReq );
 80076f6:	f002 f933 	bl	8009960 <LoRaMacMibSetRequestConfirm>
            LoRaMacTestSetDutyCycleOn( false );
 80076fa:	0028      	movs	r0, r5
 80076fc:	f002 fe10 	bl	800a320 <LoRaMacTestSetDutyCycleOn>
            if( LmhpComplianceParams->StopPeripherals != NULL )
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d000      	beq.n	800770a <LmhpComplianceOnMcpsIndication+0x7a>
                LmhpComplianceParams->StopPeripherals( );
 8007708:	4798      	blx	r3
            TimerInit( &ComplianceTxNextPacketTimer, OnComplianceTxNextPacketTimerEvent );
 800770a:	2200      	movs	r2, #0
 800770c:	2101      	movs	r1, #1
 800770e:	3418      	adds	r4, #24
 8007710:	4b59      	ldr	r3, [pc, #356]	; (8007878 <LmhpComplianceOnMcpsIndication+0x1e8>)
 8007712:	9200      	str	r2, [sp, #0]
 8007714:	4249      	negs	r1, r1
 8007716:	0020      	movs	r0, r4
 8007718:	f006 fcce 	bl	800e0b8 <UTIL_TIMER_Create>
            TimerSetValue( &ComplianceTxNextPacketTimer, COMPLIANCE_TX_DUTYCYCLE );
 800771c:	4957      	ldr	r1, [pc, #348]	; (800787c <LmhpComplianceOnMcpsIndication+0x1ec>)
 800771e:	0020      	movs	r0, r4
 8007720:	f006 fdba 	bl	800e298 <UTIL_TIMER_SetPeriod>
            LmhpComplianceTxProcess( );
 8007724:	f7ff ff74 	bl	8007610 <LmhpComplianceTxProcess.isra.0>
}
 8007728:	b00d      	add	sp, #52	; 0x34
 800772a:	bd30      	pop	{r4, r5, pc}
        ComplianceTestState.State = mcpsIndication->Buffer[0];
 800772c:	6893      	ldr	r3, [r2, #8]
 800772e:	7818      	ldrb	r0, [r3, #0]
 8007730:	71a0      	strb	r0, [r4, #6]
        switch( ComplianceTestState.State )
 8007732:	280a      	cmp	r0, #10
 8007734:	d8f8      	bhi.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
 8007736:	f7f8 fcf9 	bl	800012c <__gnu_thumb1_case_uqi>
 800773a:	2006      	.short	0x2006
 800773c:	3e292723 	.word	0x3e292723
 8007740:	8d8a6244 	.word	0x8d8a6244
 8007744:	96          	.byte	0x96
 8007745:	00          	.byte	0x00
                TimerStop( &ComplianceTxNextPacketTimer );
 8007746:	0020      	movs	r0, r4
 8007748:	3018      	adds	r0, #24
 800774a:	f006 fd13 	bl	800e174 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 800774e:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 8007750:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 8007752:	8223      	strh	r3, [r4, #16]
                ComplianceTestState.IsRunning = false;
 8007754:	7163      	strb	r3, [r4, #5]
                mibReq.Type = MIB_ADR;
 8007756:	3304      	adds	r3, #4
 8007758:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800775a:	6823      	ldr	r3, [r4, #0]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800775c:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007762:	f002 f8fd 	bl	8009960 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	7858      	ldrb	r0, [r3, #1]
 800776a:	f002 fdd9 	bl	800a320 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 800776e:	6823      	ldr	r3, [r4, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0d8      	beq.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
                    LmhpComplianceParams->StartPeripherals( );
 8007776:	4798      	blx	r3
            break;
 8007778:	e7d6      	b.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.DataBufferSize = 2;
 800777a:	2302      	movs	r3, #2
 800777c:	72a3      	strb	r3, [r4, #10]
            break;
 800777e:	e7d3      	b.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 8007780:	2302      	movs	r3, #2
 8007782:	33ff      	adds	r3, #255	; 0xff
            ComplianceTestState.State = 1;
 8007784:	80e3      	strh	r3, [r4, #6]
            break;
 8007786:	e7cf      	b.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
            ComplianceTestState.State = 1;
 8007788:	2301      	movs	r3, #1
 800778a:	e7fb      	b.n	8007784 <LmhpComplianceOnMcpsIndication+0xf4>
            ComplianceTestState.DataBuffer[0] = 4;
 800778c:	2304      	movs	r3, #4
 800778e:	68e5      	ldr	r5, [r4, #12]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8007790:	7b11      	ldrb	r1, [r2, #12]
            ComplianceTestState.DataBuffer[0] = 4;
 8007792:	702b      	strb	r3, [r5, #0]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007794:	7a60      	ldrb	r0, [r4, #9]
            ComplianceTestState.DataBufferSize = mcpsIndication->BufferSize;
 8007796:	72a1      	strb	r1, [r4, #10]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 8007798:	1c03      	adds	r3, r0, #0
 800779a:	4288      	cmp	r0, r1
 800779c:	d900      	bls.n	80077a0 <LmhpComplianceOnMcpsIndication+0x110>
 800779e:	1c0b      	adds	r3, r1, #0
 80077a0:	b2d9      	uxtb	r1, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	3301      	adds	r3, #1
 80077a6:	b2d8      	uxtb	r0, r3
 80077a8:	4281      	cmp	r1, r0
 80077aa:	d9bd      	bls.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
                ComplianceTestState.DataBuffer[i] = mcpsIndication->Buffer[i] + 1;
 80077ac:	6890      	ldr	r0, [r2, #8]
 80077ae:	5cc0      	ldrb	r0, [r0, r3]
 80077b0:	3001      	adds	r0, #1
 80077b2:	54e8      	strb	r0, [r5, r3]
            for( uint8_t i = 1; i < MIN( ComplianceTestState.DataBufferSize, ComplianceTestState.DataBufferMaxSize ); i++ )
 80077b4:	e7f6      	b.n	80077a4 <LmhpComplianceOnMcpsIndication+0x114>
                mlmeReq.Type = MLME_LINK_CHECK;
 80077b6:	2304      	movs	r3, #4
 80077b8:	a803      	add	r0, sp, #12
                mlmeReq.Type = MLME_DEVICE_TIME;
 80077ba:	7003      	strb	r3, [r0, #0]
                LoRaMacMlmeRequest( &mlmeReq );
 80077bc:	f002 fb00 	bl	8009dc0 <LoRaMacMlmeRequest>
            break;
 80077c0:	e7b2      	b.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
                TimerStop(&ComplianceTxNextPacketTimer);
 80077c2:	0020      	movs	r0, r4
 80077c4:	3018      	adds	r0, #24
 80077c6:	f006 fcd5 	bl	800e174 <UTIL_TIMER_Stop>
                ComplianceTestState.DownLinkCounter = 0;
 80077ca:	2300      	movs	r3, #0
                mibReq.Type = MIB_ADR;
 80077cc:	466a      	mov	r2, sp
                ComplianceTestState.DownLinkCounter = 0;
 80077ce:	8223      	strh	r3, [r4, #16]
                ComplianceTestState.IsRunning = false;
 80077d0:	7163      	strb	r3, [r4, #5]
                mibReq.Type = MIB_ADR;
 80077d2:	3304      	adds	r3, #4
 80077d4:	7313      	strb	r3, [r2, #12]
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80077d6:	6823      	ldr	r3, [r4, #0]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80077d8:	a803      	add	r0, sp, #12
                mibReq.Param.AdrEnable = LmhpComplianceParams->AdrEnabled;
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	7413      	strb	r3, [r2, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 80077de:	f002 f8bf 	bl	8009960 <LoRaMacMibSetRequestConfirm>
                LoRaMacTestSetDutyCycleOn( LmhpComplianceParams->DutyCycleEnabled );
 80077e2:	6823      	ldr	r3, [r4, #0]
 80077e4:	7858      	ldrb	r0, [r3, #1]
 80077e6:	f002 fd9b 	bl	800a320 <LoRaMacTestSetDutyCycleOn>
                if( LmhpComplianceParams->StartPeripherals != NULL )
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	689b      	ldr	r3, [r3, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d000      	beq.n	80077f4 <LmhpComplianceOnMcpsIndication+0x164>
                    LmhpComplianceParams->StartPeripherals( );
 80077f2:	4798      	blx	r3
                LmhpCompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA );
 80077f4:	4b22      	ldr	r3, [pc, #136]	; (8007880 <LmhpComplianceOnMcpsIndication+0x1f0>)
 80077f6:	2002      	movs	r0, #2
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	4798      	blx	r3
            break;
 80077fc:	e794      	b.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
                if( mcpsIndication->BufferSize == 3 )
 80077fe:	7b12      	ldrb	r2, [r2, #12]
 8007800:	a803      	add	r0, sp, #12
 8007802:	2a03      	cmp	r2, #3
 8007804:	d10c      	bne.n	8007820 <LmhpComplianceOnMcpsIndication+0x190>
                    mlmeReq.Type = MLME_TXCW;
 8007806:	3202      	adds	r2, #2
 8007808:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 800780a:	785a      	ldrb	r2, [r3, #1]
 800780c:	789b      	ldrb	r3, [r3, #2]
 800780e:	021b      	lsls	r3, r3, #8
 8007810:	4313      	orrs	r3, r2
 8007812:	ba5b      	rev16	r3, r3
 8007814:	8083      	strh	r3, [r0, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8007816:	f002 fad3 	bl	8009dc0 <LoRaMacMlmeRequest>
                ComplianceTestState.State = 1;
 800781a:	2301      	movs	r3, #1
 800781c:	71a3      	strb	r3, [r4, #6]
            break;
 800781e:	e783      	b.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
                else if( mcpsIndication->BufferSize == 7 )
 8007820:	2a07      	cmp	r2, #7
 8007822:	d1f8      	bne.n	8007816 <LmhpComplianceOnMcpsIndication+0x186>
                    mlmeReq.Type = MLME_TXCW_1;
 8007824:	3a01      	subs	r2, #1
 8007826:	7002      	strb	r2, [r0, #0]
                    mlmeReq.Req.TxCw.Timeout = ( uint16_t )( ( mcpsIndication->Buffer[1] << 8 ) | mcpsIndication->Buffer[2] );
 8007828:	789a      	ldrb	r2, [r3, #2]
 800782a:	7859      	ldrb	r1, [r3, #1]
 800782c:	0212      	lsls	r2, r2, #8
 800782e:	430a      	orrs	r2, r1
 8007830:	ba52      	rev16	r2, r2
 8007832:	8082      	strh	r2, [r0, #4]
                    mlmeReq.Req.TxCw.Frequency = ( uint32_t )( ( mcpsIndication->Buffer[3] << 16 ) | ( mcpsIndication->Buffer[4] << 8 ) | mcpsIndication->Buffer[5] ) * 100;
 8007834:	78da      	ldrb	r2, [r3, #3]
 8007836:	7919      	ldrb	r1, [r3, #4]
 8007838:	0412      	lsls	r2, r2, #16
 800783a:	0209      	lsls	r1, r1, #8
 800783c:	430a      	orrs	r2, r1
 800783e:	7959      	ldrb	r1, [r3, #5]
 8007840:	430a      	orrs	r2, r1
 8007842:	2164      	movs	r1, #100	; 0x64
 8007844:	434a      	muls	r2, r1
 8007846:	6082      	str	r2, [r0, #8]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[6];
 8007848:	799b      	ldrb	r3, [r3, #6]
 800784a:	7303      	strb	r3, [r0, #12]
 800784c:	e7e3      	b.n	8007816 <LmhpComplianceOnMcpsIndication+0x186>
                mlmeReq.Type = MLME_DEVICE_TIME;
 800784e:	230a      	movs	r3, #10
 8007850:	a803      	add	r0, sp, #12
 8007852:	e7b2      	b.n	80077ba <LmhpComplianceOnMcpsIndication+0x12a>
                mibReq.Type = MIB_DEVICE_CLASS;
 8007854:	4669      	mov	r1, sp
 8007856:	2200      	movs	r2, #0
 8007858:	730a      	strb	r2, [r1, #12]
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800785a:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMibSetRequestConfirm( &mibReq );
 800785c:	a803      	add	r0, sp, #12
                mibReq.Param.Class = ( DeviceClass_t )mcpsIndication->Buffer[1];;
 800785e:	740b      	strb	r3, [r1, #16]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8007860:	f002 f87e 	bl	8009960 <LoRaMacMibSetRequestConfirm>
            break;
 8007864:	e760      	b.n	8007728 <LmhpComplianceOnMcpsIndication+0x98>
                mlmeReq.Type = MLME_PING_SLOT_INFO;
 8007866:	4669      	mov	r1, sp
 8007868:	220d      	movs	r2, #13
 800786a:	730a      	strb	r2, [r1, #12]
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 800786c:	785b      	ldrb	r3, [r3, #1]
                LoRaMacMlmeRequest( &mlmeReq );
 800786e:	a803      	add	r0, sp, #12
                mlmeReq.Req.PingSlotInfo.PingSlot.Value = mcpsIndication->Buffer[1];
 8007870:	740b      	strb	r3, [r1, #16]
                LoRaMacMlmeRequest( &mlmeReq );
 8007872:	e7a3      	b.n	80077bc <LmhpComplianceOnMcpsIndication+0x12c>
 8007874:	200006a8 	.word	0x200006a8
 8007878:	08007689 	.word	0x08007689
 800787c:	00001388 	.word	0x00001388
 8007880:	200000a4 	.word	0x200000a4

08007884 <LmhpCompliancePackageFactory>:
    return &LmhpCompliancePackage;
 8007884:	4800      	ldr	r0, [pc, #0]	; (8007888 <LmhpCompliancePackageFactory+0x4>)
}
 8007886:	4770      	bx	lr
 8007888:	200000a4 	.word	0x200000a4

0800788c <NvmDataMgmtEvent>:
void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags = notifyFlags;
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800788c:	4770      	bx	lr

0800788e <NvmDataMgmtStore>:
    LoRaMacStart( );
    return dataSize;
#else
    return 0;
#endif
}
 800788e:	2000      	movs	r0, #0
 8007890:	4770      	bx	lr

08007892 <NvmDataMgmtRestore>:
 8007892:	2000      	movs	r0, #0
 8007894:	4770      	bx	lr
	...

08007898 <OnRadioRxError>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
}

static void OnRadioRxError( void )
{
    LoRaMacRadioEvents.Events.RxError = 1;
 8007898:	2302      	movs	r3, #2
 800789a:	4a08      	ldr	r2, [pc, #32]	; (80078bc <OnRadioRxError+0x24>)
{
 800789c:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 800789e:	7811      	ldrb	r1, [r2, #0]
 80078a0:	430b      	orrs	r3, r1
 80078a2:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80078a4:	22d2      	movs	r2, #210	; 0xd2
 80078a6:	4b06      	ldr	r3, [pc, #24]	; (80078c0 <OnRadioRxError+0x28>)
 80078a8:	0092      	lsls	r2, r2, #2
 80078aa:	589b      	ldr	r3, [r3, r2]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d003      	beq.n	80078b8 <OnRadioRxError+0x20>
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d000      	beq.n	80078b8 <OnRadioRxError+0x20>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80078b6:	4798      	blx	r3
    }
}
 80078b8:	bd10      	pop	{r4, pc}
 80078ba:	46c0      	nop			; (mov r8, r8)
 80078bc:	200006d8 	.word	0x200006d8
 80078c0:	20000a3c 	.word	0x20000a3c

080078c4 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <UpdateRxSlotIdleState+0x18>)
 80078c6:	33fc      	adds	r3, #252	; 0xfc
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	2a02      	cmp	r2, #2
 80078cc:	d000      	beq.n	80078d0 <UpdateRxSlotIdleState+0xc>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 80078ce:	2206      	movs	r2, #6
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 80078d0:	2190      	movs	r1, #144	; 0x90
 80078d2:	4b03      	ldr	r3, [pc, #12]	; (80078e0 <UpdateRxSlotIdleState+0x1c>)
 80078d4:	00c9      	lsls	r1, r1, #3
 80078d6:	545a      	strb	r2, [r3, r1]
 80078d8:	4770      	bx	lr
 80078da:	46c0      	nop			; (mov r8, r8)
 80078dc:	200006f0 	.word	0x200006f0
 80078e0:	20000a3c 	.word	0x20000a3c

080078e4 <GetMaxAppPayloadWithoutFOptsLength>:

    return status;
}

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 80078e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80078e6:	4b09      	ldr	r3, [pc, #36]	; (800790c <GetMaxAppPayloadWithoutFOptsLength+0x28>)
 80078e8:	a902      	add	r1, sp, #8
 80078ea:	001a      	movs	r2, r3
 80078ec:	3274      	adds	r2, #116	; 0x74
 80078ee:	7812      	ldrb	r2, [r2, #0]
    getPhy.Datarate = datarate;
 80078f0:	7048      	strb	r0, [r1, #1]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80078f2:	708a      	strb	r2, [r1, #2]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80078f4:	001a      	movs	r2, r3
 80078f6:	3280      	adds	r2, #128	; 0x80
 80078f8:	7812      	ldrb	r2, [r2, #0]
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80078fa:	3340      	adds	r3, #64	; 0x40
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 80078fc:	320d      	adds	r2, #13
 80078fe:	700a      	strb	r2, [r1, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8007900:	7818      	ldrb	r0, [r3, #0]
 8007902:	f003 fbf1 	bl	800b0e8 <RegionGetPhyParam>

    return phyParam.Value;
 8007906:	b2c0      	uxtb	r0, r0
}
 8007908:	b005      	add	sp, #20
 800790a:	bd00      	pop	{pc}
 800790c:	200006f0 	.word	0x200006f0

08007910 <OnAckTimeoutTimerEvent>:
{
 8007910:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.AckTimeoutTimer );
 8007912:	480f      	ldr	r0, [pc, #60]	; (8007950 <OnAckTimeoutTimerEvent+0x40>)
 8007914:	f006 fc2e 	bl	800e174 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 8007918:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <OnAckTimeoutTimerEvent+0x44>)
 800791a:	4a0f      	ldr	r2, [pc, #60]	; (8007958 <OnAckTimeoutTimerEvent+0x48>)
 800791c:	5c9a      	ldrb	r2, [r3, r2]
 800791e:	2a00      	cmp	r2, #0
 8007920:	d002      	beq.n	8007928 <OnAckTimeoutTimerEvent+0x18>
        MacCtx.AckTimeoutRetry = true;
 8007922:	2101      	movs	r1, #1
 8007924:	4a0d      	ldr	r2, [pc, #52]	; (800795c <OnAckTimeoutTimerEvent+0x4c>)
 8007926:	5499      	strb	r1, [r3, r2]
    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8007928:	4a0d      	ldr	r2, [pc, #52]	; (8007960 <OnAckTimeoutTimerEvent+0x50>)
 800792a:	32fc      	adds	r2, #252	; 0xfc
 800792c:	7812      	ldrb	r2, [r2, #0]
 800792e:	2a02      	cmp	r2, #2
 8007930:	d104      	bne.n	800793c <OnAckTimeoutTimerEvent+0x2c>
        MacCtx.MacFlags.Bits.MacDone = 1;
 8007932:	490c      	ldr	r1, [pc, #48]	; (8007964 <OnAckTimeoutTimerEvent+0x54>)
 8007934:	321e      	adds	r2, #30
 8007936:	5c58      	ldrb	r0, [r3, r1]
 8007938:	4302      	orrs	r2, r0
 800793a:	545a      	strb	r2, [r3, r1]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800793c:	22d2      	movs	r2, #210	; 0xd2
 800793e:	0092      	lsls	r2, r2, #2
 8007940:	589b      	ldr	r3, [r3, r2]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d003      	beq.n	800794e <OnAckTimeoutTimerEvent+0x3e>
 8007946:	691b      	ldr	r3, [r3, #16]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d000      	beq.n	800794e <OnAckTimeoutTimerEvent+0x3e>
        MacCtx.MacCallbacks->MacProcessNotify( );
 800794c:	4798      	blx	r3
}
 800794e:	bd10      	pop	{r4, pc}
 8007950:	20000e34 	.word	0x20000e34
 8007954:	20000a3c 	.word	0x20000a3c
 8007958:	00000414 	.word	0x00000414
 800795c:	00000413 	.word	0x00000413
 8007960:	200006f0 	.word	0x200006f0
 8007964:	00000481 	.word	0x00000481

08007968 <PrepareRxDoneAbort>:
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 8007968:	22d0      	movs	r2, #208	; 0xd0
 800796a:	2380      	movs	r3, #128	; 0x80
{
 800796c:	b510      	push	{r4, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800796e:	4c0a      	ldr	r4, [pc, #40]	; (8007998 <PrepareRxDoneAbort+0x30>)
 8007970:	0092      	lsls	r2, r2, #2
 8007972:	58a1      	ldr	r1, [r4, r2]
 8007974:	430b      	orrs	r3, r1
 8007976:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == true )
 8007978:	4b08      	ldr	r3, [pc, #32]	; (800799c <PrepareRxDoneAbort+0x34>)
 800797a:	5ce3      	ldrb	r3, [r4, r3]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <PrepareRxDoneAbort+0x1e>
        OnAckTimeoutTimerEvent( NULL );
 8007980:	2000      	movs	r0, #0
 8007982:	f7ff ffc5 	bl	8007910 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 8007986:	2322      	movs	r3, #34	; 0x22
 8007988:	4905      	ldr	r1, [pc, #20]	; (80079a0 <PrepareRxDoneAbort+0x38>)
 800798a:	5c62      	ldrb	r2, [r4, r1]
 800798c:	439a      	bics	r2, r3
 800798e:	4313      	orrs	r3, r2
 8007990:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8007992:	f7ff ff97 	bl	80078c4 <UpdateRxSlotIdleState>
}
 8007996:	bd10      	pop	{r4, pc}
 8007998:	20000a3c 	.word	0x20000a3c
 800799c:	00000414 	.word	0x00000414
 80079a0:	00000481 	.word	0x00000481

080079a4 <HandleRadioRxErrorTimeout>:
{
 80079a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80079a6:	4c30      	ldr	r4, [pc, #192]	; (8007a68 <HandleRadioRxErrorTimeout+0xc4>)
{
 80079a8:	0006      	movs	r6, r0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80079aa:	0023      	movs	r3, r4
 80079ac:	33fc      	adds	r3, #252	; 0xfc
 80079ae:	781b      	ldrb	r3, [r3, #0]
{
 80079b0:	000d      	movs	r5, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 80079b2:	2b02      	cmp	r3, #2
 80079b4:	d002      	beq.n	80079bc <HandleRadioRxErrorTimeout+0x18>
        Radio.Sleep( );
 80079b6:	4b2d      	ldr	r3, [pc, #180]	; (8007a6c <HandleRadioRxErrorTimeout+0xc8>)
 80079b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ba:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 80079bc:	f002 fd36 	bl	800a42c <LoRaMacClassBIsBeaconExpected>
 80079c0:	1e07      	subs	r7, r0, #0
 80079c2:	d005      	beq.n	80079d0 <HandleRadioRxErrorTimeout+0x2c>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 80079c4:	2002      	movs	r0, #2
 80079c6:	f002 fd27 	bl	800a418 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 80079ca:	2000      	movs	r0, #0
 80079cc:	f002 fd29 	bl	800a422 <LoRaMacClassBBeaconTimerEvent>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 80079d0:	0023      	movs	r3, r4
 80079d2:	33fc      	adds	r3, #252	; 0xfc
 80079d4:	781b      	ldrb	r3, [r3, #0]
 80079d6:	2b01      	cmp	r3, #1
 80079d8:	d118      	bne.n	8007a0c <HandleRadioRxErrorTimeout+0x68>
        if( LoRaMacClassBIsPingExpected( ) == true )
 80079da:	f002 fd29 	bl	800a430 <LoRaMacClassBIsPingExpected>
 80079de:	9001      	str	r0, [sp, #4]
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d006      	beq.n	80079f2 <HandleRadioRxErrorTimeout+0x4e>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80079e4:	2000      	movs	r0, #0
 80079e6:	f002 fd18 	bl	800a41a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 80079ea:	2000      	movs	r0, #0
 80079ec:	f002 fd1a 	bl	800a424 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 80079f0:	9f01      	ldr	r7, [sp, #4]
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 80079f2:	f002 fd1f 	bl	800a434 <LoRaMacClassBIsMulticastExpected>
 80079f6:	2800      	cmp	r0, #0
 80079f8:	d008      	beq.n	8007a0c <HandleRadioRxErrorTimeout+0x68>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 80079fa:	2000      	movs	r0, #0
 80079fc:	f002 fd0e 	bl	800a41c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8007a00:	2000      	movs	r0, #0
 8007a02:	f002 fd10 	bl	800a426 <LoRaMacClassBMulticastSlotTimerEvent>
    UpdateRxSlotIdleState( );
 8007a06:	f7ff ff5d 	bl	80078c4 <UpdateRxSlotIdleState>
}
 8007a0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    if( classBRx == false )
 8007a0c:	2f00      	cmp	r7, #0
 8007a0e:	d1fa      	bne.n	8007a06 <HandleRadioRxErrorTimeout+0x62>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a10:	2290      	movs	r2, #144	; 0x90
            if( MacCtx.NodeAckRequested == true )
 8007a12:	4f17      	ldr	r7, [pc, #92]	; (8007a70 <HandleRadioRxErrorTimeout+0xcc>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a14:	00d2      	lsls	r2, r2, #3
            if( MacCtx.NodeAckRequested == true )
 8007a16:	4b17      	ldr	r3, [pc, #92]	; (8007a74 <HandleRadioRxErrorTimeout+0xd0>)
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a18:	5cba      	ldrb	r2, [r7, r2]
            if( MacCtx.NodeAckRequested == true )
 8007a1a:	5cfb      	ldrb	r3, [r7, r3]
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8007a1c:	2a00      	cmp	r2, #0
 8007a1e:	d117      	bne.n	8007a50 <HandleRadioRxErrorTimeout+0xac>
            if( MacCtx.NodeAckRequested == true )
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d001      	beq.n	8007a28 <HandleRadioRxErrorTimeout+0x84>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 8007a24:	4b14      	ldr	r3, [pc, #80]	; (8007a78 <HandleRadioRxErrorTimeout+0xd4>)
 8007a26:	54fe      	strb	r6, [r7, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 8007a28:	0030      	movs	r0, r6
 8007a2a:	f002 fead 	bl	800a788 <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 8007a2e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8007a30:	f006 fb68 	bl	800e104 <UTIL_TIMER_GetElapsedTime>
 8007a34:	23ed      	movs	r3, #237	; 0xed
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	58fb      	ldr	r3, [r7, r3]
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	d3e3      	bcc.n	8007a06 <HandleRadioRxErrorTimeout+0x62>
                TimerStop( &MacCtx.RxWindowTimer2 );
 8007a3e:	480f      	ldr	r0, [pc, #60]	; (8007a7c <HandleRadioRxErrorTimeout+0xd8>)
 8007a40:	f006 fb98 	bl	800e174 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 8007a44:	2320      	movs	r3, #32
 8007a46:	4a0e      	ldr	r2, [pc, #56]	; (8007a80 <HandleRadioRxErrorTimeout+0xdc>)
 8007a48:	5cb9      	ldrb	r1, [r7, r2]
 8007a4a:	430b      	orrs	r3, r1
 8007a4c:	54bb      	strb	r3, [r7, r2]
 8007a4e:	e7da      	b.n	8007a06 <HandleRadioRxErrorTimeout+0x62>
            if( MacCtx.NodeAckRequested == true )
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <HandleRadioRxErrorTimeout+0xb4>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <HandleRadioRxErrorTimeout+0xd4>)
 8007a56:	54fd      	strb	r5, [r7, r3]
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007a58:	0028      	movs	r0, r5
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007a5a:	34fc      	adds	r4, #252	; 0xfc
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 8007a5c:	f002 fe94 	bl	800a788 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8007a60:	7823      	ldrb	r3, [r4, #0]
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d1ee      	bne.n	8007a44 <HandleRadioRxErrorTimeout+0xa0>
 8007a66:	e7ce      	b.n	8007a06 <HandleRadioRxErrorTimeout+0x62>
 8007a68:	200006f0 	.word	0x200006f0
 8007a6c:	0800f64c 	.word	0x0800f64c
 8007a70:	20000a3c 	.word	0x20000a3c
 8007a74:	00000414 	.word	0x00000414
 8007a78:	00000439 	.word	0x00000439
 8007a7c:	20000dd4 	.word	0x20000dd4
 8007a80:	00000481 	.word	0x00000481

08007a84 <OnRadioRxTimeout>:
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007a84:	2301      	movs	r3, #1
 8007a86:	4a0b      	ldr	r2, [pc, #44]	; (8007ab4 <OnRadioRxTimeout+0x30>)
{
 8007a88:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 8007a8a:	7811      	ldrb	r1, [r2, #0]
 8007a8c:	430b      	orrs	r3, r1
 8007a8e:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007a90:	22d2      	movs	r2, #210	; 0xd2
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <OnRadioRxTimeout+0x34>)
 8007a94:	0092      	lsls	r2, r2, #2
 8007a96:	589b      	ldr	r3, [r3, r2]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d003      	beq.n	8007aa4 <OnRadioRxTimeout+0x20>
 8007a9c:	691b      	ldr	r3, [r3, #16]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d000      	beq.n	8007aa4 <OnRadioRxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007aa2:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 8007aa4:	2201      	movs	r2, #1
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	2002      	movs	r0, #2
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <OnRadioRxTimeout+0x38>)
 8007aac:	f006 f856 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8007ab0:	bd10      	pop	{r4, pc}
 8007ab2:	46c0      	nop			; (mov r8, r8)
 8007ab4:	200006d8 	.word	0x200006d8
 8007ab8:	20000a3c 	.word	0x20000a3c
 8007abc:	0800fbe9 	.word	0x0800fbe9

08007ac0 <OnRadioTxTimeout>:
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007ac0:	2304      	movs	r3, #4
 8007ac2:	4a0b      	ldr	r2, [pc, #44]	; (8007af0 <OnRadioTxTimeout+0x30>)
{
 8007ac4:	b510      	push	{r4, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 8007ac6:	7811      	ldrb	r1, [r2, #0]
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	7013      	strb	r3, [r2, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007acc:	22d2      	movs	r2, #210	; 0xd2
 8007ace:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <OnRadioTxTimeout+0x34>)
 8007ad0:	0092      	lsls	r2, r2, #2
 8007ad2:	589b      	ldr	r3, [r3, r2]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d003      	beq.n	8007ae0 <OnRadioTxTimeout+0x20>
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d000      	beq.n	8007ae0 <OnRadioTxTimeout+0x20>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007ade:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	2002      	movs	r0, #2
 8007ae6:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <OnRadioTxTimeout+0x38>)
 8007ae8:	f006 f838 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	46c0      	nop			; (mov r8, r8)
 8007af0:	200006d8 	.word	0x200006d8
 8007af4:	20000a3c 	.word	0x20000a3c
 8007af8:	0800fbf9 	.word	0x0800fbf9

08007afc <OnRadioRxDone>:
{
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	000e      	movs	r6, r1
 8007b00:	0015      	movs	r5, r2
 8007b02:	001c      	movs	r4, r3
 8007b04:	0007      	movs	r7, r0
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007b06:	f006 faf3 	bl	800e0f0 <UTIL_TIMER_GetCurrentTime>
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007b0a:	2208      	movs	r2, #8
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007b0c:	4b0c      	ldr	r3, [pc, #48]	; (8007b40 <OnRadioRxDone+0x44>)
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007b0e:	7819      	ldrb	r1, [r3, #0]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 8007b10:	6058      	str	r0, [r3, #4]
    LoRaMacRadioEvents.Events.RxDone = 1;
 8007b12:	430a      	orrs	r2, r1
 8007b14:	701a      	strb	r2, [r3, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b16:	22d2      	movs	r2, #210	; 0xd2
    RxDoneParams.Payload = payload;
 8007b18:	609f      	str	r7, [r3, #8]
    RxDoneParams.Size = size;
 8007b1a:	819e      	strh	r6, [r3, #12]
    RxDoneParams.Rssi = rssi;
 8007b1c:	81dd      	strh	r5, [r3, #14]
    RxDoneParams.Snr = snr;
 8007b1e:	741c      	strb	r4, [r3, #16]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b20:	4b08      	ldr	r3, [pc, #32]	; (8007b44 <OnRadioRxDone+0x48>)
 8007b22:	0092      	lsls	r2, r2, #2
 8007b24:	589b      	ldr	r3, [r3, r2]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d003      	beq.n	8007b32 <OnRadioRxDone+0x36>
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d000      	beq.n	8007b32 <OnRadioRxDone+0x36>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b30:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 8007b32:	2201      	movs	r2, #1
 8007b34:	2100      	movs	r1, #0
 8007b36:	4b04      	ldr	r3, [pc, #16]	; (8007b48 <OnRadioRxDone+0x4c>)
 8007b38:	2002      	movs	r0, #2
 8007b3a:	f006 f80f 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8007b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b40:	200006d8 	.word	0x200006d8
 8007b44:	20000a3c 	.word	0x20000a3c
 8007b48:	0800fc09 	.word	0x0800fc09

08007b4c <OnRadioTxDone>:
{
 8007b4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007b4e:	f006 facf 	bl	800e0f0 <UTIL_TIMER_GetCurrentTime>
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007b52:	466c      	mov	r4, sp
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007b54:	4d0f      	ldr	r5, [pc, #60]	; (8007b94 <OnRadioTxDone+0x48>)
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007b56:	4e10      	ldr	r6, [pc, #64]	; (8007b98 <OnRadioTxDone+0x4c>)
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 8007b58:	6168      	str	r0, [r5, #20]
    MacCtx.LastTxSysTime = SysTimeGet( );
 8007b5a:	0020      	movs	r0, r4
 8007b5c:	f006 fa1c 	bl	800df98 <SysTimeGet>
 8007b60:	23ce      	movs	r3, #206	; 0xce
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	18f2      	adds	r2, r6, r3
 8007b66:	cc03      	ldmia	r4!, {r0, r1}
 8007b68:	c203      	stmia	r2!, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 8007b6a:	2210      	movs	r2, #16
 8007b6c:	7829      	ldrb	r1, [r5, #0]
 8007b6e:	430a      	orrs	r2, r1
 8007b70:	702a      	strb	r2, [r5, #0]
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 8007b72:	22d2      	movs	r2, #210	; 0xd2
 8007b74:	0092      	lsls	r2, r2, #2
 8007b76:	58b3      	ldr	r3, [r6, r2]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d003      	beq.n	8007b84 <OnRadioTxDone+0x38>
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d000      	beq.n	8007b84 <OnRadioTxDone+0x38>
        MacCtx.MacCallbacks->MacProcessNotify( );
 8007b82:	4798      	blx	r3
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 8007b84:	2201      	movs	r2, #1
 8007b86:	2100      	movs	r1, #0
 8007b88:	4b04      	ldr	r3, [pc, #16]	; (8007b9c <OnRadioTxDone+0x50>)
 8007b8a:	2002      	movs	r0, #2
 8007b8c:	f005 ffe6 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 8007b90:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	200006d8 	.word	0x200006d8
 8007b98:	20000a3c 	.word	0x20000a3c
 8007b9c:	0800fc16 	.word	0x0800fc16

08007ba0 <ResetMacParameters>:
    }
}


static void ResetMacParameters( void )
{
 8007ba0:	b570      	push	{r4, r5, r6, lr}
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007ba2:	4c43      	ldr	r4, [pc, #268]	; (8007cb0 <ResetMacParameters+0x110>)
 8007ba4:	2600      	movs	r6, #0
 8007ba6:	0023      	movs	r3, r4
 8007ba8:	33ff      	adds	r3, #255	; 0xff
    MacCtx.ChannelsNbTransCounter = 0;
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;

    Nvm.MacGroup2.MaxDCycle = 0;
 8007baa:	701e      	strb	r6, [r3, #0]
    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8007bac:	745e      	strb	r6, [r3, #17]
    Nvm.MacGroup2.AggregatedDCycle = 1;
 8007bae:	0023      	movs	r3, r4
 8007bb0:	2001      	movs	r0, #1
 8007bb2:	33fe      	adds	r3, #254	; 0xfe
 8007bb4:	8098      	strh	r0, [r3, #4]

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007bb6:	0023      	movs	r3, r4
 8007bb8:	33c4      	adds	r3, #196	; 0xc4
 8007bba:	881b      	ldrh	r3, [r3, #0]
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007bbc:	0022      	movs	r2, r4
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8007bbe:	8723      	strh	r3, [r4, #56]	; 0x38
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007bc0:	0023      	movs	r3, r4
    Nvm.MacGroup1.AdrAckCounter = 0;
 8007bc2:	62a6      	str	r6, [r4, #40]	; 0x28
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 8007bc4:	32a1      	adds	r2, #161	; 0xa1
 8007bc6:	7812      	ldrb	r2, [r2, #0]
 8007bc8:	3361      	adds	r3, #97	; 0x61
 8007bca:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 8007bcc:	0022      	movs	r2, r4
 8007bce:	0023      	movs	r3, r4
 8007bd0:	32a4      	adds	r2, #164	; 0xa4
 8007bd2:	3364      	adds	r3, #100	; 0x64
 8007bd4:	ca22      	ldmia	r2!, {r1, r5}
 8007bd6:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8007bd8:	0022      	movs	r2, r4
 8007bda:	0023      	movs	r3, r4
 8007bdc:	32ac      	adds	r2, #172	; 0xac
 8007bde:	336c      	adds	r3, #108	; 0x6c
 8007be0:	ca22      	ldmia	r2!, {r1, r5}
 8007be2:	c322      	stmia	r3!, {r1, r5}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8007be4:	0022      	movs	r2, r4
 8007be6:	0023      	movs	r3, r4
 8007be8:	32b4      	adds	r2, #180	; 0xb4
 8007bea:	8812      	ldrh	r2, [r2, #0]
 8007bec:	3374      	adds	r3, #116	; 0x74
 8007bee:	801a      	strh	r2, [r3, #0]
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007bf0:	0023      	movs	r3, r4
 8007bf2:	33b8      	adds	r3, #184	; 0xb8
 8007bf4:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007bf6:	4d2f      	ldr	r5, [pc, #188]	; (8007cb4 <ResetMacParameters+0x114>)
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8007bf8:	67a3      	str	r3, [r4, #120]	; 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007bfa:	0023      	movs	r3, r4
 8007bfc:	33bc      	adds	r3, #188	; 0xbc
 8007bfe:	681b      	ldr	r3, [r3, #0]
    MacCtx.ChannelsNbTransCounter = 0;
 8007c00:	4a2d      	ldr	r2, [pc, #180]	; (8007cb8 <ResetMacParameters+0x118>)
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8007c02:	67e3      	str	r3, [r4, #124]	; 0x7c
    MacCtx.ChannelsNbTransCounter = 0;
 8007c04:	2382      	movs	r3, #130	; 0x82
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	50ea      	str	r2, [r5, r3]

    MacCtx.NodeAckRequested = false;
 8007c0a:	4b2c      	ldr	r3, [pc, #176]	; (8007cbc <ResetMacParameters+0x11c>)
{
 8007c0c:	b08e      	sub	sp, #56	; 0x38
    MacCtx.NodeAckRequested = false;
 8007c0e:	54ee      	strb	r6, [r5, r3]
    Nvm.MacGroup1.SrvAckRequested = false;
 8007c10:	0023      	movs	r3, r4
 8007c12:	333a      	adds	r3, #58	; 0x3a
 8007c14:	701e      	strb	r6, [r3, #0]

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007c16:	4b2a      	ldr	r3, [pc, #168]	; (8007cc0 <ResetMacParameters+0x120>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007c18:	a903      	add	r1, sp, #12
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8007c1a:	9303      	str	r3, [sp, #12]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007c1c:	4b29      	ldr	r3, [pc, #164]	; (8007cc4 <ResetMacParameters+0x124>)
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 8007c1e:	7208      	strb	r0, [r1, #8]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8007c20:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8007c22:	0023      	movs	r3, r4
 8007c24:	3340      	adds	r3, #64	; 0x40
 8007c26:	7818      	ldrb	r0, [r3, #0]
 8007c28:	f003 fa71 	bl	800b10e <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 8007c2c:	4b26      	ldr	r3, [pc, #152]	; (8007cc8 <ResetMacParameters+0x128>)

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
    MacCtx.Channel = 0;
 8007c30:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8007c32:	3b49      	subs	r3, #73	; 0x49
 8007c34:	54ee      	strb	r6, [r5, r3]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8007c36:	3304      	adds	r3, #4
 8007c38:	50ea      	str	r2, [r5, r3]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8007c3a:	0023      	movs	r3, r4
 8007c3c:	3375      	adds	r3, #117	; 0x75
 8007c3e:	781a      	ldrb	r2, [r3, #0]
 8007c40:	23f7      	movs	r3, #247	; 0xf7
 8007c42:	009b      	lsls	r3, r3, #2
 8007c44:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8007c46:	3480      	adds	r4, #128	; 0x80
 8007c48:	7822      	ldrb	r2, [r4, #0]
 8007c4a:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <ResetMacParameters+0x12c>)
 8007c4c:	54ea      	strb	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8007c4e:	2280      	movs	r2, #128	; 0x80
 8007c50:	4b1f      	ldr	r3, [pc, #124]	; (8007cd0 <ResetMacParameters+0x130>)
 8007c52:	0052      	lsls	r2, r2, #1
 8007c54:	52ea      	strh	r2, [r5, r3]
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8007c56:	22f3      	movs	r2, #243	; 0xf3
 8007c58:	3302      	adds	r3, #2
 8007c5a:	0092      	lsls	r2, r2, #2
 8007c5c:	18eb      	adds	r3, r5, r3
 8007c5e:	18aa      	adds	r2, r5, r2
 8007c60:	ca13      	ldmia	r2!, {r0, r1, r4}
 8007c62:	c313      	stmia	r3!, {r0, r1, r4}
 8007c64:	ca03      	ldmia	r2!, {r0, r1}
 8007c66:	c303      	stmia	r3!, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007c68:	4b1a      	ldr	r3, [pc, #104]	; (8007cd4 <ResetMacParameters+0x134>)
 8007c6a:	4a1b      	ldr	r2, [pc, #108]	; (8007cd8 <ResetMacParameters+0x138>)
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 8007c6c:	9601      	str	r6, [sp, #4]
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8007c6e:	52ea      	strh	r2, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;

    if( MacCtx.MacCallbacks != NULL )
 8007c70:	3baa      	subs	r3, #170	; 0xaa
 8007c72:	58eb      	ldr	r3, [r5, r3]
    classBCallbacks.MacProcessNotify = NULL;
 8007c74:	9602      	str	r6, [sp, #8]
    if( MacCtx.MacCallbacks != NULL )
 8007c76:	42b3      	cmp	r3, r6
 8007c78:	d003      	beq.n	8007c82 <ResetMacParameters+0xe2>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007c7a:	685a      	ldr	r2, [r3, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007c7c:	691b      	ldr	r3, [r3, #16]
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 8007c7e:	9201      	str	r2, [sp, #4]
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8007c80:	9302      	str	r3, [sp, #8]
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007c82:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <ResetMacParameters+0x13c>)
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007c84:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <ResetMacParameters+0x140>)
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 8007c86:	9306      	str	r3, [sp, #24]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007c88:	4b16      	ldr	r3, [pc, #88]	; (8007ce4 <ResetMacParameters+0x144>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007c8a:	a901      	add	r1, sp, #4
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8007c8c:	9307      	str	r3, [sp, #28]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007c8e:	4b16      	ldr	r3, [pc, #88]	; (8007ce8 <ResetMacParameters+0x148>)
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007c90:	a806      	add	r0, sp, #24
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8007c92:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8007c94:	4b15      	ldr	r3, [pc, #84]	; (8007cec <ResetMacParameters+0x14c>)
 8007c96:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <ResetMacParameters+0x150>)
 8007c9a:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8007c9c:	4b15      	ldr	r3, [pc, #84]	; (8007cf4 <ResetMacParameters+0x154>)
 8007c9e:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8007ca0:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <ResetMacParameters+0x158>)
 8007ca2:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8007ca4:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <ResetMacParameters+0x15c>)
 8007ca6:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8007ca8:	f002 fbb5 	bl	800a416 <LoRaMacClassBInit>
}
 8007cac:	b00e      	add	sp, #56	; 0x38
 8007cae:	bd70      	pop	{r4, r5, r6, pc}
 8007cb0:	200006f0 	.word	0x200006f0
 8007cb4:	20000a3c 	.word	0x20000a3c
 8007cb8:	00010100 	.word	0x00010100
 8007cbc:	00000414 	.word	0x00000414
 8007cc0:	200008c8 	.word	0x200008c8
 8007cc4:	2000095c 	.word	0x2000095c
 8007cc8:	00000415 	.word	0x00000415
 8007ccc:	000003dd 	.word	0x000003dd
 8007cd0:	000003de 	.word	0x000003de
 8007cd4:	000003f2 	.word	0x000003f2
 8007cd8:	00000201 	.word	0x00000201
 8007cdc:	20000e9c 	.word	0x20000e9c
 8007ce0:	20000a24 	.word	0x20000a24
 8007ce4:	20000e58 	.word	0x20000e58
 8007ce8:	20000e88 	.word	0x20000e88
 8007cec:	20000ebd 	.word	0x20000ebd
 8007cf0:	200007bc 	.word	0x200007bc
 8007cf4:	20000730 	.word	0x20000730
 8007cf8:	20000734 	.word	0x20000734
 8007cfc:	200007c0 	.word	0x200007c0

08007d00 <ScheduleTx>:
{
 8007d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d02:	b095      	sub	sp, #84	; 0x54
 8007d04:	9003      	str	r0, [sp, #12]
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007d06:	f002 fb91 	bl	800a42c <LoRaMacClassBIsBeaconExpected>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 8007d0a:	270e      	movs	r7, #14
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 8007d0c:	2800      	cmp	r0, #0
 8007d0e:	d118      	bne.n	8007d42 <ScheduleTx+0x42>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007d10:	4cbc      	ldr	r4, [pc, #752]	; (8008004 <ScheduleTx+0x304>)
 8007d12:	0023      	movs	r3, r4
 8007d14:	33fc      	adds	r3, #252	; 0xfc
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d00d      	beq.n	8007d38 <ScheduleTx+0x38>
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8007d1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007d1e:	4fba      	ldr	r7, [pc, #744]	; (8008008 <ScheduleTx+0x308>)
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d016      	beq.n	8007d52 <ScheduleTx+0x52>
    switch( MacCtx.TxMsg.Type )
 8007d24:	003d      	movs	r5, r7
 8007d26:	35ff      	adds	r5, #255	; 0xff
 8007d28:	796b      	ldrb	r3, [r5, #5]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01b      	beq.n	8007d66 <ScheduleTx+0x66>
 8007d2e:	2b04      	cmp	r3, #4
 8007d30:	d100      	bne.n	8007d34 <ScheduleTx+0x34>
 8007d32:	e072      	b.n	8007e1a <ScheduleTx+0x11a>
            return LORAMAC_STATUS_PARAMETER_INVALID;
 8007d34:	2703      	movs	r7, #3
 8007d36:	e004      	b.n	8007d42 <ScheduleTx+0x42>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8007d38:	f002 fb7a 	bl	800a430 <LoRaMacClassBIsPingExpected>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	d003      	beq.n	8007d48 <ScheduleTx+0x48>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 8007d40:	270f      	movs	r7, #15
}
 8007d42:	0038      	movs	r0, r7
 8007d44:	b015      	add	sp, #84	; 0x54
 8007d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8007d48:	f002 fb74 	bl	800a434 <LoRaMacClassBIsMulticastExpected>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d0e5      	beq.n	8007d1c <ScheduleTx+0x1c>
 8007d50:	e7f6      	b.n	8007d40 <ScheduleTx+0x40>
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8007d52:	0023      	movs	r3, r4
 8007d54:	33fe      	adds	r3, #254	; 0xfe
 8007d56:	889a      	ldrh	r2, [r3, #4]
 8007d58:	2383      	movs	r3, #131	; 0x83
 8007d5a:	00db      	lsls	r3, r3, #3
 8007d5c:	58fb      	ldr	r3, [r7, r3]
 8007d5e:	3a01      	subs	r2, #1
 8007d60:	4353      	muls	r3, r2
 8007d62:	6323      	str	r3, [r4, #48]	; 0x30
 8007d64:	e7de      	b.n	8007d24 <ScheduleTx+0x24>
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007d66:	48a9      	ldr	r0, [pc, #676]	; (800800c <ScheduleTx+0x30c>)
 8007d68:	f003 f915 	bl	800af96 <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d000      	beq.n	8007d72 <ScheduleTx+0x72>
 8007d70:	e144      	b.n	8007ffc <ScheduleTx+0x2fc>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007d72:	7b6b      	ldrb	r3, [r5, #13]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8007d74:	ae0e      	add	r6, sp, #56	; 0x38
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007d76:	803b      	strh	r3, [r7, #0]
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8007d78:	6b23      	ldr	r3, [r4, #48]	; 0x30
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007d7a:	a808      	add	r0, sp, #32
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 8007d7c:	930e      	str	r3, [sp, #56]	; 0x38
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007d7e:	0023      	movs	r3, r4
 8007d80:	3339      	adds	r3, #57	; 0x39
 8007d82:	781b      	ldrb	r3, [r3, #0]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007d84:	ad04      	add	r5, sp, #16
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007d86:	7233      	strb	r3, [r6, #8]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 8007d88:	4ba1      	ldr	r3, [pc, #644]	; (8008010 <ScheduleTx+0x310>)
 8007d8a:	785b      	ldrb	r3, [r3, #1]
 8007d8c:	72b3      	strb	r3, [r6, #10]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8007d8e:	f006 f92b 	bl	800dfe8 <SysTimeGetMcuTime>
 8007d92:	0023      	movs	r3, r4
 8007d94:	3309      	adds	r3, #9
 8007d96:	33ff      	adds	r3, #255	; 0xff
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	2382      	movs	r3, #130	; 0x82
 8007da0:	005b      	lsls	r3, r3, #1
 8007da2:	0028      	movs	r0, r5
 8007da4:	58e3      	ldr	r3, [r4, r3]
 8007da6:	9908      	ldr	r1, [sp, #32]
 8007da8:	f006 f8ba 	bl	800df20 <SysTimeSub>
 8007dac:	ab11      	add	r3, sp, #68	; 0x44
 8007dae:	cd06      	ldmia	r5!, {r1, r2}
 8007db0:	c306      	stmia	r3!, {r1, r2}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    nextChan.Joined = true;
 8007db4:	2201      	movs	r2, #1
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8007db6:	6073      	str	r3, [r6, #4]
    nextChan.LastTxIsJoinRequest = false;
 8007db8:	2300      	movs	r3, #0
 8007dba:	7533      	strb	r3, [r6, #20]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007dbc:	883b      	ldrh	r3, [r7, #0]
    nextChan.Joined = true;
 8007dbe:	7272      	strb	r2, [r6, #9]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8007dc0:	82f3      	strh	r3, [r6, #22]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007dc2:	4b93      	ldr	r3, [pc, #588]	; (8008010 <ScheduleTx+0x310>)
 8007dc4:	7c5b      	ldrb	r3, [r3, #17]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d101      	bne.n	8007dce <ScheduleTx+0xce>
        nextChan.LastTxIsJoinRequest = true;
 8007dca:	7532      	strb	r2, [r6, #20]
        nextChan.Joined = false;
 8007dcc:	7273      	strb	r3, [r6, #9]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 8007dce:	4c8d      	ldr	r4, [pc, #564]	; (8008004 <ScheduleTx+0x304>)
 8007dd0:	4990      	ldr	r1, [pc, #576]	; (8008014 <ScheduleTx+0x314>)
 8007dd2:	0025      	movs	r5, r4
 8007dd4:	3540      	adds	r5, #64	; 0x40
 8007dd6:	7828      	ldrb	r0, [r5, #0]
 8007dd8:	4b8f      	ldr	r3, [pc, #572]	; (8008018 <ScheduleTx+0x318>)
 8007dda:	9100      	str	r1, [sp, #0]
 8007ddc:	4a8f      	ldr	r2, [pc, #572]	; (800801c <ScheduleTx+0x31c>)
 8007dde:	0031      	movs	r1, r6
 8007de0:	f003 fa21 	bl	800b226 <RegionNextChannel>
 8007de4:	1e07      	subs	r7, r0, #0
    if( status != LORAMAC_STATUS_OK )
 8007de6:	d01c      	beq.n	8007e22 <ScheduleTx+0x122>
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 8007de8:	280b      	cmp	r0, #11
 8007dea:	d1aa      	bne.n	8007d42 <ScheduleTx+0x42>
 8007dec:	9b03      	ldr	r3, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d0a7      	beq.n	8007d42 <ScheduleTx+0x42>
            return LORAMAC_STATUS_OK;
 8007df2:	2700      	movs	r7, #0
            if( MacCtx.DutyCycleWaitTime != 0 )
 8007df4:	4b84      	ldr	r3, [pc, #528]	; (8008008 <ScheduleTx+0x308>)
 8007df6:	4a8a      	ldr	r2, [pc, #552]	; (8008020 <ScheduleTx+0x320>)
 8007df8:	5899      	ldr	r1, [r3, r2]
 8007dfa:	42b9      	cmp	r1, r7
 8007dfc:	d0a1      	beq.n	8007d42 <ScheduleTx+0x42>
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007dfe:	20d0      	movs	r0, #208	; 0xd0
 8007e00:	2220      	movs	r2, #32
 8007e02:	0080      	lsls	r0, r0, #2
 8007e04:	581c      	ldr	r4, [r3, r0]
 8007e06:	4322      	orrs	r2, r4
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007e08:	4c86      	ldr	r4, [pc, #536]	; (8008024 <ScheduleTx+0x324>)
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 8007e0a:	501a      	str	r2, [r3, r0]
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 8007e0c:	0020      	movs	r0, r4
 8007e0e:	f006 fa43 	bl	800e298 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8007e12:	0020      	movs	r0, r4
 8007e14:	f006 fa02 	bl	800e21c <UTIL_TIMER_Start>
 8007e18:	e793      	b.n	8007d42 <ScheduleTx+0x42>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 8007e1a:	487c      	ldr	r0, [pc, #496]	; (800800c <ScheduleTx+0x30c>)
 8007e1c:	f003 f8f0 	bl	800b000 <LoRaMacSerializerData>
 8007e20:	e7a4      	b.n	8007d6c <ScheduleTx+0x6c>
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007e22:	0023      	movs	r3, r4
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007e24:	0022      	movs	r2, r4
 8007e26:	0021      	movs	r1, r4
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 8007e28:	3361      	adds	r3, #97	; 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007e2a:	3239      	adds	r2, #57	; 0x39
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e2c:	782e      	ldrb	r6, [r5, #0]
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 8007e2e:	781b      	ldrb	r3, [r3, #0]
 8007e30:	7812      	ldrb	r2, [r2, #0]
 8007e32:	3175      	adds	r1, #117	; 0x75
 8007e34:	0030      	movs	r0, r6
 8007e36:	7809      	ldrb	r1, [r1, #0]
 8007e38:	b25b      	sxtb	r3, r3
 8007e3a:	b252      	sxtb	r2, r2
 8007e3c:	f003 fa08 	bl	800b250 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e40:	4b79      	ldr	r3, [pc, #484]	; (8008028 <ScheduleTx+0x328>)
 8007e42:	b241      	sxtb	r1, r0
 8007e44:	781a      	ldrb	r2, [r3, #0]
 8007e46:	4b79      	ldr	r3, [pc, #484]	; (800802c <ScheduleTx+0x32c>)
 8007e48:	0030      	movs	r0, r6
 8007e4a:	9300      	str	r3, [sp, #0]
 8007e4c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e4e:	f003 f982 	bl	800b156 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8007e52:	2168      	movs	r1, #104	; 0x68
 8007e54:	4b74      	ldr	r3, [pc, #464]	; (8008028 <ScheduleTx+0x328>)
 8007e56:	7828      	ldrb	r0, [r5, #0]
 8007e58:	781a      	ldrb	r2, [r3, #0]
 8007e5a:	4b75      	ldr	r3, [pc, #468]	; (8008030 <ScheduleTx+0x330>)
 8007e5c:	5661      	ldrsb	r1, [r4, r1]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007e62:	f003 f978 	bl	800b156 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007e66:	23f1      	movs	r3, #241	; 0xf1
 8007e68:	4d67      	ldr	r5, [pc, #412]	; (8008008 <ScheduleTx+0x308>)
 8007e6a:	009b      	lsls	r3, r3, #2
 8007e6c:	58eb      	ldr	r3, [r5, r3]
 8007e6e:	26ec      	movs	r6, #236	; 0xec
 8007e70:	469c      	mov	ip, r3
 8007e72:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007e74:	00b6      	lsls	r6, r6, #2
 8007e76:	4463      	add	r3, ip
 8007e78:	51ab      	str	r3, [r5, r6]
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007e7a:	23f6      	movs	r3, #246	; 0xf6
 8007e7c:	21ed      	movs	r1, #237	; 0xed
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	58e8      	ldr	r0, [r5, r3]
 8007e82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007e84:	0089      	lsls	r1, r1, #2
 8007e86:	181b      	adds	r3, r3, r0
 8007e88:	506b      	str	r3, [r5, r1]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8007e8a:	0023      	movs	r3, r4
 8007e8c:	33ff      	adds	r3, #255	; 0xff
 8007e8e:	7c5a      	ldrb	r2, [r3, #17]
 8007e90:	2a00      	cmp	r2, #0
 8007e92:	d105      	bne.n	8007ea0 <ScheduleTx+0x1a0>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 8007e94:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007e96:	4463      	add	r3, ip
 8007e98:	51ab      	str	r3, [r5, r6]
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 8007e9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8007e9c:	181b      	adds	r3, r3, r0
 8007e9e:	506b      	str	r3, [r5, r1]
    size_t macCmdsSize = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	930a      	str	r3, [sp, #40]	; 0x28
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d010      	beq.n	8007eca <ScheduleTx+0x1ca>
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8007ea8:	a80a      	add	r0, sp, #40	; 0x28
 8007eaa:	f002 fb83 	bl	800a5b4 <LoRaMacCommandsGetSizeSerializedCmds>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	d151      	bne.n	8007f56 <ScheduleTx+0x256>
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007eb2:	2039      	movs	r0, #57	; 0x39
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8007eb4:	4b5f      	ldr	r3, [pc, #380]	; (8008034 <ScheduleTx+0x334>)
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007eb6:	5620      	ldrsb	r0, [r4, r0]
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8007eb8:	5ced      	ldrb	r5, [r5, r3]
 8007eba:	9e0a      	ldr	r6, [sp, #40]	; 0x28
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 8007ebc:	f7ff fd12 	bl	80078e4 <GetMaxAppPayloadWithoutFOptsLength>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 8007ec0:	b2f6      	uxtb	r6, r6
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8007ec2:	b280      	uxth	r0, r0
 8007ec4:	19ad      	adds	r5, r5, r6
 8007ec6:	42a8      	cmp	r0, r5
 8007ec8:	d343      	bcc.n	8007f52 <ScheduleTx+0x252>
    return SendFrameOnChannel( MacCtx.Channel );
 8007eca:	4c4f      	ldr	r4, [pc, #316]	; (8008008 <ScheduleTx+0x308>)
 8007ecc:	4b5a      	ldr	r3, [pc, #360]	; (8008038 <ScheduleTx+0x338>)
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
    TxConfigParams_t txConfig;
    int8_t txPower = 0;

    txConfig.Channel = channel;
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007ece:	4d4d      	ldr	r5, [pc, #308]	; (8008004 <ScheduleTx+0x304>)
    return SendFrameOnChannel( MacCtx.Channel );
 8007ed0:	5ce3      	ldrb	r3, [r4, r3]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007ed2:	002e      	movs	r6, r5
    return SendFrameOnChannel( MacCtx.Channel );
 8007ed4:	9303      	str	r3, [sp, #12]
    int8_t txPower = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	aa02      	add	r2, sp, #8
 8007eda:	74d3      	strb	r3, [r2, #19]
    txConfig.Channel = channel;
 8007edc:	9b03      	ldr	r3, [sp, #12]
 8007ede:	a90a      	add	r1, sp, #40	; 0x28
 8007ee0:	700b      	strb	r3, [r1, #0]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007ee2:	3639      	adds	r6, #57	; 0x39
 8007ee4:	7833      	ldrb	r3, [r6, #0]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
    txConfig.PktLen = MacCtx.PktBufferLen;

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ee6:	002a      	movs	r2, r5
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007ee8:	704b      	strb	r3, [r1, #1]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007eea:	002b      	movs	r3, r5
 8007eec:	3338      	adds	r3, #56	; 0x38
 8007eee:	781b      	ldrb	r3, [r3, #0]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ef0:	3240      	adds	r2, #64	; 0x40
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8007ef2:	708b      	strb	r3, [r1, #2]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007ef4:	6fab      	ldr	r3, [r5, #120]	; 0x78
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007ef6:	a802      	add	r0, sp, #8
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8007ef8:	604b      	str	r3, [r1, #4]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8007efa:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 8007efc:	608b      	str	r3, [r1, #8]
    txConfig.PktLen = MacCtx.PktBufferLen;
 8007efe:	8823      	ldrh	r3, [r4, #0]
 8007f00:	818b      	strh	r3, [r1, #12]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 8007f02:	7812      	ldrb	r2, [r2, #0]
 8007f04:	4b4d      	ldr	r3, [pc, #308]	; (800803c <ScheduleTx+0x33c>)
 8007f06:	4694      	mov	ip, r2
 8007f08:	2213      	movs	r2, #19
 8007f0a:	1812      	adds	r2, r2, r0
 8007f0c:	4660      	mov	r0, ip
 8007f0e:	f003 f939 	bl	800b184 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8007f12:	2201      	movs	r2, #1
 8007f14:	4b4a      	ldr	r3, [pc, #296]	; (8008040 <ScheduleTx+0x340>)
 8007f16:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007f18:	7832      	ldrb	r2, [r6, #0]
 8007f1a:	4b4a      	ldr	r3, [pc, #296]	; (8008044 <ScheduleTx+0x344>)
    MacCtx.McpsConfirm.TxPower = txPower;
    MacCtx.McpsConfirm.Channel = channel;

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007f1c:	2683      	movs	r6, #131	; 0x83
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8007f1e:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.TxPower = txPower;
 8007f20:	ab02      	add	r3, sp, #8
 8007f22:	7cda      	ldrb	r2, [r3, #19]
 8007f24:	4b48      	ldr	r3, [pc, #288]	; (8008048 <ScheduleTx+0x348>)
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007f26:	00f6      	lsls	r6, r6, #3
    MacCtx.McpsConfirm.TxPower = txPower;
 8007f28:	54e2      	strb	r2, [r4, r3]
    MacCtx.McpsConfirm.Channel = channel;
 8007f2a:	9a03      	ldr	r2, [sp, #12]
 8007f2c:	330d      	adds	r3, #13
 8007f2e:	50e2      	str	r2, [r4, r3]
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007f30:	2288      	movs	r2, #136	; 0x88
 8007f32:	59a3      	ldr	r3, [r4, r6]
 8007f34:	00d2      	lsls	r2, r2, #3
 8007f36:	50a3      	str	r3, [r4, r2]
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8007f38:	3210      	adds	r2, #16
 8007f3a:	50a3      	str	r3, [r4, r2]

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 8007f3c:	f002 fa7c 	bl	800a438 <LoRaMacClassBIsBeaconModeActive>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d00a      	beq.n	8007f5a <ScheduleTx+0x25a>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8007f44:	59a0      	ldr	r0, [r4, r6]
 8007f46:	f002 fa89 	bl	800a45c <LoRaMacClassBIsUplinkCollision>

        if( collisionTime > 0 )
 8007f4a:	2800      	cmp	r0, #0
 8007f4c:	d005      	beq.n	8007f5a <ScheduleTx+0x25a>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8007f4e:	2710      	movs	r7, #16
    return SendFrameOnChannel( MacCtx.Channel );
 8007f50:	e6f7      	b.n	8007d42 <ScheduleTx+0x42>
            return LORAMAC_STATUS_LENGTH_ERROR;
 8007f52:	2708      	movs	r7, #8
 8007f54:	e6f5      	b.n	8007d42 <ScheduleTx+0x42>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8007f56:	2713      	movs	r7, #19
 8007f58:	e6f3      	b.n	8007d42 <ScheduleTx+0x42>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8007f5a:	002b      	movs	r3, r5
 8007f5c:	33fc      	adds	r3, #252	; 0xfc
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d101      	bne.n	8007f68 <ScheduleTx+0x268>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8007f64:	f002 fa7c 	bl	800a460 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 8007f68:	f002 fa69 	bl	800a43e <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007f6c:	2339      	movs	r3, #57	; 0x39
 8007f6e:	56eb      	ldrsb	r3, [r5, r3]
    switch( MacCtx.TxMsg.Type )
 8007f70:	0025      	movs	r5, r4
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007f72:	9303      	str	r3, [sp, #12]
 8007f74:	4b30      	ldr	r3, [pc, #192]	; (8008038 <ScheduleTx+0x338>)
    switch( MacCtx.TxMsg.Type )
 8007f76:	35ff      	adds	r5, #255	; 0xff
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 8007f78:	5ce6      	ldrb	r6, [r4, r3]
    uint32_t fCntUp = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	9307      	str	r3, [sp, #28]
    switch( MacCtx.TxMsg.Type )
 8007f7e:	796b      	ldrb	r3, [r5, #5]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d020      	beq.n	8007fc6 <ScheduleTx+0x2c6>
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d000      	beq.n	8007f8a <ScheduleTx+0x28a>
 8007f88:	e6d4      	b.n	8007d34 <ScheduleTx+0x34>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 8007f8a:	a807      	add	r0, sp, #28
 8007f8c:	f002 fd6a 	bl	800aa64 <LoRaMacCryptoGetFCntUp>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d135      	bne.n	8008000 <ScheduleTx+0x300>
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
 8007f94:	2382      	movs	r3, #130	; 0x82
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	5ce3      	ldrb	r3, [r4, r3]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <ScheduleTx+0x2a6>
 8007f9e:	4b2b      	ldr	r3, [pc, #172]	; (800804c <ScheduleTx+0x34c>)
 8007fa0:	5ce3      	ldrb	r3, [r4, r3]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d902      	bls.n	8007fac <ScheduleTx+0x2ac>
                fCntUp -= 1;
 8007fa6:	9b07      	ldr	r3, [sp, #28]
 8007fa8:	3b01      	subs	r3, #1
 8007faa:	9307      	str	r3, [sp, #28]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 8007fac:	466a      	mov	r2, sp
 8007fae:	4b17      	ldr	r3, [pc, #92]	; (800800c <ScheduleTx+0x30c>)
 8007fb0:	7b11      	ldrb	r1, [r2, #12]
 8007fb2:	9807      	ldr	r0, [sp, #28]
 8007fb4:	0032      	movs	r2, r6
 8007fb6:	f002 fdd9 	bl	800ab6c <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007fba:	2800      	cmp	r0, #0
 8007fbc:	d11e      	bne.n	8007ffc <ScheduleTx+0x2fc>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 8007fbe:	0023      	movs	r3, r4
 8007fc0:	33ff      	adds	r3, #255	; 0xff
 8007fc2:	7b59      	ldrb	r1, [r3, #13]
    if( status != LORAMAC_STATUS_OK )
 8007fc4:	e005      	b.n	8007fd2 <ScheduleTx+0x2d2>
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8007fc6:	4811      	ldr	r0, [pc, #68]	; (800800c <ScheduleTx+0x30c>)
 8007fc8:	f002 fda4 	bl	800ab14 <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8007fcc:	2800      	cmp	r0, #0
 8007fce:	d115      	bne.n	8007ffc <ScheduleTx+0x2fc>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007fd0:	7b69      	ldrb	r1, [r5, #13]
    {
        return status;
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007fd2:	22d0      	movs	r2, #208	; 0xd0
 8007fd4:	2302      	movs	r3, #2
 8007fd6:	0092      	lsls	r2, r2, #2
 8007fd8:	58a0      	ldr	r0, [r4, r2]
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 8007fda:	8021      	strh	r1, [r4, #0]
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8007fdc:	4303      	orrs	r3, r0
 8007fde:	50a3      	str	r3, [r4, r2]
    if( MacCtx.NodeAckRequested == false )
 8007fe0:	4b1b      	ldr	r3, [pc, #108]	; (8008050 <ScheduleTx+0x350>)
 8007fe2:	5ce3      	ldrb	r3, [r4, r3]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d103      	bne.n	8007ff0 <ScheduleTx+0x2f0>
    {
        MacCtx.ChannelsNbTransCounter++;
 8007fe8:	32d0      	adds	r2, #208	; 0xd0
 8007fea:	5ca3      	ldrb	r3, [r4, r2]
 8007fec:	3301      	adds	r3, #1
 8007fee:	54a3      	strb	r3, [r4, r2]
    }

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 8007ff0:	4b18      	ldr	r3, [pc, #96]	; (8008054 <ScheduleTx+0x354>)
 8007ff2:	4819      	ldr	r0, [pc, #100]	; (8008058 <ScheduleTx+0x358>)
 8007ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff6:	b2c9      	uxtb	r1, r1
 8007ff8:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 8007ffa:	e6a2      	b.n	8007d42 <ScheduleTx+0x42>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8007ffc:	2711      	movs	r7, #17
 8007ffe:	e6a0      	b.n	8007d42 <ScheduleTx+0x42>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 8008000:	2712      	movs	r7, #18
 8008002:	e69e      	b.n	8007d42 <ScheduleTx+0x42>
 8008004:	200006f0 	.word	0x200006f0
 8008008:	20000a3c 	.word	0x20000a3c
 800800c:	20000b44 	.word	0x20000b44
 8008010:	200007ef 	.word	0x200007ef
 8008014:	20000720 	.word	0x20000720
 8008018:	20000ec0 	.word	0x20000ec0
 800801c:	20000e51 	.word	0x20000e51
 8008020:	00000484 	.word	0x00000484
 8008024:	20000da4 	.word	0x20000da4
 8008028:	20000738 	.word	0x20000738
 800802c:	20000df4 	.word	0x20000df4
 8008030:	20000e08 	.word	0x20000e08
 8008034:	00000237 	.word	0x00000237
 8008038:	00000415 	.word	0x00000415
 800803c:	20000e54 	.word	0x20000e54
 8008040:	00000439 	.word	0x00000439
 8008044:	0000043a 	.word	0x0000043a
 8008048:	0000043b 	.word	0x0000043b
 800804c:	00000412 	.word	0x00000412
 8008050:	00000414 	.word	0x00000414
 8008054:	0800f64c 	.word	0x0800f64c
 8008058:	20000a3e 	.word	0x20000a3e

0800805c <OpenContinuousRxCWindow>:
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800805c:	4b12      	ldr	r3, [pc, #72]	; (80080a8 <OpenContinuousRxCWindow+0x4c>)
{
 800805e:	b573      	push	{r0, r1, r4, r5, r6, lr}
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8008060:	0019      	movs	r1, r3
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 8008062:	001a      	movs	r2, r3
 8008064:	001e      	movs	r6, r3
 8008066:	4d11      	ldr	r5, [pc, #68]	; (80080ac <OpenContinuousRxCWindow+0x50>)
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 8008068:	3170      	adds	r1, #112	; 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800806a:	7809      	ldrb	r1, [r1, #0]
 800806c:	3640      	adds	r6, #64	; 0x40
 800806e:	3248      	adds	r2, #72	; 0x48
 8008070:	7812      	ldrb	r2, [r2, #0]
 8008072:	7830      	ldrb	r0, [r6, #0]
 8008074:	9500      	str	r5, [sp, #0]
 8008076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008078:	b249      	sxtb	r1, r1
 800807a:	f003 f86c 	bl	800b156 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800807e:	4a0c      	ldr	r2, [pc, #48]	; (80080b0 <OpenContinuousRxCWindow+0x54>)
 8008080:	4c0c      	ldr	r4, [pc, #48]	; (80080b4 <OpenContinuousRxCWindow+0x58>)
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <OpenContinuousRxCWindow+0x5c>)
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008084:	0029      	movs	r1, r5
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8008086:	52e2      	strh	r2, [r4, r3]
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 8008088:	7830      	ldrb	r0, [r6, #0]
 800808a:	4a0c      	ldr	r2, [pc, #48]	; (80080bc <OpenContinuousRxCWindow+0x60>)
 800808c:	f003 f86e 	bl	800b16c <RegionRxConfig>
 8008090:	2800      	cmp	r0, #0
 8008092:	d007      	beq.n	80080a4 <OpenContinuousRxCWindow+0x48>
        Radio.Rx( 0 ); // Continuous mode
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <OpenContinuousRxCWindow+0x64>)
 8008096:	2000      	movs	r0, #0
 8008098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800809a:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <OpenContinuousRxCWindow+0x68>)
 800809e:	5ce2      	ldrb	r2, [r4, r3]
 80080a0:	338d      	adds	r3, #141	; 0x8d
 80080a2:	54e2      	strb	r2, [r4, r3]
}
 80080a4:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
 80080a6:	46c0      	nop			; (mov r8, r8)
 80080a8:	200006f0 	.word	0x200006f0
 80080ac:	20000e1c 	.word	0x20000e1c
 80080b0:	00000201 	.word	0x00000201
 80080b4:	20000a3c 	.word	0x20000a3c
 80080b8:	000003f2 	.word	0x000003f2
 80080bc:	20000e5c 	.word	0x20000e5c
 80080c0:	0800f64c 	.word	0x0800f64c
 80080c4:	000003f3 	.word	0x000003f3

080080c8 <SwitchClass>:
{
 80080c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch( Nvm.MacGroup2.DeviceClass )
 80080ca:	4b33      	ldr	r3, [pc, #204]	; (8008198 <SwitchClass+0xd0>)
{
 80080cc:	0005      	movs	r5, r0
    switch( Nvm.MacGroup2.DeviceClass )
 80080ce:	001e      	movs	r6, r3
 80080d0:	36fc      	adds	r6, #252	; 0xfc
 80080d2:	7834      	ldrb	r4, [r6, #0]
 80080d4:	469c      	mov	ip, r3
 80080d6:	2c01      	cmp	r4, #1
 80080d8:	d04d      	beq.n	8008176 <SwitchClass+0xae>
 80080da:	2c02      	cmp	r4, #2
 80080dc:	d052      	beq.n	8008184 <SwitchClass+0xbc>
 80080de:	2c00      	cmp	r4, #0
 80080e0:	d10d      	bne.n	80080fe <SwitchClass+0x36>
            if( deviceClass == CLASS_A )
 80080e2:	2800      	cmp	r0, #0
 80080e4:	d107      	bne.n	80080f6 <SwitchClass+0x2e>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80080e6:	001a      	movs	r2, r3
 80080e8:	3364      	adds	r3, #100	; 0x64
 80080ea:	326c      	adds	r2, #108	; 0x6c
 80080ec:	cb03      	ldmia	r3!, {r0, r1}
 80080ee:	c203      	stmia	r2!, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80080f0:	3403      	adds	r4, #3
}
 80080f2:	0020      	movs	r0, r4
 80080f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if( deviceClass == CLASS_B )
 80080f6:	2801      	cmp	r0, #1
 80080f8:	d03d      	beq.n	8008176 <SwitchClass+0xae>
            if( deviceClass == CLASS_C )
 80080fa:	2802      	cmp	r0, #2
 80080fc:	d001      	beq.n	8008102 <SwitchClass+0x3a>
    switch( Nvm.MacGroup2.DeviceClass )
 80080fe:	2403      	movs	r4, #3
 8008100:	e7f7      	b.n	80080f2 <SwitchClass+0x2a>
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008102:	22f8      	movs	r2, #248	; 0xf8
 8008104:	21f3      	movs	r1, #243	; 0xf3
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008106:	7030      	strb	r0, [r6, #0]
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 8008108:	4824      	ldr	r0, [pc, #144]	; (800819c <SwitchClass+0xd4>)
 800810a:	0092      	lsls	r2, r2, #2
 800810c:	0089      	lsls	r1, r1, #2
 800810e:	1882      	adds	r2, r0, r2
 8008110:	1841      	adds	r1, r0, r1
 8008112:	c9c8      	ldmia	r1!, {r3, r6, r7}
 8008114:	c2c8      	stmia	r2!, {r3, r6, r7}
 8008116:	c9c0      	ldmia	r1!, {r6, r7}
 8008118:	c2c0      	stmia	r2!, {r6, r7}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800811a:	4a21      	ldr	r2, [pc, #132]	; (80081a0 <SwitchClass+0xd8>)
 800811c:	5485      	strb	r5, [r0, r2]
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800811e:	4662      	mov	r2, ip
 8008120:	32d2      	adds	r2, #210	; 0xd2
 8008122:	7812      	ldrb	r2, [r2, #0]
 8008124:	2a00      	cmp	r2, #0
 8008126:	d01d      	beq.n	8008164 <SwitchClass+0x9c>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008128:	4662      	mov	r2, ip
 800812a:	4663      	mov	r3, ip
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800812c:	4665      	mov	r5, ip
 800812e:	4661      	mov	r1, ip
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008130:	32e8      	adds	r2, #232	; 0xe8
 8008132:	6812      	ldr	r2, [r2, #0]
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8008134:	35ec      	adds	r5, #236	; 0xec
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 8008136:	66da      	str	r2, [r3, #108]	; 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 8008138:	782d      	ldrb	r5, [r5, #0]
 800813a:	3170      	adds	r1, #112	; 0x70
 800813c:	700d      	strb	r5, [r1, #0]
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800813e:	4919      	ldr	r1, [pc, #100]	; (80081a4 <SwitchClass+0xdc>)
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008140:	3380      	adds	r3, #128	; 0x80
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8008142:	5c45      	ldrb	r5, [r0, r1]
 8008144:	3935      	subs	r1, #53	; 0x35
 8008146:	5445      	strb	r5, [r0, r1]
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8008148:	3104      	adds	r1, #4
 800814a:	5042      	str	r2, [r0, r1]
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800814c:	4662      	mov	r2, ip
 800814e:	3275      	adds	r2, #117	; 0x75
 8008150:	7811      	ldrb	r1, [r2, #0]
 8008152:	22fc      	movs	r2, #252	; 0xfc
 8008154:	0092      	lsls	r2, r2, #2
 8008156:	5481      	strb	r1, [r0, r2]
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008158:	781a      	ldrb	r2, [r3, #0]
 800815a:	4b13      	ldr	r3, [pc, #76]	; (80081a8 <SwitchClass+0xe0>)
 800815c:	54c2      	strb	r2, [r0, r3]
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800815e:	4b13      	ldr	r3, [pc, #76]	; (80081ac <SwitchClass+0xe4>)
 8008160:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <SwitchClass+0xe8>)
 8008162:	52c2      	strh	r2, [r0, r3]
                MacCtx.NodeAckRequested = false;
 8008164:	2200      	movs	r2, #0
 8008166:	4b13      	ldr	r3, [pc, #76]	; (80081b4 <SwitchClass+0xec>)
 8008168:	54c2      	strb	r2, [r0, r3]
                Radio.Sleep( );
 800816a:	4b13      	ldr	r3, [pc, #76]	; (80081b8 <SwitchClass+0xf0>)
 800816c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800816e:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 8008170:	f7ff ff74 	bl	800805c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 8008174:	e7bd      	b.n	80080f2 <SwitchClass+0x2a>
            status = LoRaMacClassBSwitchClass( deviceClass );
 8008176:	0028      	movs	r0, r5
 8008178:	f002 f963 	bl	800a442 <LoRaMacClassBSwitchClass>
 800817c:	1e04      	subs	r4, r0, #0
            if( status == LORAMAC_STATUS_OK )
 800817e:	d1b8      	bne.n	80080f2 <SwitchClass+0x2a>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 8008180:	7035      	strb	r5, [r6, #0]
 8008182:	e7b6      	b.n	80080f2 <SwitchClass+0x2a>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8008184:	2403      	movs	r4, #3
            if( deviceClass == CLASS_A )
 8008186:	2800      	cmp	r0, #0
 8008188:	d1b3      	bne.n	80080f2 <SwitchClass+0x2a>
                Radio.Sleep( );
 800818a:	4b0b      	ldr	r3, [pc, #44]	; (80081b8 <SwitchClass+0xf0>)
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800818c:	7030      	strb	r0, [r6, #0]
                Radio.Sleep( );
 800818e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008190:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 8008192:	002c      	movs	r4, r5
 8008194:	e7ad      	b.n	80080f2 <SwitchClass+0x2a>
 8008196:	46c0      	nop			; (mov r8, r8)
 8008198:	200006f0 	.word	0x200006f0
 800819c:	20000a3c 	.word	0x20000a3c
 80081a0:	000003f3 	.word	0x000003f3
 80081a4:	00000415 	.word	0x00000415
 80081a8:	000003f1 	.word	0x000003f1
 80081ac:	000003f2 	.word	0x000003f2
 80081b0:	00000301 	.word	0x00000301
 80081b4:	00000414 	.word	0x00000414
 80081b8:	0800f64c 	.word	0x0800f64c

080081bc <RxWindowSetup.constprop.0>:
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
 80081bc:	b570      	push	{r4, r5, r6, lr}
 80081be:	000c      	movs	r4, r1
    TimerStop( rxTimer );
 80081c0:	f005 ffd8 	bl	800e174 <UTIL_TIMER_Stop>
    Radio.Standby( );
 80081c4:	4e0a      	ldr	r6, [pc, #40]	; (80081f0 <RxWindowSetup.constprop.0+0x34>)
 80081c6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80081c8:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 80081ca:	4d0a      	ldr	r5, [pc, #40]	; (80081f4 <RxWindowSetup.constprop.0+0x38>)
 80081cc:	0021      	movs	r1, r4
 80081ce:	002b      	movs	r3, r5
 80081d0:	3340      	adds	r3, #64	; 0x40
 80081d2:	4a09      	ldr	r2, [pc, #36]	; (80081f8 <RxWindowSetup.constprop.0+0x3c>)
 80081d4:	7818      	ldrb	r0, [r3, #0]
 80081d6:	f002 ffc9 	bl	800b16c <RegionRxConfig>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d007      	beq.n	80081ee <RxWindowSetup.constprop.0+0x32>
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80081de:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80081e0:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 80081e2:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80081e4:	2290      	movs	r2, #144	; 0x90
 80081e6:	4b05      	ldr	r3, [pc, #20]	; (80081fc <RxWindowSetup.constprop.0+0x40>)
 80081e8:	7ce1      	ldrb	r1, [r4, #19]
 80081ea:	00d2      	lsls	r2, r2, #3
 80081ec:	5499      	strb	r1, [r3, r2]
}
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	0800f64c 	.word	0x0800f64c
 80081f4:	200006f0 	.word	0x200006f0
 80081f8:	20000e5c 	.word	0x20000e5c
 80081fc:	20000a3c 	.word	0x20000a3c

08008200 <OnRxWindow1TimerEvent>:
{
 8008200:	b510      	push	{r4, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 8008202:	4b0e      	ldr	r3, [pc, #56]	; (800823c <OnRxWindow1TimerEvent+0x3c>)
 8008204:	4a0e      	ldr	r2, [pc, #56]	; (8008240 <OnRxWindow1TimerEvent+0x40>)
 8008206:	5c99      	ldrb	r1, [r3, r2]
 8008208:	3a5d      	subs	r2, #93	; 0x5d
 800820a:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800820c:	4a0d      	ldr	r2, [pc, #52]	; (8008244 <OnRxWindow1TimerEvent+0x44>)
 800820e:	0011      	movs	r1, r2
 8008210:	3161      	adds	r1, #97	; 0x61
 8008212:	7808      	ldrb	r0, [r1, #0]
 8008214:	490c      	ldr	r1, [pc, #48]	; (8008248 <OnRxWindow1TimerEvent+0x48>)
 8008216:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008218:	0011      	movs	r1, r2
 800821a:	3175      	adds	r1, #117	; 0x75
 800821c:	7808      	ldrb	r0, [r1, #0]
 800821e:	21f2      	movs	r1, #242	; 0xf2
 8008220:	0089      	lsls	r1, r1, #2
 8008222:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008224:	3280      	adds	r2, #128	; 0x80
 8008226:	7811      	ldrb	r1, [r2, #0]
 8008228:	4a08      	ldr	r2, [pc, #32]	; (800824c <OnRxWindow1TimerEvent+0x4c>)
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800822a:	4809      	ldr	r0, [pc, #36]	; (8008250 <OnRxWindow1TimerEvent+0x50>)
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800822c:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow1Config.RxContinuous = false;
 800822e:	2100      	movs	r1, #0
 8008230:	4a08      	ldr	r2, [pc, #32]	; (8008254 <OnRxWindow1TimerEvent+0x54>)
 8008232:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 8008234:	4908      	ldr	r1, [pc, #32]	; (8008258 <OnRxWindow1TimerEvent+0x58>)
 8008236:	f7ff ffc1 	bl	80081bc <RxWindowSetup.constprop.0>
}
 800823a:	bd10      	pop	{r4, pc}
 800823c:	20000a3c 	.word	0x20000a3c
 8008240:	00000415 	.word	0x00000415
 8008244:	200006f0 	.word	0x200006f0
 8008248:	000003bb 	.word	0x000003bb
 800824c:	000003c9 	.word	0x000003c9
 8008250:	20000dbc 	.word	0x20000dbc
 8008254:	000003ca 	.word	0x000003ca
 8008258:	20000df4 	.word	0x20000df4

0800825c <OnRxWindow2TimerEvent>:
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800825c:	2290      	movs	r2, #144	; 0x90
{
 800825e:	b510      	push	{r4, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 8008260:	4b10      	ldr	r3, [pc, #64]	; (80082a4 <OnRxWindow2TimerEvent+0x48>)
 8008262:	00d2      	lsls	r2, r2, #3
 8008264:	5c9a      	ldrb	r2, [r3, r2]
 8008266:	2a00      	cmp	r2, #0
 8008268:	d01a      	beq.n	80082a0 <OnRxWindow2TimerEvent+0x44>
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800826a:	4a0f      	ldr	r2, [pc, #60]	; (80082a8 <OnRxWindow2TimerEvent+0x4c>)
 800826c:	5c99      	ldrb	r1, [r3, r2]
 800826e:	3a49      	subs	r2, #73	; 0x49
 8008270:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8008272:	21f4      	movs	r1, #244	; 0xf4
 8008274:	4a0d      	ldr	r2, [pc, #52]	; (80082ac <OnRxWindow2TimerEvent+0x50>)
 8008276:	0089      	lsls	r1, r1, #2
 8008278:	6e50      	ldr	r0, [r2, #100]	; 0x64
 800827a:	5058      	str	r0, [r3, r1]
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800827c:	0011      	movs	r1, r2
 800827e:	3175      	adds	r1, #117	; 0x75
 8008280:	7808      	ldrb	r0, [r1, #0]
 8008282:	21f7      	movs	r1, #247	; 0xf7
 8008284:	0089      	lsls	r1, r1, #2
 8008286:	5458      	strb	r0, [r3, r1]
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008288:	3280      	adds	r2, #128	; 0x80
 800828a:	7811      	ldrb	r1, [r2, #0]
 800828c:	4a08      	ldr	r2, [pc, #32]	; (80082b0 <OnRxWindow2TimerEvent+0x54>)
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800828e:	4809      	ldr	r0, [pc, #36]	; (80082b4 <OnRxWindow2TimerEvent+0x58>)
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8008290:	5499      	strb	r1, [r3, r2]
    MacCtx.RxWindow2Config.RxContinuous = false;
 8008292:	2180      	movs	r1, #128	; 0x80
 8008294:	4a08      	ldr	r2, [pc, #32]	; (80082b8 <OnRxWindow2TimerEvent+0x5c>)
 8008296:	0049      	lsls	r1, r1, #1
 8008298:	5299      	strh	r1, [r3, r2]
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800829a:	4908      	ldr	r1, [pc, #32]	; (80082bc <OnRxWindow2TimerEvent+0x60>)
 800829c:	f7ff ff8e 	bl	80081bc <RxWindowSetup.constprop.0>
}
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	20000a3c 	.word	0x20000a3c
 80082a8:	00000415 	.word	0x00000415
 80082ac:	200006f0 	.word	0x200006f0
 80082b0:	000003dd 	.word	0x000003dd
 80082b4:	20000dd4 	.word	0x20000dd4
 80082b8:	000003de 	.word	0x000003de
 80082bc:	20000e08 	.word	0x20000e08

080082c0 <ProcessMacCommands.constprop.0>:
    uint8_t status = 0;
 80082c0:	2300      	movs	r3, #0
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80082c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082c4:	b095      	sub	sp, #84	; 0x54
 80082c6:	9207      	str	r2, [sp, #28]
    uint8_t status = 0;
 80082c8:	220d      	movs	r2, #13
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80082ca:	0007      	movs	r7, r0
    while( macIndex < commandsSize )
 80082cc:	001c      	movs	r4, r3
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80082ce:	9104      	str	r1, [sp, #16]
    uint8_t status = 0;
 80082d0:	a906      	add	r1, sp, #24
 80082d2:	1852      	adds	r2, r2, r1
 80082d4:	7013      	strb	r3, [r2, #0]
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80082d6:	aa0a      	add	r2, sp, #40	; 0x28
 80082d8:	8013      	strh	r3, [r2, #0]
    bool adrBlockFound = false;
 80082da:	9303      	str	r3, [sp, #12]
    while( macIndex < commandsSize )
 80082dc:	9b04      	ldr	r3, [sp, #16]
 80082de:	429c      	cmp	r4, r3
 80082e0:	d301      	bcc.n	80082e6 <ProcessMacCommands.constprop.0+0x26>
}
 80082e2:	b015      	add	sp, #84	; 0x54
 80082e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80082e6:	5d38      	ldrb	r0, [r7, r4]
 80082e8:	f002 f9b8 	bl	800a65c <LoRaMacCommandsGetCmdSize>
 80082ec:	9b04      	ldr	r3, [sp, #16]
 80082ee:	1900      	adds	r0, r0, r4
 80082f0:	193e      	adds	r6, r7, r4
 80082f2:	4298      	cmp	r0, r3
 80082f4:	dcf5      	bgt.n	80082e2 <ProcessMacCommands.constprop.0+0x22>
        switch( payload[macIndex++] )
 80082f6:	7830      	ldrb	r0, [r6, #0]
 80082f8:	1c65      	adds	r5, r4, #1
 80082fa:	3802      	subs	r0, #2
 80082fc:	b2ed      	uxtb	r5, r5
 80082fe:	2811      	cmp	r0, #17
 8008300:	d8ef      	bhi.n	80082e2 <ProcessMacCommands.constprop.0+0x22>
 8008302:	f7f7 ff1d 	bl	8000140 <__gnu_thumb1_case_shi>
 8008306:	0012      	.short	0x0012
 8008308:	00880028 	.word	0x00880028
 800830c:	00e0009c 	.word	0x00e0009c
 8008310:	012900f8 	.word	0x012900f8
 8008314:	018c0148 	.word	0x018c0148
 8008318:	ffeeffee 	.word	0xffeeffee
 800831c:	ffee01c5 	.word	0xffee01c5
 8008320:	0214ffee 	.word	0x0214ffee
 8008324:	02440229 	.word	0x02440229
 8008328:	025e      	.short	0x025e
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800832a:	2004      	movs	r0, #4
 800832c:	f002 fa4a 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8008330:	2800      	cmp	r0, #0
 8008332:	d00e      	beq.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8008334:	2104      	movs	r1, #4
 8008336:	2000      	movs	r0, #0
 8008338:	f002 fa00 	bl	800a73c <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800833c:	5d79      	ldrb	r1, [r7, r5]
 800833e:	4bcc      	ldr	r3, [pc, #816]	; (8008670 <ProcessMacCommands.constprop.0+0x3b0>)
 8008340:	4acc      	ldr	r2, [pc, #816]	; (8008674 <ProcessMacCommands.constprop.0+0x3b4>)
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008342:	1ce5      	adds	r5, r4, #3
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8008344:	3402      	adds	r4, #2
 8008346:	5499      	strb	r1, [r3, r2]
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8008348:	b2e4      	uxtb	r4, r4
 800834a:	5d39      	ldrb	r1, [r7, r4]
 800834c:	4aca      	ldr	r2, [pc, #808]	; (8008678 <ProcessMacCommands.constprop.0+0x3b8>)
 800834e:	b2ed      	uxtb	r5, r5
 8008350:	5499      	strb	r1, [r3, r2]
                uint8_t eirpDwellTime = payload[macIndex++];
 8008352:	002c      	movs	r4, r5
 8008354:	e7c2      	b.n	80082dc <ProcessMacCommands.constprop.0+0x1c>
                int8_t linkAdrDatarate = DR_0;
 8008356:	2300      	movs	r3, #0
 8008358:	aa06      	add	r2, sp, #24
 800835a:	7393      	strb	r3, [r2, #14]
                int8_t linkAdrTxPower = TX_POWER_0;
 800835c:	73d3      	strb	r3, [r2, #15]
                uint8_t linkAdrNbRep = 0;
 800835e:	ae0b      	add	r6, sp, #44	; 0x2c
                uint8_t linkAdrNbBytesParsed = 0;
 8008360:	aa0c      	add	r2, sp, #48	; 0x30
                uint8_t linkAdrNbRep = 0;
 8008362:	7033      	strb	r3, [r6, #0]
                uint8_t linkAdrNbBytesParsed = 0;
 8008364:	7013      	strb	r3, [r2, #0]
                if( adrBlockFound == false )
 8008366:	9b03      	ldr	r3, [sp, #12]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d151      	bne.n	8008410 <ProcessMacCommands.constprop.0+0x150>
                    linkAdrReq.Payload = &payload[macIndex - 1];
 800836c:	1e6b      	subs	r3, r5, #1
 800836e:	a910      	add	r1, sp, #64	; 0x40
 8008370:	18fb      	adds	r3, r7, r3
 8008372:	604b      	str	r3, [r1, #4]
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 8008374:	9b04      	ldr	r3, [sp, #16]
 8008376:	1b1c      	subs	r4, r3, r4
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008378:	4bc0      	ldr	r3, [pc, #768]	; (800867c <ProcessMacCommands.constprop.0+0x3bc>)
                    linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800837a:	720c      	strb	r4, [r1, #8]
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800837c:	0018      	movs	r0, r3
 800837e:	30fe      	adds	r0, #254	; 0xfe
 8008380:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 8008382:	001c      	movs	r4, r3
                    linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 8008384:	7288      	strb	r0, [r1, #10]
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8008386:	0018      	movs	r0, r3
 8008388:	3074      	adds	r0, #116	; 0x74
 800838a:	7800      	ldrb	r0, [r0, #0]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800838c:	3460      	adds	r4, #96	; 0x60
                    linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800838e:	7248      	strb	r0, [r1, #9]
                    linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8008390:	48bb      	ldr	r0, [pc, #748]	; (8008680 <ProcessMacCommands.constprop.0+0x3c0>)
 8008392:	7800      	ldrb	r0, [r0, #0]
 8008394:	72c8      	strb	r0, [r1, #11]
                    linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 8008396:	48bb      	ldr	r0, [pc, #748]	; (8008684 <ProcessMacCommands.constprop.0+0x3c4>)
 8008398:	7800      	ldrb	r0, [r0, #0]
 800839a:	7308      	strb	r0, [r1, #12]
                    linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800839c:	7820      	ldrb	r0, [r4, #0]
 800839e:	7348      	strb	r0, [r1, #13]
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80083a0:	0018      	movs	r0, r3
 80083a2:	30fc      	adds	r0, #252	; 0xfc
 80083a4:	6900      	ldr	r0, [r0, #16]
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80083a6:	3340      	adds	r3, #64	; 0x40
                    linkAdrReq.Version = Nvm.MacGroup2.Version;
 80083a8:	9010      	str	r0, [sp, #64]	; 0x40
                    status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80083aa:	781b      	ldrb	r3, [r3, #0]
 80083ac:	9201      	str	r2, [sp, #4]
 80083ae:	469c      	mov	ip, r3
 80083b0:	230f      	movs	r3, #15
 80083b2:	aa06      	add	r2, sp, #24
 80083b4:	189b      	adds	r3, r3, r2
 80083b6:	220e      	movs	r2, #14
 80083b8:	a806      	add	r0, sp, #24
 80083ba:	1812      	adds	r2, r2, r0
 80083bc:	9600      	str	r6, [sp, #0]
 80083be:	4660      	mov	r0, ip
 80083c0:	f002 feed 	bl	800b19e <RegionLinkAdrReq>
 80083c4:	ab06      	add	r3, sp, #24
 80083c6:	7358      	strb	r0, [r3, #13]
                    if( ( status & 0x07 ) == 0x07 )
 80083c8:	43c0      	mvns	r0, r0
 80083ca:	0740      	lsls	r0, r0, #29
 80083cc:	d108      	bne.n	80083e0 <ProcessMacCommands.constprop.0+0x120>
                        Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 80083ce:	7b9b      	ldrb	r3, [r3, #14]
 80083d0:	4aab      	ldr	r2, [pc, #684]	; (8008680 <ProcessMacCommands.constprop.0+0x3c0>)
 80083d2:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 80083d4:	ab06      	add	r3, sp, #24
 80083d6:	7bdb      	ldrb	r3, [r3, #15]
 80083d8:	4aaa      	ldr	r2, [pc, #680]	; (8008684 <ProcessMacCommands.constprop.0+0x3c4>)
 80083da:	7013      	strb	r3, [r2, #0]
                        Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 80083dc:	7833      	ldrb	r3, [r6, #0]
 80083de:	7023      	strb	r3, [r4, #0]
static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
 80083e0:	2600      	movs	r6, #0
 80083e2:	e009      	b.n	80083f8 <ProcessMacCommands.constprop.0+0x138>
                        LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 80083e4:	230d      	movs	r3, #13
 80083e6:	a906      	add	r1, sp, #24
 80083e8:	185b      	adds	r3, r3, r1
 80083ea:	2201      	movs	r2, #1
 80083ec:	0019      	movs	r1, r3
 80083ee:	2003      	movs	r0, #3
 80083f0:	f002 f846 	bl	800a480 <LoRaMacCommandsAddCmd>
                    for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 80083f4:	3601      	adds	r6, #1
 80083f6:	b2f6      	uxtb	r6, r6
 80083f8:	ab0c      	add	r3, sp, #48	; 0x30
 80083fa:	781c      	ldrb	r4, [r3, #0]
 80083fc:	2105      	movs	r1, #5
 80083fe:	0020      	movs	r0, r4
 8008400:	f7f7 feb2 	bl	8000168 <__udivsi3>
 8008404:	b2c0      	uxtb	r0, r0
 8008406:	4286      	cmp	r6, r0
 8008408:	d3ec      	bcc.n	80083e4 <ProcessMacCommands.constprop.0+0x124>
                    macIndex += linkAdrNbBytesParsed - 1;
 800840a:	3c01      	subs	r4, #1
 800840c:	192d      	adds	r5, r5, r4
 800840e:	b2ed      	uxtb	r5, r5
                break;
 8008410:	2301      	movs	r3, #1
 8008412:	9303      	str	r3, [sp, #12]
 8008414:	e79d      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008416:	230f      	movs	r3, #15
 8008418:	5d7a      	ldrb	r2, [r7, r5]
 800841a:	3402      	adds	r4, #2
 800841c:	401a      	ands	r2, r3
 800841e:	4b97      	ldr	r3, [pc, #604]	; (800867c <ProcessMacCommands.constprop.0+0x3bc>)
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008420:	2004      	movs	r0, #4
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008422:	0019      	movs	r1, r3
 8008424:	31ff      	adds	r1, #255	; 0xff
 8008426:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 8008428:	2101      	movs	r1, #1
 800842a:	4091      	lsls	r1, r2
 800842c:	33fe      	adds	r3, #254	; 0xfe
 800842e:	8099      	strh	r1, [r3, #4]
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008430:	2200      	movs	r2, #0
 8008432:	a90a      	add	r1, sp, #40	; 0x28
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 8008434:	b2e4      	uxtb	r4, r4
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8008436:	f002 f823 	bl	800a480 <LoRaMacCommandsAddCmd>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800843a:	0025      	movs	r5, r4
}
 800843c:	e789      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                status = 0x07;
 800843e:	2107      	movs	r1, #7
 8008440:	ab06      	add	r3, sp, #24
 8008442:	7359      	strb	r1, [r3, #13]
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8008444:	5d7b      	ldrb	r3, [r7, r5]
 8008446:	ae10      	add	r6, sp, #64	; 0x40
 8008448:	091a      	lsrs	r2, r3, #4
 800844a:	400a      	ands	r2, r1
 800844c:	7072      	strb	r2, [r6, #1]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800844e:	220f      	movs	r2, #15
 8008450:	4013      	ands	r3, r2
 8008452:	7033      	strb	r3, [r6, #0]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008454:	1d22      	adds	r2, r4, #4
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008456:	1ce3      	adds	r3, r4, #3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008458:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800845a:	b2d2      	uxtb	r2, r2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800845c:	5cfb      	ldrb	r3, [r7, r3]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800845e:	5cba      	ldrb	r2, [r7, r2]
 8008460:	1d65      	adds	r5, r4, #5
                macIndex++;
 8008462:	3402      	adds	r4, #2
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008464:	0412      	lsls	r2, r2, #16
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 8008466:	b2e4      	uxtb	r4, r4
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008468:	021b      	lsls	r3, r3, #8
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800846a:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800846c:	5d3a      	ldrb	r2, [r7, r4]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800846e:	4c83      	ldr	r4, [pc, #524]	; (800867c <ProcessMacCommands.constprop.0+0x3bc>)
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008470:	4313      	orrs	r3, r2
                rxParamSetupReq.Frequency *= 100;
 8008472:	2264      	movs	r2, #100	; 0x64
 8008474:	4353      	muls	r3, r2
 8008476:	9311      	str	r3, [sp, #68]	; 0x44
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 8008478:	0023      	movs	r3, r4
 800847a:	3340      	adds	r3, #64	; 0x40
 800847c:	7818      	ldrb	r0, [r3, #0]
 800847e:	0031      	movs	r1, r6
 8008480:	f002 fe9d 	bl	800b1be <RegionRxParamSetupReq>
 8008484:	ab06      	add	r3, sp, #24
 8008486:	7358      	strb	r0, [r3, #13]
                if( ( status & 0x07 ) == 0x07 )
 8008488:	2307      	movs	r3, #7
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800848a:	b2ed      	uxtb	r5, r5
                if( ( status & 0x07 ) == 0x07 )
 800848c:	4003      	ands	r3, r0
 800848e:	2b07      	cmp	r3, #7
 8008490:	d10c      	bne.n	80084ac <ProcessMacCommands.constprop.0+0x1ec>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 8008492:	0022      	movs	r2, r4
 8008494:	7833      	ldrb	r3, [r6, #0]
 8008496:	3268      	adds	r2, #104	; 0x68
 8008498:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800849a:	0022      	movs	r2, r4
 800849c:	3270      	adds	r2, #112	; 0x70
 800849e:	7013      	strb	r3, [r2, #0]
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80084a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80084a2:	6663      	str	r3, [r4, #100]	; 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80084a4:	66e3      	str	r3, [r4, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80084a6:	7873      	ldrb	r3, [r6, #1]
 80084a8:	3461      	adds	r4, #97	; 0x61
 80084aa:	7023      	strb	r3, [r4, #0]
                macCmdPayload[0] = status;
 80084ac:	a90a      	add	r1, sp, #40	; 0x28
 80084ae:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80084b0:	2201      	movs	r2, #1
 80084b2:	2005      	movs	r0, #5
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80084b4:	f001 ffe4 	bl	800a480 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 80084b8:	2210      	movs	r2, #16
 80084ba:	4b6d      	ldr	r3, [pc, #436]	; (8008670 <ProcessMacCommands.constprop.0+0x3b0>)
 80084bc:	4972      	ldr	r1, [pc, #456]	; (8008688 <ProcessMacCommands.constprop.0+0x3c8>)
 80084be:	5c58      	ldrb	r0, [r3, r1]
 80084c0:	4302      	orrs	r2, r0
 80084c2:	545a      	strb	r2, [r3, r1]
}
 80084c4:	e745      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80084c6:	22d2      	movs	r2, #210	; 0xd2
 80084c8:	4b69      	ldr	r3, [pc, #420]	; (8008670 <ProcessMacCommands.constprop.0+0x3b0>)
 80084ca:	0092      	lsls	r2, r2, #2
 80084cc:	589b      	ldr	r3, [r3, r2]
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 80084ce:	20ff      	movs	r0, #255	; 0xff
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d003      	beq.n	80084dc <ProcessMacCommands.constprop.0+0x21c>
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d000      	beq.n	80084dc <ProcessMacCommands.constprop.0+0x21c>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80084da:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80084dc:	ab06      	add	r3, sp, #24
 80084de:	7418      	strb	r0, [r3, #16]
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80084e0:	233f      	movs	r3, #63	; 0x3f
 80084e2:	9a07      	ldr	r2, [sp, #28]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80084e4:	2006      	movs	r0, #6
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80084e6:	4013      	ands	r3, r2
 80084e8:	aa06      	add	r2, sp, #24
 80084ea:	7453      	strb	r3, [r2, #17]
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 80084ec:	2202      	movs	r2, #2
 80084ee:	a90a      	add	r1, sp, #40	; 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80084f0:	f001 ffc6 	bl	800a480 <LoRaMacCommandsAddCmd>
                break;
 80084f4:	e72d      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                status = 0x03;
 80084f6:	260d      	movs	r6, #13
 80084f8:	ab06      	add	r3, sp, #24
 80084fa:	18f6      	adds	r6, r6, r3
 80084fc:	2303      	movs	r3, #3
 80084fe:	7033      	strb	r3, [r6, #0]
                newChannelReq.ChannelId = payload[macIndex++];
 8008500:	5d7b      	ldrb	r3, [r7, r5]
 8008502:	a90c      	add	r1, sp, #48	; 0x30
 8008504:	710b      	strb	r3, [r1, #4]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8008506:	1ce3      	adds	r3, r4, #3
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008508:	b2db      	uxtb	r3, r3
 800850a:	5cf8      	ldrb	r0, [r7, r3]
 800850c:	1d23      	adds	r3, r4, #4
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800850e:	b2db      	uxtb	r3, r3
 8008510:	5cfb      	ldrb	r3, [r7, r3]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008512:	0200      	lsls	r0, r0, #8
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008514:	041b      	lsls	r3, r3, #16
 8008516:	4303      	orrs	r3, r0
                newChannelReq.ChannelId = payload[macIndex++];
 8008518:	1ca0      	adds	r0, r4, #2
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800851a:	b2c0      	uxtb	r0, r0
 800851c:	5c38      	ldrb	r0, [r7, r0]
                chParam.DrRange.Value = payload[macIndex++];
 800851e:	1da5      	adds	r5, r4, #6
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008520:	4303      	orrs	r3, r0
                chParam.Frequency *= 100;
 8008522:	2064      	movs	r0, #100	; 0x64
 8008524:	4343      	muls	r3, r0
 8008526:	9310      	str	r3, [sp, #64]	; 0x40
                chParam.Rx1Frequency = 0;
 8008528:	2300      	movs	r3, #0
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800852a:	3405      	adds	r4, #5
                chParam.DrRange.Value = payload[macIndex++];
 800852c:	b2e4      	uxtb	r4, r4
                chParam.Rx1Frequency = 0;
 800852e:	9311      	str	r3, [sp, #68]	; 0x44
                chParam.DrRange.Value = payload[macIndex++];
 8008530:	5d3b      	ldrb	r3, [r7, r4]
                newChannelReq.NewChannel = &chParam;
 8008532:	aa10      	add	r2, sp, #64	; 0x40
                chParam.DrRange.Value = payload[macIndex++];
 8008534:	7213      	strb	r3, [r2, #8]
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008536:	4b51      	ldr	r3, [pc, #324]	; (800867c <ProcessMacCommands.constprop.0+0x3bc>)
                newChannelReq.NewChannel = &chParam;
 8008538:	920c      	str	r2, [sp, #48]	; 0x30
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800853a:	3340      	adds	r3, #64	; 0x40
 800853c:	7818      	ldrb	r0, [r3, #0]
 800853e:	f002 fe48 	bl	800b1d2 <RegionNewChannelReq>
 8008542:	b2c3      	uxtb	r3, r0
                chParam.DrRange.Value = payload[macIndex++];
 8008544:	b2ed      	uxtb	r5, r5
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8008546:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8008548:	2800      	cmp	r0, #0
 800854a:	da00      	bge.n	800854e <ProcessMacCommands.constprop.0+0x28e>
 800854c:	e701      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 800854e:	a90a      	add	r1, sp, #40	; 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008550:	2201      	movs	r2, #1
 8008552:	2007      	movs	r0, #7
                    macCmdPayload[0] = status;
 8008554:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8008556:	e7cb      	b.n	80084f0 <ProcessMacCommands.constprop.0+0x230>
                uint8_t delay = payload[macIndex++] & 0x0F;
 8008558:	230f      	movs	r3, #15
 800855a:	5d7a      	ldrb	r2, [r7, r5]
 800855c:	3402      	adds	r4, #2
 800855e:	401a      	ands	r2, r3
 8008560:	b2e4      	uxtb	r4, r4
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008562:	1c13      	adds	r3, r2, #0
 8008564:	2a00      	cmp	r2, #0
 8008566:	d100      	bne.n	800856a <ProcessMacCommands.constprop.0+0x2aa>
 8008568:	2301      	movs	r3, #1
 800856a:	b2da      	uxtb	r2, r3
 800856c:	23fa      	movs	r3, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800856e:	21fa      	movs	r1, #250	; 0xfa
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	4353      	muls	r3, r2
 8008574:	4a41      	ldr	r2, [pc, #260]	; (800867c <ProcessMacCommands.constprop.0+0x3bc>)
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008576:	0089      	lsls	r1, r1, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 8008578:	6513      	str	r3, [r2, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800857a:	185b      	adds	r3, r3, r1
 800857c:	6553      	str	r3, [r2, #84]	; 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800857e:	a90a      	add	r1, sp, #40	; 0x28
 8008580:	2200      	movs	r2, #0
 8008582:	2008      	movs	r0, #8
 8008584:	f001 ff7c 	bl	800a480 <LoRaMacCommandsAddCmd>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008588:	2210      	movs	r2, #16
 800858a:	4b39      	ldr	r3, [pc, #228]	; (8008670 <ProcessMacCommands.constprop.0+0x3b0>)
 800858c:	493e      	ldr	r1, [pc, #248]	; (8008688 <ProcessMacCommands.constprop.0+0x3c8>)
 800858e:	5c58      	ldrb	r0, [r3, r1]
 8008590:	4302      	orrs	r2, r0
 8008592:	545a      	strb	r2, [r3, r1]
 8008594:	e751      	b.n	800843a <ProcessMacCommands.constprop.0+0x17a>
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 8008596:	2101      	movs	r1, #1
                uint8_t eirpDwellTime = payload[macIndex++];
 8008598:	3402      	adds	r4, #2
 800859a:	b2e3      	uxtb	r3, r4
 800859c:	9305      	str	r3, [sp, #20]
 800859e:	5d7b      	ldrb	r3, [r7, r5]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80085a0:	ad0b      	add	r5, sp, #44	; 0x2c
 80085a2:	095a      	lsrs	r2, r3, #5
 80085a4:	400a      	ands	r2, r1
 80085a6:	706a      	strb	r2, [r5, #1]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80085a8:	091a      	lsrs	r2, r3, #4
 80085aa:	400a      	ands	r2, r1
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80085ac:	4c33      	ldr	r4, [pc, #204]	; (800867c <ProcessMacCommands.constprop.0+0x3bc>)
 80085ae:	702a      	strb	r2, [r5, #0]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80085b0:	220f      	movs	r2, #15
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80085b2:	0026      	movs	r6, r4
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80085b4:	4013      	ands	r3, r2
 80085b6:	70ab      	strb	r3, [r5, #2]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80085b8:	3640      	adds	r6, #64	; 0x40
 80085ba:	0029      	movs	r1, r5
 80085bc:	7830      	ldrb	r0, [r6, #0]
 80085be:	f002 fe12 	bl	800b1e6 <RegionTxParamSetupReq>
 80085c2:	3001      	adds	r0, #1
 80085c4:	d029      	beq.n	800861a <ProcessMacCommands.constprop.0+0x35a>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 80085c6:	782b      	ldrb	r3, [r5, #0]
 80085c8:	882a      	ldrh	r2, [r5, #0]
 80085ca:	9306      	str	r3, [sp, #24]
 80085cc:	0023      	movs	r3, r4
 80085ce:	3374      	adds	r3, #116	; 0x74
 80085d0:	801a      	strh	r2, [r3, #0]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80085d2:	78aa      	ldrb	r2, [r5, #2]
 80085d4:	4b2d      	ldr	r3, [pc, #180]	; (800868c <ProcessMacCommands.constprop.0+0x3cc>)
 80085d6:	5c98      	ldrb	r0, [r3, r2]
 80085d8:	f7f8 fdbe 	bl	8001158 <__aeabi_ui2f>
                    getPhy.Attribute = PHY_MIN_TX_DR;
 80085dc:	2128      	movs	r1, #40	; 0x28
 80085de:	2302      	movs	r3, #2
 80085e0:	aa06      	add	r2, sp, #24
 80085e2:	1852      	adds	r2, r2, r1
 80085e4:	7013      	strb	r3, [r2, #0]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80085e6:	222a      	movs	r2, #42	; 0x2a
 80085e8:	ab06      	add	r3, sp, #24
 80085ea:	189b      	adds	r3, r3, r2
 80085ec:	9a06      	ldr	r2, [sp, #24]
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 80085ee:	67a0      	str	r0, [r4, #120]	; 0x78
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80085f0:	701a      	strb	r2, [r3, #0]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80085f2:	a910      	add	r1, sp, #64	; 0x40
 80085f4:	7830      	ldrb	r0, [r6, #0]
 80085f6:	f002 fd77 	bl	800b0e8 <RegionGetPhyParam>
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80085fa:	2100      	movs	r1, #0
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80085fc:	900c      	str	r0, [sp, #48]	; 0x30
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 80085fe:	3439      	adds	r4, #57	; 0x39
 8008600:	5661      	ldrsb	r1, [r4, r1]
 8008602:	1c03      	adds	r3, r0, #0
 8008604:	b240      	sxtb	r0, r0
 8008606:	7822      	ldrb	r2, [r4, #0]
 8008608:	4288      	cmp	r0, r1
 800860a:	da00      	bge.n	800860e <ProcessMacCommands.constprop.0+0x34e>
 800860c:	1c13      	adds	r3, r2, #0
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800860e:	2200      	movs	r2, #0
 8008610:	2009      	movs	r0, #9
 8008612:	a90a      	add	r1, sp, #40	; 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8008614:	7023      	strb	r3, [r4, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8008616:	f001 ff33 	bl	800a480 <LoRaMacCommandsAddCmd>
                uint8_t eirpDwellTime = payload[macIndex++];
 800861a:	9d05      	ldr	r5, [sp, #20]
 800861c:	e699      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                status = 0x03;
 800861e:	260d      	movs	r6, #13
 8008620:	ab06      	add	r3, sp, #24
 8008622:	18f6      	adds	r6, r6, r3
 8008624:	2303      	movs	r3, #3
 8008626:	7033      	strb	r3, [r6, #0]
                dlChannelReq.ChannelId = payload[macIndex++];
 8008628:	5d7b      	ldrb	r3, [r7, r5]
 800862a:	a910      	add	r1, sp, #64	; 0x40
 800862c:	700b      	strb	r3, [r1, #0]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800862e:	1d22      	adds	r2, r4, #4
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008630:	1ce3      	adds	r3, r4, #3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008632:	b2db      	uxtb	r3, r3
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008634:	b2d2      	uxtb	r2, r2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008636:	5cfb      	ldrb	r3, [r7, r3]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008638:	5cba      	ldrb	r2, [r7, r2]
 800863a:	1d65      	adds	r5, r4, #5
                dlChannelReq.ChannelId = payload[macIndex++];
 800863c:	3402      	adds	r4, #2
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800863e:	0412      	lsls	r2, r2, #16
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8008640:	021b      	lsls	r3, r3, #8
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008642:	b2e4      	uxtb	r4, r4
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008644:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8008646:	5d3a      	ldrb	r2, [r7, r4]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8008648:	b2ed      	uxtb	r5, r5
 800864a:	4313      	orrs	r3, r2
                dlChannelReq.Rx1Frequency *= 100;
 800864c:	2264      	movs	r2, #100	; 0x64
 800864e:	4353      	muls	r3, r2
 8008650:	604b      	str	r3, [r1, #4]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8008652:	4b0a      	ldr	r3, [pc, #40]	; (800867c <ProcessMacCommands.constprop.0+0x3bc>)
 8008654:	3340      	adds	r3, #64	; 0x40
 8008656:	7818      	ldrb	r0, [r3, #0]
 8008658:	f002 fdcf 	bl	800b1fa <RegionDlChannelReq>
 800865c:	b2c3      	uxtb	r3, r0
 800865e:	7033      	strb	r3, [r6, #0]
                if( ( int8_t )status >= 0 )
 8008660:	2800      	cmp	r0, #0
 8008662:	da00      	bge.n	8008666 <ProcessMacCommands.constprop.0+0x3a6>
 8008664:	e675      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                    macCmdPayload[0] = status;
 8008666:	a90a      	add	r1, sp, #40	; 0x28
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 8008668:	2201      	movs	r2, #1
 800866a:	200a      	movs	r0, #10
                    macCmdPayload[0] = status;
 800866c:	700b      	strb	r3, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800866e:	e721      	b.n	80084b4 <ProcessMacCommands.constprop.0+0x1f4>
 8008670:	20000a3c 	.word	0x20000a3c
 8008674:	00000454 	.word	0x00000454
 8008678:	00000455 	.word	0x00000455
 800867c:	200006f0 	.word	0x200006f0
 8008680:	20000729 	.word	0x20000729
 8008684:	20000728 	.word	0x20000728
 8008688:	00000481 	.word	0x00000481
 800868c:	0800f4bf 	.word	0x0800f4bf
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 8008690:	200a      	movs	r0, #10
 8008692:	f002 f897 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8008696:	2800      	cmp	r0, #0
 8008698:	d100      	bne.n	800869c <ProcessMacCommands.constprop.0+0x3dc>
 800869a:	e65a      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800869c:	210a      	movs	r1, #10
 800869e:	2000      	movs	r0, #0
 80086a0:	f002 f84c 	bl	800a73c <LoRaMacConfirmQueueSetStatus>
                    SysTime_t sysTime = { 0 };
 80086a4:	231e      	movs	r3, #30
 80086a6:	aa06      	add	r2, sp, #24
 80086a8:	189b      	adds	r3, r3, r2
 80086aa:	2200      	movs	r2, #0
 80086ac:	801a      	strh	r2, [r3, #0]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80086ae:	1ca3      	adds	r3, r4, #2
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	5cfe      	ldrb	r6, [r7, r3]
 80086b4:	1ce3      	adds	r3, r4, #3
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	5cfb      	ldrb	r3, [r7, r3]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80086ba:	0236      	lsls	r6, r6, #8
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80086bc:	041b      	lsls	r3, r3, #16
 80086be:	431e      	orrs	r6, r3
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80086c0:	5d7b      	ldrb	r3, [r7, r5]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80086c2:	1da5      	adds	r5, r4, #6
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 80086c4:	431e      	orrs	r6, r3
 80086c6:	1d23      	adds	r3, r4, #4
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	5cfb      	ldrb	r3, [r7, r3]
 80086cc:	3405      	adds	r4, #5
 80086ce:	061b      	lsls	r3, r3, #24
 80086d0:	431e      	orrs	r6, r3
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80086d2:	23fa      	movs	r3, #250	; 0xfa
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 80086d4:	b2e4      	uxtb	r4, r4
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80086d6:	5d3a      	ldrb	r2, [r7, r4]
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	4353      	muls	r3, r2
                    sysTime = gpsEpochTime;
 80086dc:	aa06      	add	r2, sp, #24
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 80086de:	121b      	asrs	r3, r3, #8
                    sysTime = gpsEpochTime;
 80086e0:	8393      	strh	r3, [r2, #28]
                    sysTimeCurrent = SysTimeGet( );
 80086e2:	a810      	add	r0, sp, #64	; 0x40
 80086e4:	f005 fc58 	bl	800df98 <SysTimeGet>
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80086e8:	4b41      	ldr	r3, [pc, #260]	; (80087f0 <ProcessMacCommands.constprop.0+0x530>)
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80086ea:	4c42      	ldr	r4, [pc, #264]	; (80087f4 <ProcessMacCommands.constprop.0+0x534>)
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 80086ec:	18f1      	adds	r1, r6, r3
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 80086ee:	23cf      	movs	r3, #207	; 0xcf
 80086f0:	009b      	lsls	r3, r3, #2
 80086f2:	18e3      	adds	r3, r4, r3
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	23ce      	movs	r3, #206	; 0xce
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	58e3      	ldr	r3, [r4, r3]
 8008700:	a80e      	add	r0, sp, #56	; 0x38
 8008702:	910c      	str	r1, [sp, #48]	; 0x30
 8008704:	f005 fc0c 	bl	800df20 <SysTimeSub>
 8008708:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800870a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800870c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	a80c      	add	r0, sp, #48	; 0x30
 8008712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008714:	f005 fbea 	bl	800deec <SysTimeAdd>
                    SysTimeSet( sysTime );
 8008718:	980c      	ldr	r0, [sp, #48]	; 0x30
 800871a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800871c:	f005 fc16 	bl	800df4c <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8008720:	f001 fe99 	bl	800a456 <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8008724:	2201      	movs	r2, #1
 8008726:	4b34      	ldr	r3, [pc, #208]	; (80087f8 <ProcessMacCommands.constprop.0+0x538>)
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8008728:	b2ed      	uxtb	r5, r5
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800872a:	54e2      	strb	r2, [r4, r3]
 800872c:	e611      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800872e:	200d      	movs	r0, #13
 8008730:	f002 f848 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8008734:	2800      	cmp	r0, #0
 8008736:	d100      	bne.n	800873a <ProcessMacCommands.constprop.0+0x47a>
 8008738:	e60b      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800873a:	210d      	movs	r1, #13
 800873c:	2000      	movs	r0, #0
 800873e:	f001 fffd 	bl	800a73c <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8008742:	2290      	movs	r2, #144	; 0x90
 8008744:	4b2b      	ldr	r3, [pc, #172]	; (80087f4 <ProcessMacCommands.constprop.0+0x534>)
 8008746:	00d2      	lsls	r2, r2, #3
 8008748:	5c9b      	ldrb	r3, [r3, r2]
 800874a:	3b04      	subs	r3, #4
 800874c:	2b01      	cmp	r3, #1
 800874e:	d800      	bhi.n	8008752 <ProcessMacCommands.constprop.0+0x492>
 8008750:	e5ff      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                        LoRaMacClassBPingSlotInfoAns( );
 8008752:	f001 fe7c 	bl	800a44e <LoRaMacClassBPingSlotInfoAns>
 8008756:	e5fc      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                frequency = ( uint32_t )payload[macIndex++];
 8008758:	1ca3      	adds	r3, r4, #2
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800875a:	b2db      	uxtb	r3, r3
 800875c:	5cf9      	ldrb	r1, [r7, r3]
 800875e:	1ce3      	adds	r3, r4, #3
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008760:	b2db      	uxtb	r3, r3
 8008762:	5cfb      	ldrb	r3, [r7, r3]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8008764:	0209      	lsls	r1, r1, #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	4319      	orrs	r1, r3
                frequency *= 100;
 800876a:	2364      	movs	r3, #100	; 0x64
                frequency = ( uint32_t )payload[macIndex++];
 800876c:	5d7a      	ldrb	r2, [r7, r5]
                datarate = payload[macIndex++] & 0x0F;
 800876e:	1d65      	adds	r5, r4, #5
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008770:	3404      	adds	r4, #4
                datarate = payload[macIndex++] & 0x0F;
 8008772:	b2e4      	uxtb	r4, r4
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8008774:	4311      	orrs	r1, r2
                datarate = payload[macIndex++] & 0x0F;
 8008776:	5d38      	ldrb	r0, [r7, r4]
                frequency *= 100;
 8008778:	4359      	muls	r1, r3
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800877a:	3b55      	subs	r3, #85	; 0x55
 800877c:	4018      	ands	r0, r3
 800877e:	f001 fe67 	bl	800a450 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8008782:	a90a      	add	r1, sp, #40	; 0x28
 8008784:	7008      	strb	r0, [r1, #0]
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 8008786:	2201      	movs	r2, #1
 8008788:	2011      	movs	r0, #17
                datarate = payload[macIndex++] & 0x0F;
 800878a:	b2ed      	uxtb	r5, r5
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
 800878c:	e6b0      	b.n	80084f0 <ProcessMacCommands.constprop.0+0x230>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800878e:	200e      	movs	r0, #14
 8008790:	f002 f818 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8008794:	2800      	cmp	r0, #0
 8008796:	d100      	bne.n	800879a <ProcessMacCommands.constprop.0+0x4da>
 8008798:	e5db      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800879a:	210e      	movs	r1, #14
 800879c:	2000      	movs	r0, #0
 800879e:	f001 ffcd 	bl	800a73c <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 80087a2:	1ca3      	adds	r3, r4, #2
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80087a4:	b2db      	uxtb	r3, r3
 80087a6:	5cfb      	ldrb	r3, [r7, r3]
 80087a8:	5d78      	ldrb	r0, [r7, r5]
 80087aa:	021b      	lsls	r3, r3, #8
 80087ac:	4318      	orrs	r0, r3
                    beaconTimingChannel = payload[macIndex++];
 80087ae:	1d25      	adds	r5, r4, #4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80087b0:	4b12      	ldr	r3, [pc, #72]	; (80087fc <ProcessMacCommands.constprop.0+0x53c>)
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 80087b2:	3403      	adds	r4, #3
                    beaconTimingChannel = payload[macIndex++];
 80087b4:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80087b6:	5d39      	ldrb	r1, [r7, r4]
 80087b8:	685a      	ldr	r2, [r3, #4]
                    beaconTimingChannel = payload[macIndex++];
 80087ba:	b2ed      	uxtb	r5, r5
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 80087bc:	f001 fe4a 	bl	800a454 <LoRaMacClassBBeaconTimingAns>
 80087c0:	e5c7      	b.n	8008352 <ProcessMacCommands.constprop.0+0x92>
                    frequency = ( uint32_t )payload[macIndex++];
 80087c2:	5d7a      	ldrb	r2, [r7, r5]
 80087c4:	1ca3      	adds	r3, r4, #2
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087c6:	1d25      	adds	r5, r4, #4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80087c8:	3403      	adds	r4, #3
 80087ca:	b2db      	uxtb	r3, r3
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087cc:	b2e4      	uxtb	r4, r4
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80087ce:	5cf8      	ldrb	r0, [r7, r3]
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087d0:	5d3b      	ldrb	r3, [r7, r4]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 80087d2:	0200      	lsls	r0, r0, #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087d4:	041b      	lsls	r3, r3, #16
 80087d6:	4318      	orrs	r0, r3
                    frequency *= 100;
 80087d8:	2364      	movs	r3, #100	; 0x64
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087da:	4310      	orrs	r0, r2
                    frequency *= 100;
 80087dc:	4358      	muls	r0, r3
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 80087de:	f001 fe3b 	bl	800a458 <LoRaMacClassBBeaconFreqReq>
 80087e2:	a90a      	add	r1, sp, #40	; 0x28
 80087e4:	7008      	strb	r0, [r1, #0]
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80087e6:	2201      	movs	r2, #1
 80087e8:	2013      	movs	r0, #19
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 80087ea:	b2ed      	uxtb	r5, r5
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 80087ec:	e680      	b.n	80084f0 <ProcessMacCommands.constprop.0+0x230>
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	12d53d80 	.word	0x12d53d80
 80087f4:	20000a3c 	.word	0x20000a3c
 80087f8:	00000434 	.word	0x00000434
 80087fc:	200006d8 	.word	0x200006d8

08008800 <StopRetransmission.isra.0>:
    return false;
}

static bool StopRetransmission( void )
{
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8008800:	4b0f      	ldr	r3, [pc, #60]	; (8008840 <StopRetransmission.isra.0+0x40>)
 8008802:	4a10      	ldr	r2, [pc, #64]	; (8008844 <StopRetransmission.isra.0+0x44>)
 8008804:	5c9a      	ldrb	r2, [r3, r2]
 8008806:	0792      	lsls	r2, r2, #30
 8008808:	d503      	bpl.n	8008812 <StopRetransmission.isra.0+0x12>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800880a:	4a0f      	ldr	r2, [pc, #60]	; (8008848 <StopRetransmission.isra.0+0x48>)
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 800880c:	5c9a      	ldrb	r2, [r3, r2]
 800880e:	2a01      	cmp	r2, #1
 8008810:	d908      	bls.n	8008824 <StopRetransmission.isra.0+0x24>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8008812:	4a0e      	ldr	r2, [pc, #56]	; (800884c <StopRetransmission.isra.0+0x4c>)
 8008814:	0011      	movs	r1, r2
 8008816:	31fe      	adds	r1, #254	; 0xfe
 8008818:	7809      	ldrb	r1, [r1, #0]
 800881a:	2900      	cmp	r1, #0
 800881c:	d002      	beq.n	8008824 <StopRetransmission.isra.0+0x24>
        {
            Nvm.MacGroup1.AdrAckCounter++;
 800881e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008820:	3101      	adds	r1, #1
 8008822:	6291      	str	r1, [r2, #40]	; 0x28
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8008824:	2182      	movs	r1, #130	; 0x82
 8008826:	2200      	movs	r2, #0
    MacCtx.NodeAckRequested = false;
    MacCtx.AckTimeoutRetry = false;
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008828:	2002      	movs	r0, #2
    MacCtx.ChannelsNbTransCounter = 0;
 800882a:	00c9      	lsls	r1, r1, #3
 800882c:	545a      	strb	r2, [r3, r1]
    MacCtx.NodeAckRequested = false;
 800882e:	4908      	ldr	r1, [pc, #32]	; (8008850 <StopRetransmission.isra.0+0x50>)
 8008830:	545a      	strb	r2, [r3, r1]
    MacCtx.AckTimeoutRetry = false;
 8008832:	4908      	ldr	r1, [pc, #32]	; (8008854 <StopRetransmission.isra.0+0x54>)
 8008834:	545a      	strb	r2, [r3, r1]
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008836:	39d3      	subs	r1, #211	; 0xd3
 8008838:	585a      	ldr	r2, [r3, r1]
 800883a:	4382      	bics	r2, r0
 800883c:	505a      	str	r2, [r3, r1]

    return true;
}
 800883e:	4770      	bx	lr
 8008840:	20000a3c 	.word	0x20000a3c
 8008844:	00000481 	.word	0x00000481
 8008848:	0000047f 	.word	0x0000047f
 800884c:	200006f0 	.word	0x200006f0
 8008850:	00000414 	.word	0x00000414
 8008854:	00000413 	.word	0x00000413

08008858 <OnTxDelayedTimerEvent>:
{
 8008858:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800885a:	4811      	ldr	r0, [pc, #68]	; (80088a0 <OnTxDelayedTimerEvent+0x48>)
 800885c:	f005 fc8a 	bl	800e174 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8008860:	22d0      	movs	r2, #208	; 0xd0
 8008862:	2120      	movs	r1, #32
 8008864:	4c0f      	ldr	r4, [pc, #60]	; (80088a4 <OnTxDelayedTimerEvent+0x4c>)
 8008866:	0092      	lsls	r2, r2, #2
 8008868:	58a3      	ldr	r3, [r4, r2]
    switch( ScheduleTx( true ) )
 800886a:	2001      	movs	r0, #1
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800886c:	438b      	bics	r3, r1
 800886e:	50a3      	str	r3, [r4, r2]
    switch( ScheduleTx( true ) )
 8008870:	f7ff fa46 	bl	8007d00 <ScheduleTx>
 8008874:	2800      	cmp	r0, #0
 8008876:	d011      	beq.n	800889c <OnTxDelayedTimerEvent+0x44>
 8008878:	280b      	cmp	r0, #11
 800887a:	d00f      	beq.n	800889c <OnTxDelayedTimerEvent+0x44>
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800887c:	2009      	movs	r0, #9
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800887e:	4b0a      	ldr	r3, [pc, #40]	; (80088a8 <OnTxDelayedTimerEvent+0x50>)
 8008880:	3339      	adds	r3, #57	; 0x39
 8008882:	781a      	ldrb	r2, [r3, #0]
 8008884:	4b09      	ldr	r3, [pc, #36]	; (80088ac <OnTxDelayedTimerEvent+0x54>)
 8008886:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8008888:	4b09      	ldr	r3, [pc, #36]	; (80088b0 <OnTxDelayedTimerEvent+0x58>)
 800888a:	5ce2      	ldrb	r2, [r4, r3]
 800888c:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <OnTxDelayedTimerEvent+0x5c>)
 800888e:	54e2      	strb	r2, [r4, r3]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 8008890:	4b09      	ldr	r3, [pc, #36]	; (80088b8 <OnTxDelayedTimerEvent+0x60>)
 8008892:	54e0      	strb	r0, [r4, r3]
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 8008894:	f001 ff78 	bl	800a788 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 8008898:	f7ff ffb2 	bl	8008800 <StopRetransmission.isra.0>
}
 800889c:	bd10      	pop	{r4, pc}
 800889e:	46c0      	nop			; (mov r8, r8)
 80088a0:	20000da4 	.word	0x20000da4
 80088a4:	20000a3c 	.word	0x20000a3c
 80088a8:	200006f0 	.word	0x200006f0
 80088ac:	0000043a 	.word	0x0000043a
 80088b0:	00000412 	.word	0x00000412
 80088b4:	0000043d 	.word	0x0000043d
 80088b8:	00000439 	.word	0x00000439

080088bc <LoRaMacIsBusy>:
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80088bc:	22d0      	movs	r2, #208	; 0xd0
 80088be:	4b06      	ldr	r3, [pc, #24]	; (80088d8 <LoRaMacIsBusy+0x1c>)
 80088c0:	0092      	lsls	r2, r2, #2
 80088c2:	589a      	ldr	r2, [r3, r2]
    return true;
 80088c4:	2001      	movs	r0, #1
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80088c6:	2a00      	cmp	r2, #0
 80088c8:	d105      	bne.n	80088d6 <LoRaMacIsBusy+0x1a>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 80088ca:	4a04      	ldr	r2, [pc, #16]	; (80088dc <LoRaMacIsBusy+0x20>)
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 80088cc:	5c98      	ldrb	r0, [r3, r2]
 80088ce:	3801      	subs	r0, #1
 80088d0:	1e43      	subs	r3, r0, #1
 80088d2:	4198      	sbcs	r0, r3
 80088d4:	b2c0      	uxtb	r0, r0
}
 80088d6:	4770      	bx	lr
 80088d8:	20000a3c 	.word	0x20000a3c
 80088dc:	00000482 	.word	0x00000482

080088e0 <LoRaMacProcess>:
{
 80088e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e2:	b0a9      	sub	sp, #164	; 0xa4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088e4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80088e8:	b672      	cpsid	i
    LoRaMacRadioEvents.Value = 0;
 80088ea:	2100      	movs	r1, #0
    events = LoRaMacRadioEvents;
 80088ec:	4edd      	ldr	r6, [pc, #884]	; (8008c64 <LoRaMacProcess+0x384>)
 80088ee:	6833      	ldr	r3, [r6, #0]
    LoRaMacRadioEvents.Value = 0;
 80088f0:	6031      	str	r1, [r6, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f2:	f382 8810 	msr	PRIMASK, r2
    if( events.Value != 0 )
 80088f6:	428b      	cmp	r3, r1
 80088f8:	d100      	bne.n	80088fc <LoRaMacProcess+0x1c>
 80088fa:	e0e4      	b.n	8008ac6 <LoRaMacProcess+0x1e6>
        if( events.Events.TxDone == 1 )
 80088fc:	b2da      	uxtb	r2, r3
 80088fe:	9205      	str	r2, [sp, #20]
 8008900:	06db      	lsls	r3, r3, #27
 8008902:	d56f      	bpl.n	80089e4 <LoRaMacProcess+0x104>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008904:	4cd8      	ldr	r4, [pc, #864]	; (8008c68 <LoRaMacProcess+0x388>)
 8008906:	0023      	movs	r3, r4
 8008908:	33fc      	adds	r3, #252	; 0xfc
 800890a:	781b      	ldrb	r3, [r3, #0]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d002      	beq.n	8008916 <LoRaMacProcess+0x36>
        Radio.Sleep( );
 8008910:	4bd6      	ldr	r3, [pc, #856]	; (8008c6c <LoRaMacProcess+0x38c>)
 8008912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008914:	4798      	blx	r3
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 8008916:	23ec      	movs	r3, #236	; 0xec
 8008918:	4fd5      	ldr	r7, [pc, #852]	; (8008c70 <LoRaMacProcess+0x390>)
 800891a:	4dd6      	ldr	r5, [pc, #856]	; (8008c74 <LoRaMacProcess+0x394>)
 800891c:	009b      	lsls	r3, r3, #2
 800891e:	58e9      	ldr	r1, [r5, r3]
 8008920:	0038      	movs	r0, r7
 8008922:	f005 fcb9 	bl	800e298 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 8008926:	0038      	movs	r0, r7
 8008928:	f005 fc78 	bl	800e21c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800892c:	23ed      	movs	r3, #237	; 0xed
 800892e:	4fd2      	ldr	r7, [pc, #840]	; (8008c78 <LoRaMacProcess+0x398>)
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	58e9      	ldr	r1, [r5, r3]
 8008934:	0038      	movs	r0, r7
 8008936:	f005 fcaf 	bl	800e298 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800893a:	0038      	movs	r0, r7
 800893c:	f005 fc6e 	bl	800e21c <UTIL_TIMER_Start>
    if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) || ( MacCtx.NodeAckRequested == true ) )
 8008940:	0023      	movs	r3, r4
 8008942:	33fc      	adds	r3, #252	; 0xfc
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4fcd      	ldr	r7, [pc, #820]	; (8008c7c <LoRaMacProcess+0x39c>)
 8008948:	2b02      	cmp	r3, #2
 800894a:	d002      	beq.n	8008952 <LoRaMacProcess+0x72>
 800894c:	5deb      	ldrb	r3, [r5, r7]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d013      	beq.n	800897a <LoRaMacProcess+0x9a>
        getPhy.Attribute = PHY_ACK_TIMEOUT;
 8008952:	2316      	movs	r3, #22
 8008954:	a912      	add	r1, sp, #72	; 0x48
 8008956:	700b      	strb	r3, [r1, #0]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008958:	0023      	movs	r3, r4
 800895a:	3340      	adds	r3, #64	; 0x40
 800895c:	7818      	ldrb	r0, [r3, #0]
 800895e:	f002 fbc3 	bl	800b0e8 <RegionGetPhyParam>
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8008962:	23ed      	movs	r3, #237	; 0xed
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	58e9      	ldr	r1, [r5, r3]
 8008968:	4dc5      	ldr	r5, [pc, #788]	; (8008c80 <LoRaMacProcess+0x3a0>)
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800896a:	9010      	str	r0, [sp, #64]	; 0x40
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800896c:	1809      	adds	r1, r1, r0
 800896e:	0028      	movs	r0, r5
 8008970:	f005 fc92 	bl	800e298 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.AckTimeoutTimer );
 8008974:	0028      	movs	r0, r5
 8008976:	f005 fc51 	bl	800e21c <UTIL_TIMER_Start>
    txDone.Channel = MacCtx.Channel;
 800897a:	2058      	movs	r0, #88	; 0x58
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800897c:	6973      	ldr	r3, [r6, #20]
    txDone.Channel = MacCtx.Channel;
 800897e:	4ac1      	ldr	r2, [pc, #772]	; (8008c84 <LoRaMacProcess+0x3a4>)
 8008980:	4ebc      	ldr	r6, [pc, #752]	; (8008c74 <LoRaMacProcess+0x394>)
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 8008982:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 8008984:	5cb2      	ldrb	r2, [r6, r2]
 8008986:	a906      	add	r1, sp, #24
 8008988:	1809      	adds	r1, r1, r0
 800898a:	700a      	strb	r2, [r1, #0]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800898c:	a80e      	add	r0, sp, #56	; 0x38
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800898e:	931d      	str	r3, [sp, #116]	; 0x74
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8008990:	f005 fb2a 	bl	800dfe8 <SysTimeGetMcuTime>
 8008994:	0023      	movs	r3, r4
 8008996:	3309      	adds	r3, #9
 8008998:	33ff      	adds	r3, #255	; 0xff
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	ad08      	add	r5, sp, #32
 800899e:	9300      	str	r3, [sp, #0]
 80089a0:	2382      	movs	r3, #130	; 0x82
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80089a6:	0028      	movs	r0, r5
 80089a8:	58e3      	ldr	r3, [r4, r3]
 80089aa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80089ac:	f005 fab8 	bl	800df20 <SysTimeSub>
 80089b0:	ab1f      	add	r3, sp, #124	; 0x7c
 80089b2:	cd06      	ldmia	r5!, {r1, r2}
 80089b4:	c306      	stmia	r3!, {r1, r2}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 80089b6:	2383      	movs	r3, #131	; 0x83
 80089b8:	00db      	lsls	r3, r3, #3
 80089ba:	58f3      	ldr	r3, [r6, r3]
 80089bc:	2159      	movs	r1, #89	; 0x59
 80089be:	931e      	str	r3, [sp, #120]	; 0x78
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80089c0:	0023      	movs	r3, r4
 80089c2:	33ff      	adds	r3, #255	; 0xff
 80089c4:	7c5b      	ldrb	r3, [r3, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80089c6:	3440      	adds	r4, #64	; 0x40
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 80089c8:	1e5a      	subs	r2, r3, #1
 80089ca:	4193      	sbcs	r3, r2
 80089cc:	aa06      	add	r2, sp, #24
 80089ce:	1852      	adds	r2, r2, r1
 80089d0:	7013      	strb	r3, [r2, #0]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 80089d2:	7820      	ldrb	r0, [r4, #0]
 80089d4:	a91c      	add	r1, sp, #112	; 0x70
 80089d6:	f002 fb93 	bl	800b100 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
 80089da:	5df3      	ldrb	r3, [r6, r7]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d101      	bne.n	80089e4 <LoRaMacProcess+0x104>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80089e0:	4aa9      	ldr	r2, [pc, #676]	; (8008c88 <LoRaMacProcess+0x3a8>)
 80089e2:	54b3      	strb	r3, [r6, r2]
        if( events.Events.RxDone == 1 )
 80089e4:	9b05      	ldr	r3, [sp, #20]
 80089e6:	071b      	lsls	r3, r3, #28
 80089e8:	d540      	bpl.n	8008a6c <LoRaMacProcess+0x18c>
    uint8_t *payload = RxDoneParams.Payload;
 80089ea:	4b9e      	ldr	r3, [pc, #632]	; (8008c64 <LoRaMacProcess+0x384>)
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80089ec:	4f9e      	ldr	r7, [pc, #632]	; (8008c68 <LoRaMacProcess+0x388>)
    uint8_t *payload = RxDoneParams.Payload;
 80089ee:	689a      	ldr	r2, [r3, #8]
    MacCtx.McpsConfirm.AckReceived = false;
 80089f0:	4ca0      	ldr	r4, [pc, #640]	; (8008c74 <LoRaMacProcess+0x394>)
    uint8_t *payload = RxDoneParams.Payload;
 80089f2:	9203      	str	r2, [sp, #12]
    uint16_t size = RxDoneParams.Size;
 80089f4:	899a      	ldrh	r2, [r3, #12]
 80089f6:	9202      	str	r2, [sp, #8]
    int16_t rssi = RxDoneParams.Rssi;
 80089f8:	220e      	movs	r2, #14
 80089fa:	5e9d      	ldrsh	r5, [r3, r2]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 80089fc:	003a      	movs	r2, r7
    int8_t snr = RxDoneParams.Snr;
 80089fe:	7c1b      	ldrb	r3, [r3, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008a00:	32cc      	adds	r2, #204	; 0xcc
    int8_t snr = RxDoneParams.Snr;
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	9304      	str	r3, [sp, #16]
    uint32_t downLinkCounter = 0;
 8008a06:	2300      	movs	r3, #0
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008a08:	6812      	ldr	r2, [r2, #0]
    MacCtx.RxStatus.Snr = snr;
 8008a0a:	9904      	ldr	r1, [sp, #16]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8008a0c:	9207      	str	r2, [sp, #28]
    MacCtx.McpsConfirm.AckReceived = false;
 8008a0e:	4a9f      	ldr	r2, [pc, #636]	; (8008c8c <LoRaMacProcess+0x3ac>)
    uint32_t downLinkCounter = 0;
 8008a10:	930b      	str	r3, [sp, #44]	; 0x2c
    MacCtx.McpsConfirm.AckReceived = false;
 8008a12:	54a3      	strb	r3, [r4, r2]
    MacCtx.RxStatus.Rssi = rssi;
 8008a14:	4a9e      	ldr	r2, [pc, #632]	; (8008c90 <LoRaMacProcess+0x3b0>)
 8008a16:	52a5      	strh	r5, [r4, r2]
    MacCtx.RxStatus.Snr = snr;
 8008a18:	4a9e      	ldr	r2, [pc, #632]	; (8008c94 <LoRaMacProcess+0x3b4>)
 8008a1a:	54a1      	strb	r1, [r4, r2]
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8008a1c:	3202      	adds	r2, #2
 8008a1e:	5ca2      	ldrb	r2, [r4, r2]
 8008a20:	499d      	ldr	r1, [pc, #628]	; (8008c98 <LoRaMacProcess+0x3b8>)
 8008a22:	5462      	strb	r2, [r4, r1]
    MacCtx.McpsIndication.Multicast = 0;
 8008a24:	4a9d      	ldr	r2, [pc, #628]	; (8008c9c <LoRaMacProcess+0x3bc>)
 8008a26:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.FramePending = 0;
 8008a28:	4a9d      	ldr	r2, [pc, #628]	; (8008ca0 <LoRaMacProcess+0x3c0>)
 8008a2a:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.Buffer = NULL;
 8008a2c:	4a9d      	ldr	r2, [pc, #628]	; (8008ca4 <LoRaMacProcess+0x3c4>)
 8008a2e:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.BufferSize = 0;
 8008a30:	3204      	adds	r2, #4
 8008a32:	52a3      	strh	r3, [r4, r2]
    MacCtx.McpsIndication.AckReceived = false;
 8008a34:	4a9c      	ldr	r2, [pc, #624]	; (8008ca8 <LoRaMacProcess+0x3c8>)
 8008a36:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8008a38:	4a9c      	ldr	r2, [pc, #624]	; (8008cac <LoRaMacProcess+0x3cc>)
 8008a3a:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8008a3c:	4a9c      	ldr	r2, [pc, #624]	; (8008cb0 <LoRaMacProcess+0x3d0>)
 8008a3e:	54a3      	strb	r3, [r4, r2]
    MacCtx.McpsIndication.DevAddress = 0;
 8008a40:	3214      	adds	r2, #20
 8008a42:	50a3      	str	r3, [r4, r2]
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8008a44:	4a9b      	ldr	r2, [pc, #620]	; (8008cb4 <LoRaMacProcess+0x3d4>)
 8008a46:	54a3      	strb	r3, [r4, r2]
    Radio.Sleep( );
 8008a48:	4b88      	ldr	r3, [pc, #544]	; (8008c6c <LoRaMacProcess+0x38c>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4c:	4798      	blx	r3
    TimerStop( &MacCtx.RxWindowTimer2 );
 8008a4e:	488a      	ldr	r0, [pc, #552]	; (8008c78 <LoRaMacProcess+0x398>)
 8008a50:	f005 fb90 	bl	800e174 <UTIL_TIMER_Stop>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8008a54:	9902      	ldr	r1, [sp, #8]
 8008a56:	9803      	ldr	r0, [sp, #12]
 8008a58:	f001 fce6 	bl	800a428 <LoRaMacClassBRxBeacon>
 8008a5c:	1e06      	subs	r6, r0, #0
 8008a5e:	d100      	bne.n	8008a62 <LoRaMacProcess+0x182>
 8008a60:	e184      	b.n	8008d6c <LoRaMacProcess+0x48c>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008a62:	4b95      	ldr	r3, [pc, #596]	; (8008cb8 <LoRaMacProcess+0x3d8>)
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008a64:	9a04      	ldr	r2, [sp, #16]
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8008a66:	52e5      	strh	r5, [r4, r3]
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8008a68:	4b94      	ldr	r3, [pc, #592]	; (8008cbc <LoRaMacProcess+0x3dc>)
 8008a6a:	54e2      	strb	r2, [r4, r3]
        if( events.Events.TxTimeout == 1 )
 8008a6c:	9b05      	ldr	r3, [sp, #20]
 8008a6e:	075b      	lsls	r3, r3, #29
 8008a70:	d51b      	bpl.n	8008aaa <LoRaMacProcess+0x1ca>
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8008a72:	4b7d      	ldr	r3, [pc, #500]	; (8008c68 <LoRaMacProcess+0x388>)
 8008a74:	33fc      	adds	r3, #252	; 0xfc
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	2b02      	cmp	r3, #2
 8008a7a:	d002      	beq.n	8008a82 <LoRaMacProcess+0x1a2>
        Radio.Sleep( );
 8008a7c:	4b7b      	ldr	r3, [pc, #492]	; (8008c6c <LoRaMacProcess+0x38c>)
 8008a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a80:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 8008a82:	f7fe ff1f 	bl	80078c4 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 8008a86:	2002      	movs	r0, #2
 8008a88:	4c7a      	ldr	r4, [pc, #488]	; (8008c74 <LoRaMacProcess+0x394>)
 8008a8a:	4b7f      	ldr	r3, [pc, #508]	; (8008c88 <LoRaMacProcess+0x3a8>)
 8008a8c:	54e0      	strb	r0, [r4, r3]
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 8008a8e:	f001 fe7b 	bl	800a788 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 8008a92:	4b7a      	ldr	r3, [pc, #488]	; (8008c7c <LoRaMacProcess+0x39c>)
 8008a94:	5ce3      	ldrb	r3, [r4, r3]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d002      	beq.n	8008aa0 <LoRaMacProcess+0x1c0>
        MacCtx.AckTimeoutRetry = true;
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	4b88      	ldr	r3, [pc, #544]	; (8008cc0 <LoRaMacProcess+0x3e0>)
 8008a9e:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008aa0:	2320      	movs	r3, #32
 8008aa2:	4988      	ldr	r1, [pc, #544]	; (8008cc4 <LoRaMacProcess+0x3e4>)
 8008aa4:	5c62      	ldrb	r2, [r4, r1]
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	5463      	strb	r3, [r4, r1]
        if( events.Events.RxError == 1 )
 8008aaa:	9b05      	ldr	r3, [sp, #20]
 8008aac:	079b      	lsls	r3, r3, #30
 8008aae:	d503      	bpl.n	8008ab8 <LoRaMacProcess+0x1d8>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 8008ab0:	2106      	movs	r1, #6
 8008ab2:	2005      	movs	r0, #5
 8008ab4:	f7fe ff76 	bl	80079a4 <HandleRadioRxErrorTimeout>
        if( events.Events.RxTimeout == 1 )
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	07db      	lsls	r3, r3, #31
 8008abc:	d503      	bpl.n	8008ac6 <LoRaMacProcess+0x1e6>
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 8008abe:	2104      	movs	r1, #4
 8008ac0:	2003      	movs	r0, #3
 8008ac2:	f7fe ff6f 	bl	80079a4 <HandleRadioRxErrorTimeout>
    LoRaMacClassBProcess( );
 8008ac6:	f001 fccc 	bl	800a462 <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 8008aca:	4c6a      	ldr	r4, [pc, #424]	; (8008c74 <LoRaMacProcess+0x394>)
 8008acc:	4b7d      	ldr	r3, [pc, #500]	; (8008cc4 <LoRaMacProcess+0x3e4>)
 8008ace:	5ce2      	ldrb	r2, [r4, r3]
 8008ad0:	0693      	lsls	r3, r2, #26
 8008ad2:	d400      	bmi.n	8008ad6 <LoRaMacProcess+0x1f6>
 8008ad4:	e114      	b.n	8008d00 <LoRaMacProcess+0x420>
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008ad6:	21d0      	movs	r1, #208	; 0xd0
    MacCtx.AllowRequests = requestState;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	4d7b      	ldr	r5, [pc, #492]	; (8008cc8 <LoRaMacProcess+0x3e8>)
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008adc:	0089      	lsls	r1, r1, #2
    MacCtx.AllowRequests = requestState;
 8008ade:	5563      	strb	r3, [r4, r5]
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 8008ae0:	5863      	ldr	r3, [r4, r1]
 8008ae2:	0618      	lsls	r0, r3, #24
 8008ae4:	d502      	bpl.n	8008aec <LoRaMacProcess+0x20c>
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008ae6:	2082      	movs	r0, #130	; 0x82
 8008ae8:	4383      	bics	r3, r0
 8008aea:	5063      	str	r3, [r4, r1]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8008aec:	2305      	movs	r3, #5
 8008aee:	421a      	tst	r2, r3
 8008af0:	d100      	bne.n	8008af4 <LoRaMacProcess+0x214>
 8008af2:	e380      	b.n	80091f6 <LoRaMacProcess+0x916>
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008af4:	200c      	movs	r0, #12
 8008af6:	f001 fe65 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d100      	bne.n	8008b00 <LoRaMacProcess+0x220>
 8008afe:	e37a      	b.n	80091f6 <LoRaMacProcess+0x916>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 8008b00:	4b70      	ldr	r3, [pc, #448]	; (8008cc4 <LoRaMacProcess+0x3e4>)
 8008b02:	5ce3      	ldrb	r3, [r4, r3]
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 8008b04:	07da      	lsls	r2, r3, #31
 8008b06:	d500      	bpl.n	8008b0a <LoRaMacProcess+0x22a>
 8008b08:	e375      	b.n	80091f6 <LoRaMacProcess+0x916>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008b0a:	075b      	lsls	r3, r3, #29
 8008b0c:	d400      	bmi.n	8008b10 <LoRaMacProcess+0x230>
 8008b0e:	e389      	b.n	8009224 <LoRaMacProcess+0x944>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8008b10:	22d0      	movs	r2, #208	; 0xd0
 8008b12:	2102      	movs	r1, #2
 8008b14:	0092      	lsls	r2, r2, #2
 8008b16:	58a3      	ldr	r3, [r4, r2]
 8008b18:	438b      	bics	r3, r1
 8008b1a:	50a3      	str	r3, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b1c:	23d0      	movs	r3, #208	; 0xd0
 8008b1e:	009b      	lsls	r3, r3, #2
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008b20:	4a68      	ldr	r2, [pc, #416]	; (8008cc4 <LoRaMacProcess+0x3e4>)
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b22:	58e3      	ldr	r3, [r4, r3]
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008b24:	5ca7      	ldrb	r7, [r4, r2]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d000      	beq.n	8008b2c <LoRaMacProcess+0x24c>
 8008b2a:	e0e7      	b.n	8008cfc <LoRaMacProcess+0x41c>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8008b2c:	0039      	movs	r1, r7
 8008b2e:	3301      	adds	r3, #1
 8008b30:	4019      	ands	r1, r3
 8008b32:	421f      	tst	r7, r3
 8008b34:	d002      	beq.n	8008b3c <LoRaMacProcess+0x25c>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 8008b36:	0038      	movs	r0, r7
 8008b38:	4398      	bics	r0, r3
 8008b3a:	54a0      	strb	r0, [r4, r2]
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 8008b3c:	2204      	movs	r2, #4
 8008b3e:	4861      	ldr	r0, [pc, #388]	; (8008cc4 <LoRaMacProcess+0x3e4>)
 8008b40:	5c23      	ldrb	r3, [r4, r0]
 8008b42:	4213      	tst	r3, r2
 8008b44:	d001      	beq.n	8008b4a <LoRaMacProcess+0x26a>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8008b46:	4393      	bics	r3, r2
 8008b48:	5423      	strb	r3, [r4, r0]
    MacCtx.AllowRequests = requestState;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	5563      	strb	r3, [r4, r5]
        if( reqEvents.Bits.McpsReq == 1 )
 8008b4e:	2900      	cmp	r1, #0
 8008b50:	d005      	beq.n	8008b5e <LoRaMacProcess+0x27e>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 8008b52:	23d1      	movs	r3, #209	; 0xd1
 8008b54:	009b      	lsls	r3, r3, #2
 8008b56:	58e3      	ldr	r3, [r4, r3]
 8008b58:	485c      	ldr	r0, [pc, #368]	; (8008ccc <LoRaMacProcess+0x3ec>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 8008b5e:	2604      	movs	r6, #4
 8008b60:	4237      	tst	r7, r6
 8008b62:	d00a      	beq.n	8008b7a <LoRaMacProcess+0x29a>
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 8008b64:	485a      	ldr	r0, [pc, #360]	; (8008cd0 <LoRaMacProcess+0x3f0>)
 8008b66:	f001 fe39 	bl	800a7dc <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 8008b6a:	f001 fe63 	bl	800a834 <LoRaMacConfirmQueueGetCnt>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d003      	beq.n	8008b7a <LoRaMacProcess+0x29a>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 8008b72:	4a54      	ldr	r2, [pc, #336]	; (8008cc4 <LoRaMacProcess+0x3e4>)
 8008b74:	5ca3      	ldrb	r3, [r4, r2]
 8008b76:	431e      	orrs	r6, r3
 8008b78:	54a6      	strb	r6, [r4, r2]
        LoRaMacClassBResumeBeaconing( );
 8008b7a:	f001 fc61 	bl	800a440 <LoRaMacClassBResumeBeaconing>
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b7e:	26d0      	movs	r6, #208	; 0xd0
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008b80:	2220      	movs	r2, #32
 8008b82:	4f50      	ldr	r7, [pc, #320]	; (8008cc4 <LoRaMacProcess+0x3e4>)
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b84:	00b6      	lsls	r6, r6, #2
        MacCtx.MacFlags.Bits.MacDone = 0;
 8008b86:	5de3      	ldrb	r3, [r4, r7]
 8008b88:	4393      	bics	r3, r2
 8008b8a:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState == LORAMAC_IDLE )
 8008b8c:	59a3      	ldr	r3, [r4, r6]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d000      	beq.n	8008b94 <LoRaMacProcess+0x2b4>
 8008b92:	e0b3      	b.n	8008cfc <LoRaMacProcess+0x41c>
        bool isStickyMacCommandPending = false;
 8008b94:	3238      	adds	r2, #56	; 0x38
 8008b96:	a906      	add	r1, sp, #24
 8008b98:	1889      	adds	r1, r1, r2
 8008b9a:	700b      	strb	r3, [r1, #0]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 8008b9c:	a81c      	add	r0, sp, #112	; 0x70
 8008b9e:	f001 fd47 	bl	800a630 <LoRaMacCommandsStickyCmdsPending>
        if( isStickyMacCommandPending == true )
 8008ba2:	2258      	movs	r2, #88	; 0x58
 8008ba4:	ab06      	add	r3, sp, #24
 8008ba6:	189b      	adds	r3, r3, r2
 8008ba8:	781b      	ldrb	r3, [r3, #0]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <LoRaMacProcess+0x2d6>
    MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 1;
 8008bae:	2310      	movs	r3, #16
 8008bb0:	5de2      	ldrb	r2, [r4, r7]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	55e3      	strb	r3, [r4, r7]
    if( MacCtx.MacState != LORAMAC_IDLE )
 8008bb6:	59a6      	ldr	r6, [r4, r6]
 8008bb8:	2e00      	cmp	r6, #0
 8008bba:	d000      	beq.n	8008bbe <LoRaMacProcess+0x2de>
 8008bbc:	e09e      	b.n	8008cfc <LoRaMacProcess+0x41c>
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 8008bbe:	4f2a      	ldr	r7, [pc, #168]	; (8008c68 <LoRaMacProcess+0x388>)
 8008bc0:	2124      	movs	r1, #36	; 0x24
 8008bc2:	0038      	movs	r0, r7
 8008bc4:	f003 fc56 	bl	800c474 <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 8008bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bca:	4298      	cmp	r0, r3
 8008bcc:	d001      	beq.n	8008bd2 <LoRaMacProcess+0x2f2>
        nvmData->Crypto.Crc32 = crc;
 8008bce:	6278      	str	r0, [r7, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 8008bd0:	3601      	adds	r6, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 8008bd2:	2114      	movs	r1, #20
 8008bd4:	483f      	ldr	r0, [pc, #252]	; (8008cd4 <LoRaMacProcess+0x3f4>)
 8008bd6:	f003 fc4d 	bl	800c474 <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 8008bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bdc:	4298      	cmp	r0, r3
 8008bde:	d002      	beq.n	8008be6 <LoRaMacProcess+0x306>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008be0:	2302      	movs	r3, #2
        nvmData->MacGroup1.Crc32 = crc;
 8008be2:	63f8      	str	r0, [r7, #60]	; 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 8008be4:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 8008be6:	21d4      	movs	r1, #212	; 0xd4
 8008be8:	483b      	ldr	r0, [pc, #236]	; (8008cd8 <LoRaMacProcess+0x3f8>)
 8008bea:	f003 fc43 	bl	800c474 <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 8008bee:	003b      	movs	r3, r7
 8008bf0:	33fc      	adds	r3, #252	; 0xfc
 8008bf2:	699a      	ldr	r2, [r3, #24]
 8008bf4:	4290      	cmp	r0, r2
 8008bf6:	d002      	beq.n	8008bfe <LoRaMacProcess+0x31e>
        nvmData->MacGroup2.Crc32 = crc;
 8008bf8:	6198      	str	r0, [r3, #24]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 8008bfa:	2304      	movs	r3, #4
 8008bfc:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 8008bfe:	21bc      	movs	r1, #188	; 0xbc
 8008c00:	4836      	ldr	r0, [pc, #216]	; (8008cdc <LoRaMacProcess+0x3fc>)
 8008c02:	f003 fc37 	bl	800c474 <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 8008c06:	23ea      	movs	r3, #234	; 0xea
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	58fa      	ldr	r2, [r7, r3]
 8008c0c:	4290      	cmp	r0, r2
 8008c0e:	d003      	beq.n	8008c18 <LoRaMacProcess+0x338>
        nvmData->SecureElement.Crc32 = crc;
 8008c10:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 8008c12:	3bcd      	subs	r3, #205	; 0xcd
 8008c14:	3bff      	subs	r3, #255	; 0xff
 8008c16:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 8008c18:	2190      	movs	r1, #144	; 0x90
 8008c1a:	4831      	ldr	r0, [pc, #196]	; (8008ce0 <LoRaMacProcess+0x400>)
 8008c1c:	f003 fc2a 	bl	800c474 <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 8008c20:	239a      	movs	r3, #154	; 0x9a
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	58fa      	ldr	r2, [r7, r3]
 8008c26:	4290      	cmp	r0, r2
 8008c28:	d002      	beq.n	8008c30 <LoRaMacProcess+0x350>
        nvmData->RegionGroup1.Crc32 = crc;
 8008c2a:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 8008c2c:	2310      	movs	r3, #16
 8008c2e:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 8008c30:	21c4      	movs	r1, #196	; 0xc4
 8008c32:	482c      	ldr	r0, [pc, #176]	; (8008ce4 <LoRaMacProcess+0x404>)
 8008c34:	f003 fc1e 	bl	800c474 <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 8008c38:	23cc      	movs	r3, #204	; 0xcc
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	58fa      	ldr	r2, [r7, r3]
 8008c3e:	4290      	cmp	r0, r2
 8008c40:	d002      	beq.n	8008c48 <LoRaMacProcess+0x368>
        nvmData->RegionGroup2.Crc32 = crc;
 8008c42:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 8008c44:	2320      	movs	r3, #32
 8008c46:	431e      	orrs	r6, r3
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 8008c48:	2114      	movs	r1, #20
 8008c4a:	4827      	ldr	r0, [pc, #156]	; (8008ce8 <LoRaMacProcess+0x408>)
 8008c4c:	f003 fc12 	bl	800c474 <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 8008c50:	23d2      	movs	r3, #210	; 0xd2
 8008c52:	009b      	lsls	r3, r3, #2
 8008c54:	58fa      	ldr	r2, [r7, r3]
 8008c56:	4290      	cmp	r0, r2
 8008c58:	d048      	beq.n	8008cec <LoRaMacProcess+0x40c>
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008c5a:	2240      	movs	r2, #64	; 0x40
        nvmData->ClassB.Crc32 = crc;
 8008c5c:	50f8      	str	r0, [r7, r3]
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 8008c5e:	4316      	orrs	r6, r2
 8008c60:	e044      	b.n	8008cec <LoRaMacProcess+0x40c>
 8008c62:	46c0      	nop			; (mov r8, r8)
 8008c64:	200006d8 	.word	0x200006d8
 8008c68:	200006f0 	.word	0x200006f0
 8008c6c:	0800f64c 	.word	0x0800f64c
 8008c70:	20000dbc 	.word	0x20000dbc
 8008c74:	20000a3c 	.word	0x20000a3c
 8008c78:	20000dd4 	.word	0x20000dd4
 8008c7c:	00000414 	.word	0x00000414
 8008c80:	20000e34 	.word	0x20000e34
 8008c84:	00000415 	.word	0x00000415
 8008c88:	00000439 	.word	0x00000439
 8008c8c:	0000043c 	.word	0x0000043c
 8008c90:	0000047c 	.word	0x0000047c
 8008c94:	0000047e 	.word	0x0000047e
 8008c98:	0000047f 	.word	0x0000047f
 8008c9c:	0000041e 	.word	0x0000041e
 8008ca0:	00000421 	.word	0x00000421
 8008ca4:	00000424 	.word	0x00000424
 8008ca8:	0000042a 	.word	0x0000042a
 8008cac:	0000042c 	.word	0x0000042c
 8008cb0:	0000041c 	.word	0x0000041c
 8008cb4:	00000434 	.word	0x00000434
 8008cb8:	00000472 	.word	0x00000472
 8008cbc:	00000474 	.word	0x00000474
 8008cc0:	00000413 	.word	0x00000413
 8008cc4:	00000481 	.word	0x00000481
 8008cc8:	00000482 	.word	0x00000482
 8008ccc:	20000e74 	.word	0x20000e74
 8008cd0:	20000e88 	.word	0x20000e88
 8008cd4:	20000718 	.word	0x20000718
 8008cd8:	20000730 	.word	0x20000730
 8008cdc:	20000808 	.word	0x20000808
 8008ce0:	200008c8 	.word	0x200008c8
 8008ce4:	2000095c 	.word	0x2000095c
 8008ce8:	20000a24 	.word	0x20000a24
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008cec:	58e3      	ldr	r3, [r4, r3]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d004      	beq.n	8008cfc <LoRaMacProcess+0x41c>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8008cf2:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <LoRaMacProcess+0x41c>
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8008cf8:	0030      	movs	r0, r6
 8008cfa:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	5563      	strb	r3, [r4, r5]
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 8008d00:	2208      	movs	r2, #8
 8008d02:	49a3      	ldr	r1, [pc, #652]	; (8008f90 <LoRaMacProcess+0x6b0>)
 8008d04:	5c63      	ldrb	r3, [r4, r1]
 8008d06:	4213      	tst	r3, r2
 8008d08:	d008      	beq.n	8008d1c <LoRaMacProcess+0x43c>
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 8008d0a:	4393      	bics	r3, r2
 8008d0c:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 8008d0e:	23d1      	movs	r3, #209	; 0xd1
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	58e3      	ldr	r3, [r4, r3]
 8008d14:	499f      	ldr	r1, [pc, #636]	; (8008f94 <LoRaMacProcess+0x6b4>)
 8008d16:	48a0      	ldr	r0, [pc, #640]	; (8008f98 <LoRaMacProcess+0x6b8>)
 8008d18:	68db      	ldr	r3, [r3, #12]
 8008d1a:	4798      	blx	r3
    if( MacCtx.MacFlags.Bits.MlmeSchedUplinkInd == 1 )
 8008d1c:	2510      	movs	r5, #16
 8008d1e:	4e9c      	ldr	r6, [pc, #624]	; (8008f90 <LoRaMacProcess+0x6b0>)
 8008d20:	5da3      	ldrb	r3, [r4, r6]
 8008d22:	422b      	tst	r3, r5
 8008d24:	d00b      	beq.n	8008d3e <LoRaMacProcess+0x45e>
        schduleUplinkIndication.MlmeIndication = MLME_SCHEDULE_UPLINK;
 8008d26:	2307      	movs	r3, #7
 8008d28:	a81c      	add	r0, sp, #112	; 0x70
 8008d2a:	8003      	strh	r3, [r0, #0]
        MacCtx.MacPrimitives->MacMlmeIndication( &schduleUplinkIndication, &MacCtx.RxStatus );
 8008d2c:	23d1      	movs	r3, #209	; 0xd1
 8008d2e:	009b      	lsls	r3, r3, #2
 8008d30:	58e3      	ldr	r3, [r4, r3]
 8008d32:	4998      	ldr	r1, [pc, #608]	; (8008f94 <LoRaMacProcess+0x6b4>)
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	4798      	blx	r3
        MacCtx.MacFlags.Bits.MlmeSchedUplinkInd = 0;
 8008d38:	5da3      	ldrb	r3, [r4, r6]
 8008d3a:	43ab      	bics	r3, r5
 8008d3c:	55a3      	strb	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8008d3e:	2202      	movs	r2, #2
 8008d40:	4993      	ldr	r1, [pc, #588]	; (8008f90 <LoRaMacProcess+0x6b0>)
 8008d42:	5c63      	ldrb	r3, [r4, r1]
 8008d44:	4213      	tst	r3, r2
 8008d46:	d008      	beq.n	8008d5a <LoRaMacProcess+0x47a>
        MacCtx.MacFlags.Bits.McpsInd = 0;
 8008d48:	4393      	bics	r3, r2
 8008d4a:	5463      	strb	r3, [r4, r1]
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 8008d4c:	23d1      	movs	r3, #209	; 0xd1
 8008d4e:	009b      	lsls	r3, r3, #2
 8008d50:	58e3      	ldr	r3, [r4, r3]
 8008d52:	4990      	ldr	r1, [pc, #576]	; (8008f94 <LoRaMacProcess+0x6b4>)
 8008d54:	4891      	ldr	r0, [pc, #580]	; (8008f9c <LoRaMacProcess+0x6bc>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	4798      	blx	r3
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 8008d5a:	2390      	movs	r3, #144	; 0x90
 8008d5c:	00db      	lsls	r3, r3, #3
 8008d5e:	5ce3      	ldrb	r3, [r4, r3]
 8008d60:	2b02      	cmp	r3, #2
 8008d62:	d101      	bne.n	8008d68 <LoRaMacProcess+0x488>
        OpenContinuousRxCWindow( );
 8008d64:	f7ff f97a 	bl	800805c <OpenContinuousRxCWindow>
}
 8008d68:	b029      	add	sp, #164	; 0xa4
 8008d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8008d6c:	003b      	movs	r3, r7
 8008d6e:	33fc      	adds	r3, #252	; 0xfc
 8008d70:	781b      	ldrb	r3, [r3, #0]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d10c      	bne.n	8008d90 <LoRaMacProcess+0x4b0>
        if( LoRaMacClassBIsPingExpected( ) == true )
 8008d76:	f001 fb5b 	bl	800a430 <LoRaMacClassBIsPingExpected>
 8008d7a:	1e05      	subs	r5, r0, #0
 8008d7c:	d01a      	beq.n	8008db4 <LoRaMacProcess+0x4d4>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008d7e:	0030      	movs	r0, r6
 8008d80:	f001 fb4b 	bl	800a41a <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8008d84:	0030      	movs	r0, r6
 8008d86:	f001 fb4d 	bl	800a424 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8008d8a:	2304      	movs	r3, #4
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008d8c:	4a84      	ldr	r2, [pc, #528]	; (8008fa0 <LoRaMacProcess+0x6c0>)
 8008d8e:	54a3      	strb	r3, [r4, r2]
    macHdr.Value = payload[pktHeaderLen++];
 8008d90:	9b03      	ldr	r3, [sp, #12]
 8008d92:	781b      	ldrb	r3, [r3, #0]
    switch( macHdr.Bits.MType )
 8008d94:	0958      	lsrs	r0, r3, #5
 8008d96:	3801      	subs	r0, #1
    macHdr.Value = payload[pktHeaderLen++];
 8008d98:	9306      	str	r3, [sp, #24]
    switch( macHdr.Bits.MType )
 8008d9a:	4b82      	ldr	r3, [pc, #520]	; (8008fa4 <LoRaMacProcess+0x6c4>)
 8008d9c:	2806      	cmp	r0, #6
 8008d9e:	d900      	bls.n	8008da2 <LoRaMacProcess+0x4c2>
 8008da0:	e21c      	b.n	80091dc <LoRaMacProcess+0x8fc>
 8008da2:	f7f7 f9d7 	bl	8000154 <__gnu_thumb1_case_uhi>
 8008da6:	0013      	.short	0x0013
 8008da8:	0099021b 	.word	0x0099021b
 8008dac:	0096021b 	.word	0x0096021b
 8008db0:	020a021b 	.word	0x020a021b
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8008db4:	f001 fb3e 	bl	800a434 <LoRaMacClassBIsMulticastExpected>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d0e9      	beq.n	8008d90 <LoRaMacProcess+0x4b0>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8008dbc:	0028      	movs	r0, r5
 8008dbe:	f001 fb2d 	bl	800a41c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8008dc2:	0028      	movs	r0, r5
 8008dc4:	f001 fb2f 	bl	800a426 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8008dc8:	2305      	movs	r3, #5
 8008dca:	e7df      	b.n	8008d8c <LoRaMacProcess+0x4ac>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8008dcc:	9b02      	ldr	r3, [sp, #8]
 8008dce:	2b10      	cmp	r3, #16
 8008dd0:	d806      	bhi.n	8008de0 <LoRaMacProcess+0x500>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8008dd2:	2101      	movs	r1, #1
 8008dd4:	4b73      	ldr	r3, [pc, #460]	; (8008fa4 <LoRaMacProcess+0x6c4>)
 8008dd6:	4a74      	ldr	r2, [pc, #464]	; (8008fa8 <LoRaMacProcess+0x6c8>)
 8008dd8:	5499      	strb	r1, [r3, r2]
                PrepareRxDoneAbort( );
 8008dda:	f7fe fdc5 	bl	8007968 <PrepareRxDoneAbort>
                return;
 8008dde:	e645      	b.n	8008a6c <LoRaMacProcess+0x18c>
            macMsgJoinAccept.Buffer = payload;
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	ae12      	add	r6, sp, #72	; 0x48
 8008de4:	9312      	str	r3, [sp, #72]	; 0x48
            macMsgJoinAccept.BufSize = size;
 8008de6:	466b      	mov	r3, sp
 8008de8:	7a1d      	ldrb	r5, [r3, #8]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008dea:	003b      	movs	r3, r7
            macMsgJoinAccept.BufSize = size;
 8008dec:	7135      	strb	r5, [r6, #4]
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8008dee:	33ff      	adds	r3, #255	; 0xff
 8008df0:	7c5b      	ldrb	r3, [r3, #17]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1ed      	bne.n	8008dd2 <LoRaMacProcess+0x4f2>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 8008df6:	f7fe f829 	bl	8006e4c <SecureElementGetJoinEui>
 8008dfa:	0032      	movs	r2, r6
 8008dfc:	0001      	movs	r1, r0
 8008dfe:	20ff      	movs	r0, #255	; 0xff
 8008e00:	f001 ffb0 	bl	800ad64 <LoRaMacCryptoHandleJoinAccept>
            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 8008e04:	2800      	cmp	r0, #0
 8008e06:	d15c      	bne.n	8008ec2 <LoRaMacProcess+0x5e2>
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e08:	003a      	movs	r2, r7
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008e0a:	7ab3      	ldrb	r3, [r6, #10]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e0c:	7af1      	ldrb	r1, [r6, #11]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8008e0e:	021b      	lsls	r3, r3, #8
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e10:	0409      	lsls	r1, r1, #16
 8008e12:	430b      	orrs	r3, r1
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8008e14:	7a71      	ldrb	r1, [r6, #9]
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8008e16:	32c8      	adds	r2, #200	; 0xc8
 8008e18:	430b      	orrs	r3, r1
 8008e1a:	6013      	str	r3, [r2, #0]
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008e1c:	003b      	movs	r3, r7
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008e1e:	0039      	movs	r1, r7
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8008e20:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008e22:	33cc      	adds	r3, #204	; 0xcc
 8008e24:	601a      	str	r2, [r3, #0]
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8008e26:	7c33      	ldrb	r3, [r6, #16]
 8008e28:	3161      	adds	r1, #97	; 0x61
 8008e2a:	065a      	lsls	r2, r3, #25
 8008e2c:	0f52      	lsrs	r2, r2, #29
 8008e2e:	700a      	strb	r2, [r1, #0]
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008e30:	003a      	movs	r2, r7
 8008e32:	071b      	lsls	r3, r3, #28
 8008e34:	0f1b      	lsrs	r3, r3, #28
 8008e36:	3268      	adds	r2, #104	; 0x68
 8008e38:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8008e3a:	003a      	movs	r2, r7
 8008e3c:	3270      	adds	r2, #112	; 0x70
 8008e3e:	7013      	strb	r3, [r2, #0]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8008e40:	7c72      	ldrb	r2, [r6, #17]
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008e42:	2a00      	cmp	r2, #0
 8008e44:	d100      	bne.n	8008e48 <LoRaMacProcess+0x568>
 8008e46:	3201      	adds	r2, #1
 8008e48:	23fa      	movs	r3, #250	; 0xfa
 8008e4a:	009b      	lsls	r3, r3, #2
 8008e4c:	4353      	muls	r3, r2
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008e4e:	22fa      	movs	r2, #250	; 0xfa
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008e50:	2600      	movs	r6, #0
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008e52:	0092      	lsls	r2, r2, #2
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8008e54:	653b      	str	r3, [r7, #80]	; 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	657b      	str	r3, [r7, #84]	; 0x54
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008e5a:	4b54      	ldr	r3, [pc, #336]	; (8008fac <LoRaMacProcess+0x6cc>)
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008e5c:	aa06      	add	r2, sp, #24
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8008e5e:	73de      	strb	r6, [r3, #15]
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008e60:	2342      	movs	r3, #66	; 0x42
 8008e62:	189b      	adds	r3, r3, r2
 8008e64:	9310      	str	r3, [sp, #64]	; 0x40
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008e66:	003b      	movs	r3, r7
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8008e68:	a910      	add	r1, sp, #64	; 0x40
                applyCFList.Size = size - 17;
 8008e6a:	3d11      	subs	r5, #17
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008e6c:	3340      	adds	r3, #64	; 0x40
                applyCFList.Size = size - 17;
 8008e6e:	710d      	strb	r5, [r1, #4]
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8008e70:	7818      	ldrb	r0, [r3, #0]
 8008e72:	f002 f95f 	bl	800b134 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008e76:	2302      	movs	r3, #2
 8008e78:	4a4c      	ldr	r2, [pc, #304]	; (8008fac <LoRaMacProcess+0x6cc>)
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008e7a:	2001      	movs	r0, #1
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008e7c:	7453      	strb	r3, [r2, #17]
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008e7e:	f001 fca1 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8008e82:	42b0      	cmp	r0, r6
 8008e84:	d003      	beq.n	8008e8e <LoRaMacProcess+0x5ae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 8008e86:	2101      	movs	r1, #1
 8008e88:	0030      	movs	r0, r6
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008e8a:	f001 fc57 	bl	800a73c <LoRaMacConfirmQueueSetStatus>
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 8008e8e:	2308      	movs	r3, #8
 8008e90:	493f      	ldr	r1, [pc, #252]	; (8008f90 <LoRaMacProcess+0x6b0>)
 8008e92:	5c62      	ldrb	r2, [r4, r1]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 8008e94:	4313      	orrs	r3, r2
 8008e96:	5463      	strb	r3, [r4, r1]
    if( MacCtx.NodeAckRequested == true )
 8008e98:	4c42      	ldr	r4, [pc, #264]	; (8008fa4 <LoRaMacProcess+0x6c4>)
 8008e9a:	4b45      	ldr	r3, [pc, #276]	; (8008fb0 <LoRaMacProcess+0x6d0>)
 8008e9c:	5ce3      	ldrb	r3, [r4, r3]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d100      	bne.n	8008ea4 <LoRaMacProcess+0x5c4>
 8008ea2:	e1a1      	b.n	80091e8 <LoRaMacProcess+0x908>
        if( MacCtx.McpsConfirm.AckReceived == true )
 8008ea4:	4b43      	ldr	r3, [pc, #268]	; (8008fb4 <LoRaMacProcess+0x6d4>)
 8008ea6:	5ce3      	ldrb	r3, [r4, r3]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d002      	beq.n	8008eb2 <LoRaMacProcess+0x5d2>
            OnAckTimeoutTimerEvent( NULL );
 8008eac:	2000      	movs	r0, #0
 8008eae:	f7fe fd2f 	bl	8007910 <OnAckTimeoutTimerEvent>
    MacCtx.MacFlags.Bits.MacDone = 1;
 8008eb2:	2320      	movs	r3, #32
 8008eb4:	4936      	ldr	r1, [pc, #216]	; (8008f90 <LoRaMacProcess+0x6b0>)
 8008eb6:	5c62      	ldrb	r2, [r4, r1]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	5463      	strb	r3, [r4, r1]
    UpdateRxSlotIdleState( );
 8008ebc:	f7fe fd02 	bl	80078c4 <UpdateRxSlotIdleState>
 8008ec0:	e5d4      	b.n	8008a6c <LoRaMacProcess+0x18c>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8008ec2:	2001      	movs	r0, #1
 8008ec4:	f001 fc7e 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8008ec8:	2800      	cmp	r0, #0
 8008eca:	d0e0      	beq.n	8008e8e <LoRaMacProcess+0x5ae>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8008ecc:	2101      	movs	r1, #1
 8008ece:	2007      	movs	r0, #7
 8008ed0:	e7db      	b.n	8008e8a <LoRaMacProcess+0x5aa>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	4938      	ldr	r1, [pc, #224]	; (8008fb8 <LoRaMacProcess+0x6d8>)
 8008ed6:	545a      	strb	r2, [r3, r1]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ed8:	4b38      	ldr	r3, [pc, #224]	; (8008fbc <LoRaMacProcess+0x6dc>)
 8008eda:	a90c      	add	r1, sp, #48	; 0x30
 8008edc:	001a      	movs	r2, r3
 8008ede:	3275      	adds	r2, #117	; 0x75
 8008ee0:	7812      	ldrb	r2, [r2, #0]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008ee2:	4c30      	ldr	r4, [pc, #192]	; (8008fa4 <LoRaMacProcess+0x6c4>)
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8008ee4:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8008ee6:	2284      	movs	r2, #132	; 0x84
 8008ee8:	00d2      	lsls	r2, r2, #3
 8008eea:	5ca2      	ldrb	r2, [r4, r2]
 8008eec:	704a      	strb	r2, [r1, #1]
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008eee:	001a      	movs	r2, r3
 8008ef0:	3280      	adds	r2, #128	; 0x80
 8008ef2:	7812      	ldrb	r2, [r2, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008ef4:	3340      	adds	r3, #64	; 0x40
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8008ef6:	320d      	adds	r2, #13
 8008ef8:	700a      	strb	r2, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008efa:	7818      	ldrb	r0, [r3, #0]
 8008efc:	f002 f8f4 	bl	800b0e8 <RegionGetPhyParam>
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008f00:	9a02      	ldr	r2, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8008f02:	900a      	str	r0, [sp, #40]	; 0x28
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8008f04:	3a0d      	subs	r2, #13
 8008f06:	1c13      	adds	r3, r2, #0
 8008f08:	0412      	lsls	r2, r2, #16
 8008f0a:	d500      	bpl.n	8008f0e <LoRaMacProcess+0x62e>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f10:	b21b      	sxth	r3, r3
 8008f12:	b212      	sxth	r2, r2
 8008f14:	4293      	cmp	r3, r2
 8008f16:	dd00      	ble.n	8008f1a <LoRaMacProcess+0x63a>
 8008f18:	e75b      	b.n	8008dd2 <LoRaMacProcess+0x4f2>
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	2b0b      	cmp	r3, #11
 8008f1e:	d800      	bhi.n	8008f22 <LoRaMacProcess+0x642>
 8008f20:	e757      	b.n	8008dd2 <LoRaMacProcess+0x4f2>
            macMsgData.BufSize = size;
 8008f22:	225c      	movs	r2, #92	; 0x5c
            macMsgData.Buffer = payload;
 8008f24:	9b03      	ldr	r3, [sp, #12]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008f26:	a81c      	add	r0, sp, #112	; 0x70
            macMsgData.Buffer = payload;
 8008f28:	931c      	str	r3, [sp, #112]	; 0x70
            macMsgData.BufSize = size;
 8008f2a:	ab06      	add	r3, sp, #24
 8008f2c:	189b      	adds	r3, r3, r2
 8008f2e:	9a02      	ldr	r2, [sp, #8]
 8008f30:	701a      	strb	r2, [r3, #0]
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008f32:	22ff      	movs	r2, #255	; 0xff
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8008f34:	4b22      	ldr	r3, [pc, #136]	; (8008fc0 <LoRaMacProcess+0x6e0>)
 8008f36:	9325      	str	r3, [sp, #148]	; 0x94
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8008f38:	ab26      	add	r3, sp, #152	; 0x98
 8008f3a:	701a      	strb	r2, [r3, #0]
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8008f3c:	f001 ffd0 	bl	800aee0 <LoRaMacParserData>
 8008f40:	1e06      	subs	r6, r0, #0
 8008f42:	d000      	beq.n	8008f46 <LoRaMacProcess+0x666>
 8008f44:	e745      	b.n	8008dd2 <LoRaMacProcess+0x4f2>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008f46:	2386      	movs	r3, #134	; 0x86
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008f48:	2264      	movs	r2, #100	; 0x64
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8008f4a:	981e      	ldr	r0, [sp, #120]	; 0x78
 8008f4c:	00db      	lsls	r3, r3, #3
 8008f4e:	50e0      	str	r0, [r4, r3]
    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8008f50:	ab06      	add	r3, sp, #24
 8008f52:	189b      	adds	r3, r3, r2
 8008f54:	781a      	ldrb	r2, [r3, #0]
 8008f56:	230f      	movs	r3, #15
 8008f58:	0011      	movs	r1, r2
 8008f5a:	4019      	ands	r1, r3
 8008f5c:	421a      	tst	r2, r3
 8008f5e:	d005      	beq.n	8008f6c <LoRaMacProcess+0x68c>
 8008f60:	334a      	adds	r3, #74	; 0x4a
 8008f62:	ac06      	add	r4, sp, #24
 8008f64:	191b      	adds	r3, r3, r4
 8008f66:	7fdb      	ldrb	r3, [r3, #31]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d12b      	bne.n	8008fc4 <LoRaMacProcess+0x6e4>
    else if( macMsg->FRMPayloadSize == 0 )
 8008f6c:	ab26      	add	r3, sp, #152	; 0x98
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d100      	bne.n	8008f76 <LoRaMacProcess+0x696>
 8008f74:	e08f      	b.n	8009096 <LoRaMacProcess+0x7b6>
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8008f76:	2900      	cmp	r1, #0
 8008f78:	d000      	beq.n	8008f7c <LoRaMacProcess+0x69c>
 8008f7a:	e72a      	b.n	8008dd2 <LoRaMacProcess+0x4f2>
 8008f7c:	2359      	movs	r3, #89	; 0x59
 8008f7e:	a906      	add	r1, sp, #24
 8008f80:	185b      	adds	r3, r3, r1
 8008f82:	7fdb      	ldrb	r3, [r3, #31]
        *fType = FRAME_TYPE_D;
 8008f84:	1e59      	subs	r1, r3, #1
 8008f86:	418b      	sbcs	r3, r1
 8008f88:	3302      	adds	r3, #2
        *fType = FRAME_TYPE_B;
 8008f8a:	9302      	str	r3, [sp, #8]
 8008f8c:	e01b      	b.n	8008fc6 <LoRaMacProcess+0x6e6>
 8008f8e:	46c0      	nop			; (mov r8, r8)
 8008f90:	00000481 	.word	0x00000481
 8008f94:	20000eb8 	.word	0x20000eb8
 8008f98:	20000e9c 	.word	0x20000e9c
 8008f9c:	20000e58 	.word	0x20000e58
 8008fa0:	0000047f 	.word	0x0000047f
 8008fa4:	20000a3c 	.word	0x20000a3c
 8008fa8:	0000041d 	.word	0x0000041d
 8008fac:	200007ef 	.word	0x200007ef
 8008fb0:	00000414 	.word	0x00000414
 8008fb4:	0000043c 	.word	0x0000043c
 8008fb8:	0000041c 	.word	0x0000041c
 8008fbc:	200006f0 	.word	0x200006f0
 8008fc0:	20000c74 	.word	0x20000c74
        *fType = FRAME_TYPE_A;
 8008fc4:	9602      	str	r6, [sp, #8]
            downLinkCounter = 0;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	930b      	str	r3, [sp, #44]	; 0x2c
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008fca:	4bb1      	ldr	r3, [pc, #708]	; (8009290 <LoRaMacProcess+0x9b0>)
 8008fcc:	0019      	movs	r1, r3
 8008fce:	31d4      	adds	r1, #212	; 0xd4
 8008fd0:	6809      	ldr	r1, [r1, #0]
 8008fd2:	4288      	cmp	r0, r1
 8008fd4:	d161      	bne.n	800909a <LoRaMacProcess+0x7ba>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	30d2      	adds	r0, #210	; 0xd2
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8008fda:	7800      	ldrb	r0, [r0, #0]
 8008fdc:	2501      	movs	r5, #1
 8008fde:	2800      	cmp	r0, #0
 8008fe0:	d019      	beq.n	8009016 <LoRaMacProcess+0x736>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8008fe2:	0018      	movs	r0, r3
 8008fe4:	30d3      	adds	r0, #211	; 0xd3
 8008fe6:	7805      	ldrb	r5, [r0, #0]
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008fe8:	0018      	movs	r0, r3
 8008fea:	30f0      	adds	r0, #240	; 0xf0
 8008fec:	6800      	ldr	r0, [r0, #0]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008fee:	33fc      	adds	r3, #252	; 0xfc
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8008ff0:	6800      	ldr	r0, [r0, #0]
 8008ff2:	900b      	str	r0, [sp, #44]	; 0x2c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8008ff4:	781b      	ldrb	r3, [r3, #0]
 8008ff6:	2b02      	cmp	r3, #2
 8008ff8:	d103      	bne.n	8009002 <LoRaMacProcess+0x722>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8008ffa:	2003      	movs	r0, #3
 8008ffc:	4ba5      	ldr	r3, [pc, #660]	; (8009294 <LoRaMacProcess+0x9b4>)
 8008ffe:	4ca6      	ldr	r4, [pc, #664]	; (8009298 <LoRaMacProcess+0x9b8>)
 8009000:	5518      	strb	r0, [r3, r4]
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009002:	9b02      	ldr	r3, [sp, #8]
 8009004:	2b03      	cmp	r3, #3
 8009006:	d000      	beq.n	800900a <LoRaMacProcess+0x72a>
 8009008:	e6e3      	b.n	8008dd2 <LoRaMacProcess+0x4f2>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800900a:	2360      	movs	r3, #96	; 0x60
 800900c:	421a      	tst	r2, r3
 800900e:	d000      	beq.n	8009012 <LoRaMacProcess+0x732>
 8009010:	e6df      	b.n	8008dd2 <LoRaMacProcess+0x4f2>
 8009012:	2601      	movs	r6, #1
 8009014:	9107      	str	r1, [sp, #28]
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 8009016:	2315      	movs	r3, #21
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009018:	4c9d      	ldr	r4, [pc, #628]	; (8009290 <LoRaMacProcess+0x9b0>)
            getPhy.Attribute = PHY_MAX_FCNT_GAP;
 800901a:	a90c      	add	r1, sp, #48	; 0x30
 800901c:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800901e:	0023      	movs	r3, r4
 8009020:	3340      	adds	r3, #64	; 0x40
 8009022:	7818      	ldrb	r0, [r3, #0]
 8009024:	f002 f860 	bl	800b0e8 <RegionGetPhyParam>
 8009028:	34ff      	adds	r4, #255	; 0xff
 800902a:	7be3      	ldrb	r3, [r4, #15]
 800902c:	900a      	str	r0, [sp, #40]	; 0x28
    switch( addrID )
 800902e:	2d00      	cmp	r5, #0
 8009030:	d035      	beq.n	800909e <LoRaMacProcess+0x7be>
 8009032:	2d01      	cmp	r5, #1
 8009034:	d138      	bne.n	80090a8 <LoRaMacProcess+0x7c8>
                *fCntID = FCNT_DOWN;
 8009036:	2403      	movs	r4, #3
            if( lrWanVersion.Fields.Minor == 1 )
 8009038:	2b01      	cmp	r3, #1
 800903a:	d106      	bne.n	800904a <LoRaMacProcess+0x76a>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800903c:	9a02      	ldr	r2, [sp, #8]
 800903e:	3b0b      	subs	r3, #11
 8009040:	4113      	asrs	r3, r2
 8009042:	3c01      	subs	r4, #1
 8009044:	402b      	ands	r3, r5
 8009046:	1ae4      	subs	r4, r4, r3
 8009048:	b2e4      	uxtb	r4, r4
    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
 800904a:	af1c      	add	r7, sp, #112	; 0x70
 800904c:	b281      	uxth	r1, r0
 800904e:	89fa      	ldrh	r2, [r7, #14]
 8009050:	0020      	movs	r0, r4
 8009052:	ab0b      	add	r3, sp, #44	; 0x2c
 8009054:	f001 fd14 	bl	800aa80 <LoRaMacCryptoGetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009058:	2800      	cmp	r0, #0
 800905a:	d02a      	beq.n	80090b2 <LoRaMacProcess+0x7d2>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800905c:	4b8d      	ldr	r3, [pc, #564]	; (8009294 <LoRaMacProcess+0x9b4>)
 800905e:	2807      	cmp	r0, #7
 8009060:	d11f      	bne.n	80090a2 <LoRaMacProcess+0x7c2>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009062:	2208      	movs	r2, #8
 8009064:	498d      	ldr	r1, [pc, #564]	; (800929c <LoRaMacProcess+0x9bc>)
 8009066:	545a      	strb	r2, [r3, r1]
                    if( ( Nvm.MacGroup2.Version.Fields.Minor == 0 ) && ( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN ) && ( Nvm.MacGroup1.LastRxMic == macMsgData.MIC ) )
 8009068:	4b89      	ldr	r3, [pc, #548]	; (8009290 <LoRaMacProcess+0x9b0>)
 800906a:	001a      	movs	r2, r3
 800906c:	32ff      	adds	r2, #255	; 0xff
 800906e:	7bd2      	ldrb	r2, [r2, #15]
 8009070:	2a00      	cmp	r2, #0
 8009072:	d10b      	bne.n	800908c <LoRaMacProcess+0x7ac>
 8009074:	9906      	ldr	r1, [sp, #24]
 8009076:	321f      	adds	r2, #31
 8009078:	4391      	bics	r1, r2
 800907a:	29a0      	cmp	r1, #160	; 0xa0
 800907c:	d106      	bne.n	800908c <LoRaMacProcess+0x7ac>
 800907e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8009080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009082:	4291      	cmp	r1, r2
 8009084:	d102      	bne.n	800908c <LoRaMacProcess+0x7ac>
                        Nvm.MacGroup1.SrvAckRequested = true;
 8009086:	2201      	movs	r2, #1
 8009088:	333a      	adds	r3, #58	; 0x3a
 800908a:	701a      	strb	r2, [r3, #0]
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800908c:	4b81      	ldr	r3, [pc, #516]	; (8009294 <LoRaMacProcess+0x9b4>)
 800908e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009090:	4983      	ldr	r1, [pc, #524]	; (80092a0 <LoRaMacProcess+0x9c0>)
 8009092:	505a      	str	r2, [r3, r1]
                PrepareRxDoneAbort( );
 8009094:	e6a1      	b.n	8008dda <LoRaMacProcess+0x4fa>
        *fType = FRAME_TYPE_B;
 8009096:	2301      	movs	r3, #1
 8009098:	e777      	b.n	8008f8a <LoRaMacProcess+0x6aa>
 800909a:	2501      	movs	r5, #1
 800909c:	e7bb      	b.n	8009016 <LoRaMacProcess+0x736>
    switch( addrID )
 800909e:	2404      	movs	r4, #4
 80090a0:	e7d3      	b.n	800904a <LoRaMacProcess+0x76a>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_TOO_MANY_FRAMES_LOSS;
 80090a2:	220a      	movs	r2, #10
                else if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_MAX_GAP_FCNT )
 80090a4:	2808      	cmp	r0, #8
 80090a6:	d001      	beq.n	80090ac <LoRaMacProcess+0x7cc>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80090a8:	2201      	movs	r2, #1
 80090aa:	4b7a      	ldr	r3, [pc, #488]	; (8009294 <LoRaMacProcess+0x9b4>)
 80090ac:	497b      	ldr	r1, [pc, #492]	; (800929c <LoRaMacProcess+0x9bc>)
 80090ae:	545a      	strb	r2, [r3, r1]
 80090b0:	e7ec      	b.n	800908c <LoRaMacProcess+0x7ac>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 80090b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090b4:	0022      	movs	r2, r4
 80090b6:	0028      	movs	r0, r5
 80090b8:	9907      	ldr	r1, [sp, #28]
 80090ba:	9700      	str	r7, [sp, #0]
 80090bc:	f001 fdb8 	bl	800ac30 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 80090c0:	4b74      	ldr	r3, [pc, #464]	; (8009294 <LoRaMacProcess+0x9b4>)
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d006      	beq.n	80090d4 <LoRaMacProcess+0x7f4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 80090c6:	3802      	subs	r0, #2
 80090c8:	1e42      	subs	r2, r0, #1
 80090ca:	4190      	sbcs	r0, r2
 80090cc:	4a73      	ldr	r2, [pc, #460]	; (800929c <LoRaMacProcess+0x9bc>)
 80090ce:	300b      	adds	r0, #11
 80090d0:	5498      	strb	r0, [r3, r2]
 80090d2:	e682      	b.n	8008dda <LoRaMacProcess+0x4fa>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090d4:	4a71      	ldr	r2, [pc, #452]	; (800929c <LoRaMacProcess+0x9bc>)
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80090d6:	4c73      	ldr	r4, [pc, #460]	; (80092a4 <LoRaMacProcess+0x9c4>)
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090d8:	5498      	strb	r0, [r3, r2]
            MacCtx.McpsIndication.Multicast = multicast;
 80090da:	4a73      	ldr	r2, [pc, #460]	; (80092a8 <LoRaMacProcess+0x9c8>)
 80090dc:	549e      	strb	r6, [r3, r2]
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 80090de:	7b3a      	ldrb	r2, [r7, #12]
 80090e0:	06d1      	lsls	r1, r2, #27
 80090e2:	0fc9      	lsrs	r1, r1, #31
 80090e4:	5519      	strb	r1, [r3, r4]
            MacCtx.McpsIndication.Buffer = NULL;
 80090e6:	4971      	ldr	r1, [pc, #452]	; (80092ac <LoRaMacProcess+0x9cc>)
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80090e8:	4c6d      	ldr	r4, [pc, #436]	; (80092a0 <LoRaMacProcess+0x9c0>)
            MacCtx.McpsIndication.Buffer = NULL;
 80090ea:	5058      	str	r0, [r3, r1]
            MacCtx.McpsIndication.BufferSize = 0;
 80090ec:	3104      	adds	r1, #4
 80090ee:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80090f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80090f2:	0692      	lsls	r2, r2, #26
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 80090f4:	5119      	str	r1, [r3, r4]
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 80090f6:	496e      	ldr	r1, [pc, #440]	; (80092b0 <LoRaMacProcess+0x9d0>)
 80090f8:	0fd2      	lsrs	r2, r2, #31
 80090fa:	545a      	strb	r2, [r3, r1]
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80090fc:	496d      	ldr	r1, [pc, #436]	; (80092b4 <LoRaMacProcess+0x9d4>)
 80090fe:	5458      	strb	r0, [r3, r1]
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009100:	496d      	ldr	r1, [pc, #436]	; (80092b8 <LoRaMacProcess+0x9d8>)
 8009102:	545a      	strb	r2, [r3, r1]
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009104:	4a64      	ldr	r2, [pc, #400]	; (8009298 <LoRaMacProcess+0x9b8>)
 8009106:	5c9a      	ldrb	r2, [r3, r2]
 8009108:	2a01      	cmp	r2, #1
 800910a:	d801      	bhi.n	8009110 <LoRaMacProcess+0x830>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800910c:	4b60      	ldr	r3, [pc, #384]	; (8009290 <LoRaMacProcess+0x9b0>)
 800910e:	6298      	str	r0, [r3, #40]	; 0x28
            if( multicast == 1 )
 8009110:	ad1c      	add	r5, sp, #112	; 0x70
 8009112:	2e01      	cmp	r6, #1
 8009114:	d043      	beq.n	800919e <LoRaMacProcess+0x8be>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 8009116:	231f      	movs	r3, #31
 8009118:	9906      	ldr	r1, [sp, #24]
 800911a:	4399      	bics	r1, r3
 800911c:	4b5c      	ldr	r3, [pc, #368]	; (8009290 <LoRaMacProcess+0x9b0>)
 800911e:	29a0      	cmp	r1, #160	; 0xa0
 8009120:	d139      	bne.n	8009196 <LoRaMacProcess+0x8b6>
                    Nvm.MacGroup1.SrvAckRequested = true;
 8009122:	0019      	movs	r1, r3
 8009124:	2001      	movs	r0, #1
 8009126:	313a      	adds	r1, #58	; 0x3a
 8009128:	7008      	strb	r0, [r1, #0]
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800912a:	0019      	movs	r1, r3
 800912c:	31ff      	adds	r1, #255	; 0xff
 800912e:	7bc9      	ldrb	r1, [r1, #15]
 8009130:	2900      	cmp	r1, #0
 8009132:	d101      	bne.n	8009138 <LoRaMacProcess+0x858>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 8009134:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8009136:	6359      	str	r1, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009138:	2601      	movs	r6, #1
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800913a:	4c56      	ldr	r4, [pc, #344]	; (8009294 <LoRaMacProcess+0x9b4>)
 800913c:	4b5f      	ldr	r3, [pc, #380]	; (80092bc <LoRaMacProcess+0x9dc>)
 800913e:	54e6      	strb	r6, [r4, r3]
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 8009140:	331c      	adds	r3, #28
 8009142:	5ce1      	ldrb	r1, [r4, r3]
 8009144:	7b2b      	ldrb	r3, [r5, #12]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009146:	2a01      	cmp	r2, #1
 8009148:	d805      	bhi.n	8009156 <LoRaMacProcess+0x876>
        if( request == MCPS_CONFIRMED )
 800914a:	2901      	cmp	r1, #1
 800914c:	d101      	bne.n	8009152 <LoRaMacProcess+0x872>
            if( fCtrl.Bits.Ack == 1 )
 800914e:	069b      	lsls	r3, r3, #26
 8009150:	d501      	bpl.n	8009156 <LoRaMacProcess+0x876>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009152:	f001 fa1b 	bl	800a58c <LoRaMacCommandsRemoveStickyAnsCmds>
            switch( fType )
 8009156:	2759      	movs	r7, #89	; 0x59
 8009158:	ab06      	add	r3, sp, #24
 800915a:	18ff      	adds	r7, r7, r3
 800915c:	9b02      	ldr	r3, [sp, #8]
 800915e:	4e58      	ldr	r6, [pc, #352]	; (80092c0 <LoRaMacProcess+0x9e0>)
 8009160:	2b02      	cmp	r3, #2
 8009162:	d01e      	beq.n	80091a2 <LoRaMacProcess+0x8c2>
 8009164:	2b03      	cmp	r3, #3
 8009166:	d008      	beq.n	800917a <LoRaMacProcess+0x89a>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 8009168:	7b29      	ldrb	r1, [r5, #12]
 800916a:	9a04      	ldr	r2, [sp, #16]
 800916c:	0709      	lsls	r1, r1, #28
 800916e:	0f09      	lsrs	r1, r1, #28
 8009170:	a820      	add	r0, sp, #128	; 0x80
 8009172:	2b01      	cmp	r3, #1
 8009174:	d019      	beq.n	80091aa <LoRaMacProcess+0x8ca>
 8009176:	f7ff f8a3 	bl	80082c0 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800917a:	7ffb      	ldrb	r3, [r7, #31]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800917c:	4a4b      	ldr	r2, [pc, #300]	; (80092ac <LoRaMacProcess+0x9cc>)
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800917e:	55a3      	strb	r3, [r4, r6]
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 8009180:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009182:	50a3      	str	r3, [r4, r2]
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 8009184:	ab26      	add	r3, sp, #152	; 0x98
 8009186:	781a      	ldrb	r2, [r3, #0]
 8009188:	2385      	movs	r3, #133	; 0x85
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	54e2      	strb	r2, [r4, r3]
                    MacCtx.McpsIndication.RxData = true;
 800918e:	2201      	movs	r2, #1
 8009190:	4b4c      	ldr	r3, [pc, #304]	; (80092c4 <LoRaMacProcess+0x9e4>)
 8009192:	54e2      	strb	r2, [r4, r3]
                    break;
 8009194:	e00d      	b.n	80091b2 <LoRaMacProcess+0x8d2>
                    Nvm.MacGroup1.SrvAckRequested = false;
 8009196:	2100      	movs	r1, #0
 8009198:	333a      	adds	r3, #58	; 0x3a
 800919a:	7019      	strb	r1, [r3, #0]
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800919c:	e7cd      	b.n	800913a <LoRaMacProcess+0x85a>
 800919e:	2602      	movs	r6, #2
 80091a0:	e7cb      	b.n	800913a <LoRaMacProcess+0x85a>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 80091a2:	ab26      	add	r3, sp, #152	; 0x98
 80091a4:	7819      	ldrb	r1, [r3, #0]
 80091a6:	9a04      	ldr	r2, [sp, #16]
 80091a8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80091aa:	f7ff f889 	bl	80082c0 <ProcessMacCommands.constprop.0>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 80091ae:	7ffb      	ldrb	r3, [r7, #31]
 80091b0:	55a3      	strb	r3, [r4, r6]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80091b2:	4945      	ldr	r1, [pc, #276]	; (80092c8 <LoRaMacProcess+0x9e8>)
 80091b4:	2302      	movs	r3, #2
 80091b6:	5c62      	ldrb	r2, [r4, r1]
 80091b8:	e66c      	b.n	8008e94 <LoRaMacProcess+0x5b4>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 80091ba:	9f02      	ldr	r7, [sp, #8]
 80091bc:	4e43      	ldr	r6, [pc, #268]	; (80092cc <LoRaMacProcess+0x9ec>)
 80091be:	9903      	ldr	r1, [sp, #12]
 80091c0:	3f01      	subs	r7, #1
 80091c2:	b2ba      	uxth	r2, r7
 80091c4:	0030      	movs	r0, r6
 80091c6:	3101      	adds	r1, #1
 80091c8:	f003 f93a 	bl	800c440 <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 80091cc:	2303      	movs	r3, #3
 80091ce:	4a3b      	ldr	r2, [pc, #236]	; (80092bc <LoRaMacProcess+0x9dc>)
 80091d0:	52a3      	strh	r3, [r4, r2]
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 80091d2:	4b36      	ldr	r3, [pc, #216]	; (80092ac <LoRaMacProcess+0x9cc>)
 80091d4:	50e6      	str	r6, [r4, r3]
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 80091d6:	3304      	adds	r3, #4
 80091d8:	54e7      	strb	r7, [r4, r3]
            MacCtx.MacFlags.Bits.McpsInd = 1;
 80091da:	e7ea      	b.n	80091b2 <LoRaMacProcess+0x8d2>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80091dc:	2101      	movs	r1, #1
 80091de:	4a2f      	ldr	r2, [pc, #188]	; (800929c <LoRaMacProcess+0x9bc>)
 80091e0:	5499      	strb	r1, [r3, r2]
            PrepareRxDoneAbort( );
 80091e2:	f7fe fbc1 	bl	8007968 <PrepareRxDoneAbort>
            break;
 80091e6:	e657      	b.n	8008e98 <LoRaMacProcess+0x5b8>
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 80091e8:	4b29      	ldr	r3, [pc, #164]	; (8009290 <LoRaMacProcess+0x9b0>)
 80091ea:	33fc      	adds	r3, #252	; 0xfc
 80091ec:	781b      	ldrb	r3, [r3, #0]
 80091ee:	2b02      	cmp	r3, #2
 80091f0:	d000      	beq.n	80091f4 <LoRaMacProcess+0x914>
 80091f2:	e65e      	b.n	8008eb2 <LoRaMacProcess+0x5d2>
 80091f4:	e65a      	b.n	8008eac <LoRaMacProcess+0x5cc>
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80091f6:	4b34      	ldr	r3, [pc, #208]	; (80092c8 <LoRaMacProcess+0x9e8>)
 80091f8:	5ce3      	ldrb	r3, [r4, r3]
 80091fa:	075b      	lsls	r3, r3, #29
 80091fc:	d512      	bpl.n	8009224 <LoRaMacProcess+0x944>
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 80091fe:	2001      	movs	r0, #1
 8009200:	26d0      	movs	r6, #208	; 0xd0
 8009202:	f001 fadf 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8009206:	00b6      	lsls	r6, r6, #2
 8009208:	2800      	cmp	r0, #0
 800920a:	d036      	beq.n	800927a <LoRaMacProcess+0x99a>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800920c:	2001      	movs	r0, #1
 800920e:	f001 faa9 	bl	800a764 <LoRaMacConfirmQueueGetStatus>
 8009212:	2800      	cmp	r0, #0
 8009214:	d102      	bne.n	800921c <LoRaMacProcess+0x93c>
                MacCtx.ChannelsNbTransCounter = 0;
 8009216:	2382      	movs	r3, #130	; 0x82
 8009218:	00db      	lsls	r3, r3, #3
 800921a:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800921c:	2202      	movs	r2, #2
 800921e:	59a3      	ldr	r3, [r4, r6]
 8009220:	4393      	bics	r3, r2
 8009222:	51a3      	str	r3, [r4, r6]
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 8009224:	4b28      	ldr	r3, [pc, #160]	; (80092c8 <LoRaMacProcess+0x9e8>)
 8009226:	5ce3      	ldrb	r3, [r4, r3]
 8009228:	07da      	lsls	r2, r3, #31
 800922a:	d400      	bmi.n	800922e <LoRaMacProcess+0x94e>
 800922c:	e476      	b.n	8008b1c <LoRaMacProcess+0x23c>
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800922e:	2287      	movs	r2, #135	; 0x87
 8009230:	00d2      	lsls	r2, r2, #3
 8009232:	5ca2      	ldrb	r2, [r4, r2]
 8009234:	2a00      	cmp	r2, #0
 8009236:	d001      	beq.n	800923c <LoRaMacProcess+0x95c>
 8009238:	2a03      	cmp	r2, #3
 800923a:	d14b      	bne.n	80092d4 <LoRaMacProcess+0x9f4>
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 800923c:	4a14      	ldr	r2, [pc, #80]	; (8009290 <LoRaMacProcess+0x9b0>)
    if( MacCtx.ChannelsNbTransCounter >=
 800923e:	2082      	movs	r0, #130	; 0x82
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8009240:	0011      	movs	r1, r2
    if( MacCtx.ChannelsNbTransCounter >=
 8009242:	00c0      	lsls	r0, r0, #3
        Nvm.MacGroup2.MacParams.ChannelsNbTrans )
 8009244:	3160      	adds	r1, #96	; 0x60
    if( MacCtx.ChannelsNbTransCounter >=
 8009246:	5c20      	ldrb	r0, [r4, r0]
 8009248:	7809      	ldrb	r1, [r1, #0]
 800924a:	4288      	cmp	r0, r1
 800924c:	d209      	bcs.n	8009262 <LoRaMacProcess+0x982>
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800924e:	079b      	lsls	r3, r3, #30
 8009250:	d573      	bpl.n	800933a <LoRaMacProcess+0xa5a>
        if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009252:	32fc      	adds	r2, #252	; 0xfc
 8009254:	7813      	ldrb	r3, [r2, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d003      	beq.n	8009262 <LoRaMacProcess+0x982>
            if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800925a:	4b0f      	ldr	r3, [pc, #60]	; (8009298 <LoRaMacProcess+0x9b8>)
 800925c:	5ce3      	ldrb	r3, [r4, r3]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d16b      	bne.n	800933a <LoRaMacProcess+0xa5a>
            TimerStop( &MacCtx.TxDelayedTimer );
 8009262:	481b      	ldr	r0, [pc, #108]	; (80092d0 <LoRaMacProcess+0x9f0>)
 8009264:	f004 ff86 	bl	800e174 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 8009268:	22d0      	movs	r2, #208	; 0xd0
 800926a:	2120      	movs	r1, #32
 800926c:	0092      	lsls	r2, r2, #2
 800926e:	58a3      	ldr	r3, [r4, r2]
 8009270:	438b      	bics	r3, r1
 8009272:	50a3      	str	r3, [r4, r2]
            StopRetransmission( );
 8009274:	f7ff fac4 	bl	8008800 <StopRetransmission.isra.0>
 8009278:	e450      	b.n	8008b1c <LoRaMacProcess+0x23c>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800927a:	2005      	movs	r0, #5
 800927c:	f001 faa2 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
 8009280:	2800      	cmp	r0, #0
 8009282:	d1cb      	bne.n	800921c <LoRaMacProcess+0x93c>
                 ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW_1 ) == true ) )
 8009284:	2006      	movs	r0, #6
 8009286:	f001 fa9d 	bl	800a7c4 <LoRaMacConfirmQueueIsCmdActive>
        else if( ( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true ) ||
 800928a:	2800      	cmp	r0, #0
 800928c:	d1c6      	bne.n	800921c <LoRaMacProcess+0x93c>
 800928e:	e7c9      	b.n	8009224 <LoRaMacProcess+0x944>
 8009290:	200006f0 	.word	0x200006f0
 8009294:	20000a3c 	.word	0x20000a3c
 8009298:	0000047f 	.word	0x0000047f
 800929c:	0000041d 	.word	0x0000041d
 80092a0:	0000042c 	.word	0x0000042c
 80092a4:	00000421 	.word	0x00000421
 80092a8:	0000041e 	.word	0x0000041e
 80092ac:	00000424 	.word	0x00000424
 80092b0:	0000042a 	.word	0x0000042a
 80092b4:	00000439 	.word	0x00000439
 80092b8:	0000043c 	.word	0x0000043c
 80092bc:	0000041c 	.word	0x0000041c
 80092c0:	0000041f 	.word	0x0000041f
 80092c4:	00000429 	.word	0x00000429
 80092c8:	00000481 	.word	0x00000481
 80092cc:	20000c74 	.word	0x20000c74
 80092d0:	20000da4 	.word	0x20000da4
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 80092d4:	2a01      	cmp	r2, #1
 80092d6:	d130      	bne.n	800933a <LoRaMacProcess+0xa5a>
            if( MacCtx.AckTimeoutRetry == true )
 80092d8:	4a2b      	ldr	r2, [pc, #172]	; (8009388 <LoRaMacProcess+0xaa8>)
 80092da:	5ca1      	ldrb	r1, [r4, r2]
 80092dc:	2900      	cmp	r1, #0
 80092de:	d101      	bne.n	80092e4 <LoRaMacProcess+0xa04>
 80092e0:	f7ff fc1c 	bl	8008b1c <LoRaMacProcess+0x23c>
    if( MacCtx.AckTimeoutRetriesCounter >=
 80092e4:	4e29      	ldr	r6, [pc, #164]	; (800938c <LoRaMacProcess+0xaac>)
        MacCtx.AckTimeoutRetries )
 80092e6:	482a      	ldr	r0, [pc, #168]	; (8009390 <LoRaMacProcess+0xab0>)
    if( MacCtx.AckTimeoutRetriesCounter >=
 80092e8:	5da2      	ldrb	r2, [r4, r6]
        MacCtx.AckTimeoutRetries )
 80092ea:	5c20      	ldrb	r0, [r4, r0]
    if( MacCtx.AckTimeoutRetriesCounter >=
 80092ec:	4282      	cmp	r2, r0
 80092ee:	d204      	bcs.n	80092fa <LoRaMacProcess+0xa1a>
    return false;
 80092f0:	2100      	movs	r1, #0
    else if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80092f2:	079b      	lsls	r3, r3, #30
 80092f4:	d501      	bpl.n	80092fa <LoRaMacProcess+0xa1a>
        if( MacCtx.McpsConfirm.AckReceived == true )
 80092f6:	4b27      	ldr	r3, [pc, #156]	; (8009394 <LoRaMacProcess+0xab4>)
 80092f8:	5ce1      	ldrb	r1, [r4, r3]
                if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 80092fa:	4b27      	ldr	r3, [pc, #156]	; (8009398 <LoRaMacProcess+0xab8>)
 80092fc:	001f      	movs	r7, r3
 80092fe:	37ff      	adds	r7, #255	; 0xff
 8009300:	7bff      	ldrb	r7, [r7, #15]
 8009302:	2f00      	cmp	r7, #0
 8009304:	d13c      	bne.n	8009380 <LoRaMacProcess+0xaa0>
                    if( stopRetransmission == false )
 8009306:	2900      	cmp	r1, #0
 8009308:	d123      	bne.n	8009352 <LoRaMacProcess+0xa72>
    if( MacCtx.AckTimeoutRetriesCounter < MacCtx.AckTimeoutRetries )
 800930a:	4282      	cmp	r2, r0
 800930c:	d215      	bcs.n	800933a <LoRaMacProcess+0xa5a>
        MacCtx.AckTimeoutRetriesCounter++;
 800930e:	3201      	adds	r2, #1
 8009310:	b2d2      	uxtb	r2, r2
 8009312:	55a2      	strb	r2, [r4, r6]
        if( ( MacCtx.AckTimeoutRetriesCounter % 2 ) == 1 )
 8009314:	07d2      	lsls	r2, r2, #31
 8009316:	d510      	bpl.n	800933a <LoRaMacProcess+0xa5a>
            getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 8009318:	2222      	movs	r2, #34	; 0x22
 800931a:	a91c      	add	r1, sp, #112	; 0x70
 800931c:	700a      	strb	r2, [r1, #0]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800931e:	001a      	movs	r2, r3
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009320:	001e      	movs	r6, r3
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009322:	3274      	adds	r2, #116	; 0x74
 8009324:	7812      	ldrb	r2, [r2, #0]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009326:	3639      	adds	r6, #57	; 0x39
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009328:	708a      	strb	r2, [r1, #2]
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800932a:	7832      	ldrb	r2, [r6, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800932c:	3340      	adds	r3, #64	; 0x40
            getPhy.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800932e:	704a      	strb	r2, [r1, #1]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009330:	7818      	ldrb	r0, [r3, #0]
 8009332:	f001 fed9 	bl	800b0e8 <RegionGetPhyParam>
 8009336:	9012      	str	r0, [sp, #72]	; 0x48
            Nvm.MacGroup1.ChannelsDatarate = phyParam.Value;
 8009338:	7030      	strb	r0, [r6, #0]
            MacCtx.MacFlags.Bits.MacDone = 0;
 800933a:	2220      	movs	r2, #32
            MacCtx.AckTimeoutRetry = false;
 800933c:	2000      	movs	r0, #0
            MacCtx.MacFlags.Bits.MacDone = 0;
 800933e:	4917      	ldr	r1, [pc, #92]	; (800939c <LoRaMacProcess+0xabc>)
 8009340:	5c63      	ldrb	r3, [r4, r1]
 8009342:	4393      	bics	r3, r2
 8009344:	5463      	strb	r3, [r4, r1]
            MacCtx.AckTimeoutRetry = false;
 8009346:	4b10      	ldr	r3, [pc, #64]	; (8009388 <LoRaMacProcess+0xaa8>)
 8009348:	54e0      	strb	r0, [r4, r3]
            OnTxDelayedTimerEvent( NULL );
 800934a:	f7ff fa85 	bl	8008858 <OnTxDelayedTimerEvent>
 800934e:	f7ff fbe5 	bl	8008b1c <LoRaMacProcess+0x23c>
    if( MacCtx.McpsConfirm.AckReceived == false )
 8009352:	4a10      	ldr	r2, [pc, #64]	; (8009394 <LoRaMacProcess+0xab4>)
 8009354:	5ca7      	ldrb	r7, [r4, r2]
 8009356:	2f00      	cmp	r7, #0
 8009358:	d10e      	bne.n	8009378 <LoRaMacProcess+0xa98>
        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800935a:	2202      	movs	r2, #2
 800935c:	a91c      	add	r1, sp, #112	; 0x70
 800935e:	720a      	strb	r2, [r1, #8]
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8009360:	4a0f      	ldr	r2, [pc, #60]	; (80093a0 <LoRaMacProcess+0xac0>)
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8009362:	3340      	adds	r3, #64	; 0x40
        params.NvmGroup1 = &Nvm.RegionGroup1;
 8009364:	921c      	str	r2, [sp, #112]	; 0x70
        params.NvmGroup2 = &Nvm.RegionGroup2;
 8009366:	4a0f      	ldr	r2, [pc, #60]	; (80093a4 <LoRaMacProcess+0xac4>)
 8009368:	604a      	str	r2, [r1, #4]
        RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800936a:	7818      	ldrb	r0, [r3, #0]
 800936c:	f001 fecf 	bl	800b10e <RegionInitDefaults>
        MacCtx.NodeAckRequested = false;
 8009370:	4b0d      	ldr	r3, [pc, #52]	; (80093a8 <LoRaMacProcess+0xac8>)
 8009372:	54e7      	strb	r7, [r4, r3]
        MacCtx.McpsConfirm.AckReceived = false;
 8009374:	4b07      	ldr	r3, [pc, #28]	; (8009394 <LoRaMacProcess+0xab4>)
 8009376:	54e7      	strb	r7, [r4, r3]
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
 8009378:	5da2      	ldrb	r2, [r4, r6]
 800937a:	4b0c      	ldr	r3, [pc, #48]	; (80093ac <LoRaMacProcess+0xacc>)
 800937c:	54e2      	strb	r2, [r4, r3]
        if( stopRetransmission == true )
 800937e:	e770      	b.n	8009262 <LoRaMacProcess+0x982>
 8009380:	2900      	cmp	r1, #0
 8009382:	d0da      	beq.n	800933a <LoRaMacProcess+0xa5a>
 8009384:	e76d      	b.n	8009262 <LoRaMacProcess+0x982>
 8009386:	46c0      	nop			; (mov r8, r8)
 8009388:	00000413 	.word	0x00000413
 800938c:	00000412 	.word	0x00000412
 8009390:	00000411 	.word	0x00000411
 8009394:	0000043c 	.word	0x0000043c
 8009398:	200006f0 	.word	0x200006f0
 800939c:	00000481 	.word	0x00000481
 80093a0:	200008c8 	.word	0x200008c8
 80093a4:	2000095c 	.word	0x2000095c
 80093a8:	00000414 	.word	0x00000414
 80093ac:	0000043d 	.word	0x0000043d

080093b0 <LoRaMacInitialization>:
    return 0;
}


LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 80093b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093b2:	b08f      	sub	sp, #60	; 0x3c
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80093b4:	2503      	movs	r5, #3
{
 80093b6:	9003      	str	r0, [sp, #12]
 80093b8:	9104      	str	r1, [sp, #16]
 80093ba:	9205      	str	r2, [sp, #20]
    if( ( primitives == NULL ) ||
 80093bc:	2800      	cmp	r0, #0
 80093be:	d100      	bne.n	80093c2 <LoRaMacInitialization+0x12>
 80093c0:	e166      	b.n	8009690 <LoRaMacInitialization+0x2e0>
 80093c2:	2900      	cmp	r1, #0
 80093c4:	d100      	bne.n	80093c8 <LoRaMacInitialization+0x18>
 80093c6:	e163      	b.n	8009690 <LoRaMacInitialization+0x2e0>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 80093c8:	6803      	ldr	r3, [r0, #0]
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d100      	bne.n	80093d0 <LoRaMacInitialization+0x20>
 80093ce:	e15f      	b.n	8009690 <LoRaMacInitialization+0x2e0>
 80093d0:	6843      	ldr	r3, [r0, #4]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d100      	bne.n	80093d8 <LoRaMacInitialization+0x28>
 80093d6:	e15b      	b.n	8009690 <LoRaMacInitialization+0x2e0>
        ( primitives->MacMcpsIndication == NULL ) ||
 80093d8:	6883      	ldr	r3, [r0, #8]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d100      	bne.n	80093e0 <LoRaMacInitialization+0x30>
 80093de:	e157      	b.n	8009690 <LoRaMacInitialization+0x2e0>
        ( primitives->MacMlmeConfirm == NULL ) ||
 80093e0:	68c3      	ldr	r3, [r0, #12]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d100      	bne.n	80093e8 <LoRaMacInitialization+0x38>
 80093e6:	e153      	b.n	8009690 <LoRaMacInitialization+0x2e0>
        ( primitives->MacMlmeIndication == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 80093e8:	0010      	movs	r0, r2
 80093ea:	f001 fe78 	bl	800b0de <RegionIsActive>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80093ee:	3506      	adds	r5, #6
    if( RegionIsActive( region ) == false )
 80093f0:	2800      	cmp	r0, #0
 80093f2:	d100      	bne.n	80093f6 <LoRaMacInitialization+0x46>
 80093f4:	e14c      	b.n	8009690 <LoRaMacInitialization+0x2e0>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 80093f6:	9803      	ldr	r0, [sp, #12]
 80093f8:	f001 f958 	bl	800a6ac <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 80093fc:	22d3      	movs	r2, #211	; 0xd3
 80093fe:	4cb5      	ldr	r4, [pc, #724]	; (80096d4 <LoRaMacInitialization+0x324>)
 8009400:	2100      	movs	r1, #0
 8009402:	0020      	movs	r0, r4
 8009404:	0092      	lsls	r2, r2, #2
 8009406:	f003 f830 	bl	800c46a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800940a:	22a1      	movs	r2, #161	; 0xa1
 800940c:	4bb2      	ldr	r3, [pc, #712]	; (80096d8 <LoRaMacInitialization+0x328>)
 800940e:	2100      	movs	r1, #0
 8009410:	0018      	movs	r0, r3
 8009412:	00d2      	lsls	r2, r2, #3
 8009414:	9302      	str	r3, [sp, #8]
 8009416:	f003 f828 	bl	800c46a <memset1>

    // Set non zero variables to its default value
    MacCtx.AckTimeoutRetriesCounter = 1;
 800941a:	2201      	movs	r2, #1
    MacCtx.AckTimeoutRetries = 1;
    Nvm.MacGroup2.Region = region;
 800941c:	0026      	movs	r6, r4
    MacCtx.AckTimeoutRetriesCounter = 1;
 800941e:	9902      	ldr	r1, [sp, #8]
 8009420:	4bae      	ldr	r3, [pc, #696]	; (80096dc <LoRaMacInitialization+0x32c>)
    Nvm.MacGroup2.Region = region;
 8009422:	3640      	adds	r6, #64	; 0x40
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009424:	54ca      	strb	r2, [r1, r3]
    MacCtx.AckTimeoutRetries = 1;
 8009426:	4bae      	ldr	r3, [pc, #696]	; (80096e0 <LoRaMacInitialization+0x330>)
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009428:	2700      	movs	r7, #0
    MacCtx.AckTimeoutRetries = 1;
 800942a:	54ca      	strb	r2, [r1, r3]
    Nvm.MacGroup2.Region = region;
 800942c:	9b05      	ldr	r3, [sp, #20]
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800942e:	4aad      	ldr	r2, [pc, #692]	; (80096e4 <LoRaMacInitialization+0x334>)
    Nvm.MacGroup2.Region = region;
 8009430:	7033      	strb	r3, [r6, #0]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009432:	0023      	movs	r3, r4
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009434:	0021      	movs	r1, r4
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8009436:	33fc      	adds	r3, #252	; 0xfc
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8009438:	611a      	str	r2, [r3, #16]
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800943a:	701f      	strb	r7, [r3, #0]

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800943c:	230f      	movs	r3, #15
 800943e:	ad09      	add	r5, sp, #36	; 0x24
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8009440:	3180      	adds	r1, #128	; 0x80
 8009442:	700f      	strb	r7, [r1, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009444:	9805      	ldr	r0, [sp, #20]
 8009446:	0029      	movs	r1, r5
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8009448:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800944a:	f001 fe4d 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800944e:	1e43      	subs	r3, r0, #1
 8009450:	4198      	sbcs	r0, r3
 8009452:	0023      	movs	r3, r4

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009454:	210a      	movs	r1, #10
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8009456:	33ff      	adds	r3, #255	; 0xff
    getPhy.Attribute = PHY_DEF_TX_POWER;
 8009458:	7029      	strb	r1, [r5, #0]
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800945a:	7058      	strb	r0, [r3, #1]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800945c:	0029      	movs	r1, r5
 800945e:	7830      	ldrb	r0, [r6, #0]
 8009460:	f001 fe42 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8009464:	0023      	movs	r3, r4
 8009466:	33c4      	adds	r3, #196	; 0xc4
 8009468:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_TX_DR;
 800946a:	2006      	movs	r0, #6
 800946c:	7028      	strb	r0, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800946e:	0029      	movs	r1, r5
 8009470:	7830      	ldrb	r0, [r6, #0]
 8009472:	f001 fe39 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8009476:	0023      	movs	r3, r4
 8009478:	33c5      	adds	r3, #197	; 0xc5
 800947a:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800947c:	2310      	movs	r3, #16
 800947e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009480:	0029      	movs	r1, r5
 8009482:	7830      	ldrb	r0, [r6, #0]
 8009484:	f001 fe30 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8009488:	4b97      	ldr	r3, [pc, #604]	; (80096e8 <LoRaMacInitialization+0x338>)

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800948a:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800948c:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800948e:	2311      	movs	r3, #17
 8009490:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009492:	7830      	ldrb	r0, [r6, #0]
 8009494:	f001 fe28 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8009498:	4b94      	ldr	r3, [pc, #592]	; (80096ec <LoRaMacInitialization+0x33c>)

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800949a:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800949c:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800949e:	2312      	movs	r3, #18
 80094a0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094a2:	7830      	ldrb	r0, [r6, #0]
 80094a4:	f001 fe20 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80094a8:	4b91      	ldr	r3, [pc, #580]	; (80096f0 <LoRaMacInitialization+0x340>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094aa:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 80094ac:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 80094ae:	2313      	movs	r3, #19
 80094b0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094b2:	7830      	ldrb	r0, [r6, #0]
 80094b4:	f001 fe18 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80094b8:	4b8e      	ldr	r3, [pc, #568]	; (80096f4 <LoRaMacInitialization+0x344>)

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094ba:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 80094bc:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 80094be:	2314      	movs	r3, #20
 80094c0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094c2:	7830      	ldrb	r0, [r6, #0]
 80094c4:	f001 fe10 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80094c8:	4b8b      	ldr	r3, [pc, #556]	; (80096f8 <LoRaMacInitialization+0x348>)

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094ca:	0029      	movs	r1, r5
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 80094cc:	6018      	str	r0, [r3, #0]
    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 80094ce:	2317      	movs	r3, #23
 80094d0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094d2:	7830      	ldrb	r0, [r6, #0]
 80094d4:	f001 fe08 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 80094d8:	0023      	movs	r3, r4
 80094da:	33a1      	adds	r3, #161	; 0xa1
 80094dc:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 80094de:	2318      	movs	r3, #24
 80094e0:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094e2:	0029      	movs	r1, r5
 80094e4:	7830      	ldrb	r0, [r6, #0]
 80094e6:	f001 fdff 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 80094ea:	0023      	movs	r3, r4
 80094ec:	33a4      	adds	r3, #164	; 0xa4
 80094ee:	6018      	str	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 80094f0:	0023      	movs	r3, r4
 80094f2:	33ac      	adds	r3, #172	; 0xac
 80094f4:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_RX2_DR;
 80094f6:	2319      	movs	r3, #25
 80094f8:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80094fa:	0029      	movs	r1, r5
 80094fc:	7830      	ldrb	r0, [r6, #0]
 80094fe:	f001 fdf3 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8009502:	0023      	movs	r3, r4
 8009504:	b2c0      	uxtb	r0, r0
 8009506:	33a8      	adds	r3, #168	; 0xa8
 8009508:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800950a:	0023      	movs	r3, r4
 800950c:	33b0      	adds	r3, #176	; 0xb0
 800950e:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8009510:	231e      	movs	r3, #30
 8009512:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009514:	0029      	movs	r1, r5
 8009516:	7830      	ldrb	r0, [r6, #0]
 8009518:	f001 fde6 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800951c:	0023      	movs	r3, r4
 800951e:	33b4      	adds	r3, #180	; 0xb4
 8009520:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8009522:	231f      	movs	r3, #31
 8009524:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009526:	0029      	movs	r1, r5
 8009528:	7830      	ldrb	r0, [r6, #0]
 800952a:	f001 fddd 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800952e:	0023      	movs	r3, r4
 8009530:	33b5      	adds	r3, #181	; 0xb5
 8009532:	7018      	strb	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8009534:	2320      	movs	r3, #32
 8009536:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009538:	0029      	movs	r1, r5
 800953a:	7830      	ldrb	r0, [r6, #0]
 800953c:	f001 fdd4 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8009540:	0023      	movs	r3, r4
 8009542:	33b8      	adds	r3, #184	; 0xb8
 8009544:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8009546:	2321      	movs	r3, #33	; 0x21
 8009548:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800954a:	0029      	movs	r1, r5
 800954c:	7830      	ldrb	r0, [r6, #0]
 800954e:	f001 fdcb 	bl	800b0e8 <RegionGetPhyParam>
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8009552:	0023      	movs	r3, r4
 8009554:	33bc      	adds	r3, #188	; 0xbc
 8009556:	6018      	str	r0, [r3, #0]

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8009558:	230b      	movs	r3, #11
 800955a:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800955c:	0029      	movs	r1, r5
 800955e:	7830      	ldrb	r0, [r6, #0]
 8009560:	f001 fdc2 	bl	800b0e8 <RegionGetPhyParam>
    MacCtx.AdrAckLimit = phyParam.Value;
 8009564:	23fd      	movs	r3, #253	; 0xfd
 8009566:	9902      	ldr	r1, [sp, #8]
 8009568:	009b      	lsls	r3, r3, #2
 800956a:	52c8      	strh	r0, [r1, r3]

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800956c:	230c      	movs	r3, #12
 800956e:	702b      	strb	r3, [r5, #0]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009570:	0029      	movs	r1, r5
 8009572:	7830      	ldrb	r0, [r6, #0]
 8009574:	f001 fdb8 	bl	800b0e8 <RegionGetPhyParam>
    MacCtx.AdrAckDelay = phyParam.Value;
 8009578:	9d02      	ldr	r5, [sp, #8]
 800957a:	4b60      	ldr	r3, [pc, #384]	; (80096fc <LoRaMacInitialization+0x34c>)

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800957c:	2201      	movs	r2, #1
    MacCtx.AdrAckDelay = phyParam.Value;
 800957e:	52e8      	strh	r0, [r5, r3]
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009580:	0023      	movs	r3, r4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009582:	210a      	movs	r1, #10
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8009584:	33a0      	adds	r3, #160	; 0xa0
 8009586:	701a      	strb	r2, [r3, #0]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8009588:	4b5d      	ldr	r3, [pc, #372]	; (8009700 <LoRaMacInitialization+0x350>)
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800958a:	9008      	str	r0, [sp, #32]
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800958c:	67d9      	str	r1, [r3, #124]	; 0x7c
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800958e:	0023      	movs	r3, r4
 8009590:	2006      	movs	r0, #6
 8009592:	3388      	adds	r3, #136	; 0x88
 8009594:	7018      	strb	r0, [r3, #0]

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 8009596:	0023      	movs	r3, r4
 8009598:	3348      	adds	r3, #72	; 0x48
 800959a:	7018      	strb	r0, [r3, #0]
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800959c:	4b52      	ldr	r3, [pc, #328]	; (80096e8 <LoRaMacInitialization+0x338>)
    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800959e:	6461      	str	r1, [r4, #68]	; 0x44
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80095a0:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;

    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 80095a2:	a90b      	add	r1, sp, #44	; 0x2c
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 80095a4:	64e3      	str	r3, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80095a6:	4b51      	ldr	r3, [pc, #324]	; (80096ec <LoRaMacInitialization+0x33c>)
    params.Type = INIT_TYPE_DEFAULTS;
 80095a8:	720f      	strb	r7, [r1, #8]
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80095aa:	681b      	ldr	r3, [r3, #0]
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80095ac:	0015      	movs	r5, r2
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 80095ae:	6523      	str	r3, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 80095b0:	4b4f      	ldr	r3, [pc, #316]	; (80096f0 <LoRaMacInitialization+0x340>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80095b6:	4b4f      	ldr	r3, [pc, #316]	; (80096f4 <LoRaMacInitialization+0x344>)
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80095bc:	4b4e      	ldr	r3, [pc, #312]	; (80096f8 <LoRaMacInitialization+0x348>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80095c2:	0023      	movs	r3, r4
 80095c4:	3360      	adds	r3, #96	; 0x60
 80095c6:	701a      	strb	r2, [r3, #0]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 80095c8:	4b4e      	ldr	r3, [pc, #312]	; (8009704 <LoRaMacInitialization+0x354>)
 80095ca:	930b      	str	r3, [sp, #44]	; 0x2c
    params.NvmGroup2 = &Nvm.RegionGroup2;
 80095cc:	4b4e      	ldr	r3, [pc, #312]	; (8009708 <LoRaMacInitialization+0x358>)
 80095ce:	604b      	str	r3, [r1, #4]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 80095d0:	7830      	ldrb	r0, [r6, #0]
 80095d2:	f001 fd9c 	bl	800b10e <RegionInitDefaults>

    MacCtx.MacCallbacks = callbacks;
 80095d6:	23d2      	movs	r3, #210	; 0xd2
 80095d8:	9a02      	ldr	r2, [sp, #8]
 80095da:	9904      	ldr	r1, [sp, #16]
 80095dc:	009b      	lsls	r3, r3, #2
 80095de:	50d1      	str	r1, [r2, r3]
    ResetMacParameters( );
 80095e0:	f7fe fade 	bl	8007ba0 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80095e4:	0023      	movs	r3, r4
 80095e6:	33fd      	adds	r3, #253	; 0xfd
 80095e8:	701d      	strb	r5, [r3, #0]

    MacCtx.MacPrimitives = primitives;
 80095ea:	23d1      	movs	r3, #209	; 0xd1
 80095ec:	9a02      	ldr	r2, [sp, #8]
 80095ee:	9903      	ldr	r1, [sp, #12]
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	50d1      	str	r1, [r2, r3]
    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
    Nvm.MacGroup1.AggregatedTimeOff = 0;

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 80095f4:	2101      	movs	r1, #1
    MacCtx.MacFlags.Value = 0;
 80095f6:	4b45      	ldr	r3, [pc, #276]	; (800970c <LoRaMacInitialization+0x35c>)
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80095f8:	62e7      	str	r7, [r4, #44]	; 0x2c
    MacCtx.MacFlags.Value = 0;
 80095fa:	54d7      	strb	r7, [r2, r3]
    MacCtx.MacState = LORAMAC_STOPPED;
 80095fc:	3b42      	subs	r3, #66	; 0x42
 80095fe:	3bff      	subs	r3, #255	; 0xff
 8009600:	50d5      	str	r5, [r2, r3]
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 8009602:	6327      	str	r7, [r4, #48]	; 0x30
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8009604:	003a      	movs	r2, r7
 8009606:	4b42      	ldr	r3, [pc, #264]	; (8009710 <LoRaMacInitialization+0x360>)
 8009608:	4249      	negs	r1, r1
 800960a:	4842      	ldr	r0, [pc, #264]	; (8009714 <LoRaMacInitialization+0x364>)
 800960c:	9700      	str	r7, [sp, #0]
 800960e:	f004 fd53 	bl	800e0b8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8009612:	2101      	movs	r1, #1
 8009614:	003a      	movs	r2, r7
 8009616:	4b40      	ldr	r3, [pc, #256]	; (8009718 <LoRaMacInitialization+0x368>)
 8009618:	4249      	negs	r1, r1
 800961a:	4840      	ldr	r0, [pc, #256]	; (800971c <LoRaMacInitialization+0x36c>)
 800961c:	9700      	str	r7, [sp, #0]
 800961e:	f004 fd4b 	bl	800e0b8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8009622:	2101      	movs	r1, #1
 8009624:	003a      	movs	r2, r7
 8009626:	4b3e      	ldr	r3, [pc, #248]	; (8009720 <LoRaMacInitialization+0x370>)
 8009628:	4249      	negs	r1, r1
 800962a:	483e      	ldr	r0, [pc, #248]	; (8009724 <LoRaMacInitialization+0x374>)
 800962c:	9700      	str	r7, [sp, #0]
 800962e:	f004 fd43 	bl	800e0b8 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 8009632:	2101      	movs	r1, #1
 8009634:	003a      	movs	r2, r7
 8009636:	4249      	negs	r1, r1
 8009638:	4b3b      	ldr	r3, [pc, #236]	; (8009728 <LoRaMacInitialization+0x378>)

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800963a:	ad06      	add	r5, sp, #24
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
 800963c:	483b      	ldr	r0, [pc, #236]	; (800972c <LoRaMacInitialization+0x37c>)
 800963e:	9700      	str	r7, [sp, #0]
 8009640:	f004 fd3a 	bl	800e0b8 <UTIL_TIMER_Create>
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8009644:	0028      	movs	r0, r5
 8009646:	f004 fccf 	bl	800dfe8 <SysTimeGetMcuTime>
 800964a:	1d63      	adds	r3, r4, #5
 800964c:	33ff      	adds	r3, #255	; 0xff
 800964e:	cd06      	ldmia	r5!, {r1, r2}
 8009650:	c306      	stmia	r3!, {r1, r2}

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8009652:	21d3      	movs	r1, #211	; 0xd3
 8009654:	4b36      	ldr	r3, [pc, #216]	; (8009730 <LoRaMacInitialization+0x380>)
 8009656:	9a02      	ldr	r2, [sp, #8]
 8009658:	0089      	lsls	r1, r1, #2
 800965a:	5053      	str	r3, [r2, r1]
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800965c:	22d5      	movs	r2, #213	; 0xd5
 800965e:	9902      	ldr	r1, [sp, #8]
 8009660:	4b34      	ldr	r3, [pc, #208]	; (8009734 <LoRaMacInitialization+0x384>)
 8009662:	0092      	lsls	r2, r2, #2
 8009664:	508b      	str	r3, [r1, r2]
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8009666:	4b34      	ldr	r3, [pc, #208]	; (8009738 <LoRaMacInitialization+0x388>)
 8009668:	3208      	adds	r2, #8
 800966a:	508b      	str	r3, [r1, r2]
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800966c:	4b33      	ldr	r3, [pc, #204]	; (800973c <LoRaMacInitialization+0x38c>)
 800966e:	3a0c      	subs	r2, #12
 8009670:	508b      	str	r3, [r1, r2]
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
    Radio.Init( &MacCtx.RadioEvents );
 8009672:	4e33      	ldr	r6, [pc, #204]	; (8009740 <LoRaMacInitialization+0x390>)
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8009674:	4b33      	ldr	r3, [pc, #204]	; (8009744 <LoRaMacInitialization+0x394>)
 8009676:	3208      	adds	r2, #8
 8009678:	508b      	str	r3, [r1, r2]
    Radio.Init( &MacCtx.RadioEvents );
 800967a:	4833      	ldr	r0, [pc, #204]	; (8009748 <LoRaMacInitialization+0x398>)
 800967c:	6833      	ldr	r3, [r6, #0]
 800967e:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8009680:	9b04      	ldr	r3, [sp, #16]
 8009682:	4832      	ldr	r0, [pc, #200]	; (800974c <LoRaMacInitialization+0x39c>)
 8009684:	6899      	ldr	r1, [r3, #8]
 8009686:	f7fd fa65 	bl	8006b54 <SecureElementInit>
 800968a:	42b8      	cmp	r0, r7
 800968c:	d003      	beq.n	8009696 <LoRaMacInitialization+0x2e6>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800968e:	2511      	movs	r5, #17
    Radio.Sleep( );

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );

    return LORAMAC_STATUS_OK;
}
 8009690:	0028      	movs	r0, r5
 8009692:	b00f      	add	sp, #60	; 0x3c
 8009694:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 8009696:	0020      	movs	r0, r4
 8009698:	f001 f9be 	bl	800aa18 <LoRaMacCryptoInit>
 800969c:	2800      	cmp	r0, #0
 800969e:	d1f6      	bne.n	800968e <LoRaMacInitialization+0x2de>
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80096a0:	f000 fee0 	bl	800a464 <LoRaMacCommandsInit>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80096a4:	2513      	movs	r5, #19
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80096a6:	2800      	cmp	r0, #0
 80096a8:	d1f2      	bne.n	8009690 <LoRaMacInitialization+0x2e0>
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80096aa:	4829      	ldr	r0, [pc, #164]	; (8009750 <LoRaMacInitialization+0x3a0>)
 80096ac:	f001 fa26 	bl	800aafc <LoRaMacCryptoSetMulticastReference>
 80096b0:	1e05      	subs	r5, r0, #0
 80096b2:	d1ec      	bne.n	800968e <LoRaMacInitialization+0x2de>
    srand1( Radio.Random( ) );
 80096b4:	6973      	ldr	r3, [r6, #20]
 80096b6:	4798      	blx	r3
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80096b8:	34fd      	adds	r4, #253	; 0xfd
    srand1( Radio.Random( ) );
 80096ba:	f002 fe9f 	bl	800c3fc <srand1>
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80096be:	7820      	ldrb	r0, [r4, #0]
 80096c0:	6db3      	ldr	r3, [r6, #88]	; 0x58
 80096c2:	4798      	blx	r3
    Radio.Sleep( );
 80096c4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80096c6:	4798      	blx	r3
    MacCtx.AllowRequests = requestState;
 80096c8:	2201      	movs	r2, #1
 80096ca:	4b22      	ldr	r3, [pc, #136]	; (8009754 <LoRaMacInitialization+0x3a4>)
 80096cc:	9902      	ldr	r1, [sp, #8]
 80096ce:	54ca      	strb	r2, [r1, r3]
    return LORAMAC_STATUS_OK;
 80096d0:	e7de      	b.n	8009690 <LoRaMacInitialization+0x2e0>
 80096d2:	46c0      	nop			; (mov r8, r8)
 80096d4:	200006f0 	.word	0x200006f0
 80096d8:	20000a3c 	.word	0x20000a3c
 80096dc:	00000412 	.word	0x00000412
 80096e0:	00000411 	.word	0x00000411
 80096e4:	01000300 	.word	0x01000300
 80096e8:	2000077c 	.word	0x2000077c
 80096ec:	20000780 	.word	0x20000780
 80096f0:	20000784 	.word	0x20000784
 80096f4:	20000788 	.word	0x20000788
 80096f8:	2000078c 	.word	0x2000078c
 80096fc:	000003f6 	.word	0x000003f6
 8009700:	200006f8 	.word	0x200006f8
 8009704:	200008c8 	.word	0x200008c8
 8009708:	2000095c 	.word	0x2000095c
 800970c:	00000481 	.word	0x00000481
 8009710:	08008859 	.word	0x08008859
 8009714:	20000da4 	.word	0x20000da4
 8009718:	08008201 	.word	0x08008201
 800971c:	20000dbc 	.word	0x20000dbc
 8009720:	0800825d 	.word	0x0800825d
 8009724:	20000dd4 	.word	0x20000dd4
 8009728:	08007911 	.word	0x08007911
 800972c:	20000e34 	.word	0x20000e34
 8009730:	08007b4d 	.word	0x08007b4d
 8009734:	08007afd 	.word	0x08007afd
 8009738:	08007899 	.word	0x08007899
 800973c:	08007ac1 	.word	0x08007ac1
 8009740:	0800f64c 	.word	0x0800f64c
 8009744:	08007a85 	.word	0x08007a85
 8009748:	20000d88 	.word	0x20000d88
 800974c:	20000808 	.word	0x20000808
 8009750:	200007c0 	.word	0x200007c0
 8009754:	00000482 	.word	0x00000482

08009758 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
    MacCtx.MacState = LORAMAC_IDLE;
 8009758:	22d0      	movs	r2, #208	; 0xd0
 800975a:	2000      	movs	r0, #0
 800975c:	4b01      	ldr	r3, [pc, #4]	; (8009764 <LoRaMacStart+0xc>)
 800975e:	0092      	lsls	r2, r2, #2
 8009760:	5098      	str	r0, [r3, r2]
    return LORAMAC_STATUS_OK;
}
 8009762:	4770      	bx	lr
 8009764:	20000a3c 	.word	0x20000a3c

08009768 <LoRaMacQueryTxPossible>:
    }
    return LORAMAC_STATUS_BUSY;
}

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8009768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800976a:	000c      	movs	r4, r1
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800976c:	4929      	ldr	r1, [pc, #164]	; (8009814 <LoRaMacQueryTxPossible+0xac>)
{
 800976e:	b089      	sub	sp, #36	; 0x24
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009770:	000b      	movs	r3, r1
 8009772:	466a      	mov	r2, sp
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009774:	6a8e      	ldr	r6, [r1, #40]	; 0x28
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8009776:	33c5      	adds	r3, #197	; 0xc5
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8009778:	9601      	str	r6, [sp, #4]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800977a:	781b      	ldrb	r3, [r3, #0]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
    size_t macCmdsSize = 0;
 800977c:	2700      	movs	r7, #0
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800977e:	7093      	strb	r3, [r2, #2]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009780:	000b      	movs	r3, r1
 8009782:	33c4      	adds	r3, #196	; 0xc4
 8009784:	781b      	ldrb	r3, [r3, #0]
 8009786:	3203      	adds	r2, #3
 8009788:	7013      	strb	r3, [r2, #0]
{
 800978a:	0005      	movs	r5, r0

    if( txInfo == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800978c:	2303      	movs	r3, #3
    size_t macCmdsSize = 0;
 800978e:	9702      	str	r7, [sp, #8]
    if( txInfo == NULL )
 8009790:	42bc      	cmp	r4, r7
 8009792:	d037      	beq.n	8009804 <LoRaMacQueryTxPossible+0x9c>
    }

    // Setup ADR request
    adrNext.Version = Nvm.MacGroup2.Version;
 8009794:	000b      	movs	r3, r1
 8009796:	33fc      	adds	r3, #252	; 0xfc
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	a803      	add	r0, sp, #12
 800979c:	9303      	str	r3, [sp, #12]
    adrNext.UpdateChanMask = false;
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800979e:	000b      	movs	r3, r1
    adrNext.UpdateChanMask = false;
 80097a0:	7107      	strb	r7, [r0, #4]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80097a2:	33fe      	adds	r3, #254	; 0xfe
 80097a4:	781b      	ldrb	r3, [r3, #0]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 80097a6:	6086      	str	r6, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80097a8:	26fd      	movs	r6, #253	; 0xfd
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80097aa:	7143      	strb	r3, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 80097ac:	4b1a      	ldr	r3, [pc, #104]	; (8009818 <LoRaMacQueryTxPossible+0xb0>)
 80097ae:	00b6      	lsls	r6, r6, #2
 80097b0:	599b      	ldr	r3, [r3, r6]
 80097b2:	9306      	str	r3, [sp, #24]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80097b4:	8f0b      	ldrh	r3, [r1, #56]	; 0x38
 80097b6:	ba5b      	rev16	r3, r3
 80097b8:	8203      	strh	r3, [r0, #16]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80097ba:	000b      	movs	r3, r1
 80097bc:	3374      	adds	r3, #116	; 0x74
 80097be:	781b      	ldrb	r3, [r3, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 80097c0:	3140      	adds	r1, #64	; 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80097c2:	7483      	strb	r3, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 80097c4:	780b      	ldrb	r3, [r1, #0]

    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80097c6:	4669      	mov	r1, sp
    adrNext.Region = Nvm.MacGroup2.Region;
 80097c8:	74c3      	strb	r3, [r0, #19]
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
 80097ca:	3102      	adds	r1, #2
 80097cc:	ab01      	add	r3, sp, #4
 80097ce:	f000 fdb9 	bl	800a344 <LoRaMacAdrCalcNext>

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80097d2:	466b      	mov	r3, sp
 80097d4:	2002      	movs	r0, #2
 80097d6:	5618      	ldrsb	r0, [r3, r0]
 80097d8:	f7fe f884 	bl	80078e4 <GetMaxAppPayloadWithoutFOptsLength>
 80097dc:	7060      	strb	r0, [r4, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80097de:	a802      	add	r0, sp, #8
 80097e0:	f000 fee8 	bl	800a5b4 <LoRaMacCommandsGetSizeSerializedCmds>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80097e4:	2313      	movs	r3, #19
    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80097e6:	42b8      	cmp	r0, r7
 80097e8:	d10c      	bne.n	8009804 <LoRaMacQueryTxPossible+0x9c>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80097ea:	9a02      	ldr	r2, [sp, #8]
 80097ec:	2a0f      	cmp	r2, #15
 80097ee:	d80c      	bhi.n	800980a <LoRaMacQueryTxPossible+0xa2>
 80097f0:	7863      	ldrb	r3, [r4, #1]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d809      	bhi.n	800980a <LoRaMacQueryTxPossible+0xa2>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80097f6:	18ad      	adds	r5, r5, r2
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 80097f8:	1a99      	subs	r1, r3, r2
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 80097fa:	42ab      	cmp	r3, r5
 80097fc:	419b      	sbcs	r3, r3
 80097fe:	425b      	negs	r3, r3
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8009800:	7021      	strb	r1, [r4, #0]
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8009802:	00db      	lsls	r3, r3, #3
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 8009804:	0018      	movs	r0, r3
 8009806:	b009      	add	sp, #36	; 0x24
 8009808:	bdf0      	pop	{r4, r5, r6, r7, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800980a:	2300      	movs	r3, #0
 800980c:	7023      	strb	r3, [r4, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800980e:	3308      	adds	r3, #8
 8009810:	e7f8      	b.n	8009804 <LoRaMacQueryTxPossible+0x9c>
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	200006f0 	.word	0x200006f0
 8009818:	20000a3c 	.word	0x20000a3c

0800981c <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 800981c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800981e:	0004      	movs	r4, r0
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009820:	2003      	movs	r0, #3
    if( mibGet == NULL )
 8009822:	2c00      	cmp	r4, #0
 8009824:	d01e      	beq.n	8009864 <LoRaMacMibGetRequestConfirm+0x48>
    }

    switch( mibGet->Type )
 8009826:	7820      	ldrb	r0, [r4, #0]
 8009828:	2828      	cmp	r0, #40	; 0x28
 800982a:	d900      	bls.n	800982e <LoRaMacMibGetRequestConfirm+0x12>
 800982c:	e091      	b.n	8009952 <LoRaMacMibGetRequestConfirm+0x136>
 800982e:	f7f6 fc7d 	bl	800012c <__gnu_thumb1_case_uqi>
 8009832:	1b15      	.short	0x1b15
 8009834:	2c282520 	.word	0x2c282520
 8009838:	90909031 	.word	0x90909031
 800983c:	90909090 	.word	0x90909090
 8009840:	3a373490 	.word	0x3a373490
 8009844:	514d4943 	.word	0x514d4943
 8009848:	5d5a5457 	.word	0x5d5a5457
 800984c:	69666360 	.word	0x69666360
 8009850:	72756f6c 	.word	0x72756f6c
 8009854:	847e7b78 	.word	0x847e7b78
 8009858:	9082      	.short	0x9082
 800985a:	88          	.byte	0x88
 800985b:	00          	.byte	0x00
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800985c:	4b3f      	ldr	r3, [pc, #252]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800985e:	33fc      	adds	r3, #252	; 0xfc
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	7123      	strb	r3, [r4, #4]
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
            break;
        }
    }
    return status;
}
 8009864:	b004      	add	sp, #16
 8009866:	bd10      	pop	{r4, pc}
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 8009868:	4b3c      	ldr	r3, [pc, #240]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800986a:	33ff      	adds	r3, #255	; 0xff
 800986c:	7c5b      	ldrb	r3, [r3, #17]
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800986e:	7123      	strb	r3, [r4, #4]
            break;
 8009870:	e002      	b.n	8009878 <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8009872:	f7fd fad5 	bl	8006e20 <SecureElementGetDevEui>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8009876:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8009878:	2000      	movs	r0, #0
            break;
 800987a:	e7f3      	b.n	8009864 <LoRaMacMibGetRequestConfirm+0x48>
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 800987c:	f7fd fae6 	bl	8006e4c <SecureElementGetJoinEui>
 8009880:	e7f9      	b.n	8009876 <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8009882:	4b36      	ldr	r3, [pc, #216]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009884:	33fe      	adds	r3, #254	; 0xfe
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	e7f1      	b.n	800986e <LoRaMacMibGetRequestConfirm+0x52>
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800988a:	4b34      	ldr	r3, [pc, #208]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800988c:	33c8      	adds	r3, #200	; 0xc8
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 800988e:	681b      	ldr	r3, [r3, #0]
            mibGet->Param.Contexts = GetNvmData( );
 8009890:	6063      	str	r3, [r4, #4]
            break;
 8009892:	e7f1      	b.n	8009878 <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8009894:	4b31      	ldr	r3, [pc, #196]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009896:	33cc      	adds	r3, #204	; 0xcc
 8009898:	e7f9      	b.n	800988e <LoRaMacMibGetRequestConfirm+0x72>
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800989a:	4b30      	ldr	r3, [pc, #192]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800989c:	33fd      	adds	r3, #253	; 0xfd
 800989e:	e7f2      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80098a0:	4b2e      	ldr	r3, [pc, #184]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098a2:	3380      	adds	r3, #128	; 0x80
 80098a4:	e7ef      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            getPhy.Attribute = PHY_CHANNELS;
 80098a6:	231d      	movs	r3, #29
 80098a8:	a902      	add	r1, sp, #8
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80098aa:	700b      	strb	r3, [r1, #0]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80098ac:	4b2b      	ldr	r3, [pc, #172]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098ae:	3340      	adds	r3, #64	; 0x40
 80098b0:	7818      	ldrb	r0, [r3, #0]
 80098b2:	f001 fc19 	bl	800b0e8 <RegionGetPhyParam>
 80098b6:	e7de      	b.n	8009876 <LoRaMacMibGetRequestConfirm+0x5a>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80098b8:	4b28      	ldr	r3, [pc, #160]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098ba:	3404      	adds	r4, #4
 80098bc:	3364      	adds	r3, #100	; 0x64
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80098be:	cb06      	ldmia	r3!, {r1, r2}
 80098c0:	c406      	stmia	r4!, {r1, r2}
            break;
 80098c2:	e7d9      	b.n	8009878 <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80098c4:	4b25      	ldr	r3, [pc, #148]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098c6:	33a4      	adds	r3, #164	; 0xa4
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80098c8:	3404      	adds	r4, #4
 80098ca:	e7f8      	b.n	80098be <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 80098cc:	4b23      	ldr	r3, [pc, #140]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098ce:	3404      	adds	r4, #4
 80098d0:	336c      	adds	r3, #108	; 0x6c
 80098d2:	e7f4      	b.n	80098be <LoRaMacMibGetRequestConfirm+0xa2>
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80098d4:	4b21      	ldr	r3, [pc, #132]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098d6:	33ac      	adds	r3, #172	; 0xac
 80098d8:	e7f6      	b.n	80098c8 <LoRaMacMibGetRequestConfirm+0xac>
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 80098da:	231b      	movs	r3, #27
 80098dc:	a902      	add	r1, sp, #8
 80098de:	e7e4      	b.n	80098aa <LoRaMacMibGetRequestConfirm+0x8e>
            getPhy.Attribute = PHY_CHANNELS_MASK;
 80098e0:	231a      	movs	r3, #26
 80098e2:	a902      	add	r1, sp, #8
 80098e4:	e7e1      	b.n	80098aa <LoRaMacMibGetRequestConfirm+0x8e>
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80098e6:	4b1d      	ldr	r3, [pc, #116]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098e8:	3360      	adds	r3, #96	; 0x60
 80098ea:	e7cc      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 80098ec:	4b1b      	ldr	r3, [pc, #108]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f0:	e7ce      	b.n	8009890 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 80098f2:	4b1a      	ldr	r3, [pc, #104]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098f6:	e7cb      	b.n	8009890 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 80098f8:	4b18      	ldr	r3, [pc, #96]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 80098fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098fc:	e7c8      	b.n	8009890 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 80098fe:	4b17      	ldr	r3, [pc, #92]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009902:	e7c5      	b.n	8009890 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 8009904:	4b15      	ldr	r3, [pc, #84]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009908:	e7c2      	b.n	8009890 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800990a:	4b14      	ldr	r3, [pc, #80]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800990c:	33c5      	adds	r3, #197	; 0xc5
 800990e:	e7ba      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 8009910:	4b12      	ldr	r3, [pc, #72]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009912:	3339      	adds	r3, #57	; 0x39
 8009914:	e7b7      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 8009916:	4b11      	ldr	r3, [pc, #68]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009918:	33c4      	adds	r3, #196	; 0xc4
 800991a:	e7b4      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800991c:	4b0f      	ldr	r3, [pc, #60]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800991e:	3338      	adds	r3, #56	; 0x38
 8009920:	e7b1      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8009922:	4b0e      	ldr	r3, [pc, #56]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009926:	e7b3      	b.n	8009890 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 8009928:	4b0c      	ldr	r3, [pc, #48]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800992a:	3348      	adds	r3, #72	; 0x48
 800992c:	e7ab      	b.n	8009886 <LoRaMacMibGetRequestConfirm+0x6a>
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800992e:	4b0b      	ldr	r3, [pc, #44]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8009932:	6063      	str	r3, [r4, #4]
 8009934:	e7a0      	b.n	8009878 <LoRaMacMibGetRequestConfirm+0x5c>
            mibGet->Param.Contexts = GetNvmData( );
 8009936:	4b09      	ldr	r3, [pc, #36]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009938:	e7aa      	b.n	8009890 <LoRaMacMibGetRequestConfirm+0x74>
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800993a:	4b08      	ldr	r3, [pc, #32]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 800993c:	33bc      	adds	r3, #188	; 0xbc
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	e7f7      	b.n	8009932 <LoRaMacMibGetRequestConfirm+0x116>
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8009942:	4b06      	ldr	r3, [pc, #24]	; (800995c <LoRaMacMibGetRequestConfirm+0x140>)
 8009944:	33fc      	adds	r3, #252	; 0xfc
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800994a:	f001 fc8f 	bl	800b26c <RegionGetVersion>
 800994e:	60a0      	str	r0, [r4, #8]
            break;
 8009950:	e792      	b.n	8009878 <LoRaMacMibGetRequestConfirm+0x5c>
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 8009952:	0020      	movs	r0, r4
 8009954:	f000 fd77 	bl	800a446 <LoRaMacClassBMibGetRequestConfirm>
            break;
 8009958:	e784      	b.n	8009864 <LoRaMacMibGetRequestConfirm+0x48>
 800995a:	46c0      	nop			; (mov r8, r8)
 800995c:	200006f0 	.word	0x200006f0

08009960 <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 8009960:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009962:	1e04      	subs	r4, r0, #0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8009964:	d045      	beq.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009966:	23d0      	movs	r3, #208	; 0xd0
 8009968:	4db1      	ldr	r5, [pc, #708]	; (8009c30 <LoRaMacMibSetRequestConfirm+0x2d0>)
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	58eb      	ldr	r3, [r5, r3]
    {
        return LORAMAC_STATUS_BUSY;
 800996e:	2001      	movs	r0, #1
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 8009970:	079a      	lsls	r2, r3, #30
 8009972:	d430      	bmi.n	80099d6 <LoRaMacMibSetRequestConfirm+0x76>
    }

    switch( mibSet->Type )
 8009974:	7820      	ldrb	r0, [r4, #0]
 8009976:	2827      	cmp	r0, #39	; 0x27
 8009978:	d900      	bls.n	800997c <LoRaMacMibSetRequestConfirm+0x1c>
 800997a:	e20a      	b.n	8009d92 <LoRaMacMibSetRequestConfirm+0x432>
 800997c:	f7f6 fbea 	bl	8000154 <__gnu_thumb1_case_uhi>
 8009980:	002c0028 	.word	0x002c0028
 8009984:	003b0034 	.word	0x003b0034
 8009988:	0044003f 	.word	0x0044003f
 800998c:	004c0049 	.word	0x004c0049
 8009990:	005b0056 	.word	0x005b0056
 8009994:	00650060 	.word	0x00650060
 8009998:	006f006a 	.word	0x006f006a
 800999c:	00790074 	.word	0x00790074
 80099a0:	02090083 	.word	0x02090083
 80099a4:	00a50086 	.word	0x00a50086
 80099a8:	00e000b8 	.word	0x00e000b8
 80099ac:	00f30102 	.word	0x00f30102
 80099b0:	010e0106 	.word	0x010e0106
 80099b4:	01160112 	.word	0x01160112
 80099b8:	011e011a 	.word	0x011e011a
 80099bc:	01350122 	.word	0x01350122
 80099c0:	0148015e 	.word	0x0148015e
 80099c4:	0175016e 	.word	0x0175016e
 80099c8:	0180017c 	.word	0x0180017c
 80099cc:	01fd0185 	.word	0x01fd0185
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80099d0:	7920      	ldrb	r0, [r4, #4]
 80099d2:	f7fe fb79 	bl	80080c8 <SwitchClass>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
            break;
        }
    }
    return status;
}
 80099d6:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80099d8:	7922      	ldrb	r2, [r4, #4]
 80099da:	2a02      	cmp	r2, #2
 80099dc:	d009      	beq.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80099de:	4b95      	ldr	r3, [pc, #596]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 80099e0:	33ff      	adds	r3, #255	; 0xff
 80099e2:	745a      	strb	r2, [r3, #17]
    return LORAMAC_STATUS_OK;
 80099e4:	2000      	movs	r0, #0
 80099e6:	e7f6      	b.n	80099d6 <LoRaMacMibSetRequestConfirm+0x76>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80099e8:	6860      	ldr	r0, [r4, #4]
 80099ea:	f7fd fa0b 	bl	8006e04 <SecureElementSetDevEui>
 80099ee:	2800      	cmp	r0, #0
 80099f0:	d0f8      	beq.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80099f2:	2003      	movs	r0, #3
 80099f4:	e7ef      	b.n	80099d6 <LoRaMacMibSetRequestConfirm+0x76>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80099f6:	6860      	ldr	r0, [r4, #4]
 80099f8:	f7fd fa18 	bl	8006e2c <SecureElementSetJoinEui>
 80099fc:	e7f7      	b.n	80099ee <LoRaMacMibSetRequestConfirm+0x8e>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 80099fe:	4b8d      	ldr	r3, [pc, #564]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009a00:	33fe      	adds	r3, #254	; 0xfe
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009a02:	7922      	ldrb	r2, [r4, #4]
 8009a04:	701a      	strb	r2, [r3, #0]
            break;
 8009a06:	e7ed      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8009a08:	4b8a      	ldr	r3, [pc, #552]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009a0a:	33c8      	adds	r3, #200	; 0xc8
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009a0c:	6862      	ldr	r2, [r4, #4]
 8009a0e:	601a      	str	r2, [r3, #0]
            break;
 8009a10:	e7e8      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 8009a12:	4b88      	ldr	r3, [pc, #544]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009a14:	33cc      	adds	r3, #204	; 0xcc
 8009a16:	e7f9      	b.n	8009a0c <LoRaMacMibSetRequestConfirm+0xac>
            if( mibSet->Param.AppKey != NULL )
 8009a18:	6861      	ldr	r1, [r4, #4]
 8009a1a:	2900      	cmp	r1, #0
 8009a1c:	d0e9      	beq.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8009a1e:	2000      	movs	r0, #0
 8009a20:	f001 f986 	bl	800ad30 <LoRaMacCryptoSetKey>
 8009a24:	2800      	cmp	r0, #0
 8009a26:	d0dd      	beq.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8009a28:	2011      	movs	r0, #17
 8009a2a:	e7d4      	b.n	80099d6 <LoRaMacMibSetRequestConfirm+0x76>
            if( mibSet->Param.NwkKey != NULL )
 8009a2c:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8009a2e:	2001      	movs	r0, #1
            if( mibSet->Param.NwkKey != NULL )
 8009a30:	2900      	cmp	r1, #0
 8009a32:	d1f5      	bne.n	8009a20 <LoRaMacMibSetRequestConfirm+0xc0>
 8009a34:	e7dd      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.NwkSKey != NULL )
 8009a36:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 8009a38:	2002      	movs	r0, #2
            if( mibSet->Param.NwkSKey != NULL )
 8009a3a:	2900      	cmp	r1, #0
 8009a3c:	d1f0      	bne.n	8009a20 <LoRaMacMibSetRequestConfirm+0xc0>
 8009a3e:	e7d8      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.AppSKey != NULL )
 8009a40:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 8009a42:	2003      	movs	r0, #3
            if( mibSet->Param.AppSKey != NULL )
 8009a44:	2900      	cmp	r1, #0
 8009a46:	d1eb      	bne.n	8009a20 <LoRaMacMibSetRequestConfirm+0xc0>
 8009a48:	e7d3      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.McKEKey != NULL )
 8009a4a:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 8009a4c:	207f      	movs	r0, #127	; 0x7f
            if( mibSet->Param.McKEKey != NULL )
 8009a4e:	2900      	cmp	r1, #0
 8009a50:	d1e6      	bne.n	8009a20 <LoRaMacMibSetRequestConfirm+0xc0>
 8009a52:	e7ce      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.McKey0 != NULL )
 8009a54:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 8009a56:	2080      	movs	r0, #128	; 0x80
            if( mibSet->Param.McKey0 != NULL )
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d1e1      	bne.n	8009a20 <LoRaMacMibSetRequestConfirm+0xc0>
 8009a5c:	e7c9      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.McAppSKey0 != NULL )
 8009a5e:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8009a60:	2081      	movs	r0, #129	; 0x81
            if( mibSet->Param.McAppSKey0 != NULL )
 8009a62:	2900      	cmp	r1, #0
 8009a64:	d1dc      	bne.n	8009a20 <LoRaMacMibSetRequestConfirm+0xc0>
 8009a66:	e7c4      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009a68:	6861      	ldr	r1, [r4, #4]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8009a6a:	2082      	movs	r0, #130	; 0x82
            if( mibSet->Param.McNwkSKey0 != NULL )
 8009a6c:	2900      	cmp	r1, #0
 8009a6e:	d1d7      	bne.n	8009a20 <LoRaMacMibSetRequestConfirm+0xc0>
 8009a70:	e7bf      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009a72:	4b70      	ldr	r3, [pc, #448]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009a74:	7920      	ldrb	r0, [r4, #4]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009a76:	4c70      	ldr	r4, [pc, #448]	; (8009c38 <LoRaMacMibSetRequestConfirm+0x2d8>)
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8009a78:	33fd      	adds	r3, #253	; 0xfd
 8009a7a:	7018      	strb	r0, [r3, #0]
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8009a7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a7e:	4798      	blx	r3
            Radio.Sleep( );
 8009a80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a82:	4798      	blx	r3
            break;
 8009a84:	e7ae      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8009a86:	4b6b      	ldr	r3, [pc, #428]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009a88:	3380      	adds	r3, #128	; 0x80
 8009a8a:	e7ba      	b.n	8009a02 <LoRaMacMibSetRequestConfirm+0xa2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009a8c:	466a      	mov	r2, sp
 8009a8e:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a90:	4d68      	ldr	r5, [pc, #416]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009a92:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a94:	002b      	movs	r3, r5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009a96:	002e      	movs	r6, r5
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a98:	3375      	adds	r3, #117	; 0x75
 8009a9a:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009a9c:	3640      	adds	r6, #64	; 0x40
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009a9e:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8009aa0:	4669      	mov	r1, sp
 8009aa2:	2207      	movs	r2, #7
 8009aa4:	7830      	ldrb	r0, [r6, #0]
 8009aa6:	f001 fb39 	bl	800b11c <RegionVerify>
 8009aaa:	2800      	cmp	r0, #0
 8009aac:	d0a1      	beq.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009aae:	6863      	ldr	r3, [r4, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009ab0:	2200      	movs	r2, #0
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8009ab2:	9300      	str	r3, [sp, #0]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009ab4:	4669      	mov	r1, sp
 8009ab6:	7830      	ldrb	r0, [r6, #0]
 8009ab8:	f001 fb30 	bl	800b11c <RegionVerify>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8009abc:	3564      	adds	r5, #100	; 0x64
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8009abe:	2800      	cmp	r0, #0
 8009ac0:	d097      	beq.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009ac2:	3404      	adds	r4, #4
 8009ac4:	cc06      	ldmia	r4!, {r1, r2}
 8009ac6:	c506      	stmia	r5!, {r1, r2}
 8009ac8:	e78c      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009aca:	466a      	mov	r2, sp
 8009acc:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ace:	4d59      	ldr	r5, [pc, #356]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8009ad0:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ad2:	002b      	movs	r3, r5
 8009ad4:	3375      	adds	r3, #117	; 0x75
 8009ad6:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009ad8:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009ada:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009adc:	002b      	movs	r3, r5
 8009ade:	3340      	adds	r3, #64	; 0x40
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	7818      	ldrb	r0, [r3, #0]
 8009ae4:	f001 fb1a 	bl	800b11c <RegionVerify>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	d082      	beq.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8009aec:	35a4      	adds	r5, #164	; 0xa4
 8009aee:	e7e8      	b.n	8009ac2 <LoRaMacMibSetRequestConfirm+0x162>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009af0:	466a      	mov	r2, sp
 8009af2:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009af4:	4d4f      	ldr	r5, [pc, #316]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009af6:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009af8:	002b      	movs	r3, r5
 8009afa:	3375      	adds	r3, #117	; 0x75
 8009afc:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009afe:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b00:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b02:	002b      	movs	r3, r5
 8009b04:	3340      	adds	r3, #64	; 0x40
 8009b06:	2207      	movs	r2, #7
 8009b08:	7818      	ldrb	r0, [r3, #0]
 8009b0a:	f001 fb07 	bl	800b11c <RegionVerify>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	d100      	bne.n	8009b14 <LoRaMacMibSetRequestConfirm+0x1b4>
 8009b12:	e76e      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8009b14:	002b      	movs	r3, r5
 8009b16:	3404      	adds	r4, #4
 8009b18:	336c      	adds	r3, #108	; 0x6c
 8009b1a:	cc06      	ldmia	r4!, {r1, r2}
 8009b1c:	c306      	stmia	r3!, {r1, r2}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8009b1e:	002b      	movs	r3, r5
 8009b20:	33fc      	adds	r3, #252	; 0xfc
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	2b02      	cmp	r3, #2
 8009b26:	d000      	beq.n	8009b2a <LoRaMacMibSetRequestConfirm+0x1ca>
 8009b28:	e75c      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
 8009b2a:	35ff      	adds	r5, #255	; 0xff
 8009b2c:	7c6b      	ldrb	r3, [r5, #17]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d100      	bne.n	8009b34 <LoRaMacMibSetRequestConfirm+0x1d4>
 8009b32:	e757      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
                    Radio.Sleep( );
 8009b34:	4b40      	ldr	r3, [pc, #256]	; (8009c38 <LoRaMacMibSetRequestConfirm+0x2d8>)
 8009b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b38:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 8009b3a:	f7fe fa8f 	bl	800805c <OpenContinuousRxCWindow>
 8009b3e:	e751      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b40:	466a      	mov	r2, sp
 8009b42:	7a23      	ldrb	r3, [r4, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b44:	4d3b      	ldr	r5, [pc, #236]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8009b46:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b48:	002b      	movs	r3, r5
 8009b4a:	3375      	adds	r3, #117	; 0x75
 8009b4c:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b4e:	4669      	mov	r1, sp
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009b50:	7053      	strb	r3, [r2, #1]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b52:	002b      	movs	r3, r5
 8009b54:	3340      	adds	r3, #64	; 0x40
 8009b56:	2207      	movs	r2, #7
 8009b58:	7818      	ldrb	r0, [r3, #0]
 8009b5a:	f001 fadf 	bl	800b11c <RegionVerify>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8009b5e:	35ac      	adds	r5, #172	; 0xac
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8009b60:	2800      	cmp	r0, #0
 8009b62:	d1ae      	bne.n	8009ac2 <LoRaMacMibSetRequestConfirm+0x162>
 8009b64:	e745      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8009b66:	6863      	ldr	r3, [r4, #4]
 8009b68:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8009b6a:	2301      	movs	r3, #1
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009b6c:	466a      	mov	r2, sp
 8009b6e:	7113      	strb	r3, [r2, #4]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8009b70:	4b30      	ldr	r3, [pc, #192]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009b72:	4669      	mov	r1, sp
 8009b74:	3340      	adds	r3, #64	; 0x40
 8009b76:	7818      	ldrb	r0, [r3, #0]
 8009b78:	f001 fae3 	bl	800b142 <RegionChanMaskSet>
 8009b7c:	2800      	cmp	r0, #0
 8009b7e:	d000      	beq.n	8009b82 <LoRaMacMibSetRequestConfirm+0x222>
 8009b80:	e730      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
 8009b82:	e736      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8009b84:	6863      	ldr	r3, [r4, #4]
 8009b86:	9300      	str	r3, [sp, #0]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	e7ef      	b.n	8009b6c <LoRaMacMibSetRequestConfirm+0x20c>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8009b8c:	7922      	ldrb	r2, [r4, #4]
 8009b8e:	1e53      	subs	r3, r2, #1
 8009b90:	2b0e      	cmp	r3, #14
 8009b92:	d900      	bls.n	8009b96 <LoRaMacMibSetRequestConfirm+0x236>
 8009b94:	e72d      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8009b96:	4b27      	ldr	r3, [pc, #156]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009b98:	3360      	adds	r3, #96	; 0x60
 8009b9a:	e733      	b.n	8009a04 <LoRaMacMibSetRequestConfirm+0xa4>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8009b9c:	4b25      	ldr	r3, [pc, #148]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009b9e:	6862      	ldr	r2, [r4, #4]
 8009ba0:	64da      	str	r2, [r3, #76]	; 0x4c
            break;
 8009ba2:	e71f      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8009ba4:	4b23      	ldr	r3, [pc, #140]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009ba6:	6862      	ldr	r2, [r4, #4]
 8009ba8:	651a      	str	r2, [r3, #80]	; 0x50
            break;
 8009baa:	e71b      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8009bac:	4b21      	ldr	r3, [pc, #132]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009bae:	6862      	ldr	r2, [r4, #4]
 8009bb0:	655a      	str	r2, [r3, #84]	; 0x54
            break;
 8009bb2:	e717      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8009bb4:	4b1f      	ldr	r3, [pc, #124]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009bb6:	6862      	ldr	r2, [r4, #4]
 8009bb8:	659a      	str	r2, [r3, #88]	; 0x58
            break;
 8009bba:	e713      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8009bbc:	4b1d      	ldr	r3, [pc, #116]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
 8009bbe:	6862      	ldr	r2, [r4, #4]
 8009bc0:	65da      	str	r2, [r3, #92]	; 0x5c
            break;
 8009bc2:	e70f      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009bc4:	466a      	mov	r2, sp
 8009bc6:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009bc8:	4c1a      	ldr	r4, [pc, #104]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8009bca:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009bcc:	0023      	movs	r3, r4
 8009bce:	3340      	adds	r3, #64	; 0x40
 8009bd0:	2206      	movs	r2, #6
 8009bd2:	4669      	mov	r1, sp
 8009bd4:	7818      	ldrb	r0, [r3, #0]
 8009bd6:	f001 faa1 	bl	800b11c <RegionVerify>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8009bda:	34c5      	adds	r4, #197	; 0xc5
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d100      	bne.n	8009be2 <LoRaMacMibSetRequestConfirm+0x282>
 8009be0:	e707      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009be2:	466b      	mov	r3, sp
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	7023      	strb	r3, [r4, #0]
 8009be8:	e6fc      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009bea:	466a      	mov	r2, sp
 8009bec:	7923      	ldrb	r3, [r4, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009bee:	4c11      	ldr	r4, [pc, #68]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8009bf0:	7013      	strb	r3, [r2, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009bf2:	0023      	movs	r3, r4
 8009bf4:	3374      	adds	r3, #116	; 0x74
 8009bf6:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009bf8:	4669      	mov	r1, sp
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009bfa:	7093      	strb	r3, [r2, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009bfc:	0023      	movs	r3, r4
 8009bfe:	3340      	adds	r3, #64	; 0x40
 8009c00:	2205      	movs	r2, #5
 8009c02:	7818      	ldrb	r0, [r3, #0]
 8009c04:	f001 fa8a 	bl	800b11c <RegionVerify>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8009c08:	3439      	adds	r4, #57	; 0x39
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d1e9      	bne.n	8009be2 <LoRaMacMibSetRequestConfirm+0x282>
 8009c0e:	e6f0      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009c10:	466a      	mov	r2, sp
 8009c12:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009c14:	4c07      	ldr	r4, [pc, #28]	; (8009c34 <LoRaMacMibSetRequestConfirm+0x2d4>)
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8009c16:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009c18:	0023      	movs	r3, r4
 8009c1a:	3340      	adds	r3, #64	; 0x40
 8009c1c:	220a      	movs	r2, #10
 8009c1e:	4669      	mov	r1, sp
 8009c20:	7818      	ldrb	r0, [r3, #0]
 8009c22:	f001 fa7b 	bl	800b11c <RegionVerify>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8009c26:	34c4      	adds	r4, #196	; 0xc4
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d1da      	bne.n	8009be2 <LoRaMacMibSetRequestConfirm+0x282>
 8009c2c:	e6e1      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
 8009c2e:	46c0      	nop			; (mov r8, r8)
 8009c30:	20000a3c 	.word	0x20000a3c
 8009c34:	200006f0 	.word	0x200006f0
 8009c38:	0800f64c 	.word	0x0800f64c
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009c3c:	466a      	mov	r2, sp
 8009c3e:	7923      	ldrb	r3, [r4, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009c40:	4c56      	ldr	r4, [pc, #344]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8009c42:	7013      	strb	r3, [r2, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8009c44:	0023      	movs	r3, r4
 8009c46:	3340      	adds	r3, #64	; 0x40
 8009c48:	2209      	movs	r2, #9
 8009c4a:	4669      	mov	r1, sp
 8009c4c:	7818      	ldrb	r0, [r3, #0]
 8009c4e:	f001 fa65 	bl	800b11c <RegionVerify>
 8009c52:	2800      	cmp	r0, #0
 8009c54:	d100      	bne.n	8009c58 <LoRaMacMibSetRequestConfirm+0x2f8>
 8009c56:	e6cc      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8009c58:	3438      	adds	r4, #56	; 0x38
 8009c5a:	e7c2      	b.n	8009be2 <LoRaMacMibSetRequestConfirm+0x282>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8009c5c:	4b4f      	ldr	r3, [pc, #316]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
 8009c5e:	6862      	ldr	r2, [r4, #4]
 8009c60:	0019      	movs	r1, r3
 8009c62:	3108      	adds	r1, #8
 8009c64:	67ca      	str	r2, [r1, #124]	; 0x7c
 8009c66:	645a      	str	r2, [r3, #68]	; 0x44
            break;
 8009c68:	e6bc      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8009c6a:	4b4c      	ldr	r3, [pc, #304]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
 8009c6c:	7922      	ldrb	r2, [r4, #4]
 8009c6e:	0019      	movs	r1, r3
 8009c70:	3188      	adds	r1, #136	; 0x88
 8009c72:	700a      	strb	r2, [r1, #0]
 8009c74:	3348      	adds	r3, #72	; 0x48
 8009c76:	e6c5      	b.n	8009a04 <LoRaMacMibSetRequestConfirm+0xa4>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8009c78:	4b48      	ldr	r3, [pc, #288]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
 8009c7a:	6862      	ldr	r2, [r4, #4]
 8009c7c:	67da      	str	r2, [r3, #124]	; 0x7c
            break;
 8009c7e:	e6b1      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8009c80:	4b46      	ldr	r3, [pc, #280]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
 8009c82:	6862      	ldr	r2, [r4, #4]
 8009c84:	33bc      	adds	r3, #188	; 0xbc
 8009c86:	601a      	str	r2, [r3, #0]
            break;
 8009c88:	e6ac      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            if( mibSet->Param.Contexts != 0 )
 8009c8a:	6864      	ldr	r4, [r4, #4]
 8009c8c:	2c00      	cmp	r4, #0
 8009c8e:	d100      	bne.n	8009c92 <LoRaMacMibSetRequestConfirm+0x332>
 8009c90:	e6af      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
        return LORAMAC_STATUS_BUSY;
 8009c92:	2001      	movs	r0, #1
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8009c94:	4283      	cmp	r3, r0
 8009c96:	d000      	beq.n	8009c9a <LoRaMacMibSetRequestConfirm+0x33a>
 8009c98:	e69d      	b.n	80099d6 <LoRaMacMibSetRequestConfirm+0x76>
    crc = Crc32( ( uint8_t* ) &nvm->Crypto, sizeof( nvm->Crypto ) -
 8009c9a:	2124      	movs	r1, #36	; 0x24
 8009c9c:	0020      	movs	r0, r4
 8009c9e:	f002 fbe9 	bl	800c474 <Crc32>
    if( crc == nvm->Crypto.Crc32 )
 8009ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ca4:	4298      	cmp	r0, r3
 8009ca6:	d104      	bne.n	8009cb2 <LoRaMacMibSetRequestConfirm+0x352>
        memcpy1( ( uint8_t* ) &Nvm.Crypto, ( uint8_t* ) &nvm->Crypto,
 8009ca8:	2228      	movs	r2, #40	; 0x28
 8009caa:	0021      	movs	r1, r4
 8009cac:	483b      	ldr	r0, [pc, #236]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
 8009cae:	f002 fbc7 	bl	800c440 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup1, sizeof( nvm->MacGroup1 ) -
 8009cb2:	0026      	movs	r6, r4
 8009cb4:	3628      	adds	r6, #40	; 0x28
 8009cb6:	2114      	movs	r1, #20
 8009cb8:	0030      	movs	r0, r6
 8009cba:	f002 fbdb 	bl	800c474 <Crc32>
    if( crc == nvm->MacGroup1.Crc32 )
 8009cbe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009cc0:	4298      	cmp	r0, r3
 8009cc2:	d104      	bne.n	8009cce <LoRaMacMibSetRequestConfirm+0x36e>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup1, ( uint8_t* ) &nvm->MacGroup1,
 8009cc4:	2218      	movs	r2, #24
 8009cc6:	0031      	movs	r1, r6
 8009cc8:	4835      	ldr	r0, [pc, #212]	; (8009da0 <LoRaMacMibSetRequestConfirm+0x440>)
 8009cca:	f002 fbb9 	bl	800c440 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->MacGroup2, sizeof( nvm->MacGroup2 ) -
 8009cce:	0026      	movs	r6, r4
 8009cd0:	3640      	adds	r6, #64	; 0x40
 8009cd2:	21d4      	movs	r1, #212	; 0xd4
 8009cd4:	0030      	movs	r0, r6
 8009cd6:	f002 fbcd 	bl	800c474 <Crc32>
    if( crc == nvm->MacGroup2.Crc32 )
 8009cda:	0023      	movs	r3, r4
 8009cdc:	33fc      	adds	r3, #252	; 0xfc
 8009cde:	699b      	ldr	r3, [r3, #24]
 8009ce0:	4298      	cmp	r0, r3
 8009ce2:	d115      	bne.n	8009d10 <LoRaMacMibSetRequestConfirm+0x3b0>
        memcpy1( ( uint8_t* ) &Nvm.MacGroup2, ( uint8_t* ) &nvm->MacGroup2,
 8009ce4:	22d8      	movs	r2, #216	; 0xd8
 8009ce6:	0031      	movs	r1, r6
 8009ce8:	482e      	ldr	r0, [pc, #184]	; (8009da4 <LoRaMacMibSetRequestConfirm+0x444>)
 8009cea:	f002 fba9 	bl	800c440 <memcpy1>
        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8009cee:	4b2e      	ldr	r3, [pc, #184]	; (8009da8 <LoRaMacMibSetRequestConfirm+0x448>)
 8009cf0:	5cea      	ldrb	r2, [r5, r3]
 8009cf2:	3b35      	subs	r3, #53	; 0x35
 8009cf4:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009cf6:	22f9      	movs	r2, #249	; 0xf9
 8009cf8:	4b28      	ldr	r3, [pc, #160]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
 8009cfa:	0092      	lsls	r2, r2, #2
 8009cfc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009cfe:	3375      	adds	r3, #117	; 0x75
        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8009d00:	50a9      	str	r1, [r5, r2]
        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009d02:	781a      	ldrb	r2, [r3, #0]
 8009d04:	23fc      	movs	r3, #252	; 0xfc
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	54ea      	strb	r2, [r5, r3]
        MacCtx.RxWindowCConfig.RxContinuous = true;
 8009d0a:	4b28      	ldr	r3, [pc, #160]	; (8009dac <LoRaMacMibSetRequestConfirm+0x44c>)
 8009d0c:	4a28      	ldr	r2, [pc, #160]	; (8009db0 <LoRaMacMibSetRequestConfirm+0x450>)
 8009d0e:	52ea      	strh	r2, [r5, r3]
    crc = Crc32( ( uint8_t* ) &nvm->SecureElement, sizeof( nvm->SecureElement ) -
 8009d10:	0025      	movs	r5, r4
 8009d12:	3519      	adds	r5, #25
 8009d14:	35ff      	adds	r5, #255	; 0xff
 8009d16:	21bc      	movs	r1, #188	; 0xbc
 8009d18:	0028      	movs	r0, r5
 8009d1a:	f002 fbab 	bl	800c474 <Crc32>
    if( crc == nvm->SecureElement.Crc32 )
 8009d1e:	23ea      	movs	r3, #234	; 0xea
 8009d20:	005b      	lsls	r3, r3, #1
 8009d22:	58e3      	ldr	r3, [r4, r3]
 8009d24:	4298      	cmp	r0, r3
 8009d26:	d104      	bne.n	8009d32 <LoRaMacMibSetRequestConfirm+0x3d2>
        memcpy1( ( uint8_t* ) &Nvm.SecureElement,( uint8_t* ) &nvm->SecureElement,
 8009d28:	22c0      	movs	r2, #192	; 0xc0
 8009d2a:	0029      	movs	r1, r5
 8009d2c:	4821      	ldr	r0, [pc, #132]	; (8009db4 <LoRaMacMibSetRequestConfirm+0x454>)
 8009d2e:	f002 fb87 	bl	800c440 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->RegionGroup1, sizeof( nvm->RegionGroup1 ) -
 8009d32:	0025      	movs	r5, r4
 8009d34:	35d9      	adds	r5, #217	; 0xd9
 8009d36:	35ff      	adds	r5, #255	; 0xff
 8009d38:	2190      	movs	r1, #144	; 0x90
 8009d3a:	0028      	movs	r0, r5
 8009d3c:	f002 fb9a 	bl	800c474 <Crc32>
    if( crc == nvm->RegionGroup1.Crc32 )
 8009d40:	239a      	movs	r3, #154	; 0x9a
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	58e3      	ldr	r3, [r4, r3]
 8009d46:	4298      	cmp	r0, r3
 8009d48:	d104      	bne.n	8009d54 <LoRaMacMibSetRequestConfirm+0x3f4>
        memcpy1( ( uint8_t* ) &Nvm.RegionGroup1,( uint8_t* ) &nvm->RegionGroup1,
 8009d4a:	2294      	movs	r2, #148	; 0x94
 8009d4c:	0029      	movs	r1, r5
 8009d4e:	481a      	ldr	r0, [pc, #104]	; (8009db8 <LoRaMacMibSetRequestConfirm+0x458>)
 8009d50:	f002 fb76 	bl	800c440 <memcpy1>
    crc = Crc32( ( uint8_t* ) &nvm->ClassB, sizeof( nvm->ClassB ) -
 8009d54:	23cd      	movs	r3, #205	; 0xcd
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	18e5      	adds	r5, r4, r3
 8009d5a:	2114      	movs	r1, #20
 8009d5c:	0028      	movs	r0, r5
 8009d5e:	f002 fb89 	bl	800c474 <Crc32>
    if( crc == nvm->ClassB.Crc32 )
 8009d62:	23d2      	movs	r3, #210	; 0xd2
 8009d64:	009b      	lsls	r3, r3, #2
 8009d66:	58e3      	ldr	r3, [r4, r3]
 8009d68:	4298      	cmp	r0, r3
 8009d6a:	d000      	beq.n	8009d6e <LoRaMacMibSetRequestConfirm+0x40e>
 8009d6c:	e63a      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
        memcpy1( ( uint8_t* ) &Nvm.ClassB,( uint8_t* ) &nvm->ClassB,
 8009d6e:	2218      	movs	r2, #24
 8009d70:	0029      	movs	r1, r5
 8009d72:	4812      	ldr	r0, [pc, #72]	; (8009dbc <LoRaMacMibSetRequestConfirm+0x45c>)
 8009d74:	f002 fb64 	bl	800c440 <memcpy1>
 8009d78:	e634      	b.n	80099e4 <LoRaMacMibSetRequestConfirm+0x84>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8009d7a:	79a3      	ldrb	r3, [r4, #6]
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	d900      	bls.n	8009d82 <LoRaMacMibSetRequestConfirm+0x422>
 8009d80:	e637      	b.n	80099f2 <LoRaMacMibSetRequestConfirm+0x92>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009d82:	4b06      	ldr	r3, [pc, #24]	; (8009d9c <LoRaMacMibSetRequestConfirm+0x43c>)
 8009d84:	6862      	ldr	r2, [r4, #4]
 8009d86:	33fc      	adds	r3, #252	; 0xfc
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009d88:	6860      	ldr	r0, [r4, #4]
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8009d8a:	611a      	str	r2, [r3, #16]
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8009d8c:	f000 fe62 	bl	800aa54 <LoRaMacCryptoSetLrWanVersion>
 8009d90:	e648      	b.n	8009a24 <LoRaMacMibSetRequestConfirm+0xc4>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8009d92:	0020      	movs	r0, r4
 8009d94:	f000 fb59 	bl	800a44a <LoRaMacMibClassBSetRequestConfirm>
            break;
 8009d98:	e61d      	b.n	80099d6 <LoRaMacMibSetRequestConfirm+0x76>
 8009d9a:	46c0      	nop			; (mov r8, r8)
 8009d9c:	200006f0 	.word	0x200006f0
 8009da0:	20000718 	.word	0x20000718
 8009da4:	20000730 	.word	0x20000730
 8009da8:	00000415 	.word	0x00000415
 8009dac:	000003f2 	.word	0x000003f2
 8009db0:	00000201 	.word	0x00000201
 8009db4:	20000808 	.word	0x20000808
 8009db8:	200008c8 	.word	0x200008c8
 8009dbc:	20000a24 	.word	0x20000a24

08009dc0 <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8009dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009dc2:	b087      	sub	sp, #28
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	466a      	mov	r2, sp
{
 8009dc8:	0006      	movs	r6, r0

    if( mlmeRequest == NULL )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009dca:	2503      	movs	r5, #3
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8009dcc:	8013      	strh	r3, [r2, #0]
    if( mlmeRequest == NULL )
 8009dce:	4298      	cmp	r0, r3
 8009dd0:	d004      	beq.n	8009ddc <LoRaMacMlmeRequest+0x1c>
    }
    if( LoRaMacIsBusy( ) == true )
 8009dd2:	f7fe fd73 	bl	80088bc <LoRaMacIsBusy>
 8009dd6:	2800      	cmp	r0, #0
 8009dd8:	d003      	beq.n	8009de2 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 8009dda:	2501      	movs	r5, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 8009ddc:	0028      	movs	r0, r5
 8009dde:	b007      	add	sp, #28
 8009de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8009de2:	f000 fd2d 	bl	800a840 <LoRaMacConfirmQueueIsFull>
 8009de6:	2800      	cmp	r0, #0
 8009de8:	d1f7      	bne.n	8009dda <LoRaMacMlmeRequest+0x1a>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009dea:	f000 fd23 	bl	800a834 <LoRaMacConfirmQueueGetCnt>
 8009dee:	1e01      	subs	r1, r0, #0
 8009df0:	d103      	bne.n	8009dfa <LoRaMacMlmeRequest+0x3a>
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8009df2:	2214      	movs	r2, #20
 8009df4:	4866      	ldr	r0, [pc, #408]	; (8009f90 <LoRaMacMlmeRequest+0x1d0>)
 8009df6:	f002 fb38 	bl	800c46a <memset1>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	4c65      	ldr	r4, [pc, #404]	; (8009f94 <LoRaMacMlmeRequest+0x1d4>)
 8009dfe:	4b66      	ldr	r3, [pc, #408]	; (8009f98 <LoRaMacMlmeRequest+0x1d8>)
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e00:	4866      	ldr	r0, [pc, #408]	; (8009f9c <LoRaMacMlmeRequest+0x1dc>)
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e02:	54e2      	strb	r2, [r4, r3]
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e04:	2304      	movs	r3, #4
 8009e06:	5c21      	ldrb	r1, [r4, r0]
 8009e08:	430b      	orrs	r3, r1
    queueElement.RestrictCommonReadyToHandle = false;
 8009e0a:	2100      	movs	r1, #0
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8009e0c:	5423      	strb	r3, [r4, r0]
    queueElement.Request = mlmeRequest->Type;
 8009e0e:	7830      	ldrb	r0, [r6, #0]
 8009e10:	ab01      	add	r3, sp, #4
 8009e12:	7018      	strb	r0, [r3, #0]
    switch( mlmeRequest->Type )
 8009e14:	3801      	subs	r0, #1
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e16:	705a      	strb	r2, [r3, #1]
    queueElement.RestrictCommonReadyToHandle = false;
 8009e18:	70d9      	strb	r1, [r3, #3]
    switch( mlmeRequest->Type )
 8009e1a:	280d      	cmp	r0, #13
 8009e1c:	d900      	bls.n	8009e20 <LoRaMacMlmeRequest+0x60>
 8009e1e:	e0b1      	b.n	8009f84 <LoRaMacMlmeRequest+0x1c4>
 8009e20:	f7f6 f984 	bl	800012c <__gnu_thumb1_case_uqi>
 8009e24:	5bb0b007 	.word	0x5bb0b007
 8009e28:	b0b08365 	.word	0xb0b08365
 8009e2c:	a4b08bb0 	.word	0xa4b08bb0
 8009e30:	a08f      	.short	0xa08f
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8009e32:	23d0      	movs	r3, #208	; 0xd0
 8009e34:	009b      	lsls	r3, r3, #2
 8009e36:	58e2      	ldr	r2, [r4, r3]
 8009e38:	2320      	movs	r3, #32
 8009e3a:	0015      	movs	r5, r2
 8009e3c:	401d      	ands	r5, r3
 8009e3e:	421a      	tst	r2, r3
 8009e40:	d1cb      	bne.n	8009dda <LoRaMacMlmeRequest+0x1a>
            ResetMacParameters( );
 8009e42:	f7fd fead 	bl	8007ba0 <ResetMacParameters>
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009e46:	2104      	movs	r1, #4
 8009e48:	4b55      	ldr	r3, [pc, #340]	; (8009fa0 <LoRaMacMlmeRequest+0x1e0>)
 8009e4a:	5671      	ldrsb	r1, [r6, r1]
 8009e4c:	002a      	movs	r2, r5
 8009e4e:	7818      	ldrb	r0, [r3, #0]
 8009e50:	4f54      	ldr	r7, [pc, #336]	; (8009fa4 <LoRaMacMlmeRequest+0x1e4>)
 8009e52:	f001 f9dc 	bl	800b20e <RegionAlternateDr>
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009e56:	2207      	movs	r2, #7
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009e58:	3739      	adds	r7, #57	; 0x39
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009e5a:	ab01      	add	r3, sp, #4
            Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8009e5c:	7038      	strb	r0, [r7, #0]
            SwitchClass( CLASS_A );
 8009e5e:	0028      	movs	r0, r5
            queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8009e60:	705a      	strb	r2, [r3, #1]
            SwitchClass( CLASS_A );
 8009e62:	f7fe f931 	bl	80080c8 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 8009e66:	0023      	movs	r3, r4
 8009e68:	33ff      	adds	r3, #255	; 0xff
 8009e6a:	715d      	strb	r5, [r3, #5]
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 8009e6c:	0023      	movs	r3, r4
 8009e6e:	4a4e      	ldr	r2, [pc, #312]	; (8009fa8 <LoRaMacMlmeRequest+0x1e8>)
 8009e70:	33fc      	adds	r3, #252	; 0xfc
 8009e72:	60da      	str	r2, [r3, #12]
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 8009e74:	0023      	movs	r3, r4
 8009e76:	22ff      	movs	r2, #255	; 0xff
 8009e78:	33fe      	adds	r3, #254	; 0xfe
 8009e7a:	81da      	strh	r2, [r3, #14]
            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 8009e7c:	f7fc ffe6 	bl	8006e4c <SecureElementGetJoinEui>
 8009e80:	4b4a      	ldr	r3, [pc, #296]	; (8009fac <LoRaMacMlmeRequest+0x1ec>)
 8009e82:	0001      	movs	r1, r0
 8009e84:	2208      	movs	r2, #8
 8009e86:	0018      	movs	r0, r3
 8009e88:	f002 fada 	bl	800c440 <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 8009e8c:	f7fc ffc8 	bl	8006e20 <SecureElementGetDevEui>
 8009e90:	4b47      	ldr	r3, [pc, #284]	; (8009fb0 <LoRaMacMlmeRequest+0x1f0>)
 8009e92:	0001      	movs	r1, r0
 8009e94:	2208      	movs	r2, #8
 8009e96:	0018      	movs	r0, r3
 8009e98:	f002 fad2 	bl	800c440 <memcpy1>
    status = ScheduleTx( allowDelayedTx );
 8009e9c:	0028      	movs	r0, r5
 8009e9e:	f7fd ff2f 	bl	8007d00 <ScheduleTx>
 8009ea2:	1e05      	subs	r5, r0, #0
            if( status != LORAMAC_STATUS_OK )
 8009ea4:	d007      	beq.n	8009eb6 <LoRaMacMlmeRequest+0xf6>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8009ea6:	2104      	movs	r1, #4
 8009ea8:	4b3d      	ldr	r3, [pc, #244]	; (8009fa0 <LoRaMacMlmeRequest+0x1e0>)
 8009eaa:	2201      	movs	r2, #1
 8009eac:	5671      	ldrsb	r1, [r6, r1]
 8009eae:	7818      	ldrb	r0, [r3, #0]
 8009eb0:	f001 f9ad 	bl	800b20e <RegionAlternateDr>
 8009eb4:	7038      	strb	r0, [r7, #0]
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8009eb6:	4b3f      	ldr	r3, [pc, #252]	; (8009fb4 <LoRaMacMlmeRequest+0x1f4>)
 8009eb8:	58e3      	ldr	r3, [r4, r3]
 8009eba:	6133      	str	r3, [r6, #16]
    if( status != LORAMAC_STATUS_OK )
 8009ebc:	2d00      	cmp	r5, #0
 8009ebe:	d063      	beq.n	8009f88 <LoRaMacMlmeRequest+0x1c8>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8009ec0:	f000 fcb8 	bl	800a834 <LoRaMacConfirmQueueGetCnt>
 8009ec4:	2800      	cmp	r0, #0
 8009ec6:	d000      	beq.n	8009eca <LoRaMacMlmeRequest+0x10a>
 8009ec8:	e788      	b.n	8009ddc <LoRaMacMlmeRequest+0x1c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009eca:	2204      	movs	r2, #4
            MacCtx.NodeAckRequested = false;
 8009ecc:	4b3a      	ldr	r3, [pc, #232]	; (8009fb8 <LoRaMacMlmeRequest+0x1f8>)
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009ece:	4933      	ldr	r1, [pc, #204]	; (8009f9c <LoRaMacMlmeRequest+0x1dc>)
            MacCtx.NodeAckRequested = false;
 8009ed0:	54e0      	strb	r0, [r4, r3]
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8009ed2:	5c63      	ldrb	r3, [r4, r1]
 8009ed4:	4393      	bics	r3, r2
 8009ed6:	5463      	strb	r3, [r4, r1]
 8009ed8:	e780      	b.n	8009ddc <LoRaMacMlmeRequest+0x1c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009eda:	2200      	movs	r2, #0
 8009edc:	4669      	mov	r1, sp
 8009ede:	2002      	movs	r0, #2
 8009ee0:	f000 face 	bl	800a480 <LoRaMacCommandsAddCmd>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8009ee4:	2513      	movs	r5, #19
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d1e5      	bne.n	8009eb6 <LoRaMacMlmeRequest+0xf6>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009eea:	2500      	movs	r5, #0
            break;
 8009eec:	e7e3      	b.n	8009eb6 <LoRaMacMlmeRequest+0xf6>
    continuousWave.Channel = MacCtx.Channel;
 8009eee:	4b33      	ldr	r3, [pc, #204]	; (8009fbc <LoRaMacMlmeRequest+0x1fc>)
 8009ef0:	a902      	add	r1, sp, #8
 8009ef2:	5ce3      	ldrb	r3, [r4, r3]
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout );
 8009ef4:	88b2      	ldrh	r2, [r6, #4]
    continuousWave.Channel = MacCtx.Channel;
 8009ef6:	700b      	strb	r3, [r1, #0]
    continuousWave.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8009ef8:	4b2a      	ldr	r3, [pc, #168]	; (8009fa4 <LoRaMacMlmeRequest+0x1e4>)
 8009efa:	0018      	movs	r0, r3
 8009efc:	3039      	adds	r0, #57	; 0x39
 8009efe:	7800      	ldrb	r0, [r0, #0]
 8009f00:	7048      	strb	r0, [r1, #1]
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009f02:	0018      	movs	r0, r3
 8009f04:	3038      	adds	r0, #56	; 0x38
 8009f06:	7800      	ldrb	r0, [r0, #0]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009f08:	3340      	adds	r3, #64	; 0x40
    continuousWave.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8009f0a:	7088      	strb	r0, [r1, #2]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009f0c:	6b98      	ldr	r0, [r3, #56]	; 0x38
    continuousWave.Timeout = timeout;
 8009f0e:	818a      	strh	r2, [r1, #12]
    continuousWave.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 8009f10:	6048      	str	r0, [r1, #4]
    continuousWave.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 8009f12:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8009f14:	6088      	str	r0, [r1, #8]
    RegionSetContinuousWave( Nvm.MacGroup2.Region, &continuousWave );
 8009f16:	7818      	ldrb	r0, [r3, #0]
 8009f18:	f001 f993 	bl	800b242 <RegionSetContinuousWave>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009f1c:	22d0      	movs	r2, #208	; 0xd0
 8009f1e:	2302      	movs	r3, #2
 8009f20:	0092      	lsls	r2, r2, #2
 8009f22:	58a1      	ldr	r1, [r4, r2]
 8009f24:	430b      	orrs	r3, r1
 8009f26:	50a3      	str	r3, [r4, r2]
 8009f28:	e7df      	b.n	8009eea <LoRaMacMlmeRequest+0x12a>
    Radio.SetTxContinuousWave( frequency, power, timeout );
 8009f2a:	210c      	movs	r1, #12
 8009f2c:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <LoRaMacMlmeRequest+0x200>)
 8009f2e:	88b2      	ldrh	r2, [r6, #4]
 8009f30:	5671      	ldrsb	r1, [r6, r1]
 8009f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f34:	68b0      	ldr	r0, [r6, #8]
 8009f36:	4798      	blx	r3
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009f38:	e7f0      	b.n	8009f1c <LoRaMacMlmeRequest+0x15c>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	4669      	mov	r1, sp
 8009f3e:	200d      	movs	r0, #13
 8009f40:	e7ce      	b.n	8009ee0 <LoRaMacMlmeRequest+0x120>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009f42:	4b18      	ldr	r3, [pc, #96]	; (8009fa4 <LoRaMacMlmeRequest+0x1e4>)
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8009f44:	2502      	movs	r5, #2
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 8009f46:	33fc      	adds	r3, #252	; 0xfc
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d1b3      	bne.n	8009eb6 <LoRaMacMlmeRequest+0xf6>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8009f4e:	7935      	ldrb	r5, [r6, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 8009f50:	0768      	lsls	r0, r5, #29
 8009f52:	0f40      	lsrs	r0, r0, #29
 8009f54:	f000 fa72 	bl	800a43c <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 8009f58:	466b      	mov	r3, sp
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	4669      	mov	r1, sp
 8009f5e:	2010      	movs	r0, #16
                macCmdPayload[0] = value;
 8009f60:	701d      	strb	r5, [r3, #0]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f62:	e7bd      	b.n	8009ee0 <LoRaMacMlmeRequest+0x120>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8009f64:	2200      	movs	r2, #0
 8009f66:	4669      	mov	r1, sp
 8009f68:	2012      	movs	r0, #18
 8009f6a:	e7b9      	b.n	8009ee0 <LoRaMacMlmeRequest+0x120>
            queueElement.RestrictCommonReadyToHandle = true;
 8009f6c:	70da      	strb	r2, [r3, #3]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009f6e:	f000 fa56 	bl	800a41e <LoRaMacClassBIsAcquisitionInProgress>
                status = LORAMAC_STATUS_BUSY;
 8009f72:	2501      	movs	r5, #1
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 8009f74:	1e07      	subs	r7, r0, #0
 8009f76:	d19e      	bne.n	8009eb6 <LoRaMacMlmeRequest+0xf6>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 8009f78:	f000 fa4e 	bl	800a418 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 8009f7c:	0038      	movs	r0, r7
 8009f7e:	f000 fa50 	bl	800a422 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 8009f82:	e7b2      	b.n	8009eea <LoRaMacMlmeRequest+0x12a>
    switch( mlmeRequest->Type )
 8009f84:	2502      	movs	r5, #2
 8009f86:	e796      	b.n	8009eb6 <LoRaMacMlmeRequest+0xf6>
        LoRaMacConfirmQueueAdd( &queueElement );
 8009f88:	a801      	add	r0, sp, #4
 8009f8a:	f000 fba3 	bl	800a6d4 <LoRaMacConfirmQueueAdd>
 8009f8e:	e725      	b.n	8009ddc <LoRaMacMlmeRequest+0x1c>
 8009f90:	20000e88 	.word	0x20000e88
 8009f94:	20000a3c 	.word	0x20000a3c
 8009f98:	0000044d 	.word	0x0000044d
 8009f9c:	00000481 	.word	0x00000481
 8009fa0:	20000730 	.word	0x20000730
 8009fa4:	200006f0 	.word	0x200006f0
 8009fa8:	20000a3e 	.word	0x20000a3e
 8009fac:	20000b4a 	.word	0x20000b4a
 8009fb0:	20000b52 	.word	0x20000b52
 8009fb4:	00000484 	.word	0x00000484
 8009fb8:	00000414 	.word	0x00000414
 8009fbc:	00000415 	.word	0x00000415
 8009fc0:	0800f64c 	.word	0x0800f64c

08009fc4 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fc8:	b095      	sub	sp, #84	; 0x54
 8009fca:	0006      	movs	r6, r0
 8009fcc:	9107      	str	r1, [sp, #28]
 8009fce:	9300      	str	r3, [sp, #0]
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 8009fd0:	4298      	cmp	r0, r3
 8009fd2:	d103      	bne.n	8009fdc <LoRaMacMcpsRequest+0x18>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8009fd4:	2403      	movs	r4, #3

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 8009fd6:	0020      	movs	r0, r4
 8009fd8:	b015      	add	sp, #84	; 0x54
 8009fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( LoRaMacIsBusy( ) == true )
 8009fdc:	f7fe fc6e 	bl	80088bc <LoRaMacIsBusy>
        return LORAMAC_STATUS_BUSY;
 8009fe0:	2401      	movs	r4, #1
    if( LoRaMacIsBusy( ) == true )
 8009fe2:	1e05      	subs	r5, r0, #0
 8009fe4:	d1f7      	bne.n	8009fd6 <LoRaMacMcpsRequest+0x12>
    macHdr.Value = 0;
 8009fe6:	466b      	mov	r3, sp
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009fe8:	2214      	movs	r2, #20
    macHdr.Value = 0;
 8009fea:	7218      	strb	r0, [r3, #8]
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 8009fec:	0029      	movs	r1, r5
 8009fee:	48b9      	ldr	r0, [pc, #740]	; (800a2d4 <LoRaMacMcpsRequest+0x310>)
 8009ff0:	f002 fa3b 	bl	800c46a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ff4:	4bb8      	ldr	r3, [pc, #736]	; (800a2d8 <LoRaMacMcpsRequest+0x314>)
 8009ff6:	4ab9      	ldr	r2, [pc, #740]	; (800a2dc <LoRaMacMcpsRequest+0x318>)
 8009ff8:	549c      	strb	r4, [r3, r2]
    MacCtx.AckTimeoutRetriesCounter = 1;
 8009ffa:	4ab9      	ldr	r2, [pc, #740]	; (800a2e0 <LoRaMacMcpsRequest+0x31c>)
 8009ffc:	549c      	strb	r4, [r3, r2]
    switch( mcpsRequest->Type )
 8009ffe:	7832      	ldrb	r2, [r6, #0]
 800a000:	42a2      	cmp	r2, r4
 800a002:	d100      	bne.n	800a006 <LoRaMacMcpsRequest+0x42>
 800a004:	e0ba      	b.n	800a17c <LoRaMacMcpsRequest+0x1b8>
 800a006:	2a03      	cmp	r2, #3
 800a008:	d100      	bne.n	800a00c <LoRaMacMcpsRequest+0x48>
 800a00a:	e0c0      	b.n	800a18e <LoRaMacMcpsRequest+0x1ca>
 800a00c:	9503      	str	r5, [sp, #12]
 800a00e:	9501      	str	r5, [sp, #4]
 800a010:	9504      	str	r5, [sp, #16]
 800a012:	2a00      	cmp	r2, #0
 800a014:	d10e      	bne.n	800a034 <LoRaMacMcpsRequest+0x70>
            MacCtx.AckTimeoutRetries = 1;
 800a016:	4ab3      	ldr	r2, [pc, #716]	; (800a2e4 <LoRaMacMcpsRequest+0x320>)
 800a018:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800a01a:	2340      	movs	r3, #64	; 0x40
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a01c:	466a      	mov	r2, sp
 800a01e:	7213      	strb	r3, [r2, #8]
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a020:	7933      	ldrb	r3, [r6, #4]
            readyToSend = true;
 800a022:	2501      	movs	r5, #1
            fPort = mcpsRequest->Req.Confirmed.fPort;
 800a024:	9304      	str	r3, [sp, #16]
            fBuffer = mcpsRequest->Req.Confirmed.fBuffer;
 800a026:	68b3      	ldr	r3, [r6, #8]
 800a028:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Confirmed.fBufferSize;
 800a02a:	89b3      	ldrh	r3, [r6, #12]
 800a02c:	9300      	str	r3, [sp, #0]
            datarate = mcpsRequest->Req.Confirmed.Datarate;
 800a02e:	230e      	movs	r3, #14
 800a030:	56f3      	ldrsb	r3, [r6, r3]
 800a032:	9303      	str	r3, [sp, #12]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a034:	2402      	movs	r4, #2
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a036:	4fac      	ldr	r7, [pc, #688]	; (800a2e8 <LoRaMacMcpsRequest+0x324>)
    getPhy.Attribute = PHY_MIN_TX_DR;
 800a038:	ab08      	add	r3, sp, #32
 800a03a:	751c      	strb	r4, [r3, #20]
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a03c:	003b      	movs	r3, r7
 800a03e:	3374      	adds	r3, #116	; 0x74
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	aa08      	add	r2, sp, #32
 800a044:	7593      	strb	r3, [r2, #22]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800a046:	003b      	movs	r3, r7
 800a048:	3340      	adds	r3, #64	; 0x40
 800a04a:	7818      	ldrb	r0, [r3, #0]
 800a04c:	a90d      	add	r1, sp, #52	; 0x34
 800a04e:	f001 f84b 	bl	800b0e8 <RegionGetPhyParam>
    if( readyToSend == true )
 800a052:	2d00      	cmp	r5, #0
 800a054:	d100      	bne.n	800a058 <LoRaMacMcpsRequest+0x94>
 800a056:	e08c      	b.n	800a172 <LoRaMacMcpsRequest+0x1ae>
        if( Nvm.MacGroup2.AdrCtrlOn == false )
 800a058:	37fe      	adds	r7, #254	; 0xfe
 800a05a:	783b      	ldrb	r3, [r7, #0]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d119      	bne.n	800a094 <LoRaMacMcpsRequest+0xd0>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a060:	9a03      	ldr	r2, [sp, #12]
 800a062:	1c03      	adds	r3, r0, #0
 800a064:	b240      	sxtb	r0, r0
            verify.DatarateParams.Datarate = datarate;
 800a066:	ac09      	add	r4, sp, #36	; 0x24
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800a068:	4290      	cmp	r0, r2
 800a06a:	da01      	bge.n	800a070 <LoRaMacMcpsRequest+0xac>
 800a06c:	466b      	mov	r3, sp
 800a06e:	7b1b      	ldrb	r3, [r3, #12]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a070:	4d9d      	ldr	r5, [pc, #628]	; (800a2e8 <LoRaMacMcpsRequest+0x324>)
            verify.DatarateParams.Datarate = datarate;
 800a072:	7023      	strb	r3, [r4, #0]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a074:	002b      	movs	r3, r5
 800a076:	3374      	adds	r3, #116	; 0x74
 800a078:	781b      	ldrb	r3, [r3, #0]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a07a:	2205      	movs	r2, #5
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a07c:	70a3      	strb	r3, [r4, #2]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800a07e:	002b      	movs	r3, r5
 800a080:	3340      	adds	r3, #64	; 0x40
 800a082:	0021      	movs	r1, r4
 800a084:	7818      	ldrb	r0, [r3, #0]
 800a086:	f001 f849 	bl	800b11c <RegionVerify>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d0a2      	beq.n	8009fd4 <LoRaMacMcpsRequest+0x10>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800a08e:	7823      	ldrb	r3, [r4, #0]
 800a090:	3539      	adds	r5, #57	; 0x39
 800a092:	702b      	strb	r3, [r5, #0]
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a094:	4b94      	ldr	r3, [pc, #592]	; (800a2e8 <LoRaMacMcpsRequest+0x324>)
 800a096:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a098:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800a09a:	9205      	str	r2, [sp, #20]
 800a09c:	ba52      	rev16	r2, r2
 800a09e:	4694      	mov	ip, r2
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a0a0:	001a      	movs	r2, r3
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a0a2:	910a      	str	r1, [sp, #40]	; 0x28
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a0a4:	32ff      	adds	r2, #255	; 0xff
 800a0a6:	7c50      	ldrb	r0, [r2, #17]
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d100      	bne.n	800a0ae <LoRaMacMcpsRequest+0xea>
 800a0ac:	e105      	b.n	800a2ba <LoRaMacMcpsRequest+0x2f6>
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800a0ae:	7812      	ldrb	r2, [r2, #0]
 800a0b0:	2a00      	cmp	r2, #0
 800a0b2:	d100      	bne.n	800a0b6 <LoRaMacMcpsRequest+0xf2>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800a0b4:	631a      	str	r2, [r3, #48]	; 0x30
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a0b6:	001a      	movs	r2, r3
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a0b8:	001c      	movs	r4, r3
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a0ba:	32fe      	adds	r2, #254	; 0xfe
 800a0bc:	7812      	ldrb	r2, [r2, #0]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a0be:	34fc      	adds	r4, #252	; 0xfc
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800a0c0:	9203      	str	r2, [sp, #12]
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a0c2:	7822      	ldrb	r2, [r4, #0]
    fCtrl.Value = 0;
 800a0c4:	2500      	movs	r5, #0
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a0c6:	3a01      	subs	r2, #1
 800a0c8:	4250      	negs	r0, r2
 800a0ca:	4142      	adcs	r2, r0
 800a0cc:	b2d2      	uxtb	r2, r2
 800a0ce:	9206      	str	r2, [sp, #24]
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800a0d0:	001a      	movs	r2, r3
 800a0d2:	323a      	adds	r2, #58	; 0x3a
 800a0d4:	7817      	ldrb	r7, [r2, #0]
    adrNext.Version = Nvm.MacGroup2.Version;
 800a0d6:	6922      	ldr	r2, [r4, #16]
 800a0d8:	a80f      	add	r0, sp, #60	; 0x3c
 800a0da:	920f      	str	r2, [sp, #60]	; 0x3c
    adrNext.UpdateChanMask = true;
 800a0dc:	2201      	movs	r2, #1
 800a0de:	7102      	strb	r2, [r0, #4]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a0e0:	9a03      	ldr	r2, [sp, #12]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a0e2:	4c7d      	ldr	r4, [pc, #500]	; (800a2d8 <LoRaMacMcpsRequest+0x314>)
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800a0e4:	7142      	strb	r2, [r0, #5]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a0e6:	22fd      	movs	r2, #253	; 0xfd
 800a0e8:	0092      	lsls	r2, r2, #2
 800a0ea:	58a2      	ldr	r2, [r4, r2]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800a0ec:	6081      	str	r1, [r0, #8]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800a0ee:	9212      	str	r2, [sp, #72]	; 0x48
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a0f0:	4662      	mov	r2, ip
 800a0f2:	8202      	strh	r2, [r0, #16]
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0f4:	001a      	movs	r2, r3
 800a0f6:	3274      	adds	r2, #116	; 0x74
 800a0f8:	7812      	ldrb	r2, [r2, #0]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a0fa:	3340      	adds	r3, #64	; 0x40
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800a0fc:	7482      	strb	r2, [r0, #18]
    adrNext.Region = Nvm.MacGroup2.Region;
 800a0fe:	781b      	ldrb	r3, [r3, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a100:	4a7a      	ldr	r2, [pc, #488]	; (800a2ec <LoRaMacMcpsRequest+0x328>)
 800a102:	497b      	ldr	r1, [pc, #492]	; (800a2f0 <LoRaMacMcpsRequest+0x32c>)
    adrNext.Region = Nvm.MacGroup2.Region;
 800a104:	74c3      	strb	r3, [r0, #19]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a106:	ab0a      	add	r3, sp, #40	; 0x28
 800a108:	f000 f91c 	bl	800a344 <LoRaMacAdrCalcNext>
 800a10c:	9b06      	ldr	r3, [sp, #24]
 800a10e:	017f      	lsls	r7, r7, #5
 800a110:	011b      	lsls	r3, r3, #4
 800a112:	431f      	orrs	r7, r3
 800a114:	9b03      	ldr	r3, [sp, #12]
 800a116:	0180      	lsls	r0, r0, #6
 800a118:	4307      	orrs	r7, r0
 800a11a:	01db      	lsls	r3, r3, #7
 800a11c:	431f      	orrs	r7, r3
    MacCtx.NodeAckRequested = false;
 800a11e:	4b75      	ldr	r3, [pc, #468]	; (800a2f4 <LoRaMacMcpsRequest+0x330>)
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a120:	9901      	ldr	r1, [sp, #4]
    MacCtx.NodeAckRequested = false;
 800a122:	54e5      	strb	r5, [r4, r3]
        fBufferSize = 0;
 800a124:	9b01      	ldr	r3, [sp, #4]
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a126:	4874      	ldr	r0, [pc, #464]	; (800a2f8 <LoRaMacMcpsRequest+0x334>)
        fBufferSize = 0;
 800a128:	1e5a      	subs	r2, r3, #1
 800a12a:	4193      	sbcs	r3, r2
 800a12c:	9a00      	ldr	r2, [sp, #0]
 800a12e:	425b      	negs	r3, r3
 800a130:	401a      	ands	r2, r3
 800a132:	9200      	str	r2, [sp, #0]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800a134:	9703      	str	r7, [sp, #12]
    MacCtx.PktBufferLen = 0;
 800a136:	8025      	strh	r5, [r4, #0]
    uint32_t fCntUp = 0;
 800a138:	950b      	str	r5, [sp, #44]	; 0x2c
    size_t macCmdsSize = 0;
 800a13a:	950c      	str	r5, [sp, #48]	; 0x30
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800a13c:	f002 f980 	bl	800c440 <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800a140:	466b      	mov	r3, sp
 800a142:	781a      	ldrb	r2, [r3, #0]
 800a144:	4b6d      	ldr	r3, [pc, #436]	; (800a2fc <LoRaMacMcpsRequest+0x338>)
 800a146:	54e2      	strb	r2, [r4, r3]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a148:	466b      	mov	r3, sp
 800a14a:	7a19      	ldrb	r1, [r3, #8]
    switch( macHdr->Bits.MType )
 800a14c:	9b02      	ldr	r3, [sp, #8]
    MacCtx.PktBuffer[0] = macHdr->Value;
 800a14e:	70a1      	strb	r1, [r4, #2]
    switch( macHdr->Bits.MType )
 800a150:	061b      	lsls	r3, r3, #24
 800a152:	0f5b      	lsrs	r3, r3, #29
 800a154:	2b04      	cmp	r3, #4
 800a156:	d02a      	beq.n	800a1ae <LoRaMacMcpsRequest+0x1ea>
 800a158:	2b07      	cmp	r3, #7
 800a15a:	d100      	bne.n	800a15e <LoRaMacMcpsRequest+0x19a>
 800a15c:	e09b      	b.n	800a296 <LoRaMacMcpsRequest+0x2d2>
 800a15e:	2b02      	cmp	r3, #2
 800a160:	d028      	beq.n	800a1b4 <LoRaMacMcpsRequest+0x1f0>
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 800a162:	2402      	movs	r4, #2
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800a164:	4b60      	ldr	r3, [pc, #384]	; (800a2e8 <LoRaMacMcpsRequest+0x324>)
 800a166:	9a05      	ldr	r2, [sp, #20]
 800a168:	871a      	strh	r2, [r3, #56]	; 0x38
            MacCtx.NodeAckRequested = false;
 800a16a:	2200      	movs	r2, #0
 800a16c:	4b5a      	ldr	r3, [pc, #360]	; (800a2d8 <LoRaMacMcpsRequest+0x314>)
 800a16e:	4961      	ldr	r1, [pc, #388]	; (800a2f4 <LoRaMacMcpsRequest+0x330>)
 800a170:	545a      	strb	r2, [r3, r1]
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800a172:	4b59      	ldr	r3, [pc, #356]	; (800a2d8 <LoRaMacMcpsRequest+0x314>)
 800a174:	4a62      	ldr	r2, [pc, #392]	; (800a300 <LoRaMacMcpsRequest+0x33c>)
 800a176:	589b      	ldr	r3, [r3, r2]
 800a178:	6133      	str	r3, [r6, #16]
    return status;
 800a17a:	e72c      	b.n	8009fd6 <LoRaMacMcpsRequest+0x12>
            MacCtx.AckTimeoutRetries = MIN( mcpsRequest->Req.Confirmed.NbTrials, MAX_ACK_RETRIES );
 800a17c:	7bf1      	ldrb	r1, [r6, #15]
 800a17e:	1c0a      	adds	r2, r1, #0
 800a180:	2908      	cmp	r1, #8
 800a182:	d900      	bls.n	800a186 <LoRaMacMcpsRequest+0x1c2>
 800a184:	2208      	movs	r2, #8
 800a186:	4957      	ldr	r1, [pc, #348]	; (800a2e4 <LoRaMacMcpsRequest+0x320>)
 800a188:	545a      	strb	r2, [r3, r1]
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800a18a:	2380      	movs	r3, #128	; 0x80
 800a18c:	e746      	b.n	800a01c <LoRaMacMcpsRequest+0x58>
            MacCtx.AckTimeoutRetries = 1;
 800a18e:	4a55      	ldr	r2, [pc, #340]	; (800a2e4 <LoRaMacMcpsRequest+0x320>)
            readyToSend = true;
 800a190:	0025      	movs	r5, r4
            MacCtx.AckTimeoutRetries = 1;
 800a192:	549c      	strb	r4, [r3, r2]
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800a194:	23e0      	movs	r3, #224	; 0xe0
 800a196:	466a      	mov	r2, sp
 800a198:	7213      	strb	r3, [r2, #8]
            fBuffer = mcpsRequest->Req.Proprietary.fBuffer;
 800a19a:	6873      	ldr	r3, [r6, #4]
 800a19c:	9301      	str	r3, [sp, #4]
            fBufferSize = mcpsRequest->Req.Proprietary.fBufferSize;
 800a19e:	8933      	ldrh	r3, [r6, #8]
 800a1a0:	9300      	str	r3, [sp, #0]
            datarate = mcpsRequest->Req.Proprietary.Datarate;
 800a1a2:	230a      	movs	r3, #10
 800a1a4:	56f3      	ldrsb	r3, [r6, r3]
 800a1a6:	9303      	str	r3, [sp, #12]
    uint8_t fPort = 0;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	9304      	str	r3, [sp, #16]
            break;
 800a1ac:	e742      	b.n	800a034 <LoRaMacMcpsRequest+0x70>
            MacCtx.NodeAckRequested = true;
 800a1ae:	2001      	movs	r0, #1
 800a1b0:	4b50      	ldr	r3, [pc, #320]	; (800a2f4 <LoRaMacMcpsRequest+0x330>)
 800a1b2:	54e0      	strb	r0, [r4, r3]
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a1b4:	0025      	movs	r5, r4
 800a1b6:	2304      	movs	r3, #4
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a1b8:	0027      	movs	r7, r4
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800a1ba:	35ff      	adds	r5, #255	; 0xff
 800a1bc:	716b      	strb	r3, [r5, #5]
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800a1be:	4b51      	ldr	r3, [pc, #324]	; (800a304 <LoRaMacMcpsRequest+0x340>)
 800a1c0:	37fc      	adds	r7, #252	; 0xfc
 800a1c2:	60fb      	str	r3, [r7, #12]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a1c4:	23ff      	movs	r3, #255	; 0xff
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800a1c6:	73a9      	strb	r1, [r5, #14]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a1c8:	9904      	ldr	r1, [sp, #16]
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800a1ca:	736b      	strb	r3, [r5, #13]
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800a1cc:	3329      	adds	r3, #41	; 0x29
 800a1ce:	54e1      	strb	r1, [r4, r3]
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a1d0:	4b45      	ldr	r3, [pc, #276]	; (800a2e8 <LoRaMacMcpsRequest+0x324>)
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a1d2:	a80b      	add	r0, sp, #44	; 0x2c
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800a1d4:	9300      	str	r3, [sp, #0]
 800a1d6:	33cc      	adds	r3, #204	; 0xcc
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	617b      	str	r3, [r7, #20]
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a1dc:	9b03      	ldr	r3, [sp, #12]
 800a1de:	756b      	strb	r3, [r5, #21]
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800a1e0:	2398      	movs	r3, #152	; 0x98
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	54e2      	strb	r2, [r4, r3]
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800a1e6:	4b44      	ldr	r3, [pc, #272]	; (800a2f8 <LoRaMacMcpsRequest+0x334>)
 800a1e8:	633b      	str	r3, [r7, #48]	; 0x30
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a1ea:	f000 fc3b 	bl	800aa64 <LoRaMacCryptoGetFCntUp>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d161      	bne.n	800a2b6 <LoRaMacMcpsRequest+0x2f2>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800a1f2:	0022      	movs	r2, r4
 800a1f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1f6:	32fe      	adds	r2, #254	; 0xfe
 800a1f8:	8313      	strh	r3, [r2, #24]
            MacCtx.McpsConfirm.AckReceived = false;
 800a1fa:	4a43      	ldr	r2, [pc, #268]	; (800a308 <LoRaMacMcpsRequest+0x344>)
 800a1fc:	52a0      	strh	r0, [r4, r2]
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a1fe:	4a43      	ldr	r2, [pc, #268]	; (800a30c <LoRaMacMcpsRequest+0x348>)
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a200:	a80c      	add	r0, sp, #48	; 0x30
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800a202:	50a3      	str	r3, [r4, r2]
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a204:	f000 f9d6 	bl	800a5b4 <LoRaMacCommandsGetSizeSerializedCmds>
 800a208:	2800      	cmp	r0, #0
 800a20a:	d132      	bne.n	800a272 <LoRaMacMcpsRequest+0x2ae>
            if( macCmdsSize > 0 )
 800a20c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d018      	beq.n	800a244 <LoRaMacMcpsRequest+0x280>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800a212:	2039      	movs	r0, #57	; 0x39
 800a214:	9b00      	ldr	r3, [sp, #0]
 800a216:	5618      	ldrsb	r0, [r3, r0]
 800a218:	f7fd fb64 	bl	80078e4 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800a21c:	4b37      	ldr	r3, [pc, #220]	; (800a2fc <LoRaMacMcpsRequest+0x338>)
 800a21e:	5ce3      	ldrb	r3, [r4, r3]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d028      	beq.n	800a276 <LoRaMacMcpsRequest+0x2b2>
 800a224:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a226:	2b0f      	cmp	r3, #15
 800a228:	d81d      	bhi.n	800a266 <LoRaMacMcpsRequest+0x2a2>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800a22a:	200f      	movs	r0, #15
 800a22c:	4a38      	ldr	r2, [pc, #224]	; (800a310 <LoRaMacMcpsRequest+0x34c>)
 800a22e:	a90c      	add	r1, sp, #48	; 0x30
 800a230:	f000 f9cc 	bl	800a5cc <LoRaMacCommandsSerializeCmds>
 800a234:	2800      	cmp	r0, #0
 800a236:	d11c      	bne.n	800a272 <LoRaMacMcpsRequest+0x2ae>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800a238:	220f      	movs	r2, #15
 800a23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a23c:	4013      	ands	r3, r2
 800a23e:	9a03      	ldr	r2, [sp, #12]
 800a240:	431a      	orrs	r2, r3
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800a242:	756a      	strb	r2, [r5, #21]
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800a244:	9807      	ldr	r0, [sp, #28]
 800a246:	f7fd fd5b 	bl	8007d00 <ScheduleTx>
 800a24a:	1e04      	subs	r4, r0, #0
    if( status != LORAMAC_STATUS_OK )
 800a24c:	d18a      	bne.n	800a164 <LoRaMacMcpsRequest+0x1a0>
        Nvm.MacGroup1.SrvAckRequested = false;
 800a24e:	4b26      	ldr	r3, [pc, #152]	; (800a2e8 <LoRaMacMcpsRequest+0x324>)
 800a250:	001a      	movs	r2, r3
 800a252:	323a      	adds	r2, #58	; 0x3a
 800a254:	7010      	strb	r0, [r2, #0]
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800a256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a258:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800a25a:	f000 f987 	bl	800a56c <LoRaMacCommandsRemoveNoneStickyCmds>
 800a25e:	1e04      	subs	r4, r0, #0
 800a260:	d02d      	beq.n	800a2be <LoRaMacMcpsRequest+0x2fa>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a262:	2413      	movs	r4, #19
 800a264:	e781      	b.n	800a16a <LoRaMacMcpsRequest+0x1a6>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a266:	4a2b      	ldr	r2, [pc, #172]	; (800a314 <LoRaMacMcpsRequest+0x350>)
 800a268:	a90c      	add	r1, sp, #48	; 0x30
 800a26a:	f000 f9af 	bl	800a5cc <LoRaMacCommandsSerializeCmds>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d0e8      	beq.n	800a244 <LoRaMacMcpsRequest+0x280>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a272:	2413      	movs	r4, #19
 800a274:	e776      	b.n	800a164 <LoRaMacMcpsRequest+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800a276:	4d27      	ldr	r5, [pc, #156]	; (800a314 <LoRaMacMcpsRequest+0x350>)
 800a278:	a90c      	add	r1, sp, #48	; 0x30
 800a27a:	002a      	movs	r2, r5
 800a27c:	f000 f9a6 	bl	800a5cc <LoRaMacCommandsSerializeCmds>
 800a280:	2800      	cmp	r0, #0
 800a282:	d1f6      	bne.n	800a272 <LoRaMacMcpsRequest+0x2ae>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a284:	2394      	movs	r3, #148	; 0x94
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a286:	2298      	movs	r2, #152	; 0x98
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800a288:	005b      	lsls	r3, r3, #1
 800a28a:	54e0      	strb	r0, [r4, r3]
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a28c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a28e:	0052      	lsls	r2, r2, #1
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800a290:	633d      	str	r5, [r7, #48]	; 0x30
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800a292:	54a3      	strb	r3, [r4, r2]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a294:	e7d6      	b.n	800a244 <LoRaMacMcpsRequest+0x280>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800a296:	9b01      	ldr	r3, [sp, #4]
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d0d3      	beq.n	800a244 <LoRaMacMcpsRequest+0x280>
 800a29c:	2a00      	cmp	r2, #0
 800a29e:	d0d1      	beq.n	800a244 <LoRaMacMcpsRequest+0x280>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800a2a0:	466b      	mov	r3, sp
 800a2a2:	481d      	ldr	r0, [pc, #116]	; (800a318 <LoRaMacMcpsRequest+0x354>)
 800a2a4:	781a      	ldrb	r2, [r3, #0]
 800a2a6:	9901      	ldr	r1, [sp, #4]
 800a2a8:	f002 f8ca 	bl	800c440 <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800a2ac:	4b13      	ldr	r3, [pc, #76]	; (800a2fc <LoRaMacMcpsRequest+0x338>)
 800a2ae:	5ce3      	ldrb	r3, [r4, r3]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	8023      	strh	r3, [r4, #0]
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800a2b4:	e7c6      	b.n	800a244 <LoRaMacMcpsRequest+0x280>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a2b6:	2412      	movs	r4, #18
 800a2b8:	e754      	b.n	800a164 <LoRaMacMcpsRequest+0x1a0>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800a2ba:	2407      	movs	r4, #7
 800a2bc:	e755      	b.n	800a16a <LoRaMacMcpsRequest+0x1a6>
            MacCtx.McpsConfirm.McpsRequest = mcpsRequest->Type;
 800a2be:	2287      	movs	r2, #135	; 0x87
 800a2c0:	4b05      	ldr	r3, [pc, #20]	; (800a2d8 <LoRaMacMcpsRequest+0x314>)
 800a2c2:	7831      	ldrb	r1, [r6, #0]
 800a2c4:	00d2      	lsls	r2, r2, #3
 800a2c6:	5499      	strb	r1, [r3, r2]
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	4914      	ldr	r1, [pc, #80]	; (800a31c <LoRaMacMcpsRequest+0x358>)
 800a2cc:	5c58      	ldrb	r0, [r3, r1]
 800a2ce:	4302      	orrs	r2, r0
 800a2d0:	e74e      	b.n	800a170 <LoRaMacMcpsRequest+0x1ac>
 800a2d2:	46c0      	nop			; (mov r8, r8)
 800a2d4:	20000e74 	.word	0x20000e74
 800a2d8:	20000a3c 	.word	0x20000a3c
 800a2dc:	00000439 	.word	0x00000439
 800a2e0:	00000412 	.word	0x00000412
 800a2e4:	00000411 	.word	0x00000411
 800a2e8:	200006f0 	.word	0x200006f0
 800a2ec:	20000728 	.word	0x20000728
 800a2f0:	20000729 	.word	0x20000729
 800a2f4:	00000414 	.word	0x00000414
 800a2f8:	20000b74 	.word	0x20000b74
 800a2fc:	00000237 	.word	0x00000237
 800a300:	00000484 	.word	0x00000484
 800a304:	20000a3e 	.word	0x20000a3e
 800a308:	0000043c 	.word	0x0000043c
 800a30c:	00000444 	.word	0x00000444
 800a310:	20000b54 	.word	0x20000b54
 800a314:	20000ec4 	.word	0x20000ec4
 800a318:	20000a3f 	.word	0x20000a3f
 800a31c:	00000481 	.word	0x00000481

0800a320 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800a320:	b537      	push	{r0, r1, r2, r4, r5, lr}
    VerifyParams_t verify;

    verify.DutyCycle = enable;

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a322:	4c07      	ldr	r4, [pc, #28]	; (800a340 <LoRaMacTestSetDutyCycleOn+0x20>)
    verify.DutyCycle = enable;
 800a324:	a901      	add	r1, sp, #4
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a326:	0023      	movs	r3, r4
    verify.DutyCycle = enable;
 800a328:	7008      	strb	r0, [r1, #0]
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a32a:	3340      	adds	r3, #64	; 0x40
{
 800a32c:	0005      	movs	r5, r0
    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800a32e:	220f      	movs	r2, #15
 800a330:	7818      	ldrb	r0, [r3, #0]
 800a332:	f000 fef3 	bl	800b11c <RegionVerify>
 800a336:	2800      	cmp	r0, #0
 800a338:	d001      	beq.n	800a33e <LoRaMacTestSetDutyCycleOn+0x1e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800a33a:	34ff      	adds	r4, #255	; 0xff
 800a33c:	7065      	strb	r5, [r4, #1]
    }
}
 800a33e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800a340:	200006f0 	.word	0x200006f0

0800a344 <LoRaMacAdrCalcNext>:
 * \param [OUT] adrAckCounter The calculated ADR acknowledgement counter.
 *
 * \retval Returns true, if an ADR request should be performed.
 */
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut, uint32_t* adrAckCounter )
{
 800a344:	b5f0      	push	{r4, r5, r6, r7, lr}
    if( adrNext->Version.Fields.Minor == 0 )
    {
        return CalcNextV10X( adrNext, drOut, txPowOut, adrAckCounter );
    }
    return false;
 800a346:	2500      	movs	r5, #0
{
 800a348:	b08d      	sub	sp, #52	; 0x34
 800a34a:	9104      	str	r1, [sp, #16]
 800a34c:	9205      	str	r2, [sp, #20]
 800a34e:	001e      	movs	r6, r3
    if( adrNext->Version.Fields.Minor == 0 )
 800a350:	7883      	ldrb	r3, [r0, #2]
{
 800a352:	0004      	movs	r4, r0
    if( adrNext->Version.Fields.Minor == 0 )
 800a354:	42ab      	cmp	r3, r5
 800a356:	d12b      	bne.n	800a3b0 <LoRaMacAdrCalcNext+0x6c>
    int8_t datarate = adrNext->Datarate;
 800a358:	2310      	movs	r3, #16
 800a35a:	56c3      	ldrsb	r3, [r0, r3]
 800a35c:	9301      	str	r3, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800a35e:	2311      	movs	r3, #17
 800a360:	56c3      	ldrsb	r3, [r0, r3]
    int8_t datarate = adrNext->Datarate;
 800a362:	9f01      	ldr	r7, [sp, #4]
    int8_t txPower = adrNext->TxPower;
 800a364:	9303      	str	r3, [sp, #12]
    *adrAckCounter = adrNext->AdrAckCounter;
 800a366:	6883      	ldr	r3, [r0, #8]
 800a368:	6033      	str	r3, [r6, #0]
    if( adrNext->AdrEnabled == true )
 800a36a:	7945      	ldrb	r5, [r0, #5]
 800a36c:	2d00      	cmp	r5, #0
 800a36e:	d01a      	beq.n	800a3a6 <LoRaMacAdrCalcNext+0x62>
        getPhy.Attribute = PHY_MIN_TX_DR;
 800a370:	2302      	movs	r3, #2
 800a372:	aa06      	add	r2, sp, #24
 800a374:	7113      	strb	r3, [r2, #4]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a376:	7c83      	ldrb	r3, [r0, #18]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a378:	a907      	add	r1, sp, #28
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a37a:	7193      	strb	r3, [r2, #6]
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a37c:	7cc0      	ldrb	r0, [r0, #19]
 800a37e:	f000 feb3 	bl	800b0e8 <RegionGetPhyParam>
        minTxDatarate = phyParam.Value;
 800a382:	b243      	sxtb	r3, r0
 800a384:	9302      	str	r3, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800a386:	466b      	mov	r3, sp
 800a388:	9a02      	ldr	r2, [sp, #8]
 800a38a:	791f      	ldrb	r7, [r3, #4]
 800a38c:	9b01      	ldr	r3, [sp, #4]
 800a38e:	4293      	cmp	r3, r2
 800a390:	da01      	bge.n	800a396 <LoRaMacAdrCalcNext+0x52>
 800a392:	466b      	mov	r3, sp
 800a394:	7a1f      	ldrb	r7, [r3, #8]
        if( datarate == minTxDatarate )
 800a396:	9b01      	ldr	r3, [sp, #4]
 800a398:	9a02      	ldr	r2, [sp, #8]
        datarate = MAX( datarate, minTxDatarate );
 800a39a:	b27f      	sxtb	r7, r7
        if( datarate == minTxDatarate )
 800a39c:	4293      	cmp	r3, r2
 800a39e:	dc0a      	bgt.n	800a3b6 <LoRaMacAdrCalcNext+0x72>
            *adrAckCounter = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	6033      	str	r3, [r6, #0]
                        adrAckReq = false;
 800a3a4:	2500      	movs	r5, #0
    *drOut = datarate;
 800a3a6:	9b04      	ldr	r3, [sp, #16]
    *txPowOut = txPower;
 800a3a8:	9a03      	ldr	r2, [sp, #12]
    *drOut = datarate;
 800a3aa:	701f      	strb	r7, [r3, #0]
    *txPowOut = txPower;
 800a3ac:	9b05      	ldr	r3, [sp, #20]
 800a3ae:	701a      	strb	r2, [r3, #0]
}
 800a3b0:	0028      	movs	r0, r5
 800a3b2:	b00d      	add	sp, #52	; 0x34
 800a3b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a3b6:	2500      	movs	r5, #0
 800a3b8:	89a1      	ldrh	r1, [r4, #12]
 800a3ba:	68a2      	ldr	r2, [r4, #8]
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a3bc:	89e3      	ldrh	r3, [r4, #14]
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a3be:	428a      	cmp	r2, r1
 800a3c0:	416d      	adcs	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a3c2:	185b      	adds	r3, r3, r1
            if( adrNext->AdrAckCounter >=  adrNext->AdrAckLimit )
 800a3c4:	b2ed      	uxtb	r5, r5
            if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d3ed      	bcc.n	800a3a6 <LoRaMacAdrCalcNext+0x62>
                getPhy.Attribute = PHY_MAX_TX_POWER;
 800a3ca:	2308      	movs	r3, #8
 800a3cc:	ae07      	add	r6, sp, #28
 800a3ce:	7033      	strb	r3, [r6, #0]
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a3d0:	0031      	movs	r1, r6
 800a3d2:	7ce0      	ldrb	r0, [r4, #19]
 800a3d4:	f000 fe88 	bl	800b0e8 <RegionGetPhyParam>
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a3d8:	89e1      	ldrh	r1, [r4, #14]
                txPower = phyParam.Value;
 800a3da:	b243      	sxtb	r3, r0
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a3dc:	68a0      	ldr	r0, [r4, #8]
                txPower = phyParam.Value;
 800a3de:	9303      	str	r3, [sp, #12]
                if( ( adrNext->AdrAckCounter % adrNext->AdrAckDelay ) == 1 )
 800a3e0:	f7f5 ff48 	bl	8000274 <__aeabi_uidivmod>
 800a3e4:	2901      	cmp	r1, #1
 800a3e6:	d1de      	bne.n	800a3a6 <LoRaMacAdrCalcNext+0x62>
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a3e8:	2322      	movs	r3, #34	; 0x22
                    getPhy.Datarate = datarate;
 800a3ea:	7077      	strb	r7, [r6, #1]
                    getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800a3ec:	7033      	strb	r3, [r6, #0]
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a3ee:	7ca3      	ldrb	r3, [r4, #18]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a3f0:	0031      	movs	r1, r6
                    getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800a3f2:	70b3      	strb	r3, [r6, #2]
                    phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800a3f4:	7ce0      	ldrb	r0, [r4, #19]
 800a3f6:	f000 fe77 	bl	800b0e8 <RegionGetPhyParam>
                    if( datarate == minTxDatarate )
 800a3fa:	9b02      	ldr	r3, [sp, #8]
                    datarate = phyParam.Value;
 800a3fc:	b247      	sxtb	r7, r0
                    if( datarate == minTxDatarate )
 800a3fe:	42bb      	cmp	r3, r7
 800a400:	d1d1      	bne.n	800a3a6 <LoRaMacAdrCalcNext+0x62>
                        if( adrNext->UpdateChanMask == true )
 800a402:	7925      	ldrb	r5, [r4, #4]
 800a404:	2d00      	cmp	r5, #0
 800a406:	d0ce      	beq.n	800a3a6 <LoRaMacAdrCalcNext+0x62>
                            params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800a408:	2302      	movs	r3, #2
 800a40a:	a909      	add	r1, sp, #36	; 0x24
 800a40c:	720b      	strb	r3, [r1, #8]
                            RegionInitDefaults( adrNext->Region, &params );
 800a40e:	7ce0      	ldrb	r0, [r4, #19]
 800a410:	f000 fe7d 	bl	800b10e <RegionInitDefaults>
 800a414:	e7c6      	b.n	800a3a4 <LoRaMacAdrCalcNext+0x60>

0800a416 <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a416:	4770      	bx	lr

0800a418 <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a418:	4770      	bx	lr

0800a41a <LoRaMacClassBSetPingSlotState>:
 800a41a:	4770      	bx	lr

0800a41c <LoRaMacClassBSetMulticastSlotState>:
 800a41c:	4770      	bx	lr

0800a41e <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a41e:	2000      	movs	r0, #0
 800a420:	4770      	bx	lr

0800a422 <LoRaMacClassBBeaconTimerEvent>:
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a422:	4770      	bx	lr

0800a424 <LoRaMacClassBPingSlotTimerEvent>:
 800a424:	4770      	bx	lr

0800a426 <LoRaMacClassBMulticastSlotTimerEvent>:
 800a426:	4770      	bx	lr

0800a428 <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a428:	2000      	movs	r0, #0
 800a42a:	4770      	bx	lr

0800a42c <LoRaMacClassBIsBeaconExpected>:
 800a42c:	2000      	movs	r0, #0
 800a42e:	4770      	bx	lr

0800a430 <LoRaMacClassBIsPingExpected>:
 800a430:	2000      	movs	r0, #0
 800a432:	4770      	bx	lr

0800a434 <LoRaMacClassBIsMulticastExpected>:
 800a434:	2000      	movs	r0, #0
 800a436:	4770      	bx	lr

0800a438 <LoRaMacClassBIsBeaconModeActive>:
 800a438:	2000      	movs	r0, #0
 800a43a:	4770      	bx	lr

0800a43c <LoRaMacClassBSetPingSlotInfo>:
 800a43c:	4770      	bx	lr

0800a43e <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a43e:	4770      	bx	lr

0800a440 <LoRaMacClassBResumeBeaconing>:
 800a440:	4770      	bx	lr

0800a442 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a442:	2002      	movs	r0, #2
 800a444:	4770      	bx	lr

0800a446 <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a446:	2002      	movs	r0, #2
 800a448:	4770      	bx	lr

0800a44a <LoRaMacMibClassBSetRequestConfirm>:
 800a44a:	2002      	movs	r0, #2
 800a44c:	4770      	bx	lr

0800a44e <LoRaMacClassBPingSlotInfoAns>:
 800a44e:	4770      	bx	lr

0800a450 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a450:	2000      	movs	r0, #0
 800a452:	4770      	bx	lr

0800a454 <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a454:	4770      	bx	lr

0800a456 <LoRaMacClassBDeviceTimeAns>:
 800a456:	4770      	bx	lr

0800a458 <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a458:	2000      	movs	r0, #0
 800a45a:	4770      	bx	lr

0800a45c <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800a45c:	2000      	movs	r0, #0
 800a45e:	4770      	bx	lr

0800a460 <LoRaMacClassBStopRxSlots>:
 800a460:	4770      	bx	lr

0800a462 <LoRaMacClassBProcess>:
 800a462:	4770      	bx	lr

0800a464 <LoRaMacCommandsInit>:
            return false;
    }
}

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800a464:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800a466:	4c05      	ldr	r4, [pc, #20]	; (800a47c <LoRaMacCommandsInit+0x18>)
 800a468:	22fc      	movs	r2, #252	; 0xfc
 800a46a:	0020      	movs	r0, r4
 800a46c:	2100      	movs	r1, #0
 800a46e:	f001 fffc 	bl	800c46a <memset1>
    list->First = NULL;
 800a472:	2000      	movs	r0, #0
 800a474:	6020      	str	r0, [r4, #0]
    list->Last = NULL;
 800a476:	6060      	str	r0, [r4, #4]

    LinkedListInit( &CommandsCtx.MacCommandList );

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a478:	bd10      	pop	{r4, pc}
 800a47a:	46c0      	nop			; (mov r8, r8)
 800a47c:	20000f44 	.word	0x20000f44

0800a480 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 800a480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a482:	0015      	movs	r5, r2
    if( payload == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a484:	2701      	movs	r7, #1
{
 800a486:	9001      	str	r0, [sp, #4]
    if( payload == NULL )
 800a488:	2900      	cmp	r1, #0
 800a48a:	d038      	beq.n	800a4fe <LoRaMacCommandsAddCmd+0x7e>
 800a48c:	2400      	movs	r4, #0
 800a48e:	4a20      	ldr	r2, [pc, #128]	; (800a510 <LoRaMacCommandsAddCmd+0x90>)
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800a490:	0123      	lsls	r3, r4, #4
 800a492:	0010      	movs	r0, r2
 800a494:	469c      	mov	ip, r3
 800a496:	0013      	movs	r3, r2
 800a498:	3010      	adds	r0, #16
        if( mem[size] != 0x00 )
 800a49a:	781f      	ldrb	r7, [r3, #0]
 800a49c:	2f00      	cmp	r7, #0
 800a49e:	d130      	bne.n	800a502 <LoRaMacCommandsAddCmd+0x82>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	4283      	cmp	r3, r0
 800a4a4:	d1f9      	bne.n	800a49a <LoRaMacCommandsAddCmd+0x1a>
    if( list->First == NULL )
 800a4a6:	4b1b      	ldr	r3, [pc, #108]	; (800a514 <LoRaMacCommandsAddCmd+0x94>)
 800a4a8:	6818      	ldr	r0, [r3, #0]
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d100      	bne.n	800a4b0 <LoRaMacCommandsAddCmd+0x30>
        list->First = element;
 800a4ae:	601a      	str	r2, [r3, #0]
    if( list->Last )
 800a4b0:	6858      	ldr	r0, [r3, #4]
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d000      	beq.n	800a4b8 <LoRaMacCommandsAddCmd+0x38>
        list->Last->Next = element;
 800a4b6:	6002      	str	r2, [r0, #0]
    element->Next = NULL;
 800a4b8:	2600      	movs	r6, #0
    list->Last = element;
 800a4ba:	605a      	str	r2, [r3, #4]
    element->Next = NULL;
 800a4bc:	0120      	lsls	r0, r4, #4
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800a4be:	9a01      	ldr	r2, [sp, #4]
    element->Next = NULL;
 800a4c0:	1818      	adds	r0, r3, r0
    newCmd->CID = cid;
 800a4c2:	7302      	strb	r2, [r0, #12]
    element->Next = NULL;
 800a4c4:	6086      	str	r6, [r0, #8]
    newCmd->PayloadSize = payloadSize;
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a4c6:	4660      	mov	r0, ip
    newCmd->PayloadSize = payloadSize;
 800a4c8:	3401      	adds	r4, #1
 800a4ca:	0122      	lsls	r2, r4, #4
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a4cc:	300d      	adds	r0, #13
    newCmd->PayloadSize = payloadSize;
 800a4ce:	509d      	str	r5, [r3, r2]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800a4d0:	1818      	adds	r0, r3, r0
 800a4d2:	b2aa      	uxth	r2, r5
 800a4d4:	f001 ffb4 	bl	800c440 <memcpy1>
    switch( cid )
 800a4d8:	9b01      	ldr	r3, [sp, #4]
            return true;
 800a4da:	2201      	movs	r2, #1
    switch( cid )
 800a4dc:	2b05      	cmp	r3, #5
 800a4de:	d005      	beq.n	800a4ec <LoRaMacCommandsAddCmd+0x6c>
 800a4e0:	3b08      	subs	r3, #8
 800a4e2:	1892      	adds	r2, r2, r2
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	4176      	adcs	r6, r6
 800a4ea:	b2f2      	uxtb	r2, r6
    newCmd->IsSticky = IsSticky( cid );
 800a4ec:	4b09      	ldr	r3, [pc, #36]	; (800a514 <LoRaMacCommandsAddCmd+0x94>)
 800a4ee:	0124      	lsls	r4, r4, #4
 800a4f0:	191c      	adds	r4, r3, r4

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a4f2:	33f8      	adds	r3, #248	; 0xf8
    newCmd->IsSticky = IsSticky( cid );
 800a4f4:	7122      	strb	r2, [r4, #4]
    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800a4f6:	681a      	ldr	r2, [r3, #0]
 800a4f8:	3201      	adds	r2, #1
 800a4fa:	1952      	adds	r2, r2, r5
 800a4fc:	601a      	str	r2, [r3, #0]

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a4fe:	0038      	movs	r0, r7
 800a500:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( itr == NUM_OF_MAC_COMMANDS )
 800a502:	3401      	adds	r4, #1
 800a504:	0002      	movs	r2, r0
 800a506:	2c0f      	cmp	r4, #15
 800a508:	d1c2      	bne.n	800a490 <LoRaMacCommandsAddCmd+0x10>
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800a50a:	2702      	movs	r7, #2
 800a50c:	e7f7      	b.n	800a4fe <LoRaMacCommandsAddCmd+0x7e>
 800a50e:	46c0      	nop			; (mov r8, r8)
 800a510:	20000f4c 	.word	0x20000f4c
 800a514:	20000f44 	.word	0x20000f44

0800a518 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 800a518:	b510      	push	{r4, lr}
    if( macCmd == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a51a:	2401      	movs	r4, #1
    if( macCmd == NULL )
 800a51c:	2800      	cmp	r0, #0
 800a51e:	d021      	beq.n	800a564 <LoRaMacCommandsRemoveCmd+0x4c>
    curElement = list->First;
 800a520:	4b11      	ldr	r3, [pc, #68]	; (800a568 <LoRaMacCommandsRemoveCmd+0x50>)
 800a522:	681a      	ldr	r2, [r3, #0]
    if( element != curElement )
 800a524:	4290      	cmp	r0, r2
 800a526:	d104      	bne.n	800a532 <LoRaMacCommandsRemoveCmd+0x1a>
        list->First = element->Next;
 800a528:	6802      	ldr	r2, [r0, #0]
 800a52a:	601a      	str	r2, [r3, #0]
 800a52c:	2200      	movs	r2, #0
 800a52e:	e005      	b.n	800a53c <LoRaMacCommandsRemoveCmd+0x24>
 800a530:	000a      	movs	r2, r1
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800a532:	2a00      	cmp	r2, #0
 800a534:	d002      	beq.n	800a53c <LoRaMacCommandsRemoveCmd+0x24>
 800a536:	6811      	ldr	r1, [r2, #0]
 800a538:	4288      	cmp	r0, r1
 800a53a:	d1f9      	bne.n	800a530 <LoRaMacCommandsRemoveCmd+0x18>
    if( list->Last == element )
 800a53c:	6859      	ldr	r1, [r3, #4]
 800a53e:	4288      	cmp	r0, r1
 800a540:	d100      	bne.n	800a544 <LoRaMacCommandsRemoveCmd+0x2c>
        list->Last = PrevElement;
 800a542:	605a      	str	r2, [r3, #4]
    if( PrevElement != NULL )
 800a544:	2a00      	cmp	r2, #0
 800a546:	d001      	beq.n	800a54c <LoRaMacCommandsRemoveCmd+0x34>
        PrevElement->Next = element->Next;
 800a548:	6801      	ldr	r1, [r0, #0]
 800a54a:	6011      	str	r1, [r2, #0]
    element->Next = NULL;
 800a54c:	2400      	movs	r4, #0
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a54e:	33f8      	adds	r3, #248	; 0xf8
 800a550:	681a      	ldr	r2, [r3, #0]
 800a552:	6881      	ldr	r1, [r0, #8]
 800a554:	3a01      	subs	r2, #1
 800a556:	1a52      	subs	r2, r2, r1
    element->Next = NULL;
 800a558:	6004      	str	r4, [r0, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a55a:	0021      	movs	r1, r4
    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800a55c:	601a      	str	r2, [r3, #0]
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800a55e:	2210      	movs	r2, #16
 800a560:	f001 ff83 	bl	800c46a <memset1>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a564:	0020      	movs	r0, r4
 800a566:	bd10      	pop	{r4, pc}
 800a568:	20000f44 	.word	0x20000f44

0800a56c <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 800a56c:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a56e:	4b06      	ldr	r3, [pc, #24]	; (800a588 <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>)
 800a570:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a572:	2800      	cmp	r0, #0
 800a574:	d100      	bne.n	800a578 <LoRaMacCommandsRemoveNoneStickyCmds+0xc>
            curElement = curElement->Next;
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a576:	bd10      	pop	{r4, pc}
        if( curElement->IsSticky == false )
 800a578:	7b03      	ldrb	r3, [r0, #12]
            nexElement = curElement->Next;
 800a57a:	6804      	ldr	r4, [r0, #0]
        if( curElement->IsSticky == false )
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d101      	bne.n	800a584 <LoRaMacCommandsRemoveNoneStickyCmds+0x18>
            LoRaMacCommandsRemoveCmd( curElement );
 800a580:	f7ff ffca 	bl	800a518 <LoRaMacCommandsRemoveCmd>
{
 800a584:	0020      	movs	r0, r4
 800a586:	e7f4      	b.n	800a572 <LoRaMacCommandsRemoveNoneStickyCmds+0x6>
 800a588:	20000f44 	.word	0x20000f44

0800a58c <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800a58c:	b510      	push	{r4, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800a58e:	4b08      	ldr	r3, [pc, #32]	; (800a5b0 <LoRaMacCommandsRemoveStickyAnsCmds+0x24>)
 800a590:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a592:	2800      	cmp	r0, #0
 800a594:	d100      	bne.n	800a598 <LoRaMacCommandsRemoveStickyAnsCmds+0xc>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a596:	bd10      	pop	{r4, pc}
        if( IsSticky( curElement->CID ) == true )
 800a598:	7903      	ldrb	r3, [r0, #4]
        nexElement = curElement->Next;
 800a59a:	6804      	ldr	r4, [r0, #0]
    switch( cid )
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	d002      	beq.n	800a5a6 <LoRaMacCommandsRemoveStickyAnsCmds+0x1a>
 800a5a0:	3b08      	subs	r3, #8
 800a5a2:	2b02      	cmp	r3, #2
 800a5a4:	d801      	bhi.n	800a5aa <LoRaMacCommandsRemoveStickyAnsCmds+0x1e>
            LoRaMacCommandsRemoveCmd( curElement );
 800a5a6:	f7ff ffb7 	bl	800a518 <LoRaMacCommandsRemoveCmd>
{
 800a5aa:	0020      	movs	r0, r4
 800a5ac:	e7f1      	b.n	800a592 <LoRaMacCommandsRemoveStickyAnsCmds+0x6>
 800a5ae:	46c0      	nop			; (mov r8, r8)
 800a5b0:	20000f44 	.word	0x20000f44

0800a5b4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 800a5b4:	0003      	movs	r3, r0
    if( size == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a5b6:	2001      	movs	r0, #1
    if( size == NULL )
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d004      	beq.n	800a5c6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    }
    *size = CommandsCtx.SerializedCmdsSize;
    return LORAMAC_COMMANDS_SUCCESS;
 800a5bc:	2000      	movs	r0, #0
    *size = CommandsCtx.SerializedCmdsSize;
 800a5be:	4a02      	ldr	r2, [pc, #8]	; (800a5c8 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800a5c0:	32f8      	adds	r2, #248	; 0xf8
 800a5c2:	6812      	ldr	r2, [r2, #0]
 800a5c4:	601a      	str	r2, [r3, #0]
}
 800a5c6:	4770      	bx	lr
 800a5c8:	20000f44 	.word	0x20000f44

0800a5cc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800a5cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5ce:	000f      	movs	r7, r1
 800a5d0:	9001      	str	r0, [sp, #4]
 800a5d2:	0016      	movs	r6, r2
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a5d4:	2001      	movs	r0, #1
    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800a5d6:	2a00      	cmp	r2, #0
 800a5d8:	d00a      	beq.n	800a5f0 <LoRaMacCommandsSerializeCmds+0x24>
 800a5da:	2900      	cmp	r1, #0
 800a5dc:	d008      	beq.n	800a5f0 <LoRaMacCommandsSerializeCmds+0x24>
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800a5de:	4b13      	ldr	r3, [pc, #76]	; (800a62c <LoRaMacCommandsSerializeCmds+0x60>)
 800a5e0:	681c      	ldr	r4, [r3, #0]
    uint8_t itr = 0;
 800a5e2:	2300      	movs	r3, #0
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800a5e4:	2c00      	cmp	r4, #0
 800a5e6:	d104      	bne.n	800a5f2 <LoRaMacCommandsSerializeCmds+0x26>
        LoRaMacCommandsRemoveCmd( curElement );
        curElement = nextElement;
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800a5e8:	0038      	movs	r0, r7
 800a5ea:	f7ff ffe3 	bl	800a5b4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800a5ee:	2000      	movs	r0, #0
}
 800a5f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800a5f2:	9a01      	ldr	r2, [sp, #4]
 800a5f4:	1ad1      	subs	r1, r2, r3
 800a5f6:	68a2      	ldr	r2, [r4, #8]
 800a5f8:	3201      	adds	r2, #1
 800a5fa:	4291      	cmp	r1, r2
 800a5fc:	d30e      	bcc.n	800a61c <LoRaMacCommandsSerializeCmds+0x50>
            buffer[itr++] = curElement->CID;
 800a5fe:	7922      	ldrb	r2, [r4, #4]
 800a600:	1c5d      	adds	r5, r3, #1
 800a602:	54f2      	strb	r2, [r6, r3]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a604:	68a2      	ldr	r2, [r4, #8]
            buffer[itr++] = curElement->CID;
 800a606:	b2ed      	uxtb	r5, r5
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800a608:	1d61      	adds	r1, r4, #5
 800a60a:	b292      	uxth	r2, r2
 800a60c:	1970      	adds	r0, r6, r5
 800a60e:	f001 ff17 	bl	800c440 <memcpy1>
            itr += curElement->PayloadSize;
 800a612:	68a3      	ldr	r3, [r4, #8]
        curElement = curElement->Next;
 800a614:	6824      	ldr	r4, [r4, #0]
            itr += curElement->PayloadSize;
 800a616:	18eb      	adds	r3, r5, r3
 800a618:	b2db      	uxtb	r3, r3
        curElement = curElement->Next;
 800a61a:	e7e3      	b.n	800a5e4 <LoRaMacCommandsSerializeCmds+0x18>
        nextElement = curElement->Next;
 800a61c:	0020      	movs	r0, r4
 800a61e:	6824      	ldr	r4, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800a620:	f7ff ff7a 	bl	800a518 <LoRaMacCommandsRemoveCmd>
    while( curElement != NULL )
 800a624:	2c00      	cmp	r4, #0
 800a626:	d1f9      	bne.n	800a61c <LoRaMacCommandsSerializeCmds+0x50>
 800a628:	e7de      	b.n	800a5e8 <LoRaMacCommandsSerializeCmds+0x1c>
 800a62a:	46c0      	nop			; (mov r8, r8)
 800a62c:	20000f44 	.word	0x20000f44

0800a630 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 800a630:	0002      	movs	r2, r0
    if( cmdsPending == NULL )
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 800a632:	2001      	movs	r0, #1
    if( cmdsPending == NULL )
 800a634:	2a00      	cmp	r2, #0
 800a636:	d00b      	beq.n	800a650 <LoRaMacCommandsStickyCmdsPending+0x20>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;

    *cmdsPending = false;
 800a638:	2100      	movs	r1, #0
    curElement = CommandsCtx.MacCommandList.First;
 800a63a:	4b07      	ldr	r3, [pc, #28]	; (800a658 <LoRaMacCommandsStickyCmdsPending+0x28>)
 800a63c:	6818      	ldr	r0, [r3, #0]
    *cmdsPending = false;
 800a63e:	7011      	strb	r1, [r2, #0]

    // Loop through all elements
    while( curElement != NULL )
 800a640:	2800      	cmp	r0, #0
 800a642:	d005      	beq.n	800a650 <LoRaMacCommandsStickyCmdsPending+0x20>
    {
        if( curElement->IsSticky == true )
 800a644:	7b01      	ldrb	r1, [r0, #12]
 800a646:	2900      	cmp	r1, #0
 800a648:	d003      	beq.n	800a652 <LoRaMacCommandsStickyCmdsPending+0x22>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 800a64a:	2301      	movs	r3, #1
            return LORAMAC_COMMANDS_SUCCESS;
 800a64c:	2000      	movs	r0, #0
            *cmdsPending = true;
 800a64e:	7013      	strb	r3, [r2, #0]
        }
        curElement = curElement->Next;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800a650:	4770      	bx	lr
        curElement = curElement->Next;
 800a652:	6800      	ldr	r0, [r0, #0]
 800a654:	e7f4      	b.n	800a640 <LoRaMacCommandsStickyCmdsPending+0x10>
 800a656:	46c0      	nop			; (mov r8, r8)
 800a658:	20000f44 	.word	0x20000f44

0800a65c <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800a65c:	3802      	subs	r0, #2
 800a65e:	b2c3      	uxtb	r3, r0
{
 800a660:	2000      	movs	r0, #0
 800a662:	2b11      	cmp	r3, #17
 800a664:	d801      	bhi.n	800a66a <LoRaMacCommandsGetCmdSize+0xe>
 800a666:	4a01      	ldr	r2, [pc, #4]	; (800a66c <LoRaMacCommandsGetCmdSize+0x10>)
 800a668:	5cd0      	ldrb	r0, [r2, r3]
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800a66a:	4770      	bx	lr
 800a66c:	0800f4cf 	.word	0x0800f4cf

0800a670 <GetElement.constprop.0>:
        return true;
    }
    return false;
}

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
 800a670:	b570      	push	{r4, r5, r6, lr}
 800a672:	0004      	movs	r4, r0
 800a674:	0008      	movs	r0, r1
{
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a676:	490c      	ldr	r1, [pc, #48]	; (800a6a8 <GetElement.constprop.0+0x38>)
 800a678:	1c4b      	adds	r3, r1, #1
 800a67a:	7fda      	ldrb	r2, [r3, #31]
    if( count == 0 )
 800a67c:	2a00      	cmp	r2, #0
 800a67e:	d011      	beq.n	800a6a4 <GetElement.constprop.0+0x34>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a680:	000d      	movs	r5, r1
 800a682:	2300      	movs	r3, #0
 800a684:	351c      	adds	r5, #28
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
    {
        if( element->Request == request )
 800a686:	7806      	ldrb	r6, [r0, #0]
 800a688:	42a6      	cmp	r6, r4
 800a68a:	d007      	beq.n	800a69c <GetElement.constprop.0+0x2c>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a68c:	42a8      	cmp	r0, r5
 800a68e:	d006      	beq.n	800a69e <GetElement.constprop.0+0x2e>
        bufferPointer++;
 800a690:	3004      	adds	r0, #4
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800a692:	3301      	adds	r3, #1
 800a694:	b2db      	uxtb	r3, r3
 800a696:	429a      	cmp	r2, r3
 800a698:	d1f5      	bne.n	800a686 <GetElement.constprop.0+0x16>
        return NULL;
 800a69a:	2000      	movs	r0, #0
        }
        element = IncreaseBufferPointer( element );
    }

    return NULL;
}
 800a69c:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a69e:	0008      	movs	r0, r1
 800a6a0:	300c      	adds	r0, #12
 800a6a2:	e7f6      	b.n	800a692 <GetElement.constprop.0+0x22>
        return NULL;
 800a6a4:	0010      	movs	r0, r2
 800a6a6:	e7f9      	b.n	800a69c <GetElement.constprop.0+0x2c>
 800a6a8:	20001040 	.word	0x20001040

0800a6ac <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800a6ac:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800a6ae:	4c08      	ldr	r4, [pc, #32]	; (800a6d0 <LoRaMacConfirmQueueInit+0x24>)

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a6b0:	2200      	movs	r2, #0
    ConfirmQueueCtx.Primitives = primitives;
 800a6b2:	6020      	str	r0, [r4, #0]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a6b4:	0020      	movs	r0, r4
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a6b6:	1c63      	adds	r3, r4, #1
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a6b8:	300c      	adds	r0, #12
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800a6ba:	77da      	strb	r2, [r3, #31]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a6bc:	21ff      	movs	r1, #255	; 0xff
 800a6be:	3214      	adds	r2, #20
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a6c0:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a6c2:	60a0      	str	r0, [r4, #8]
    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800a6c4:	f001 fed1 	bl	800c46a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	3402      	adds	r4, #2
 800a6cc:	77e3      	strb	r3, [r4, #31]
}
 800a6ce:	bd10      	pop	{r4, pc}
 800a6d0:	20001040 	.word	0x20001040

0800a6d4 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800a6d4:	b530      	push	{r4, r5, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a6d6:	4a0e      	ldr	r2, [pc, #56]	; (800a710 <LoRaMacConfirmQueueAdd+0x3c>)
{
 800a6d8:	0001      	movs	r1, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a6da:	1c55      	adds	r5, r2, #1
 800a6dc:	7fec      	ldrb	r4, [r5, #31]
    {
        // Protect the buffer against overwrites
        return false;
 800a6de:	2000      	movs	r0, #0
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a6e0:	2c04      	cmp	r4, #4
 800a6e2:	d813      	bhi.n	800a70c <LoRaMacConfirmQueueAdd+0x38>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a6e4:	7808      	ldrb	r0, [r1, #0]
 800a6e6:	6893      	ldr	r3, [r2, #8]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a6e8:	3401      	adds	r4, #1
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800a6ea:	7018      	strb	r0, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800a6ec:	7848      	ldrb	r0, [r1, #1]
 800a6ee:	7058      	strb	r0, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a6f0:	78c9      	ldrb	r1, [r1, #3]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6f2:	0010      	movs	r0, r2
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800a6f4:	70d9      	strb	r1, [r3, #3]
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
 800a6f6:	2100      	movs	r1, #0
 800a6f8:	7099      	strb	r1, [r3, #2]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a6fa:	0011      	movs	r1, r2
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a6fc:	301c      	adds	r0, #28
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800a6fe:	77ec      	strb	r4, [r5, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a700:	310c      	adds	r1, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a702:	4283      	cmp	r3, r0
 800a704:	d000      	beq.n	800a708 <LoRaMacConfirmQueueAdd+0x34>
        bufferPointer++;
 800a706:	1d19      	adds	r1, r3, #4
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );

    return true;
 800a708:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800a70a:	6091      	str	r1, [r2, #8]
}
 800a70c:	bd30      	pop	{r4, r5, pc}
 800a70e:	46c0      	nop			; (mov r8, r8)
 800a710:	20001040 	.word	0x20001040

0800a714 <LoRaMacConfirmQueueRemoveFirst>:
    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a714:	4b08      	ldr	r3, [pc, #32]	; (800a738 <LoRaMacConfirmQueueRemoveFirst+0x24>)
 800a716:	1c59      	adds	r1, r3, #1
 800a718:	7fca      	ldrb	r2, [r1, #31]
    {
        return false;
 800a71a:	1e10      	subs	r0, r2, #0
    if( count == 0 )
 800a71c:	d00b      	beq.n	800a736 <LoRaMacConfirmQueueRemoveFirst+0x22>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a71e:	3a01      	subs	r2, #1
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a720:	0018      	movs	r0, r3
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800a722:	77ca      	strb	r2, [r1, #31]
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a724:	001a      	movs	r2, r3
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a726:	6859      	ldr	r1, [r3, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a728:	301c      	adds	r0, #28
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a72a:	320c      	adds	r2, #12
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a72c:	4281      	cmp	r1, r0
 800a72e:	d000      	beq.n	800a732 <LoRaMacConfirmQueueRemoveFirst+0x1e>
        bufferPointer++;
 800a730:	1d0a      	adds	r2, r1, #4

    return true;
 800a732:	2001      	movs	r0, #1
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800a734:	605a      	str	r2, [r3, #4]
}
 800a736:	4770      	bx	lr
 800a738:	20001040 	.word	0x20001040

0800a73c <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800a73c:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a73e:	4b08      	ldr	r3, [pc, #32]	; (800a760 <LoRaMacConfirmQueueSetStatus+0x24>)
{
 800a740:	0004      	movs	r4, r0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a742:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 800a744:	7fd2      	ldrb	r2, [r2, #31]
{
 800a746:	0008      	movs	r0, r1
    if( count == 0 )
 800a748:	2a00      	cmp	r2, #0
 800a74a:	d007      	beq.n	800a75c <LoRaMacConfirmQueueSetStatus+0x20>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a74c:	6859      	ldr	r1, [r3, #4]
 800a74e:	f7ff ff8f 	bl	800a670 <GetElement.constprop.0>
        if( element != NULL )
 800a752:	2800      	cmp	r0, #0
 800a754:	d002      	beq.n	800a75c <LoRaMacConfirmQueueSetStatus+0x20>
        {
            element->Status = status;
            element->ReadyToHandle = true;
 800a756:	2301      	movs	r3, #1
            element->Status = status;
 800a758:	7044      	strb	r4, [r0, #1]
            element->ReadyToHandle = true;
 800a75a:	7083      	strb	r3, [r0, #2]
        }
    }
}
 800a75c:	bd10      	pop	{r4, pc}
 800a75e:	46c0      	nop			; (mov r8, r8)
 800a760:	20001040 	.word	0x20001040

0800a764 <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800a764:	b510      	push	{r4, lr}
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a766:	4b07      	ldr	r3, [pc, #28]	; (800a784 <LoRaMacConfirmQueueGetStatus+0x20>)
 800a768:	1c5a      	adds	r2, r3, #1
    if( count == 0 )
 800a76a:	7fd1      	ldrb	r1, [r2, #31]
        if( element != NULL )
        {
            return element->Status;
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a76c:	2201      	movs	r2, #1
    if( count == 0 )
 800a76e:	2900      	cmp	r1, #0
 800a770:	d006      	beq.n	800a780 <LoRaMacConfirmQueueGetStatus+0x1c>
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800a772:	6859      	ldr	r1, [r3, #4]
 800a774:	f7ff ff7c 	bl	800a670 <GetElement.constprop.0>
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a778:	2201      	movs	r2, #1
        if( element != NULL )
 800a77a:	2800      	cmp	r0, #0
 800a77c:	d000      	beq.n	800a780 <LoRaMacConfirmQueueGetStatus+0x1c>
            return element->Status;
 800a77e:	7842      	ldrb	r2, [r0, #1]
}
 800a780:	0010      	movs	r0, r2
 800a782:	bd10      	pop	{r4, pc}
 800a784:	20001040 	.word	0x20001040

0800a788 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800a788:	b570      	push	{r4, r5, r6, lr}
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a78a:	4a0d      	ldr	r2, [pc, #52]	; (800a7c0 <LoRaMacConfirmQueueSetStatusCmn+0x38>)

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800a78c:	1c91      	adds	r1, r2, #2
 800a78e:	77c8      	strb	r0, [r1, #31]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800a790:	1c51      	adds	r1, r2, #1
    if( count == 0 )
 800a792:	7fc9      	ldrb	r1, [r1, #31]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800a794:	6853      	ldr	r3, [r2, #4]
    if( count == 0 )
 800a796:	2900      	cmp	r1, #0
 800a798:	d00d      	beq.n	800a7b6 <LoRaMacConfirmQueueSetStatusCmn+0x2e>
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a79a:	0014      	movs	r4, r2
            element->Status = status;
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
            {
                element->ReadyToHandle = true;
 800a79c:	2501      	movs	r5, #1
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a79e:	6891      	ldr	r1, [r2, #8]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a7a0:	341c      	adds	r4, #28
            if( element->RestrictCommonReadyToHandle == false )
 800a7a2:	78de      	ldrb	r6, [r3, #3]
            element->Status = status;
 800a7a4:	7058      	strb	r0, [r3, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800a7a6:	2e00      	cmp	r6, #0
 800a7a8:	d100      	bne.n	800a7ac <LoRaMacConfirmQueueSetStatusCmn+0x24>
                element->ReadyToHandle = true;
 800a7aa:	709d      	strb	r5, [r3, #2]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	d003      	beq.n	800a7b8 <LoRaMacConfirmQueueSetStatusCmn+0x30>
        bufferPointer++;
 800a7b0:	3304      	adds	r3, #4
        }while( element != ConfirmQueueCtx.BufferEnd );
 800a7b2:	4299      	cmp	r1, r3
 800a7b4:	d1f5      	bne.n	800a7a2 <LoRaMacConfirmQueueSetStatusCmn+0x1a>
    }
}
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800a7b8:	0013      	movs	r3, r2
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	e7f9      	b.n	800a7b2 <LoRaMacConfirmQueueSetStatusCmn+0x2a>
 800a7be:	46c0      	nop			; (mov r8, r8)
 800a7c0:	20001040 	.word	0x20001040

0800a7c4 <LoRaMacConfirmQueueIsCmdActive>:
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a7c4:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <LoRaMacConfirmQueueIsCmdActive+0x14>)
{
 800a7c6:	b510      	push	{r4, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800a7c8:	6859      	ldr	r1, [r3, #4]
 800a7ca:	f7ff ff51 	bl	800a670 <GetElement.constprop.0>
 800a7ce:	1e43      	subs	r3, r0, #1
 800a7d0:	4198      	sbcs	r0, r3
    {
        return true;
    }
    return false;
}
 800a7d2:	b2c0      	uxtb	r0, r0
 800a7d4:	bd10      	pop	{r4, pc}
 800a7d6:	46c0      	nop			; (mov r8, r8)
 800a7d8:	20001040 	.word	0x20001040

0800a7dc <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800a7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7de:	0005      	movs	r5, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 800a7e0:	2400      	movs	r4, #0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a7e2:	4e13      	ldr	r6, [pc, #76]	; (800a830 <LoRaMacConfirmQueueHandleCb+0x54>)
{
 800a7e4:	b085      	sub	sp, #20
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a7e6:	1c73      	adds	r3, r6, #1
 800a7e8:	7fdb      	ldrb	r3, [r3, #31]
 800a7ea:	9301      	str	r3, [sp, #4]
    for( uint8_t i = 0; i < nbElements; i++ )
 800a7ec:	9b01      	ldr	r3, [sp, #4]
 800a7ee:	429c      	cmp	r4, r3
 800a7f0:	d101      	bne.n	800a7f6 <LoRaMacConfirmQueueHandleCb+0x1a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
        }
    }
}
 800a7f2:	b005      	add	sp, #20
 800a7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800a7f6:	6873      	ldr	r3, [r6, #4]
 800a7f8:	7818      	ldrb	r0, [r3, #0]
 800a7fa:	7028      	strb	r0, [r5, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800a7fc:	7859      	ldrb	r1, [r3, #1]
 800a7fe:	7069      	strb	r1, [r5, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800a800:	789f      	ldrb	r7, [r3, #2]
        if( readyToHandle == true )
 800a802:	2f00      	cmp	r7, #0
 800a804:	d00d      	beq.n	800a822 <LoRaMacConfirmQueueHandleCb+0x46>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800a806:	6833      	ldr	r3, [r6, #0]
 800a808:	0028      	movs	r0, r5
 800a80a:	689b      	ldr	r3, [r3, #8]
 800a80c:	4798      	blx	r3
        LoRaMacConfirmQueueRemoveFirst( );
 800a80e:	f7ff ff81 	bl	800a714 <LoRaMacConfirmQueueRemoveFirst>
        if( readyToHandle == false )
 800a812:	2f00      	cmp	r7, #0
 800a814:	d102      	bne.n	800a81c <LoRaMacConfirmQueueHandleCb+0x40>
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800a816:	a803      	add	r0, sp, #12
 800a818:	f7ff ff5c 	bl	800a6d4 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 800a81c:	3401      	adds	r4, #1
 800a81e:	b2e4      	uxtb	r4, r4
 800a820:	e7e4      	b.n	800a7ec <LoRaMacConfirmQueueHandleCb+0x10>
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800a822:	aa03      	add	r2, sp, #12
 800a824:	7010      	strb	r0, [r2, #0]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800a826:	7051      	strb	r1, [r2, #1]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800a828:	78db      	ldrb	r3, [r3, #3]
 800a82a:	70d3      	strb	r3, [r2, #3]
 800a82c:	e7ef      	b.n	800a80e <LoRaMacConfirmQueueHandleCb+0x32>
 800a82e:	46c0      	nop			; (mov r8, r8)
 800a830:	20001040 	.word	0x20001040

0800a834 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800a834:	4b01      	ldr	r3, [pc, #4]	; (800a83c <LoRaMacConfirmQueueGetCnt+0x8>)
 800a836:	3301      	adds	r3, #1
 800a838:	7fd8      	ldrb	r0, [r3, #31]
}
 800a83a:	4770      	bx	lr
 800a83c:	20001040 	.word	0x20001040

0800a840 <LoRaMacConfirmQueueIsFull>:
    }
    else
    {
        return false;
    }
}
 800a840:	2004      	movs	r0, #4
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800a842:	4b03      	ldr	r3, [pc, #12]	; (800a850 <LoRaMacConfirmQueueIsFull+0x10>)
 800a844:	3301      	adds	r3, #1
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800a846:	7fdb      	ldrb	r3, [r3, #31]
}
 800a848:	4298      	cmp	r0, r3
 800a84a:	4180      	sbcs	r0, r0
 800a84c:	4240      	negs	r0, r0
 800a84e:	4770      	bx	lr
 800a850:	20001040 	.word	0x20001040

0800a854 <DeriveSessionKey10x>:
 * \param[IN]  netID          - Network Identifier
 * \param[IN]  deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 800a854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a856:	b085      	sub	sp, #20
 800a858:	000c      	movs	r4, r1
 800a85a:	0007      	movs	r7, r0
 800a85c:	0016      	movs	r6, r2
    uint8_t compBase[16] = { 0 };
 800a85e:	2100      	movs	r1, #0
 800a860:	220c      	movs	r2, #12
 800a862:	a801      	add	r0, sp, #4
{
 800a864:	001d      	movs	r5, r3
    uint8_t compBase[16] = { 0 };
 800a866:	f003 ffab 	bl	800e7c0 <memset>

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 800a86a:	466a      	mov	r2, sp
 800a86c:	1e7b      	subs	r3, r7, #1
 800a86e:	7013      	strb	r3, [r2, #0]
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800a870:	7054      	strb	r4, [r2, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a872:	0a23      	lsrs	r3, r4, #8
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800a874:	8096      	strh	r6, [r2, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800a876:	71d5      	strb	r5, [r2, #7]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a878:	0c24      	lsrs	r4, r4, #16
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a87a:	0c36      	lsrs	r6, r6, #16
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a87c:	0a2d      	lsrs	r5, r5, #8
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800a87e:	7093      	strb	r3, [r2, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800a880:	70d4      	strb	r4, [r2, #3]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800a882:	7196      	strb	r6, [r2, #6]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800a884:	7215      	strb	r5, [r2, #8]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800a886:	2101      	movs	r1, #1
 800a888:	003a      	movs	r2, r7
 800a88a:	4668      	mov	r0, sp
 800a88c:	f7fc fa4b 	bl	8006d26 <SecureElementDeriveAndStoreKey>
 800a890:	2800      	cmp	r0, #0
 800a892:	d000      	beq.n	800a896 <DeriveSessionKey10x+0x42>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a894:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a896:	b005      	add	sp, #20
 800a898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a89a <PayloadEncrypt>:
{
 800a89a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a89c:	b08d      	sub	sp, #52	; 0x34
 800a89e:	001e      	movs	r6, r3
 800a8a0:	ab12      	add	r3, sp, #72	; 0x48
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	9001      	str	r0, [sp, #4]
 800a8a6:	9303      	str	r3, [sp, #12]
    if( buffer == 0 )
 800a8a8:	9b01      	ldr	r3, [sp, #4]
{
 800a8aa:	000c      	movs	r4, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a8ac:	200a      	movs	r0, #10
{
 800a8ae:	9202      	str	r2, [sp, #8]
    if( buffer == 0 )
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d025      	beq.n	800a900 <PayloadEncrypt+0x66>
    uint8_t sBlock[16] = { 0 };
 800a8b4:	2700      	movs	r7, #0
 800a8b6:	220c      	movs	r2, #12
 800a8b8:	0039      	movs	r1, r7
 800a8ba:	a805      	add	r0, sp, #20
 800a8bc:	9704      	str	r7, [sp, #16]
 800a8be:	f003 ff7f 	bl	800e7c0 <memset>
    uint8_t aBlock[16] = { 0 };
 800a8c2:	220c      	movs	r2, #12
 800a8c4:	0039      	movs	r1, r7
 800a8c6:	a809      	add	r0, sp, #36	; 0x24
 800a8c8:	9708      	str	r7, [sp, #32]
 800a8ca:	f003 ff79 	bl	800e7c0 <memset>
    aBlock[0] = 0x01;
 800a8ce:	2201      	movs	r2, #1
    aBlock[5] = dir;
 800a8d0:	9b03      	ldr	r3, [sp, #12]
    uint8_t aBlock[16] = { 0 };
 800a8d2:	ad08      	add	r5, sp, #32
    aBlock[5] = dir;
 800a8d4:	716b      	strb	r3, [r5, #5]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800a8d6:	0c33      	lsrs	r3, r6, #16
 800a8d8:	722b      	strb	r3, [r5, #8]
    aBlock[10] = frameCounter & 0xFF;
 800a8da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[6] = address & 0xFF;
 800a8dc:	80ee      	strh	r6, [r5, #6]
    aBlock[10] = frameCounter & 0xFF;
 800a8de:	816b      	strh	r3, [r5, #10]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800a8e0:	0c1b      	lsrs	r3, r3, #16
 800a8e2:	732b      	strb	r3, [r5, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a8e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a8e6:	0e36      	lsrs	r6, r6, #24
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a8e8:	0e1b      	lsrs	r3, r3, #24
    aBlock[0] = 0x01;
 800a8ea:	702a      	strb	r2, [r5, #0]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800a8ec:	726e      	strb	r6, [r5, #9]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800a8ee:	736b      	strb	r3, [r5, #13]
    uint16_t ctr = 1;
 800a8f0:	0015      	movs	r5, r2
 800a8f2:	b2ea      	uxtb	r2, r5
 800a8f4:	0113      	lsls	r3, r2, #4
 800a8f6:	3b10      	subs	r3, #16
 800a8f8:	b2df      	uxtb	r7, r3
    while( size > 0 )
 800a8fa:	2c00      	cmp	r4, #0
 800a8fc:	dc02      	bgt.n	800a904 <PayloadEncrypt+0x6a>
    return LORAMAC_CRYPTO_SUCCESS;
 800a8fe:	2000      	movs	r0, #0
}
 800a900:	b00d      	add	sp, #52	; 0x34
 800a902:	bdf0      	pop	{r4, r5, r6, r7, pc}
        aBlock[15] = ctr & 0xFF;
 800a904:	a808      	add	r0, sp, #32
 800a906:	73c2      	strb	r2, [r0, #15]
        ctr++;
 800a908:	3501      	adds	r5, #1
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a90a:	2110      	movs	r1, #16
 800a90c:	9a02      	ldr	r2, [sp, #8]
 800a90e:	ab04      	add	r3, sp, #16
        ctr++;
 800a910:	b2ad      	uxth	r5, r5
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800a912:	f7fc f998 	bl	8006c46 <SecureElementAesEncrypt>
 800a916:	2800      	cmp	r0, #0
 800a918:	d115      	bne.n	800a946 <PayloadEncrypt+0xac>
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a91a:	1c22      	adds	r2, r4, #0
 800a91c:	1c13      	adds	r3, r2, #0
 800a91e:	2c10      	cmp	r4, #16
 800a920:	dd00      	ble.n	800a924 <PayloadEncrypt+0x8a>
 800a922:	2310      	movs	r3, #16
 800a924:	b21b      	sxth	r3, r3
 800a926:	4298      	cmp	r0, r3
 800a928:	db02      	blt.n	800a930 <PayloadEncrypt+0x96>
        size -= 16;
 800a92a:	3c10      	subs	r4, #16
 800a92c:	b224      	sxth	r4, r4
        bufferIndex += 16;
 800a92e:	e7e0      	b.n	800a8f2 <PayloadEncrypt+0x58>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a930:	9b01      	ldr	r3, [sp, #4]
 800a932:	1839      	adds	r1, r7, r0
 800a934:	ae04      	add	r6, sp, #16
 800a936:	5c36      	ldrb	r6, [r6, r0]
 800a938:	5c5b      	ldrb	r3, [r3, r1]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a93a:	3001      	adds	r0, #1
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a93c:	4073      	eors	r3, r6
 800a93e:	9e01      	ldr	r6, [sp, #4]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a940:	b2c0      	uxtb	r0, r0
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800a942:	5473      	strb	r3, [r6, r1]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800a944:	e7ea      	b.n	800a91c <PayloadEncrypt+0x82>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a946:	200f      	movs	r0, #15
 800a948:	e7da      	b.n	800a900 <PayloadEncrypt+0x66>

0800a94a <LoRaMacCryptoDeriveMcKEKey.part.0>:
    }

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
 800a94a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
    }
    uint8_t compBase[16] = { 0 };
 800a94c:	2100      	movs	r1, #0
 800a94e:	220c      	movs	r2, #12
 800a950:	a801      	add	r0, sp, #4
 800a952:	9100      	str	r1, [sp, #0]
 800a954:	f003 ff34 	bl	800e7c0 <memset>

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 800a958:	227f      	movs	r2, #127	; 0x7f
 800a95a:	2104      	movs	r1, #4
 800a95c:	4668      	mov	r0, sp
 800a95e:	f7fc f9e2 	bl	8006d26 <SecureElementDeriveAndStoreKey>
 800a962:	2800      	cmp	r0, #0
 800a964:	d000      	beq.n	800a968 <LoRaMacCryptoDeriveMcKEKey.part.0+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800a966:	200f      	movs	r0, #15
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800a968:	b005      	add	sp, #20
 800a96a:	bd00      	pop	{pc}

0800a96c <GetLastFcntDown.constprop.0>:
    switch( fCntID )
 800a96c:	3801      	subs	r0, #1
 800a96e:	2305      	movs	r3, #5
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
 800a970:	b500      	push	{lr}
    switch( fCntID )
 800a972:	2803      	cmp	r0, #3
 800a974:	d809      	bhi.n	800a98a <GetLastFcntDown.constprop.0+0x1e>
 800a976:	4b09      	ldr	r3, [pc, #36]	; (800a99c <GetLastFcntDown.constprop.0+0x30>)
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a978:	681b      	ldr	r3, [r3, #0]
    switch( fCntID )
 800a97a:	f7f5 fbd7 	bl	800012c <__gnu_thumb1_case_uqi>
 800a97e:	0802      	.short	0x0802
 800a980:	0c0a      	.short	0x0c0a
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800a982:	691a      	ldr	r2, [r3, #16]
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a984:	600a      	str	r2, [r1, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800a986:	621a      	str	r2, [r3, #32]
    return LORAMAC_CRYPTO_SUCCESS;
 800a988:	2300      	movs	r3, #0
}
 800a98a:	0018      	movs	r0, r3
 800a98c:	bd00      	pop	{pc}
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800a98e:	695a      	ldr	r2, [r3, #20]
 800a990:	e7f8      	b.n	800a984 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800a992:	699a      	ldr	r2, [r3, #24]
 800a994:	e7f6      	b.n	800a984 <GetLastFcntDown.constprop.0+0x18>
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	600b      	str	r3, [r1, #0]
 800a99a:	e7f5      	b.n	800a988 <GetLastFcntDown.constprop.0+0x1c>
 800a99c:	20001064 	.word	0x20001064

0800a9a0 <VerifyCmacB0.constprop.0.isra.0>:
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a9a2:	b0c7      	sub	sp, #284	; 0x11c
 800a9a4:	0007      	movs	r7, r0
 800a9a6:	000c      	movs	r4, r1
 800a9a8:	001d      	movs	r5, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800a9aa:	200a      	movs	r0, #10
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
 800a9ac:	9201      	str	r2, [sp, #4]
    if( msg == 0 )
 800a9ae:	2f00      	cmp	r7, #0
 800a9b0:	d030      	beq.n	800aa14 <VerifyCmacB0.constprop.0.isra.0+0x74>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a9b2:	2680      	movs	r6, #128	; 0x80
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800a9b4:	3004      	adds	r0, #4
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800a9b6:	0076      	lsls	r6, r6, #1
 800a9b8:	42b1      	cmp	r1, r6
 800a9ba:	d82b      	bhi.n	800aa14 <VerifyCmacB0.constprop.0.isra.0+0x74>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800a9bc:	2288      	movs	r2, #136	; 0x88
 800a9be:	2100      	movs	r1, #0
 800a9c0:	0052      	lsls	r2, r2, #1
 800a9c2:	a802      	add	r0, sp, #8
 800a9c4:	f001 fd51 	bl	800c46a <memset1>
    b0[0] = 0x49;
 800a9c8:	2349      	movs	r3, #73	; 0x49
 800a9ca:	9302      	str	r3, [sp, #8]
    b0[4] = 0x00;
 800a9cc:	ab02      	add	r3, sp, #8
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a9ce:	aa02      	add	r2, sp, #8
    b0[4] = 0x00;
 800a9d0:	809e      	strh	r6, [r3, #4]
    b0[6] = devAddr & 0xFF;
 800a9d2:	80dd      	strh	r5, [r3, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800a9d4:	0c2b      	lsrs	r3, r5, #16
 800a9d6:	7213      	strb	r3, [r2, #8]
    b0[10] = fCnt & 0xFF;
 800a9d8:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a9da:	0e2d      	lsrs	r5, r5, #24
    b0[10] = fCnt & 0xFF;
 800a9dc:	8153      	strh	r3, [r2, #10]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800a9de:	0c1b      	lsrs	r3, r3, #16
 800a9e0:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a9e2:	9b4c      	ldr	r3, [sp, #304]	; 0x130
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a9e4:	0039      	movs	r1, r7
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a9e6:	0e1e      	lsrs	r6, r3, #24
    b0[14] = 0x00;
 800a9e8:	2300      	movs	r3, #0
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800a9ea:	7255      	strb	r5, [r2, #9]
    b0[14] = 0x00;
 800a9ec:	7393      	strb	r3, [r2, #14]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800a9ee:	7356      	strb	r6, [r2, #13]
    b0[15] = msgLen & 0xFF;
 800a9f0:	73d4      	strb	r4, [r2, #15]
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800a9f2:	a806      	add	r0, sp, #24
 800a9f4:	0022      	movs	r2, r4
 800a9f6:	f001 fd23 	bl	800c440 <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800a9fa:	0021      	movs	r1, r4
 800a9fc:	3110      	adds	r1, #16
 800a9fe:	9b01      	ldr	r3, [sp, #4]
 800aa00:	9a4d      	ldr	r2, [sp, #308]	; 0x134
 800aa02:	b289      	uxth	r1, r1
 800aa04:	a802      	add	r0, sp, #8
 800aa06:	f7fc f906 	bl	8006c16 <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800aa0a:	2800      	cmp	r0, #0
 800aa0c:	d002      	beq.n	800aa14 <VerifyCmacB0.constprop.0.isra.0+0x74>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800aa0e:	2801      	cmp	r0, #1
 800aa10:	d000      	beq.n	800aa14 <VerifyCmacB0.constprop.0.isra.0+0x74>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800aa12:	200f      	movs	r0, #15
}
 800aa14:	b047      	add	sp, #284	; 0x11c
 800aa16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aa18 <LoRaMacCryptoInit>:
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800aa18:	2309      	movs	r3, #9
{
 800aa1a:	b510      	push	{r4, lr}
    if( nvm == NULL )
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d012      	beq.n	800aa46 <LoRaMacCryptoInit+0x2e>
    CryptoNvm = nvm;
 800aa20:	4c0a      	ldr	r4, [pc, #40]	; (800aa4c <LoRaMacCryptoInit+0x34>)
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800aa22:	2228      	movs	r2, #40	; 0x28
 800aa24:	2100      	movs	r1, #0
    CryptoNvm = nvm;
 800aa26:	6020      	str	r0, [r4, #0]
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800aa28:	f001 fd1f 	bl	800c46a <memset1>
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800aa2c:	6823      	ldr	r3, [r4, #0]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800aa2e:	4a08      	ldr	r2, [pc, #32]	; (800aa50 <LoRaMacCryptoInit+0x38>)
    CryptoNvm->FCntList.FCntUp = 0;
 800aa30:	2000      	movs	r0, #0
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800aa32:	601a      	str	r2, [r3, #0]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa34:	2201      	movs	r2, #1
 800aa36:	4252      	negs	r2, r2
    CryptoNvm->FCntList.FCntUp = 0;
 800aa38:	60d8      	str	r0, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa3a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa3c:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800aa3e:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800aa40:	621a      	str	r2, [r3, #32]
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 800aa42:	61da      	str	r2, [r3, #28]
    return LORAMAC_CRYPTO_SUCCESS;
 800aa44:	0003      	movs	r3, r0
}
 800aa46:	0018      	movs	r0, r3
 800aa48:	bd10      	pop	{r4, pc}
 800aa4a:	46c0      	nop			; (mov r8, r8)
 800aa4c:	20001064 	.word	0x20001064
 800aa50:	01010100 	.word	0x01010100

0800aa54 <LoRaMacCryptoSetLrWanVersion>:
    CryptoNvm->LrWanVersion = version;
 800aa54:	4b02      	ldr	r3, [pc, #8]	; (800aa60 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	6018      	str	r0, [r3, #0]
}
 800aa5a:	2000      	movs	r0, #0
 800aa5c:	4770      	bx	lr
 800aa5e:	46c0      	nop			; (mov r8, r8)
 800aa60:	20001064 	.word	0x20001064

0800aa64 <LoRaMacCryptoGetFCntUp>:
{
 800aa64:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa66:	200a      	movs	r0, #10
    if( currentUp == NULL )
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d005      	beq.n	800aa78 <LoRaMacCryptoGetFCntUp+0x14>
    return LORAMAC_CRYPTO_SUCCESS;
 800aa6c:	2000      	movs	r0, #0
    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800aa6e:	4a03      	ldr	r2, [pc, #12]	; (800aa7c <LoRaMacCryptoGetFCntUp+0x18>)
 800aa70:	6812      	ldr	r2, [r2, #0]
 800aa72:	68d2      	ldr	r2, [r2, #12]
 800aa74:	3201      	adds	r2, #1
 800aa76:	601a      	str	r2, [r3, #0]
}
 800aa78:	4770      	bx	lr
 800aa7a:	46c0      	nop			; (mov r8, r8)
 800aa7c:	20001064 	.word	0x20001064

0800aa80 <LoRaMacCryptoGetFCntDown>:
{
 800aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa82:	001f      	movs	r7, r3
    uint32_t lastDown = 0;
 800aa84:	2300      	movs	r3, #0
{
 800aa86:	b085      	sub	sp, #20
 800aa88:	0015      	movs	r5, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aa8a:	240a      	movs	r4, #10
{
 800aa8c:	9101      	str	r1, [sp, #4]
    uint32_t lastDown = 0;
 800aa8e:	9303      	str	r3, [sp, #12]
    if( currentDown == NULL )
 800aa90:	429f      	cmp	r7, r3
 800aa92:	d027      	beq.n	800aae4 <LoRaMacCryptoGetFCntDown+0x64>
    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800aa94:	a903      	add	r1, sp, #12
 800aa96:	f7ff ff69 	bl	800a96c <GetLastFcntDown.constprop.0>
 800aa9a:	1e04      	subs	r4, r0, #0
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800aa9c:	d122      	bne.n	800aae4 <LoRaMacCryptoGetFCntDown+0x64>
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 800aa9e:	9e03      	ldr	r6, [sp, #12]
 800aaa0:	1c73      	adds	r3, r6, #1
 800aaa2:	d004      	beq.n	800aaae <LoRaMacCryptoGetFCntDown+0x2e>
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800aaa4:	b2b3      	uxth	r3, r6
 800aaa6:	1aeb      	subs	r3, r5, r3
        if( fCntDiff > 0 )
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	dd17      	ble.n	800aadc <LoRaMacCryptoGetFCntDown+0x5c>
            *currentDown = lastDown + fCntDiff;
 800aaac:	18f5      	adds	r5, r6, r3
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800aaae:	4b12      	ldr	r3, [pc, #72]	; (800aaf8 <LoRaMacCryptoGetFCntDown+0x78>)
        *currentDown = frameFcnt;
 800aab0:	603d      	str	r5, [r7, #0]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	789f      	ldrb	r7, [r3, #2]
 800aab6:	2f00      	cmp	r7, #0
 800aab8:	d114      	bne.n	800aae4 <LoRaMacCryptoGetFCntDown+0x64>
        if( ( ( int64_t )*currentDown - ( int64_t )lastDown ) >= maxFCntGap )
 800aaba:	002a      	movs	r2, r5
 800aabc:	003b      	movs	r3, r7
 800aabe:	0030      	movs	r0, r6
 800aac0:	0039      	movs	r1, r7
 800aac2:	1a12      	subs	r2, r2, r0
 800aac4:	418b      	sbcs	r3, r1
 800aac6:	2401      	movs	r4, #1
 800aac8:	429f      	cmp	r7, r3
 800aaca:	dc03      	bgt.n	800aad4 <LoRaMacCryptoGetFCntDown+0x54>
 800aacc:	d103      	bne.n	800aad6 <LoRaMacCryptoGetFCntDown+0x56>
 800aace:	9901      	ldr	r1, [sp, #4]
 800aad0:	4291      	cmp	r1, r2
 800aad2:	d900      	bls.n	800aad6 <LoRaMacCryptoGetFCntDown+0x56>
 800aad4:	2400      	movs	r4, #0
 800aad6:	00e4      	lsls	r4, r4, #3
 800aad8:	b2e4      	uxtb	r4, r4
 800aada:	e003      	b.n	800aae4 <LoRaMacCryptoGetFCntDown+0x64>
        else if( fCntDiff == 0 )
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d104      	bne.n	800aaea <LoRaMacCryptoGetFCntDown+0x6a>
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800aae0:	2407      	movs	r4, #7
            *currentDown = lastDown;
 800aae2:	603e      	str	r6, [r7, #0]
}
 800aae4:	0020      	movs	r0, r4
 800aae6:	b005      	add	sp, #20
 800aae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800aaea:	2280      	movs	r2, #128	; 0x80
 800aaec:	0c33      	lsrs	r3, r6, #16
 800aaee:	041b      	lsls	r3, r3, #16
 800aaf0:	0252      	lsls	r2, r2, #9
 800aaf2:	189b      	adds	r3, r3, r2
 800aaf4:	18ed      	adds	r5, r5, r3
 800aaf6:	e7da      	b.n	800aaae <LoRaMacCryptoGetFCntDown+0x2e>
 800aaf8:	20001064 	.word	0x20001064

0800aafc <LoRaMacCryptoSetMulticastReference>:
{
 800aafc:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800aafe:	200a      	movs	r0, #10
    if( multicastList == NULL )
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d004      	beq.n	800ab0e <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800ab04:	2000      	movs	r0, #0
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800ab06:	4a02      	ldr	r2, [pc, #8]	; (800ab10 <LoRaMacCryptoSetMulticastReference+0x14>)
 800ab08:	6812      	ldr	r2, [r2, #0]
 800ab0a:	321c      	adds	r2, #28
 800ab0c:	621a      	str	r2, [r3, #32]
}
 800ab0e:	4770      	bx	lr
 800ab10:	20001064 	.word	0x20001064

0800ab14 <LoRaMacCryptoPrepareJoinRequest>:
{
 800ab14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab16:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab18:	200a      	movs	r0, #10
    if( macMsg == 0 )
 800ab1a:	2c00      	cmp	r4, #0
 800ab1c:	d021      	beq.n	800ab62 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    uint32_t devNonce = 0;
 800ab1e:	2300      	movs	r3, #0
    SecureElementRandomNumber( &devNonce );
 800ab20:	a803      	add	r0, sp, #12
    uint32_t devNonce = 0;
 800ab22:	9303      	str	r3, [sp, #12]
    SecureElementRandomNumber( &devNonce );
 800ab24:	f7fc f960 	bl	8006de8 <SecureElementRandomNumber>
    CryptoNvm->DevNonce = devNonce;
 800ab28:	4a0f      	ldr	r2, [pc, #60]	; (800ab68 <LoRaMacCryptoPrepareJoinRequest+0x54>)
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	6812      	ldr	r2, [r2, #0]
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	8093      	strh	r3, [r2, #4]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab32:	0020      	movs	r0, r4
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800ab34:	82e3      	strh	r3, [r4, #22]
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab36:	f000 fa2e 	bl	800af96 <LoRaMacSerializerJoinRequest>
 800ab3a:	2800      	cmp	r0, #0
 800ab3c:	d110      	bne.n	800ab60 <LoRaMacCryptoPrepareJoinRequest+0x4c>
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ab3e:	0023      	movs	r3, r4
 800ab40:	3318      	adds	r3, #24
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	2213      	movs	r2, #19
 800ab46:	2301      	movs	r3, #1
 800ab48:	6821      	ldr	r1, [r4, #0]
 800ab4a:	f7fc f859 	bl	8006c00 <SecureElementComputeAesCmac>
 800ab4e:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ab50:	200f      	movs	r0, #15
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d105      	bne.n	800ab62 <LoRaMacCryptoPrepareJoinRequest+0x4e>
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab56:	0020      	movs	r0, r4
 800ab58:	f000 fa1d 	bl	800af96 <LoRaMacSerializerJoinRequest>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d000      	beq.n	800ab62 <LoRaMacCryptoPrepareJoinRequest+0x4e>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ab60:	2011      	movs	r0, #17
}
 800ab62:	b004      	add	sp, #16
 800ab64:	bd10      	pop	{r4, pc}
 800ab66:	46c0      	nop			; (mov r8, r8)
 800ab68:	20001064 	.word	0x20001064

0800ab6c <LoRaMacCryptoSecureMessage>:
{
 800ab6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab6e:	0005      	movs	r5, r0
 800ab70:	001c      	movs	r4, r3
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ab72:	200a      	movs	r0, #10
{
 800ab74:	b089      	sub	sp, #36	; 0x24
    if( macMsg == NULL )
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d01f      	beq.n	800abba <LoRaMacCryptoSecureMessage+0x4e>
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800ab7a:	4b2c      	ldr	r3, [pc, #176]	; (800ac2c <LoRaMacCryptoSecureMessage+0xc0>)
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ab7c:	3804      	subs	r0, #4
    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	42ab      	cmp	r3, r5
 800ab84:	d819      	bhi.n	800abba <LoRaMacCryptoSecureMessage+0x4e>
    if( macMsg->FPort == 0 )
 800ab86:	1c62      	adds	r2, r4, #1
 800ab88:	7fd2      	ldrb	r2, [r2, #31]
        payloadDecryptionKeyID = NWK_S_KEY;
 800ab8a:	1e51      	subs	r1, r2, #1
 800ab8c:	418a      	sbcs	r2, r1
 800ab8e:	3202      	adds	r2, #2
    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800ab90:	42ab      	cmp	r3, r5
 800ab92:	d306      	bcc.n	800aba2 <LoRaMacCryptoSecureMessage+0x36>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ab94:	0020      	movs	r0, r4
 800ab96:	f000 fa33 	bl	800b000 <LoRaMacSerializerData>
 800ab9a:	1e03      	subs	r3, r0, #0
 800ab9c:	d00f      	beq.n	800abbe <LoRaMacCryptoSecureMessage+0x52>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800ab9e:	2011      	movs	r0, #17
 800aba0:	e00b      	b.n	800abba <LoRaMacCryptoSecureMessage+0x4e>
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800aba2:	0023      	movs	r3, r4
 800aba4:	3328      	adds	r3, #40	; 0x28
 800aba6:	7819      	ldrb	r1, [r3, #0]
 800aba8:	2300      	movs	r3, #0
 800abaa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800abac:	9300      	str	r3, [sp, #0]
 800abae:	9501      	str	r5, [sp, #4]
 800abb0:	68a3      	ldr	r3, [r4, #8]
 800abb2:	f7ff fe72 	bl	800a89a <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800abb6:	2800      	cmp	r0, #0
 800abb8:	d0ec      	beq.n	800ab94 <LoRaMacCryptoSecureMessage+0x28>
}
 800abba:	b009      	add	sp, #36	; 0x24
 800abbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800abbe:	7926      	ldrb	r6, [r4, #4]
 800abc0:	8920      	ldrh	r0, [r4, #8]
 800abc2:	3e04      	subs	r6, #4
 800abc4:	6821      	ldr	r1, [r4, #0]
 800abc6:	b2b2      	uxth	r2, r6
 800abc8:	9003      	str	r0, [sp, #12]
 800abca:	68a7      	ldr	r7, [r4, #8]
        return LORAMAC_CRYPTO_ERROR_NPE;
 800abcc:	200a      	movs	r0, #10
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800abce:	9202      	str	r2, [sp, #8]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800abd0:	2900      	cmp	r1, #0
 800abd2:	d0f2      	beq.n	800abba <LoRaMacCryptoSecureMessage+0x4e>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800abd4:	2080      	movs	r0, #128	; 0x80
 800abd6:	0040      	lsls	r0, r0, #1
 800abd8:	4684      	mov	ip, r0
 800abda:	b2b2      	uxth	r2, r6
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800abdc:	38f2      	subs	r0, #242	; 0xf2
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800abde:	4562      	cmp	r2, ip
 800abe0:	d8eb      	bhi.n	800abba <LoRaMacCryptoSecureMessage+0x4e>
    b0[0] = 0x49;
 800abe2:	303b      	adds	r0, #59	; 0x3b
 800abe4:	9004      	str	r0, [sp, #16]
    b0[4] = 0x00;
 800abe6:	a804      	add	r0, sp, #16
 800abe8:	8083      	strh	r3, [r0, #4]
    b0[14] = 0x00;
 800abea:	7383      	strb	r3, [r0, #14]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800abec:	0023      	movs	r3, r4
    b0[6] = devAddr & 0xFF;
 800abee:	9a03      	ldr	r2, [sp, #12]
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800abf0:	332c      	adds	r3, #44	; 0x2c
    b0[6] = devAddr & 0xFF;
 800abf2:	80c2      	strh	r2, [r0, #6]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800abf4:	0c3a      	lsrs	r2, r7, #16
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800abf6:	0e3f      	lsrs	r7, r7, #24
 800abf8:	7247      	strb	r7, [r0, #9]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800abfa:	0c2f      	lsrs	r7, r5, #16
 800abfc:	7307      	strb	r7, [r0, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800abfe:	0e2f      	lsrs	r7, r5, #24
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800ac00:	7202      	strb	r2, [r0, #8]
    b0[10] = fCnt & 0xFF;
 800ac02:	8145      	strh	r5, [r0, #10]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800ac04:	7347      	strb	r7, [r0, #13]
    b0[15] = msgLen & 0xFF;
 800ac06:	73c6      	strb	r6, [r0, #15]
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ac08:	9a02      	ldr	r2, [sp, #8]
 800ac0a:	9300      	str	r3, [sp, #0]
 800ac0c:	2302      	movs	r3, #2
 800ac0e:	f7fb fff7 	bl	8006c00 <SecureElementComputeAesCmac>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d001      	beq.n	800ac1a <LoRaMacCryptoSecureMessage+0xae>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ac16:	200f      	movs	r0, #15
 800ac18:	e7cf      	b.n	800abba <LoRaMacCryptoSecureMessage+0x4e>
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800ac1a:	0020      	movs	r0, r4
 800ac1c:	f000 f9f0 	bl	800b000 <LoRaMacSerializerData>
 800ac20:	2800      	cmp	r0, #0
 800ac22:	d1bc      	bne.n	800ab9e <LoRaMacCryptoSecureMessage+0x32>
    CryptoNvm->FCntList.FCntUp = fCntUp;
 800ac24:	4b01      	ldr	r3, [pc, #4]	; (800ac2c <LoRaMacCryptoSecureMessage+0xc0>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	60dd      	str	r5, [r3, #12]
    return LORAMAC_CRYPTO_SUCCESS;
 800ac2a:	e7c6      	b.n	800abba <LoRaMacCryptoSecureMessage+0x4e>
 800ac2c:	20001064 	.word	0x20001064

0800ac30 <LoRaMacCryptoUnsecureMessage>:
{
 800ac30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac32:	b087      	sub	sp, #28
 800ac34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac36:	001c      	movs	r4, r3
 800ac38:	0007      	movs	r7, r0
 800ac3a:	000e      	movs	r6, r1
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ac3c:	230a      	movs	r3, #10
{
 800ac3e:	9203      	str	r2, [sp, #12]
    if( macMsg == 0 )
 800ac40:	2d00      	cmp	r5, #0
 800ac42:	d008      	beq.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
    uint32_t lastDown = 0;
 800ac44:	2300      	movs	r3, #0
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800ac46:	0010      	movs	r0, r2
 800ac48:	a905      	add	r1, sp, #20
    uint32_t lastDown = 0;
 800ac4a:	9305      	str	r3, [sp, #20]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800ac4c:	f7ff fe8e 	bl	800a96c <GetLastFcntDown.constprop.0>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d003      	beq.n	800ac5c <LoRaMacCryptoUnsecureMessage+0x2c>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800ac54:	2306      	movs	r3, #6
}
 800ac56:	0018      	movs	r0, r3
 800ac58:	b007      	add	sp, #28
 800ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if( ( currentDown > lastDown ) ||
 800ac5c:	9b05      	ldr	r3, [sp, #20]
 800ac5e:	429c      	cmp	r4, r3
 800ac60:	d801      	bhi.n	800ac66 <LoRaMacCryptoUnsecureMessage+0x36>
 800ac62:	3301      	adds	r3, #1
 800ac64:	d1f6      	bne.n	800ac54 <LoRaMacCryptoUnsecureMessage+0x24>
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ac66:	0028      	movs	r0, r5
 800ac68:	f000 f93a 	bl	800aee0 <LoRaMacParserData>
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800ac6c:	2310      	movs	r3, #16
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	d1f1      	bne.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
        if( KeyAddrList[i].AddrID == addrID )
 800ac72:	4a20      	ldr	r2, [pc, #128]	; (800acf4 <LoRaMacCryptoUnsecureMessage+0xc4>)
 800ac74:	7813      	ldrb	r3, [r2, #0]
 800ac76:	42bb      	cmp	r3, r7
 800ac78:	d004      	beq.n	800ac84 <LoRaMacCryptoUnsecureMessage+0x54>
 800ac7a:	7911      	ldrb	r1, [r2, #4]
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800ac7c:	230c      	movs	r3, #12
        if( KeyAddrList[i].AddrID == addrID )
 800ac7e:	42b9      	cmp	r1, r7
 800ac80:	d1e9      	bne.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
 800ac82:	3001      	adds	r0, #1
    if( address != macMsg->FHDR.DevAddr )
 800ac84:	68a9      	ldr	r1, [r5, #8]
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800ac86:	2302      	movs	r3, #2
    if( address != macMsg->FHDR.DevAddr )
 800ac88:	42b1      	cmp	r1, r6
 800ac8a:	d1e4      	bne.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
    payloadDecryptionKeyID = curItem->AppSkey;
 800ac8c:	4098      	lsls	r0, r3
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ac8e:	7929      	ldrb	r1, [r5, #4]
 800ac90:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    payloadDecryptionKeyID = curItem->AppSkey;
 800ac92:	1812      	adds	r2, r2, r0
 800ac94:	7857      	ldrb	r7, [r2, #1]
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800ac96:	3904      	subs	r1, #4
 800ac98:	7892      	ldrb	r2, [r2, #2]
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	9400      	str	r4, [sp, #0]
 800ac9e:	0033      	movs	r3, r6
 800aca0:	6828      	ldr	r0, [r5, #0]
 800aca2:	b289      	uxth	r1, r1
 800aca4:	f7ff fe7c 	bl	800a9a0 <VerifyCmacB0.constprop.0.isra.0>
 800aca8:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800acaa:	d1d4      	bne.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
    if( macMsg->FPort == 0 )
 800acac:	1c6b      	adds	r3, r5, #1
 800acae:	7fdb      	ldrb	r3, [r3, #31]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d100      	bne.n	800acb6 <LoRaMacCryptoUnsecureMessage+0x86>
        payloadDecryptionKeyID = NWK_S_KEY;
 800acb4:	2702      	movs	r7, #2
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800acb6:	002b      	movs	r3, r5
 800acb8:	3328      	adds	r3, #40	; 0x28
 800acba:	7819      	ldrb	r1, [r3, #0]
 800acbc:	2301      	movs	r3, #1
 800acbe:	9401      	str	r4, [sp, #4]
 800acc0:	9300      	str	r3, [sp, #0]
 800acc2:	003a      	movs	r2, r7
 800acc4:	0033      	movs	r3, r6
 800acc6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800acc8:	f7ff fde7 	bl	800a89a <PayloadEncrypt>
 800accc:	1e03      	subs	r3, r0, #0
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800acce:	d1c2      	bne.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
    switch( fCntID )
 800acd0:	9803      	ldr	r0, [sp, #12]
 800acd2:	3801      	subs	r0, #1
 800acd4:	2803      	cmp	r0, #3
 800acd6:	d8be      	bhi.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
 800acd8:	4a07      	ldr	r2, [pc, #28]	; (800acf8 <LoRaMacCryptoUnsecureMessage+0xc8>)
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800acda:	6812      	ldr	r2, [r2, #0]
    switch( fCntID )
 800acdc:	f7f5 fa26 	bl	800012c <__gnu_thumb1_case_uqi>
 800ace0:	08060402 	.word	0x08060402
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800ace4:	6114      	str	r4, [r2, #16]
            break;
 800ace6:	e7b6      	b.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800ace8:	6154      	str	r4, [r2, #20]
            break;
 800acea:	e7b4      	b.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.FCntDown = currentDown;
 800acec:	6194      	str	r4, [r2, #24]
            break;
 800acee:	e7b2      	b.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800acf0:	61d4      	str	r4, [r2, #28]
            break;
 800acf2:	e7b0      	b.n	800ac56 <LoRaMacCryptoUnsecureMessage+0x26>
 800acf4:	200000d8 	.word	0x200000d8
 800acf8:	20001064 	.word	0x20001064

0800acfc <LoRaMacCryptoDeriveMcRootKey>:
{
 800acfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acfe:	0004      	movs	r4, r0
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 800ad00:	200b      	movs	r0, #11
    if( keyID != APP_KEY )
 800ad02:	2900      	cmp	r1, #0
 800ad04:	d111      	bne.n	800ad2a <LoRaMacCryptoDeriveMcRootKey+0x2e>
    uint8_t compBase[16] = { 0 };
 800ad06:	220c      	movs	r2, #12
 800ad08:	a801      	add	r0, sp, #4
 800ad0a:	9100      	str	r1, [sp, #0]
 800ad0c:	f003 fd58 	bl	800e7c0 <memset>
    if( versionMinor == 1 )
 800ad10:	2c01      	cmp	r4, #1
 800ad12:	d102      	bne.n	800ad1a <LoRaMacCryptoDeriveMcRootKey+0x1e>
        compBase[0] = 0x20;
 800ad14:	2320      	movs	r3, #32
 800ad16:	466a      	mov	r2, sp
 800ad18:	7013      	strb	r3, [r2, #0]
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 800ad1a:	2204      	movs	r2, #4
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	4668      	mov	r0, sp
 800ad20:	f7fc f801 	bl	8006d26 <SecureElementDeriveAndStoreKey>
 800ad24:	2800      	cmp	r0, #0
 800ad26:	d000      	beq.n	800ad2a <LoRaMacCryptoDeriveMcRootKey+0x2e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad28:	200f      	movs	r0, #15
}
 800ad2a:	b004      	add	sp, #16
 800ad2c:	bd10      	pop	{r4, pc}
	...

0800ad30 <LoRaMacCryptoSetKey>:
{
 800ad30:	b570      	push	{r4, r5, r6, lr}
 800ad32:	0005      	movs	r5, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800ad34:	f7fb ffee 	bl	8006d14 <SecureElementSetKey>
 800ad38:	1e04      	subs	r4, r0, #0
 800ad3a:	d10d      	bne.n	800ad58 <LoRaMacCryptoSetKey+0x28>
    if( keyID == APP_KEY )
 800ad3c:	2d00      	cmp	r5, #0
 800ad3e:	d10c      	bne.n	800ad5a <LoRaMacCryptoSetKey+0x2a>
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 800ad40:	4b07      	ldr	r3, [pc, #28]	; (800ad60 <LoRaMacCryptoSetKey+0x30>)
 800ad42:	0021      	movs	r1, r4
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	7898      	ldrb	r0, [r3, #2]
 800ad48:	f7ff ffd8 	bl	800acfc <LoRaMacCryptoDeriveMcRootKey>
 800ad4c:	2800      	cmp	r0, #0
 800ad4e:	d103      	bne.n	800ad58 <LoRaMacCryptoSetKey+0x28>
    if( keyID != MC_ROOT_KEY )
 800ad50:	f7ff fdfb 	bl	800a94a <LoRaMacCryptoDeriveMcKEKey.part.0>
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800ad54:	2800      	cmp	r0, #0
 800ad56:	d000      	beq.n	800ad5a <LoRaMacCryptoSetKey+0x2a>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800ad58:	240f      	movs	r4, #15
}
 800ad5a:	0020      	movs	r0, r4
 800ad5c:	bd70      	pop	{r4, r5, r6, pc}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	20001064 	.word	0x20001064

0800ad64 <LoRaMacCryptoHandleJoinAccept>:
{
 800ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad66:	b091      	sub	sp, #68	; 0x44
 800ad68:	9005      	str	r0, [sp, #20]
 800ad6a:	000e      	movs	r6, r1
 800ad6c:	0014      	movs	r4, r2
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ad6e:	200a      	movs	r0, #10
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800ad70:	2a00      	cmp	r2, #0
 800ad72:	d064      	beq.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
 800ad74:	2900      	cmp	r1, #0
 800ad76:	d062      	beq.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800ad78:	2700      	movs	r7, #0
 800ad7a:	221d      	movs	r2, #29
 800ad7c:	0039      	movs	r1, r7
 800ad7e:	a808      	add	r0, sp, #32
 800ad80:	9707      	str	r7, [sp, #28]
 800ad82:	f003 fd1d 	bl	800e7c0 <memset>
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ad86:	4d2f      	ldr	r5, [pc, #188]	; (800ae44 <LoRaMacCryptoHandleJoinAccept+0xe0>)
    uint8_t versionMinor         = 0;
 800ad88:	ab02      	add	r3, sp, #8
 800ad8a:	74df      	strb	r7, [r3, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ad8c:	682b      	ldr	r3, [r5, #0]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ad8e:	aa02      	add	r2, sp, #8
    uint16_t nonce               = CryptoNvm->DevNonce;
 800ad90:	889f      	ldrh	r7, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800ad92:	2313      	movs	r3, #19
 800ad94:	189b      	adds	r3, r3, r2
 800ad96:	9302      	str	r3, [sp, #8]
 800ad98:	ab07      	add	r3, sp, #28
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	7923      	ldrb	r3, [r4, #4]
 800ad9e:	003a      	movs	r2, r7
 800ada0:	9300      	str	r3, [sp, #0]
 800ada2:	6823      	ldr	r3, [r4, #0]
 800ada4:	0031      	movs	r1, r6
 800ada6:	9805      	ldr	r0, [sp, #20]
 800ada8:	f7fb ffdd 	bl	8006d66 <SecureElementProcessJoinAccept>
 800adac:	0003      	movs	r3, r0
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800adae:	200f      	movs	r0, #15
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d144      	bne.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800adb4:	a907      	add	r1, sp, #28
 800adb6:	7922      	ldrb	r2, [r4, #4]
 800adb8:	6820      	ldr	r0, [r4, #0]
 800adba:	f001 fb41 	bl	800c440 <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800adbe:	0020      	movs	r0, r4
 800adc0:	f000 f842 	bl	800ae48 <LoRaMacParserJoinAccept>
 800adc4:	0001      	movs	r1, r0
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800adc6:	2010      	movs	r0, #16
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800adc8:	2900      	cmp	r1, #0
 800adca:	d138      	bne.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800adcc:	7a22      	ldrb	r2, [r4, #8]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800adce:	79e6      	ldrb	r6, [r4, #7]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800add0:	4082      	lsls	r2, r0
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800add2:	79a3      	ldrb	r3, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800add4:	0236      	lsls	r6, r6, #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800add6:	4316      	orrs	r6, r2
 800add8:	431e      	orrs	r6, r3
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800adda:	682b      	ldr	r3, [r5, #0]
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800addc:	380d      	subs	r0, #13
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 800adde:	689a      	ldr	r2, [r3, #8]
 800ade0:	42b2      	cmp	r2, r6
 800ade2:	d02c      	beq.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800ade4:	609e      	str	r6, [r3, #8]
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 800ade6:	ab02      	add	r3, sp, #8
 800ade8:	7cd8      	ldrb	r0, [r3, #19]
 800adea:	f7ff ff87 	bl	800acfc <LoRaMacCryptoDeriveMcRootKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800adee:	2800      	cmp	r0, #0
 800adf0:	d125      	bne.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
    if( keyID != MC_ROOT_KEY )
 800adf2:	f7ff fdaa 	bl	800a94a <LoRaMacCryptoDeriveMcKEKey.part.0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800adf6:	2800      	cmp	r0, #0
 800adf8:	d121      	bne.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800adfa:	7aa3      	ldrb	r3, [r4, #10]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800adfc:	7ae2      	ldrb	r2, [r4, #11]
        netID = ( uint32_t )macMsg->NetID[0];
 800adfe:	7a61      	ldrb	r1, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ae00:	0412      	lsls	r2, r2, #16
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800ae02:	021b      	lsls	r3, r3, #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800ae04:	4313      	orrs	r3, r2
 800ae06:	430b      	orrs	r3, r1
 800ae08:	001c      	movs	r4, r3
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800ae0a:	0031      	movs	r1, r6
 800ae0c:	003b      	movs	r3, r7
 800ae0e:	0022      	movs	r2, r4
 800ae10:	3003      	adds	r0, #3
 800ae12:	f7ff fd1f 	bl	800a854 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae16:	2800      	cmp	r0, #0
 800ae18:	d111      	bne.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800ae1a:	003b      	movs	r3, r7
 800ae1c:	0022      	movs	r2, r4
 800ae1e:	0031      	movs	r1, r6
 800ae20:	3002      	adds	r0, #2
 800ae22:	f7ff fd17 	bl	800a854 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800ae26:	2800      	cmp	r0, #0
 800ae28:	d109      	bne.n	800ae3e <LoRaMacCryptoHandleJoinAccept+0xda>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ae2a:	aa02      	add	r2, sp, #8
 800ae2c:	682b      	ldr	r3, [r5, #0]
 800ae2e:	7cd2      	ldrb	r2, [r2, #19]
    CryptoNvm->FCntList.FCntUp = 0;
 800ae30:	60d8      	str	r0, [r3, #12]
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800ae32:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae34:	2201      	movs	r2, #1
 800ae36:	4252      	negs	r2, r2
 800ae38:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae3a:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 800ae3c:	615a      	str	r2, [r3, #20]
}
 800ae3e:	b011      	add	sp, #68	; 0x44
 800ae40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae42:	46c0      	nop			; (mov r8, r8)
 800ae44:	20001064 	.word	0x20001064

0800ae48 <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 800ae48:	b510      	push	{r4, lr}
 800ae4a:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800ae4c:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800ae4e:	2c00      	cmp	r4, #0
 800ae50:	d040      	beq.n	800aed4 <LoRaMacParserJoinAccept+0x8c>
 800ae52:	6821      	ldr	r1, [r4, #0]
 800ae54:	2900      	cmp	r1, #0
 800ae56:	d03d      	beq.n	800aed4 <LoRaMacParserJoinAccept+0x8c>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ae58:	780b      	ldrb	r3, [r1, #0]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ae5a:	2203      	movs	r2, #3
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800ae5c:	7163      	strb	r3, [r4, #5]
    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800ae5e:	3101      	adds	r1, #1
 800ae60:	1da0      	adds	r0, r4, #6
 800ae62:	f001 faed 	bl	800c440 <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800ae66:	0020      	movs	r0, r4
 800ae68:	6821      	ldr	r1, [r4, #0]
 800ae6a:	2203      	movs	r2, #3
 800ae6c:	3104      	adds	r1, #4
 800ae6e:	3009      	adds	r0, #9
 800ae70:	f001 fae6 	bl	800c440 <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800ae74:	6821      	ldr	r1, [r4, #0]
 800ae76:	79cb      	ldrb	r3, [r1, #7]
 800ae78:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800ae7a:	7a0a      	ldrb	r2, [r1, #8]
 800ae7c:	0212      	lsls	r2, r2, #8
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	60e2      	str	r2, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800ae82:	7a4b      	ldrb	r3, [r1, #9]
 800ae84:	041b      	lsls	r3, r3, #16
 800ae86:	4313      	orrs	r3, r2
 800ae88:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800ae8a:	7a8a      	ldrb	r2, [r1, #10]
 800ae8c:	0612      	lsls	r2, r2, #24
 800ae8e:	4313      	orrs	r3, r2
 800ae90:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800ae92:	7acb      	ldrb	r3, [r1, #11]
 800ae94:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800ae96:	7b0b      	ldrb	r3, [r1, #12]
 800ae98:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800ae9a:	7923      	ldrb	r3, [r4, #4]
 800ae9c:	2b21      	cmp	r3, #33	; 0x21
 800ae9e:	d11a      	bne.n	800aed6 <LoRaMacParserJoinAccept+0x8e>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800aea0:	0020      	movs	r0, r4
 800aea2:	2210      	movs	r2, #16
 800aea4:	310d      	adds	r1, #13
 800aea6:	3012      	adds	r0, #18
 800aea8:	f001 faca 	bl	800c440 <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800aeac:	231d      	movs	r3, #29
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aeae:	6820      	ldr	r0, [r4, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aeb0:	1c59      	adds	r1, r3, #1
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800aeb2:	5cc2      	ldrb	r2, [r0, r3]
 800aeb4:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aeb6:	5c41      	ldrb	r1, [r0, r1]
 800aeb8:	0209      	lsls	r1, r1, #8
 800aeba:	4311      	orrs	r1, r2
 800aebc:	6261      	str	r1, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aebe:	1c9a      	adds	r2, r3, #2
 800aec0:	5c82      	ldrb	r2, [r0, r2]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aec2:	3303      	adds	r3, #3
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800aec4:	0412      	lsls	r2, r2, #16
 800aec6:	430a      	orrs	r2, r1
 800aec8:	6262      	str	r2, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aeca:	5cc3      	ldrb	r3, [r0, r3]

    return LORAMAC_PARSER_SUCCESS;
 800aecc:	2000      	movs	r0, #0
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800aece:	061b      	lsls	r3, r3, #24
 800aed0:	4313      	orrs	r3, r2
 800aed2:	6263      	str	r3, [r4, #36]	; 0x24
}
 800aed4:	bd10      	pop	{r4, pc}
        return LORAMAC_PARSER_FAIL;
 800aed6:	2001      	movs	r0, #1
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800aed8:	2b11      	cmp	r3, #17
 800aeda:	dcfb      	bgt.n	800aed4 <LoRaMacParserJoinAccept+0x8c>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800aedc:	230d      	movs	r3, #13
 800aede:	e7e6      	b.n	800aeae <LoRaMacParserJoinAccept+0x66>

0800aee0 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 800aee0:	b570      	push	{r4, r5, r6, lr}
 800aee2:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_PARSER_ERROR_NPE;
 800aee4:	2002      	movs	r0, #2
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800aee6:	2c00      	cmp	r4, #0
 800aee8:	d054      	beq.n	800af94 <LoRaMacParserData+0xb4>
 800aeea:	6821      	ldr	r1, [r4, #0]
 800aeec:	2900      	cmp	r1, #0
 800aeee:	d051      	beq.n	800af94 <LoRaMacParserData+0xb4>
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aef0:	780b      	ldrb	r3, [r1, #0]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800aef2:	0020      	movs	r0, r4
    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800aef4:	7163      	strb	r3, [r4, #5]
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800aef6:	784b      	ldrb	r3, [r1, #1]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800aef8:	3010      	adds	r0, #16
    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800aefa:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800aefc:	788a      	ldrb	r2, [r1, #2]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800aefe:	1c65      	adds	r5, r4, #1
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800af00:	0212      	lsls	r2, r2, #8
 800af02:	431a      	orrs	r2, r3
 800af04:	60a2      	str	r2, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800af06:	78cb      	ldrb	r3, [r1, #3]
 800af08:	041b      	lsls	r3, r3, #16
 800af0a:	4313      	orrs	r3, r2
 800af0c:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800af0e:	790a      	ldrb	r2, [r1, #4]
 800af10:	0612      	lsls	r2, r2, #24
 800af12:	4313      	orrs	r3, r2
 800af14:	60a3      	str	r3, [r4, #8]
    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800af16:	794b      	ldrb	r3, [r1, #5]
 800af18:	7323      	strb	r3, [r4, #12]
    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800af1a:	798b      	ldrb	r3, [r1, #6]
 800af1c:	81e3      	strh	r3, [r4, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800af1e:	79ca      	ldrb	r2, [r1, #7]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af20:	3108      	adds	r1, #8
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800af22:	0212      	lsls	r2, r2, #8
 800af24:	4313      	orrs	r3, r2
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af26:	7b22      	ldrb	r2, [r4, #12]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800af28:	81e3      	strh	r3, [r4, #14]
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800af2a:	0712      	lsls	r2, r2, #28
 800af2c:	0f12      	lsrs	r2, r2, #28
 800af2e:	f001 fa87 	bl	800c440 <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af32:	7b23      	ldrb	r3, [r4, #12]
    macMsg->FRMPayloadSize = 0;
 800af34:	0020      	movs	r0, r4
    macMsg->FPort = 0;
 800af36:	2200      	movs	r2, #0
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af38:	071b      	lsls	r3, r3, #28
 800af3a:	0f1b      	lsrs	r3, r3, #28
 800af3c:	001e      	movs	r6, r3
    macMsg->FRMPayloadSize = 0;
 800af3e:	3028      	adds	r0, #40	; 0x28
    macMsg->FPort = 0;
 800af40:	77ea      	strb	r2, [r5, #31]
    macMsg->FRMPayloadSize = 0;
 800af42:	7002      	strb	r2, [r0, #0]

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800af44:	7922      	ldrb	r2, [r4, #4]
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800af46:	3608      	adds	r6, #8
    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800af48:	1b91      	subs	r1, r2, r6
 800af4a:	2904      	cmp	r1, #4
 800af4c:	dd0c      	ble.n	800af68 <LoRaMacParserData+0x88>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800af4e:	6821      	ldr	r1, [r4, #0]
 800af50:	3309      	adds	r3, #9

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800af52:	3a04      	subs	r2, #4
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800af54:	5d8e      	ldrb	r6, [r1, r6]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800af56:	1ad2      	subs	r2, r2, r3
 800af58:	b2d2      	uxtb	r2, r2
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800af5a:	77ee      	strb	r6, [r5, #31]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800af5c:	7002      	strb	r2, [r0, #0]
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800af5e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800af60:	b292      	uxth	r2, r2
 800af62:	18c9      	adds	r1, r1, r3
 800af64:	f001 fa6c 	bl	800c440 <memcpy1>
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );

    return LORAMAC_PARSER_SUCCESS;
 800af68:	2000      	movs	r0, #0
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800af6a:	7922      	ldrb	r2, [r4, #4]
 800af6c:	6823      	ldr	r3, [r4, #0]
 800af6e:	189b      	adds	r3, r3, r2
 800af70:	1f1a      	subs	r2, r3, #4
 800af72:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800af74:	1ed9      	subs	r1, r3, #3
    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800af76:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800af78:	7809      	ldrb	r1, [r1, #0]
 800af7a:	0209      	lsls	r1, r1, #8
 800af7c:	4311      	orrs	r1, r2
 800af7e:	62e1      	str	r1, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800af80:	1e9a      	subs	r2, r3, #2
 800af82:	7812      	ldrb	r2, [r2, #0]
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800af84:	3b01      	subs	r3, #1
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800af86:	0412      	lsls	r2, r2, #16
 800af88:	430a      	orrs	r2, r1
 800af8a:	62e2      	str	r2, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	061b      	lsls	r3, r3, #24
 800af90:	4313      	orrs	r3, r2
 800af92:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800af94:	bd70      	pop	{r4, r5, r6, pc}

0800af96 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 800af96:	b510      	push	{r4, lr}
 800af98:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800af9a:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800af9c:	2c00      	cmp	r4, #0
 800af9e:	d02e      	beq.n	800affe <LoRaMacSerializerJoinRequest+0x68>
 800afa0:	6823      	ldr	r3, [r4, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d02b      	beq.n	800affe <LoRaMacSerializerJoinRequest+0x68>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800afa6:	7922      	ldrb	r2, [r4, #4]
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800afa8:	1800      	adds	r0, r0, r0
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800afaa:	2a16      	cmp	r2, #22
 800afac:	d927      	bls.n	800affe <LoRaMacSerializerJoinRequest+0x68>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800afae:	7962      	ldrb	r2, [r4, #5]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800afb0:	1da1      	adds	r1, r4, #6
    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800afb2:	701a      	strb	r2, [r3, #0]
    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800afb4:	6820      	ldr	r0, [r4, #0]
 800afb6:	2208      	movs	r2, #8
 800afb8:	3001      	adds	r0, #1
 800afba:	f001 fa4a 	bl	800c452 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800afbe:	0021      	movs	r1, r4
 800afc0:	6820      	ldr	r0, [r4, #0]
 800afc2:	2208      	movs	r2, #8
 800afc4:	3009      	adds	r0, #9
 800afc6:	310e      	adds	r1, #14
 800afc8:	f001 fa43 	bl	800c452 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	8ae2      	ldrh	r2, [r4, #22]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800afd0:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800afd2:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800afd4:	8ae3      	ldrh	r3, [r4, #22]
 800afd6:	6822      	ldr	r2, [r4, #0]
 800afd8:	0a1b      	lsrs	r3, r3, #8
 800afda:	7493      	strb	r3, [r2, #18]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800afdc:	6823      	ldr	r3, [r4, #0]
 800afde:	69a2      	ldr	r2, [r4, #24]
 800afe0:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800afe2:	69a3      	ldr	r3, [r4, #24]
 800afe4:	6822      	ldr	r2, [r4, #0]
 800afe6:	0a1b      	lsrs	r3, r3, #8
 800afe8:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800afea:	69a3      	ldr	r3, [r4, #24]
 800afec:	6822      	ldr	r2, [r4, #0]
 800afee:	0c1b      	lsrs	r3, r3, #16
 800aff0:	7553      	strb	r3, [r2, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800aff2:	69a3      	ldr	r3, [r4, #24]
 800aff4:	6822      	ldr	r2, [r4, #0]
 800aff6:	0e1b      	lsrs	r3, r3, #24
 800aff8:	7593      	strb	r3, [r2, #22]
    macMsg->BufSize = bufItr;
 800affa:	2317      	movs	r3, #23
 800affc:	7123      	strb	r3, [r4, #4]
}
 800affe:	bd10      	pop	{r4, pc}

0800b000 <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	0004      	movs	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b004:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b006:	2c00      	cmp	r4, #0
 800b008:	d068      	beq.n	800b0dc <LoRaMacSerializerData+0xdc>
 800b00a:	6821      	ldr	r1, [r4, #0]
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800b00c:	2001      	movs	r0, #1
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800b00e:	2900      	cmp	r1, #0
 800b010:	d064      	beq.n	800b0dc <LoRaMacSerializerData+0xdc>
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;

    if( macMsg->FRMPayloadSize > 0 )
 800b012:	0025      	movs	r5, r4
 800b014:	3528      	adds	r5, #40	; 0x28
 800b016:	7828      	ldrb	r0, [r5, #0]
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b018:	7b22      	ldrb	r2, [r4, #12]
 800b01a:	0003      	movs	r3, r0
 800b01c:	1e5e      	subs	r6, r3, #1
 800b01e:	41b3      	sbcs	r3, r6
 800b020:	0712      	lsls	r2, r2, #28
 800b022:	0f12      	lsrs	r2, r2, #28
 800b024:	189b      	adds	r3, r3, r2
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
    }

    computedBufSize += macMsg->FRMPayloadSize;
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b026:	3004      	adds	r0, #4
    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b028:	3308      	adds	r3, #8
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800b02a:	181b      	adds	r3, r3, r0

    if( macMsg->BufSize < computedBufSize )
 800b02c:	7922      	ldrb	r2, [r4, #4]
 800b02e:	b29b      	uxth	r3, r3
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800b030:	2002      	movs	r0, #2
    if( macMsg->BufSize < computedBufSize )
 800b032:	429a      	cmp	r2, r3
 800b034:	d352      	bcc.n	800b0dc <LoRaMacSerializerData+0xdc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800b036:	7963      	ldrb	r3, [r4, #5]
 800b038:	700b      	strb	r3, [r1, #0]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b03a:	0021      	movs	r1, r4
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b03c:	6823      	ldr	r3, [r4, #0]
 800b03e:	68a2      	ldr	r2, [r4, #8]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b040:	3110      	adds	r1, #16
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800b042:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800b044:	68a3      	ldr	r3, [r4, #8]
 800b046:	6822      	ldr	r2, [r4, #0]
 800b048:	0a1b      	lsrs	r3, r3, #8
 800b04a:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800b04c:	68a3      	ldr	r3, [r4, #8]
 800b04e:	6822      	ldr	r2, [r4, #0]
 800b050:	0c1b      	lsrs	r3, r3, #16
 800b052:	70d3      	strb	r3, [r2, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800b054:	68a3      	ldr	r3, [r4, #8]
 800b056:	6822      	ldr	r2, [r4, #0]
 800b058:	0e1b      	lsrs	r3, r3, #24
 800b05a:	7113      	strb	r3, [r2, #4]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800b05c:	6823      	ldr	r3, [r4, #0]
 800b05e:	7b22      	ldrb	r2, [r4, #12]
 800b060:	715a      	strb	r2, [r3, #5]
    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800b062:	6823      	ldr	r3, [r4, #0]
 800b064:	89e2      	ldrh	r2, [r4, #14]
 800b066:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800b068:	89e3      	ldrh	r3, [r4, #14]
 800b06a:	6822      	ldr	r2, [r4, #0]
 800b06c:	0a1b      	lsrs	r3, r3, #8
 800b06e:	71d3      	strb	r3, [r2, #7]
    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800b070:	7b22      	ldrb	r2, [r4, #12]
 800b072:	6820      	ldr	r0, [r4, #0]
 800b074:	0712      	lsls	r2, r2, #28
 800b076:	0f12      	lsrs	r2, r2, #28
 800b078:	3008      	adds	r0, #8
 800b07a:	f001 f9e1 	bl	800c440 <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b07e:	7b23      	ldrb	r3, [r4, #12]

    if( macMsg->FRMPayloadSize > 0 )
 800b080:	782a      	ldrb	r2, [r5, #0]
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800b082:	071b      	lsls	r3, r3, #28
 800b084:	0f1b      	lsrs	r3, r3, #28
 800b086:	001e      	movs	r6, r3
 800b088:	3608      	adds	r6, #8
    if( macMsg->FRMPayloadSize > 0 )
 800b08a:	2a00      	cmp	r2, #0
 800b08c:	d005      	beq.n	800b09a <LoRaMacSerializerData+0x9a>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800b08e:	1c62      	adds	r2, r4, #1
 800b090:	7fd1      	ldrb	r1, [r2, #31]
 800b092:	6822      	ldr	r2, [r4, #0]
 800b094:	3309      	adds	r3, #9
 800b096:	5591      	strb	r1, [r2, r6]
 800b098:	001e      	movs	r6, r3
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800b09a:	6820      	ldr	r0, [r4, #0]
 800b09c:	782a      	ldrb	r2, [r5, #0]
 800b09e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b0a0:	1980      	adds	r0, r0, r6
 800b0a2:	f001 f9cd 	bl	800c440 <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b0a6:	782b      	ldrb	r3, [r5, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b0a8:	6822      	ldr	r2, [r4, #0]
 800b0aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800b0ac:	18f3      	adds	r3, r6, r3
 800b0ae:	b29b      	uxth	r3, r3
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b0b0:	54d1      	strb	r1, [r2, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b0b2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0b4:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800b0b6:	1c5a      	adds	r2, r3, #1
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b0b8:	b292      	uxth	r2, r2
 800b0ba:	0a09      	lsrs	r1, r1, #8
 800b0bc:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b0be:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0c0:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800b0c2:	1c9a      	adds	r2, r3, #2
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b0c4:	b292      	uxth	r2, r2
 800b0c6:	0c09      	lsrs	r1, r1, #16
 800b0c8:	5481      	strb	r1, [r0, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b0ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800b0cc:	6820      	ldr	r0, [r4, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800b0ce:	1cda      	adds	r2, r3, #3
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b0d0:	b292      	uxth	r2, r2
 800b0d2:	0e09      	lsrs	r1, r1, #24
 800b0d4:	5481      	strb	r1, [r0, r2]

    macMsg->BufSize = bufItr;

    return LORAMAC_SERIALIZER_SUCCESS;
 800b0d6:	2000      	movs	r0, #0
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800b0d8:	3304      	adds	r3, #4
    macMsg->BufSize = bufItr;
 800b0da:	7123      	strb	r3, [r4, #4]
}
 800b0dc:	bd70      	pop	{r4, r5, r6, pc}

0800b0de <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800b0de:	3805      	subs	r0, #5
 800b0e0:	4243      	negs	r3, r0
 800b0e2:	4158      	adcs	r0, r3
        default:
        {
            return false;
        }
    }
}
 800b0e4:	b2c0      	uxtb	r0, r0
 800b0e6:	4770      	bx	lr

0800b0e8 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800b0e8:	b507      	push	{r0, r1, r2, lr}
    PhyParam_t phyParam = { 0 };
    switch( region )
 800b0ea:	2805      	cmp	r0, #5
 800b0ec:	d105      	bne.n	800b0fa <RegionGetPhyParam+0x12>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 800b0ee:	0008      	movs	r0, r1
 800b0f0:	f000 fcb4 	bl	800ba5c <RegionEU868GetPhyParam>
 800b0f4:	9001      	str	r0, [sp, #4]
        default:
        {
            return phyParam;
        }
    }
}
 800b0f6:	9801      	ldr	r0, [sp, #4]
 800b0f8:	bd0e      	pop	{r1, r2, r3, pc}
            return phyParam;
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	9301      	str	r3, [sp, #4]
 800b0fe:	e7fa      	b.n	800b0f6 <RegionGetPhyParam+0xe>

0800b100 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800b100:	b510      	push	{r4, lr}
    switch( region )
 800b102:	2805      	cmp	r0, #5
 800b104:	d102      	bne.n	800b10c <RegionSetBandTxDone+0xc>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 800b106:	0008      	movs	r0, r1
 800b108:	f000 fd3c 	bl	800bb84 <RegionEU868SetBandTxDone>
        default:
        {
            return;
        }
    }
}
 800b10c:	bd10      	pop	{r4, pc}

0800b10e <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800b10e:	b510      	push	{r4, lr}
    switch( region )
 800b110:	2805      	cmp	r0, #5
 800b112:	d102      	bne.n	800b11a <RegionInitDefaults+0xc>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 800b114:	0008      	movs	r0, r1
 800b116:	f000 fd4d 	bl	800bbb4 <RegionEU868InitDefaults>
        default:
        {
            break;
        }
    }
}
 800b11a:	bd10      	pop	{r4, pc}

0800b11c <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800b11c:	b510      	push	{r4, lr}
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 800b11e:	2300      	movs	r3, #0
{
 800b120:	0004      	movs	r4, r0
 800b122:	0008      	movs	r0, r1
 800b124:	0011      	movs	r1, r2
    switch( region )
 800b126:	2c05      	cmp	r4, #5
 800b128:	d102      	bne.n	800b130 <RegionVerify+0x14>
        EU868_VERIFY( );
 800b12a:	f000 fda1 	bl	800bc70 <RegionEU868Verify>
 800b12e:	0003      	movs	r3, r0
        }
    }
}
 800b130:	0018      	movs	r0, r3
 800b132:	bd10      	pop	{r4, pc}

0800b134 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800b134:	b510      	push	{r4, lr}
    switch( region )
 800b136:	2805      	cmp	r0, #5
 800b138:	d102      	bne.n	800b140 <RegionApplyCFList+0xc>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 800b13a:	0008      	movs	r0, r1
 800b13c:	f001 f8d8 	bl	800c2f0 <RegionEU868ApplyCFList>
        default:
        {
            break;
        }
    }
}
 800b140:	bd10      	pop	{r4, pc}

0800b142 <RegionChanMaskSet>:
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 800b142:	2300      	movs	r3, #0
{
 800b144:	b510      	push	{r4, lr}
    switch( region )
 800b146:	2805      	cmp	r0, #5
 800b148:	d103      	bne.n	800b152 <RegionChanMaskSet+0x10>
        EU868_CHAN_MASK_SET( );
 800b14a:	0008      	movs	r0, r1
 800b14c:	f000 fdba 	bl	800bcc4 <RegionEU868ChanMaskSet>
 800b150:	0003      	movs	r3, r0
        }
    }
}
 800b152:	0018      	movs	r0, r3
 800b154:	bd10      	pop	{r4, pc}

0800b156 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800b156:	b510      	push	{r4, lr}
 800b158:	0004      	movs	r4, r0
 800b15a:	0008      	movs	r0, r1
 800b15c:	0011      	movs	r1, r2
 800b15e:	001a      	movs	r2, r3
    switch( region )
 800b160:	2c05      	cmp	r4, #5
 800b162:	d102      	bne.n	800b16a <RegionComputeRxWindowParameters+0x14>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800b164:	9b02      	ldr	r3, [sp, #8]
 800b166:	f000 fdc9 	bl	800bcfc <RegionEU868ComputeRxWindowParameters>
        default:
        {
            break;
        }
    }
}
 800b16a:	bd10      	pop	{r4, pc}

0800b16c <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800b16c:	b510      	push	{r4, lr}
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 800b16e:	2300      	movs	r3, #0
{
 800b170:	0004      	movs	r4, r0
 800b172:	0008      	movs	r0, r1
 800b174:	0011      	movs	r1, r2
    switch( region )
 800b176:	2c05      	cmp	r4, #5
 800b178:	d102      	bne.n	800b180 <RegionRxConfig+0x14>
        EU868_RX_CONFIG( );
 800b17a:	f000 fdf1 	bl	800bd60 <RegionEU868RxConfig>
 800b17e:	0003      	movs	r3, r0
        }
    }
}
 800b180:	0018      	movs	r0, r3
 800b182:	bd10      	pop	{r4, pc}

0800b184 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800b184:	b570      	push	{r4, r5, r6, lr}
 800b186:	0005      	movs	r5, r0
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 800b188:	2400      	movs	r4, #0
{
 800b18a:	0008      	movs	r0, r1
 800b18c:	0011      	movs	r1, r2
 800b18e:	001a      	movs	r2, r3
    switch( region )
 800b190:	2d05      	cmp	r5, #5
 800b192:	d102      	bne.n	800b19a <RegionTxConfig+0x16>
        EU868_TX_CONFIG( );
 800b194:	f000 fe5a 	bl	800be4c <RegionEU868TxConfig>
 800b198:	0004      	movs	r4, r0
        }
    }
}
 800b19a:	0020      	movs	r0, r4
 800b19c:	bd70      	pop	{r4, r5, r6, pc}

0800b19e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800b19e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1a0:	0005      	movs	r5, r0
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 800b1a2:	2400      	movs	r4, #0
{
 800b1a4:	0008      	movs	r0, r1
 800b1a6:	0011      	movs	r1, r2
 800b1a8:	001a      	movs	r2, r3
    switch( region )
 800b1aa:	2d05      	cmp	r5, #5
 800b1ac:	d105      	bne.n	800b1ba <RegionLinkAdrReq+0x1c>
        EU868_LINK_ADR_REQ( );
 800b1ae:	9b07      	ldr	r3, [sp, #28]
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	f000 fecc 	bl	800bf50 <RegionEU868LinkAdrReq>
 800b1b8:	0004      	movs	r4, r0
        }
    }
}
 800b1ba:	0020      	movs	r0, r4
 800b1bc:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0800b1be <RegionRxParamSetupReq>:
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800b1be:	2300      	movs	r3, #0
{
 800b1c0:	b510      	push	{r4, lr}
    switch( region )
 800b1c2:	2805      	cmp	r0, #5
 800b1c4:	d103      	bne.n	800b1ce <RegionRxParamSetupReq+0x10>
        EU868_RX_PARAM_SETUP_REQ( );
 800b1c6:	0008      	movs	r0, r1
 800b1c8:	f000 ff64 	bl	800c094 <RegionEU868RxParamSetupReq>
 800b1cc:	0003      	movs	r3, r0
        }
    }
}
 800b1ce:	0018      	movs	r0, r3
 800b1d0:	bd10      	pop	{r4, pc}

0800b1d2 <RegionNewChannelReq>:
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 800b1d2:	2300      	movs	r3, #0
{
 800b1d4:	b510      	push	{r4, lr}
    switch( region )
 800b1d6:	2805      	cmp	r0, #5
 800b1d8:	d103      	bne.n	800b1e2 <RegionNewChannelReq+0x10>
        EU868_NEW_CHANNEL_REQ( );
 800b1da:	0008      	movs	r0, r1
 800b1dc:	f001 f8c2 	bl	800c364 <RegionEU868NewChannelReq>
 800b1e0:	0003      	movs	r3, r0
        }
    }
}
 800b1e2:	0018      	movs	r0, r3
 800b1e4:	bd10      	pop	{r4, pc}

0800b1e6 <RegionTxParamSetupReq>:
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 800b1e6:	2300      	movs	r3, #0
{
 800b1e8:	b510      	push	{r4, lr}
    switch( region )
 800b1ea:	2805      	cmp	r0, #5
 800b1ec:	d103      	bne.n	800b1f6 <RegionTxParamSetupReq+0x10>
        EU868_TX_PARAM_SETUP_REQ( );
 800b1ee:	0008      	movs	r0, r1
 800b1f0:	f000 ff71 	bl	800c0d6 <RegionEU868TxParamSetupReq>
 800b1f4:	0003      	movs	r3, r0
        }
    }
}
 800b1f6:	0018      	movs	r0, r3
 800b1f8:	bd10      	pop	{r4, pc}

0800b1fa <RegionDlChannelReq>:
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 800b1fa:	2300      	movs	r3, #0
{
 800b1fc:	b510      	push	{r4, lr}
    switch( region )
 800b1fe:	2805      	cmp	r0, #5
 800b200:	d103      	bne.n	800b20a <RegionDlChannelReq+0x10>
        EU868_DL_CHANNEL_REQ( );
 800b202:	0008      	movs	r0, r1
 800b204:	f000 ff6a 	bl	800c0dc <RegionEU868DlChannelReq>
 800b208:	0003      	movs	r3, r0
        }
    }
}
 800b20a:	0018      	movs	r0, r3
 800b20c:	bd10      	pop	{r4, pc}

0800b20e <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800b20e:	b510      	push	{r4, lr}
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 800b210:	2300      	movs	r3, #0
{
 800b212:	0004      	movs	r4, r0
 800b214:	0008      	movs	r0, r1
 800b216:	0011      	movs	r1, r2
    switch( region )
 800b218:	2c05      	cmp	r4, #5
 800b21a:	d102      	bne.n	800b222 <RegionAlternateDr+0x14>
        EU868_ALTERNATE_DR( );
 800b21c:	f000 ff80 	bl	800c120 <RegionEU868AlternateDr>
 800b220:	0003      	movs	r3, r0
        }
    }
}
 800b222:	0018      	movs	r0, r3
 800b224:	bd10      	pop	{r4, pc}

0800b226 <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800b226:	b570      	push	{r4, r5, r6, lr}
 800b228:	0005      	movs	r5, r0
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b22a:	2409      	movs	r4, #9
{
 800b22c:	0008      	movs	r0, r1
 800b22e:	0011      	movs	r1, r2
 800b230:	001a      	movs	r2, r3
    switch( region )
 800b232:	2d05      	cmp	r5, #5
 800b234:	d103      	bne.n	800b23e <RegionNextChannel+0x18>
        EU868_NEXT_CHANNEL( );
 800b236:	9b04      	ldr	r3, [sp, #16]
 800b238:	f000 ff74 	bl	800c124 <RegionEU868NextChannel>
 800b23c:	0004      	movs	r4, r0
        }
    }
}
 800b23e:	0020      	movs	r0, r4
 800b240:	bd70      	pop	{r4, r5, r6, pc}

0800b242 <RegionSetContinuousWave>:
        }
    }
}

void RegionSetContinuousWave( LoRaMacRegion_t region, ContinuousWaveParams_t* continuousWave )
{
 800b242:	b510      	push	{r4, lr}
    switch( region )
 800b244:	2805      	cmp	r0, #5
 800b246:	d102      	bne.n	800b24e <RegionSetContinuousWave+0xc>
        AS923_SET_CONTINUOUS_WAVE( );
        AU915_SET_CONTINUOUS_WAVE( );
        CN470_SET_CONTINUOUS_WAVE( );
        CN779_SET_CONTINUOUS_WAVE( );
        EU433_SET_CONTINUOUS_WAVE( );
        EU868_SET_CONTINUOUS_WAVE( );
 800b248:	0008      	movs	r0, r1
 800b24a:	f001 f8a9 	bl	800c3a0 <RegionEU868SetContinuousWave>
        default:
        {
            break;
        }
    }
}
 800b24e:	bd10      	pop	{r4, pc}

0800b250 <RegionApplyDrOffset>:

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800b250:	b570      	push	{r4, r5, r6, lr}
 800b252:	0005      	movs	r5, r0
 800b254:	0008      	movs	r0, r1
 800b256:	0011      	movs	r1, r2
 800b258:	001a      	movs	r2, r3
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800b25a:	b2cc      	uxtb	r4, r1
    switch( region )
 800b25c:	2d05      	cmp	r5, #5
 800b25e:	d102      	bne.n	800b266 <RegionApplyDrOffset+0x16>
        EU868_APPLY_DR_OFFSET( );
 800b260:	f001 f8c4 	bl	800c3ec <RegionEU868ApplyDrOffset>
 800b264:	0004      	movs	r4, r0
        }
    }
}
 800b266:	0020      	movs	r0, r4
 800b268:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b26c <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800b26c:	4800      	ldr	r0, [pc, #0]	; (800b270 <RegionGetVersion+0x4>)
 800b26e:	4770      	bx	lr
 800b270:	01000300 	.word	0x01000300

0800b274 <RegionCommonChanVerifyDr>:
    }
    return nbActiveBits;
}

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 800b274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b276:	9101      	str	r1, [sp, #4]
 800b278:	a908      	add	r1, sp, #32
 800b27a:	7809      	ldrb	r1, [r1, #0]
 800b27c:	9000      	str	r0, [sp, #0]
 800b27e:	b249      	sxtb	r1, r1
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
    {
        return false;
 800b280:	2000      	movs	r0, #0
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800b282:	429a      	cmp	r2, r3
 800b284:	db28      	blt.n	800b2d8 <RegionCommonChanVerifyDr+0x64>
 800b286:	428a      	cmp	r2, r1
 800b288:	dc26      	bgt.n	800b2d8 <RegionCommonChanVerifyDr+0x64>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b28a:	2701      	movs	r7, #1
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b28c:	260f      	movs	r6, #15
 800b28e:	e01d      	b.n	800b2cc <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800b290:	9c01      	ldr	r4, [sp, #4]
 800b292:	0041      	lsls	r1, r0, #1
 800b294:	5b09      	ldrh	r1, [r1, r4]
 800b296:	2500      	movs	r5, #0
 800b298:	468c      	mov	ip, r1
 800b29a:	210c      	movs	r1, #12
 800b29c:	434b      	muls	r3, r1
 800b29e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b2a0:	18cb      	adds	r3, r1, r3
 800b2a2:	4661      	mov	r1, ip
 800b2a4:	4129      	asrs	r1, r5
 800b2a6:	4239      	tst	r1, r7
 800b2a8:	d00a      	beq.n	800b2c0 <RegionCommonChanVerifyDr+0x4c>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800b2aa:	7a19      	ldrb	r1, [r3, #8]
 800b2ac:	070c      	lsls	r4, r1, #28
 800b2ae:	1724      	asrs	r4, r4, #28
    if( ( value >= min ) && ( value <= max ) )
 800b2b0:	4034      	ands	r4, r6
 800b2b2:	42a2      	cmp	r2, r4
 800b2b4:	db04      	blt.n	800b2c0 <RegionCommonChanVerifyDr+0x4c>
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 800b2b6:	b249      	sxtb	r1, r1
 800b2b8:	1109      	asrs	r1, r1, #4
    if( ( value >= min ) && ( value <= max ) )
 800b2ba:	4031      	ands	r1, r6
 800b2bc:	428a      	cmp	r2, r1
 800b2be:	dd0c      	ble.n	800b2da <RegionCommonChanVerifyDr+0x66>
        for( uint8_t j = 0; j < 16; j++ )
 800b2c0:	3501      	adds	r5, #1
 800b2c2:	330c      	adds	r3, #12
 800b2c4:	2d10      	cmp	r5, #16
 800b2c6:	d1ec      	bne.n	800b2a2 <RegionCommonChanVerifyDr+0x2e>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	b2c0      	uxtb	r0, r0
 800b2cc:	0103      	lsls	r3, r0, #4
 800b2ce:	9900      	ldr	r1, [sp, #0]
 800b2d0:	b2db      	uxtb	r3, r3
 800b2d2:	4299      	cmp	r1, r3
 800b2d4:	d8dc      	bhi.n	800b290 <RegionCommonChanVerifyDr+0x1c>
        return false;
 800b2d6:	2000      	movs	r0, #0
}
 800b2d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                    return true;
 800b2da:	2001      	movs	r0, #1
 800b2dc:	e7fc      	b.n	800b2d8 <RegionCommonChanVerifyDr+0x64>

0800b2de <RegionCommonValueInRange>:
{
 800b2de:	0003      	movs	r3, r0
    {
        return 1;
    }
    return 0;
 800b2e0:	2000      	movs	r0, #0
    if( ( value >= min ) && ( value <= max ) )
 800b2e2:	428b      	cmp	r3, r1
 800b2e4:	db04      	blt.n	800b2f0 <RegionCommonValueInRange+0x12>
 800b2e6:	0fd8      	lsrs	r0, r3, #31
 800b2e8:	17d1      	asrs	r1, r2, #31
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	4148      	adcs	r0, r1
        return 1;
 800b2ee:	b2c0      	uxtb	r0, r0
}
 800b2f0:	4770      	bx	lr

0800b2f2 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 800b2f2:	b530      	push	{r4, r5, lr}
    uint8_t index = id / 16;
 800b2f4:	090b      	lsrs	r3, r1, #4
{
 800b2f6:	0004      	movs	r4, r0

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b2f8:	0915      	lsrs	r5, r2, #4
    {
        return false;
 800b2fa:	2000      	movs	r0, #0
    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800b2fc:	429d      	cmp	r5, r3
 800b2fe:	d30b      	bcc.n	800b318 <RegionCommonChanDisable+0x26>
 800b300:	4291      	cmp	r1, r2
 800b302:	d209      	bcs.n	800b318 <RegionCommonChanDisable+0x26>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800b304:	220f      	movs	r2, #15
 800b306:	3001      	adds	r0, #1
 800b308:	4011      	ands	r1, r2
 800b30a:	0002      	movs	r2, r0
 800b30c:	408a      	lsls	r2, r1
 800b30e:	0011      	movs	r1, r2
 800b310:	005b      	lsls	r3, r3, #1
 800b312:	5ae2      	ldrh	r2, [r4, r3]
 800b314:	438a      	bics	r2, r1
 800b316:	52e2      	strh	r2, [r4, r3]

    return true;
}
 800b318:	bd30      	pop	{r4, r5, pc}

0800b31a <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800b31a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b31c:	9201      	str	r2, [sp, #4]
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800b31e:	2800      	cmp	r0, #0
 800b320:	d005      	beq.n	800b32e <RegionCommonCountChannels+0x14>
 800b322:	004a      	lsls	r2, r1, #1
 800b324:	1883      	adds	r3, r0, r2
    uint8_t nbChannels = 0;
 800b326:	2000      	movs	r0, #0
    {
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b328:	9a01      	ldr	r2, [sp, #4]
 800b32a:	4291      	cmp	r1, r2
 800b32c:	d300      	bcc.n	800b330 <RegionCommonCountChannels+0x16>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
    }

    return nbChannels;
}
 800b32e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b330:	2400      	movs	r4, #0
    uint8_t nbActiveBits = 0;
 800b332:	0022      	movs	r2, r4
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b334:	881f      	ldrh	r7, [r3, #0]
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800b336:	2501      	movs	r5, #1
 800b338:	40a5      	lsls	r5, r4
 800b33a:	002e      	movs	r6, r5
 800b33c:	403e      	ands	r6, r7
 800b33e:	42b5      	cmp	r5, r6
 800b340:	d101      	bne.n	800b346 <RegionCommonCountChannels+0x2c>
            nbActiveBits++;
 800b342:	3201      	adds	r2, #1
 800b344:	b2d2      	uxtb	r2, r2
    for( uint8_t j = 0; j < nbBits; j++ )
 800b346:	3401      	adds	r4, #1
 800b348:	2c10      	cmp	r4, #16
 800b34a:	d1f4      	bne.n	800b336 <RegionCommonCountChannels+0x1c>
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b34c:	1880      	adds	r0, r0, r2
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b34e:	3101      	adds	r1, #1
        nbChannels += CountChannels( channelsMask[i], 16 );
 800b350:	b2c0      	uxtb	r0, r0
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800b352:	b2c9      	uxtb	r1, r1
 800b354:	3302      	adds	r3, #2
 800b356:	e7e7      	b.n	800b328 <RegionCommonCountChannels+0xe>

0800b358 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 800b358:	b510      	push	{r4, lr}
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d005      	beq.n	800b36a <RegionCommonChanMaskCopy+0x12>
 800b35e:	2900      	cmp	r1, #0
 800b360:	d003      	beq.n	800b36a <RegionCommonChanMaskCopy+0x12>
 800b362:	2300      	movs	r3, #0
 800b364:	0052      	lsls	r2, r2, #1
    {
        for( uint8_t i = 0; i < len; i++ )
 800b366:	4293      	cmp	r3, r2
 800b368:	d100      	bne.n	800b36c <RegionCommonChanMaskCopy+0x14>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
        }
    }
}
 800b36a:	bd10      	pop	{r4, pc}
            channelsMaskDest[i] = channelsMaskSrc[i];
 800b36c:	5acc      	ldrh	r4, [r1, r3]
 800b36e:	52c4      	strh	r4, [r0, r3]
        for( uint8_t i = 0; i < len; i++ )
 800b370:	3302      	adds	r3, #2
 800b372:	e7f8      	b.n	800b366 <RegionCommonChanMaskCopy+0xe>

0800b374 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800b374:	b082      	sub	sp, #8
 800b376:	b570      	push	{r4, r5, r6, lr}
 800b378:	8805      	ldrh	r5, [r0, #0]
 800b37a:	9305      	str	r3, [sp, #20]
    if( joined == false )
 800b37c:	2a00      	cmp	r2, #0
 800b37e:	d111      	bne.n	800b3a4 <RegionCommonSetBandTxDone+0x30>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b380:	26e1      	movs	r6, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b382:	2464      	movs	r4, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b384:	0136      	lsls	r6, r6, #4
 800b386:	42b3      	cmp	r3, r6
 800b388:	d307      	bcc.n	800b39a <RegionCommonSetBandTxDone+0x26>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b38a:	4c0e      	ldr	r4, [pc, #56]	; (800b3c4 <RegionCommonSetBandTxDone+0x50>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b38c:	429c      	cmp	r4, r3
 800b38e:	4152      	adcs	r2, r2
 800b390:	4b0d      	ldr	r3, [pc, #52]	; (800b3c8 <RegionCommonSetBandTxDone+0x54>)
 800b392:	4254      	negs	r4, r2
 800b394:	401c      	ands	r4, r3
 800b396:	4b0d      	ldr	r3, [pc, #52]	; (800b3cc <RegionCommonSetBandTxDone+0x58>)
 800b398:	18e4      	adds	r4, r4, r3
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b39a:	1c2b      	adds	r3, r5, #0
 800b39c:	42a5      	cmp	r5, r4
 800b39e:	d200      	bcs.n	800b3a2 <RegionCommonSetBandTxDone+0x2e>
 800b3a0:	1c23      	adds	r3, r4, #0
 800b3a2:	b29d      	uxth	r5, r3
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b3a4:	68c2      	ldr	r2, [r0, #12]
 800b3a6:	1c2b      	adds	r3, r5, #0
 800b3a8:	2d00      	cmp	r5, #0
 800b3aa:	d100      	bne.n	800b3ae <RegionCommonSetBandTxDone+0x3a>
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	b29b      	uxth	r3, r3
 800b3b0:	4359      	muls	r1, r3
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
    }
    else
    {
        band->TimeCredits = 0;
 800b3b2:	2300      	movs	r3, #0
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800b3b4:	428a      	cmp	r2, r1
 800b3b6:	d900      	bls.n	800b3ba <RegionCommonSetBandTxDone+0x46>
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800b3b8:	1a53      	subs	r3, r2, r1
 800b3ba:	60c3      	str	r3, [r0, #12]
    }
}
 800b3bc:	bc70      	pop	{r4, r5, r6}
 800b3be:	bc08      	pop	{r3}
 800b3c0:	b002      	add	sp, #8
 800b3c2:	4718      	bx	r3
 800b3c4:	00009aaf 	.word	0x00009aaf
 800b3c8:	ffffdcd8 	.word	0xffffdcd8
 800b3cc:	00002710 	.word	0x00002710

0800b3d0 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800b3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3d2:	b093      	sub	sp, #76	; 0x4c
 800b3d4:	9305      	str	r3, [sp, #20]
 800b3d6:	ab18      	add	r3, sp, #96	; 0x60
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	000c      	movs	r4, r1
 800b3dc:	0015      	movs	r5, r2
 800b3de:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b3e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b3e2:	9002      	str	r0, [sp, #8]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b3e4:	f002 fe84 	bl	800e0f0 <UTIL_TIMER_GetCurrentTime>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b3e8:	4b70      	ldr	r3, [pc, #448]	; (800b5ac <RegionCommonUpdateBandTimeOff+0x1dc>)
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800b3ea:	9008      	str	r0, [sp, #32]
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800b3ec:	4970      	ldr	r1, [pc, #448]	; (800b5b0 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800b3ee:	18f0      	adds	r0, r6, r3
 800b3f0:	f7f4 feba 	bl	8000168 <__udivsi3>
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800b3f4:	4b6e      	ldr	r3, [pc, #440]	; (800b5b0 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800b3f6:	4358      	muls	r0, r3
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b3f8:	4b6e      	ldr	r3, [pc, #440]	; (800b5b4 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800b3fa:	18c3      	adds	r3, r0, r3
 800b3fc:	9306      	str	r3, [sp, #24]
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b3fe:	4b6c      	ldr	r3, [pc, #432]	; (800b5b0 <RegionCommonUpdateBandTimeOff+0x1e0>)
 800b400:	18c3      	adds	r3, r0, r3
 800b402:	9307      	str	r3, [sp, #28]
 800b404:	2318      	movs	r3, #24
 800b406:	436b      	muls	r3, r5
 800b408:	18e3      	adds	r3, r4, r3
 800b40a:	930a      	str	r3, [sp, #40]	; 0x28
    uint8_t validBands = 0;
 800b40c:	2300      	movs	r3, #0
 800b40e:	9303      	str	r3, [sp, #12]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800b410:	3b01      	subs	r3, #1
 800b412:	9304      	str	r3, [sp, #16]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b416:	42a3      	cmp	r3, r4
 800b418:	d107      	bne.n	800b42a <RegionCommonUpdateBandTimeOff+0x5a>
            }
        }
    }


    if( validBands == 0 )
 800b41a:	9b03      	ldr	r3, [sp, #12]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d101      	bne.n	800b424 <RegionCommonUpdateBandTimeOff+0x54>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 800b420:	3b01      	subs	r3, #1
 800b422:	9304      	str	r3, [sp, #16]
    }
    return minTimeToWait;
}
 800b424:	9804      	ldr	r0, [sp, #16]
 800b426:	b013      	add	sp, #76	; 0x4c
 800b428:	bdf0      	pop	{r4, r5, r6, r7, pc}
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800b42a:	9619      	str	r6, [sp, #100]	; 0x64
 800b42c:	ab19      	add	r3, sp, #100	; 0x64
 800b42e:	2204      	movs	r2, #4
 800b430:	5e9a      	ldrsh	r2, [r3, r2]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800b432:	ab0c      	add	r3, sp, #48	; 0x30
 800b434:	809a      	strh	r2, [r3, #4]
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800b436:	0030      	movs	r0, r6
 800b438:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b43a:	960c      	str	r6, [sp, #48]	; 0x30
 800b43c:	f002 fde6 	bl	800e00c <SysTimeToMs>
    if( joined == false )
 800b440:	9b02      	ldr	r3, [sp, #8]
 800b442:	8825      	ldrh	r5, [r4, #0]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d112      	bne.n	800b46e <RegionCommonUpdateBandTimeOff+0x9e>
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b448:	22e1      	movs	r2, #225	; 0xe1
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800b44a:	3364      	adds	r3, #100	; 0x64
        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800b44c:	0112      	lsls	r2, r2, #4
 800b44e:	4296      	cmp	r6, r2
 800b450:	d308      	bcc.n	800b464 <RegionCommonUpdateBandTimeOff+0x94>
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800b452:	4b59      	ldr	r3, [pc, #356]	; (800b5b8 <RegionCommonUpdateBandTimeOff+0x1e8>)
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800b454:	9a02      	ldr	r2, [sp, #8]
 800b456:	42b3      	cmp	r3, r6
 800b458:	4152      	adcs	r2, r2
 800b45a:	4253      	negs	r3, r2
 800b45c:	4a57      	ldr	r2, [pc, #348]	; (800b5bc <RegionCommonUpdateBandTimeOff+0x1ec>)
 800b45e:	4013      	ands	r3, r2
 800b460:	4a57      	ldr	r2, [pc, #348]	; (800b5c0 <RegionCommonUpdateBandTimeOff+0x1f0>)
 800b462:	189b      	adds	r3, r3, r2
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800b464:	1c2a      	adds	r2, r5, #0
 800b466:	429d      	cmp	r5, r3
 800b468:	d200      	bcs.n	800b46c <RegionCommonUpdateBandTimeOff+0x9c>
 800b46a:	1c1a      	adds	r2, r3, #0
 800b46c:	b295      	uxth	r5, r2
    if( dutyCycle == 0 )
 800b46e:	1c2b      	adds	r3, r5, #0
 800b470:	2d00      	cmp	r5, #0
 800b472:	d100      	bne.n	800b476 <RegionCommonUpdateBandTimeOff+0xa6>
 800b474:	2301      	movs	r3, #1
 800b476:	b29b      	uxth	r3, r3
 800b478:	9309      	str	r3, [sp, #36]	; 0x24
    if( joined == false )
 800b47a:	9b02      	ldr	r3, [sp, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d15b      	bne.n	800b538 <RegionCommonUpdateBandTimeOff+0x168>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b480:	2d64      	cmp	r5, #100	; 0x64
 800b482:	d150      	bne.n	800b526 <RegionCommonUpdateBandTimeOff+0x156>
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b484:	4f4f      	ldr	r7, [pc, #316]	; (800b5c4 <RegionCommonUpdateBandTimeOff+0x1f4>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800b486:	60a0      	str	r0, [r4, #8]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b488:	68a1      	ldr	r1, [r4, #8]
 800b48a:	a810      	add	r0, sp, #64	; 0x40
 800b48c:	f002 fddc 	bl	800e048 <SysTimeFromMs>
 800b490:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b492:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b494:	9300      	str	r3, [sp, #0]
 800b496:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b498:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b49a:	a80e      	add	r0, sp, #56	; 0x38
 800b49c:	f002 fd40 	bl	800df20 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b4a0:	9b05      	ldr	r3, [sp, #20]
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800b4a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d102      	bne.n	800b4ae <RegionCommonUpdateBandTimeOff+0xde>
 800b4a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d005      	beq.n	800b4ba <RegionCommonUpdateBandTimeOff+0xea>
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	42bb      	cmp	r3, r7
 800b4b2:	d102      	bne.n	800b4ba <RegionCommonUpdateBandTimeOff+0xea>
            ( band->MaxTimeCredits != maxCredits ) ||
 800b4b4:	4b44      	ldr	r3, [pc, #272]	; (800b5c8 <RegionCommonUpdateBandTimeOff+0x1f8>)
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d90d      	bls.n	800b4d6 <RegionCommonUpdateBandTimeOff+0x106>
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b4ba:	4b44      	ldr	r3, [pc, #272]	; (800b5cc <RegionCommonUpdateBandTimeOff+0x1fc>)
            band->TimeCredits = maxCredits;
 800b4bc:	60e7      	str	r7, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b4be:	429e      	cmp	r6, r3
 800b4c0:	d909      	bls.n	800b4d6 <RegionCommonUpdateBandTimeOff+0x106>
                timeDiff.SubSeconds = 0;
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	ab0e      	add	r3, sp, #56	; 0x38
 800b4c6:	809a      	strh	r2, [r3, #4]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800b4c8:	9a06      	ldr	r2, [sp, #24]
 800b4ca:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b4cc:	0010      	movs	r0, r2
 800b4ce:	920e      	str	r2, [sp, #56]	; 0x38
 800b4d0:	f002 fd9c 	bl	800e00c <SysTimeToMs>
 800b4d4:	60a0      	str	r0, [r4, #8]
    if( band->LastBandUpdateTime == 0 )
 800b4d6:	6860      	ldr	r0, [r4, #4]
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	d100      	bne.n	800b4de <RegionCommonUpdateBandTimeOff+0x10e>
        band->TimeCredits = maxCredits;
 800b4dc:	60e7      	str	r7, [r4, #12]
    if( joined == true )
 800b4de:	9b02      	ldr	r3, [sp, #8]
    band->MaxTimeCredits = maxCredits;
 800b4e0:	6127      	str	r7, [r4, #16]
    if( joined == true )
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d004      	beq.n	800b4f0 <RegionCommonUpdateBandTimeOff+0x120>
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800b4e6:	f002 fe0d 	bl	800e104 <UTIL_TIMER_GetElapsedTime>
 800b4ea:	68e3      	ldr	r3, [r4, #12]
 800b4ec:	181b      	adds	r3, r3, r0
 800b4ee:	60e3      	str	r3, [r4, #12]
    if( band->TimeCredits > band->MaxTimeCredits )
 800b4f0:	6922      	ldr	r2, [r4, #16]
 800b4f2:	68e3      	ldr	r3, [r4, #12]
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d900      	bls.n	800b4fa <RegionCommonUpdateBandTimeOff+0x12a>
        band->TimeCredits = band->MaxTimeCredits;
 800b4f8:	60e2      	str	r2, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800b4fa:	9b08      	ldr	r3, [sp, #32]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b4fc:	991b      	ldr	r1, [sp, #108]	; 0x6c
    band->LastBandUpdateTime = currentTime;
 800b4fe:	6063      	str	r3, [r4, #4]
        creditCosts = expectedTimeOnAir * dutyCycle;
 800b500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b502:	434b      	muls	r3, r1
        if( ( bands[i].TimeCredits > creditCosts ) ||
 800b504:	68e1      	ldr	r1, [r4, #12]
 800b506:	4299      	cmp	r1, r3
 800b508:	d805      	bhi.n	800b516 <RegionCommonUpdateBandTimeOff+0x146>
 800b50a:	9805      	ldr	r0, [sp, #20]
 800b50c:	2800      	cmp	r0, #0
 800b50e:	d11a      	bne.n	800b546 <RegionCommonUpdateBandTimeOff+0x176>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800b510:	9802      	ldr	r0, [sp, #8]
 800b512:	2800      	cmp	r0, #0
 800b514:	d017      	beq.n	800b546 <RegionCommonUpdateBandTimeOff+0x176>
            bands[i].ReadyForTransmission = true;
 800b516:	2301      	movs	r3, #1
 800b518:	7523      	strb	r3, [r4, #20]
            validBands++;
 800b51a:	9b03      	ldr	r3, [sp, #12]
 800b51c:	3301      	adds	r3, #1
 800b51e:	b2db      	uxtb	r3, r3
 800b520:	9303      	str	r3, [sp, #12]
    for( uint8_t i = 0; i < nbBands; i++ )
 800b522:	3418      	adds	r4, #24
 800b524:	e776      	b.n	800b414 <RegionCommonUpdateBandTimeOff+0x44>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800b526:	23fa      	movs	r3, #250	; 0xfa
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	429d      	cmp	r5, r3
 800b52c:	d102      	bne.n	800b534 <RegionCommonUpdateBandTimeOff+0x164>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800b52e:	4f28      	ldr	r7, [pc, #160]	; (800b5d0 <RegionCommonUpdateBandTimeOff+0x200>)
            band->LastMaxCreditAssignTime = elapsedTime;
 800b530:	60a0      	str	r0, [r4, #8]
 800b532:	e7a9      	b.n	800b488 <RegionCommonUpdateBandTimeOff+0xb8>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800b534:	4f27      	ldr	r7, [pc, #156]	; (800b5d4 <RegionCommonUpdateBandTimeOff+0x204>)
 800b536:	e7a7      	b.n	800b488 <RegionCommonUpdateBandTimeOff+0xb8>
        if( dutyCycleEnabled == false )
 800b538:	4b22      	ldr	r3, [pc, #136]	; (800b5c4 <RegionCommonUpdateBandTimeOff+0x1f4>)
 800b53a:	9a05      	ldr	r2, [sp, #20]
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800b53c:	001f      	movs	r7, r3
        if( dutyCycleEnabled == false )
 800b53e:	2a00      	cmp	r2, #0
 800b540:	d1c9      	bne.n	800b4d6 <RegionCommonUpdateBandTimeOff+0x106>
            band->TimeCredits = maxCredits;
 800b542:	60e3      	str	r3, [r4, #12]
 800b544:	e7c7      	b.n	800b4d6 <RegionCommonUpdateBandTimeOff+0x106>
            bands[i].ReadyForTransmission = false;
 800b546:	2000      	movs	r0, #0
 800b548:	7520      	strb	r0, [r4, #20]
            if( bands[i].MaxTimeCredits > creditCosts )
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d208      	bcs.n	800b560 <RegionCommonUpdateBandTimeOff+0x190>
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800b54e:	9a04      	ldr	r2, [sp, #16]
 800b550:	1a5b      	subs	r3, r3, r1
 800b552:	429a      	cmp	r2, r3
 800b554:	d900      	bls.n	800b558 <RegionCommonUpdateBandTimeOff+0x188>
 800b556:	9304      	str	r3, [sp, #16]
                validBands++;
 800b558:	9b03      	ldr	r3, [sp, #12]
 800b55a:	3301      	adds	r3, #1
 800b55c:	b2db      	uxtb	r3, r3
 800b55e:	9303      	str	r3, [sp, #12]
            if( joined == false )
 800b560:	9b02      	ldr	r3, [sp, #8]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1dd      	bne.n	800b522 <RegionCommonUpdateBandTimeOff+0x152>
                SysTime_t backoffTimeRange = {
 800b566:	9a02      	ldr	r2, [sp, #8]
 800b568:	ab0e      	add	r3, sp, #56	; 0x38
 800b56a:	809a      	strh	r2, [r3, #4]
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800b56c:	4b11      	ldr	r3, [pc, #68]	; (800b5b4 <RegionCommonUpdateBandTimeOff+0x1e4>)
 800b56e:	2d64      	cmp	r5, #100	; 0x64
 800b570:	d019      	beq.n	800b5a6 <RegionCommonUpdateBandTimeOff+0x1d6>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800b572:	4a19      	ldr	r2, [pc, #100]	; (800b5d8 <RegionCommonUpdateBandTimeOff+0x208>)
 800b574:	18a9      	adds	r1, r5, r2
 800b576:	424a      	negs	r2, r1
 800b578:	4151      	adcs	r1, r2
 800b57a:	4a18      	ldr	r2, [pc, #96]	; (800b5dc <RegionCommonUpdateBandTimeOff+0x20c>)
 800b57c:	4249      	negs	r1, r1
 800b57e:	4011      	ands	r1, r2
 800b580:	18c9      	adds	r1, r1, r3
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800b582:	429e      	cmp	r6, r3
 800b584:	d901      	bls.n	800b58a <RegionCommonUpdateBandTimeOff+0x1ba>
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800b586:	9b07      	ldr	r3, [sp, #28]
 800b588:	18c9      	adds	r1, r1, r3
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800b58a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b58c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b58e:	9300      	str	r3, [sp, #0]
 800b590:	a80e      	add	r0, sp, #56	; 0x38
 800b592:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b594:	910e      	str	r1, [sp, #56]	; 0x38
 800b596:	f002 fcc3 	bl	800df20 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800b59a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800b59c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b59e:	f002 fd35 	bl	800e00c <SysTimeToMs>
 800b5a2:	9004      	str	r0, [sp, #16]
 800b5a4:	e7bd      	b.n	800b522 <RegionCommonUpdateBandTimeOff+0x152>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800b5a6:	21e1      	movs	r1, #225	; 0xe1
 800b5a8:	0109      	lsls	r1, r1, #4
 800b5aa:	e7ea      	b.n	800b582 <RegionCommonUpdateBandTimeOff+0x1b2>
 800b5ac:	fffe13d0 	.word	0xfffe13d0
 800b5b0:	00015180 	.word	0x00015180
 800b5b4:	0001ec30 	.word	0x0001ec30
 800b5b8:	00009aaf 	.word	0x00009aaf
 800b5bc:	ffffdcd8 	.word	0xffffdcd8
 800b5c0:	00002710 	.word	0x00002710
 800b5c4:	001b7740 	.word	0x001b7740
 800b5c8:	0001517f 	.word	0x0001517f
 800b5cc:	0001ec2f 	.word	0x0001ec2f
 800b5d0:	0112a880 	.word	0x0112a880
 800b5d4:	02932e00 	.word	0x02932e00
 800b5d8:	fffffc18 	.word	0xfffffc18
 800b5dc:	fffeae80 	.word	0xfffeae80

0800b5e0 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 800b5e0:	b510      	push	{r4, lr}
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b5e2:	7802      	ldrb	r2, [r0, #0]
{
 800b5e4:	0003      	movs	r3, r0
    uint8_t retIndex = 0;
 800b5e6:	2000      	movs	r0, #0
    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800b5e8:	2a03      	cmp	r2, #3
 800b5ea:	d113      	bne.n	800b614 <RegionCommonParseLinkAdrReq+0x34>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 800b5ec:	785a      	ldrb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b5ee:	300f      	adds	r0, #15
 800b5f0:	0014      	movs	r4, r2
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b5f2:	0912      	lsrs	r2, r2, #4
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800b5f4:	4004      	ands	r4, r0
 800b5f6:	708c      	strb	r4, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800b5f8:	704a      	strb	r2, [r1, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800b5fa:	789a      	ldrb	r2, [r3, #2]
 800b5fc:	808a      	strh	r2, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800b5fe:	78dc      	ldrb	r4, [r3, #3]
 800b600:	0224      	lsls	r4, r4, #8
 800b602:	4322      	orrs	r2, r4
 800b604:	808a      	strh	r2, [r1, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 800b606:	791b      	ldrb	r3, [r3, #4]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b608:	065a      	lsls	r2, r3, #25
 800b60a:	0f52      	lsrs	r2, r2, #29
        linkAdrParams->NbRep &= 0x0F;
 800b60c:	4003      	ands	r3, r0
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800b60e:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800b610:	700b      	strb	r3, [r1, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 800b612:	380a      	subs	r0, #10
    }
    return retIndex;
}
 800b614:	bd10      	pop	{r4, pc}

0800b616 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800b616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b618:	b087      	sub	sp, #28
 800b61a:	9305      	str	r3, [sp, #20]
    uint8_t status = verifyParams->Status;
    int8_t datarate = verifyParams->Datarate;
 800b61c:	2306      	movs	r3, #6
    int8_t txPower = verifyParams->TxPower;
 800b61e:	2607      	movs	r6, #7
{
 800b620:	9103      	str	r1, [sp, #12]
 800b622:	9204      	str	r2, [sp, #16]
    int8_t datarate = verifyParams->Datarate;
 800b624:	56c3      	ldrsb	r3, [r0, r3]
    uint8_t status = verifyParams->Status;
 800b626:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800b628:	9302      	str	r3, [sp, #8]
    int8_t nbRepetitions = verifyParams->NbRep;

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800b62a:	7943      	ldrb	r3, [r0, #5]
{
 800b62c:	0004      	movs	r4, r0
    int8_t txPower = verifyParams->TxPower;
 800b62e:	5786      	ldrsb	r6, [r0, r6]
    if( verifyParams->AdrEnabled == false )
 800b630:	2b00      	cmp	r3, #0
 800b632:	d027      	beq.n	800b684 <RegionCommonLinkAdrReqVerifyParams+0x6e>
    int8_t nbRepetitions = verifyParams->NbRep;
 800b634:	2708      	movs	r7, #8
 800b636:	57c7      	ldrsb	r7, [r0, r7]
        nbRepetitions = verifyParams->CurrentNbRep;
        datarate =  verifyParams->CurrentDatarate;
        txPower =  verifyParams->CurrentTxPower;
    }

    if( status != 0 )
 800b638:	2d00      	cmp	r5, #0
 800b63a:	d019      	beq.n	800b670 <RegionCommonLinkAdrReqVerifyParams+0x5a>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800b63c:	69a2      	ldr	r2, [r4, #24]
 800b63e:	2314      	movs	r3, #20
 800b640:	9201      	str	r2, [sp, #4]
 800b642:	2215      	movs	r2, #21
 800b644:	56a2      	ldrsb	r2, [r4, r2]
 800b646:	56e3      	ldrsb	r3, [r4, r3]
 800b648:	9200      	str	r2, [sp, #0]
 800b64a:	7b20      	ldrb	r0, [r4, #12]
 800b64c:	9a02      	ldr	r2, [sp, #8]
 800b64e:	6921      	ldr	r1, [r4, #16]
 800b650:	f7ff fe10 	bl	800b274 <RegionCommonChanVerifyDr>
 800b654:	2800      	cmp	r0, #0
 800b656:	d101      	bne.n	800b65c <RegionCommonLinkAdrReqVerifyParams+0x46>
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
        {
            status &= 0xFD; // Datarate KO
 800b658:	2302      	movs	r3, #2
 800b65a:	439d      	bics	r5, r3
        }

        // Verify tx power
        if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800b65c:	231d      	movs	r3, #29
 800b65e:	56e3      	ldrsb	r3, [r4, r3]
    if( ( value >= min ) && ( value <= max ) )
 800b660:	42b3      	cmp	r3, r6
 800b662:	dc17      	bgt.n	800b694 <RegionCommonLinkAdrReqVerifyParams+0x7e>
 800b664:	231c      	movs	r3, #28
 800b666:	56e3      	ldrsb	r3, [r4, r3]
 800b668:	42b3      	cmp	r3, r6
 800b66a:	da14      	bge.n	800b696 <RegionCommonLinkAdrReqVerifyParams+0x80>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800b66c:	2304      	movs	r3, #4
 800b66e:	439d      	bics	r5, r3
    *dr = datarate;
    *txPow = txPower;
    *nbRep = nbRepetitions;

    return status;
}
 800b670:	0028      	movs	r0, r5
    *dr = datarate;
 800b672:	9b03      	ldr	r3, [sp, #12]
 800b674:	9a02      	ldr	r2, [sp, #8]
 800b676:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 800b678:	9b04      	ldr	r3, [sp, #16]
 800b67a:	701e      	strb	r6, [r3, #0]
    *nbRep = nbRepetitions;
 800b67c:	9b05      	ldr	r3, [sp, #20]
 800b67e:	701f      	strb	r7, [r3, #0]
}
 800b680:	b007      	add	sp, #28
 800b682:	bdf0      	pop	{r4, r5, r6, r7, pc}
        datarate =  verifyParams->CurrentDatarate;
 800b684:	2309      	movs	r3, #9
        nbRepetitions = verifyParams->CurrentNbRep;
 800b686:	270b      	movs	r7, #11
        txPower =  verifyParams->CurrentTxPower;
 800b688:	260a      	movs	r6, #10
        datarate =  verifyParams->CurrentDatarate;
 800b68a:	56c3      	ldrsb	r3, [r0, r3]
        nbRepetitions = verifyParams->CurrentNbRep;
 800b68c:	57c7      	ldrsb	r7, [r0, r7]
        datarate =  verifyParams->CurrentDatarate;
 800b68e:	9302      	str	r3, [sp, #8]
        txPower =  verifyParams->CurrentTxPower;
 800b690:	5786      	ldrsb	r6, [r0, r6]
 800b692:	e7d1      	b.n	800b638 <RegionCommonLinkAdrReqVerifyParams+0x22>
 800b694:	001e      	movs	r6, r3
    if( status == 0x07 )
 800b696:	2d07      	cmp	r5, #7
 800b698:	d1ea      	bne.n	800b670 <RegionCommonLinkAdrReqVerifyParams+0x5a>
        if( nbRepetitions == 0 )
 800b69a:	2f00      	cmp	r7, #0
 800b69c:	d1e8      	bne.n	800b670 <RegionCommonLinkAdrReqVerifyParams+0x5a>
            nbRepetitions = 1;
 800b69e:	3701      	adds	r7, #1
 800b6a0:	e7e6      	b.n	800b670 <RegionCommonLinkAdrReqVerifyParams+0x5a>
	...

0800b6a4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b6a4:	4b03      	ldr	r3, [pc, #12]	; (800b6b4 <RegionCommonComputeSymbolTimeLoRa+0x10>)
{
 800b6a6:	b510      	push	{r4, lr}
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800b6a8:	4083      	lsls	r3, r0
 800b6aa:	0018      	movs	r0, r3
 800b6ac:	f7f4 fd5c 	bl	8000168 <__udivsi3>
}
 800b6b0:	bd10      	pop	{r4, pc}
 800b6b2:	46c0      	nop			; (mov r8, r8)
 800b6b4:	000f4240 	.word	0x000f4240

0800b6b8 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 800b6b8:	0001      	movs	r1, r0
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800b6ba:	20fa      	movs	r0, #250	; 0xfa
{
 800b6bc:	b510      	push	{r4, lr}
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 800b6be:	0140      	lsls	r0, r0, #5
 800b6c0:	f7f4 fd52 	bl	8000168 <__udivsi3>
}
 800b6c4:	bd10      	pop	{r4, pc}
	...

0800b6c8 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800b6c8:	b570      	push	{r4, r5, r6, lr}
 800b6ca:	001e      	movs	r6, r3
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b6cc:	23fa      	movs	r3, #250	; 0xfa
{
 800b6ce:	0004      	movs	r4, r0
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	1f08      	subs	r0, r1, #4
 800b6d4:	4353      	muls	r3, r2
 800b6d6:	4360      	muls	r0, r4
 800b6d8:	18c0      	adds	r0, r0, r3
{
 800b6da:	000d      	movs	r5, r1
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b6dc:	0042      	lsls	r2, r0, #1
 800b6de:	d005      	beq.n	800b6ec <RegionCommonComputeRxWindowParameters+0x24>
 800b6e0:	1e60      	subs	r0, r4, #1
 800b6e2:	1880      	adds	r0, r0, r2
 800b6e4:	0021      	movs	r1, r4
 800b6e6:	f7f4 fd3f 	bl	8000168 <__udivsi3>
 800b6ea:	0002      	movs	r2, r0
 800b6ec:	4295      	cmp	r5, r2
 800b6ee:	d200      	bcs.n	800b6f2 <RegionCommonComputeRxWindowParameters+0x2a>
 800b6f0:	0015      	movs	r5, r2
 800b6f2:	9b04      	ldr	r3, [sp, #16]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b6f4:	00a0      	lsls	r0, r4, #2
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800b6f6:	601d      	str	r5, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	436c      	muls	r4, r5
 800b6fc:	429c      	cmp	r4, r3
 800b6fe:	d001      	beq.n	800b704 <RegionCommonComputeRxWindowParameters+0x3c>
 800b700:	3401      	adds	r4, #1
 800b702:	0863      	lsrs	r3, r4, #1
 800b704:	21fa      	movs	r1, #250	; 0xfa
 800b706:	0089      	lsls	r1, r1, #2
 800b708:	434e      	muls	r6, r1
 800b70a:	1ac0      	subs	r0, r0, r3
 800b70c:	1b80      	subs	r0, r0, r6
 800b70e:	2800      	cmp	r0, #0
 800b710:	dd01      	ble.n	800b716 <RegionCommonComputeRxWindowParameters+0x4e>
 800b712:	4b03      	ldr	r3, [pc, #12]	; (800b720 <RegionCommonComputeRxWindowParameters+0x58>)
 800b714:	18c0      	adds	r0, r0, r3
 800b716:	f7f4 fdb1 	bl	800027c <__divsi3>
 800b71a:	9b05      	ldr	r3, [sp, #20]
 800b71c:	6018      	str	r0, [r3, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800b71e:	bd70      	pop	{r4, r5, r6, pc}
 800b720:	000003e7 	.word	0x000003e7

0800b724 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800b724:	b570      	push	{r4, r5, r6, lr}
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b726:	0040      	lsls	r0, r0, #1
{
 800b728:	1c14      	adds	r4, r2, #0
 800b72a:	1c0d      	adds	r5, r1, #0
    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800b72c:	f7f5 fd14 	bl	8001158 <__aeabi_ui2f>
 800b730:	1c01      	adds	r1, r0, #0
 800b732:	1c28      	adds	r0, r5, #0
 800b734:	f7f5 fb50 	bl	8000dd8 <__aeabi_fsub>
 800b738:	1c21      	adds	r1, r4, #0
 800b73a:	f7f5 fb4d 	bl	8000dd8 <__aeabi_fsub>
 800b73e:	f7f6 f9f5 	bl	8001b2c <__aeabi_f2d>
 800b742:	f003 fc0f 	bl	800ef64 <floor>
 800b746:	f7f6 f9bb 	bl	8001ac0 <__aeabi_d2iz>

    return phyTxPower;
 800b74a:	b240      	sxtb	r0, r0
}
 800b74c:	bd70      	pop	{r4, r5, r6, pc}

0800b74e <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800b74e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b750:	b087      	sub	sp, #28
 800b752:	9305      	str	r3, [sp, #20]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b754:	2300      	movs	r3, #0
    uint8_t nbRestrictedChannelsCount = 0;
 800b756:	469c      	mov	ip, r3
    uint8_t nbChannelCount = 0;
 800b758:	001d      	movs	r5, r3
{
 800b75a:	9103      	str	r1, [sp, #12]
 800b75c:	9204      	str	r2, [sp, #16]
 800b75e:	011a      	lsls	r2, r3, #4
 800b760:	b2d2      	uxtb	r2, r2
 800b762:	9201      	str	r2, [sp, #4]
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b764:	9901      	ldr	r1, [sp, #4]
 800b766:	8a02      	ldrh	r2, [r0, #16]
 800b768:	428a      	cmp	r2, r1
 800b76a:	d806      	bhi.n	800b77a <RegionCommonCountNbOfEnabledChannels+0x2c>
                enabledChannels[nbChannelCount++] = i + j;
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b76c:	4662      	mov	r2, ip
    *nbEnabledChannels = nbChannelCount;
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	701d      	strb	r5, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800b772:	9b05      	ldr	r3, [sp, #20]
 800b774:	701a      	strb	r2, [r3, #0]
}
 800b776:	b007      	add	sp, #28
 800b778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77a:	260c      	movs	r6, #12
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800b77c:	005a      	lsls	r2, r3, #1
 800b77e:	9202      	str	r2, [sp, #8]
 800b780:	9a01      	ldr	r2, [sp, #4]
 800b782:	4356      	muls	r6, r2
 800b784:	2200      	movs	r2, #0
 800b786:	9600      	str	r6, [sp, #0]
 800b788:	6841      	ldr	r1, [r0, #4]
 800b78a:	9c02      	ldr	r4, [sp, #8]
 800b78c:	2701      	movs	r7, #1
 800b78e:	5b09      	ldrh	r1, [r1, r4]
 800b790:	4111      	asrs	r1, r2
 800b792:	4239      	tst	r1, r7
 800b794:	d028      	beq.n	800b7e8 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800b796:	9900      	ldr	r1, [sp, #0]
 800b798:	6884      	ldr	r4, [r0, #8]
 800b79a:	1864      	adds	r4, r4, r1
 800b79c:	6821      	ldr	r1, [r4, #0]
 800b79e:	2900      	cmp	r1, #0
 800b7a0:	d022      	beq.n	800b7e8 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b7a2:	7801      	ldrb	r1, [r0, #0]
 800b7a4:	2900      	cmp	r1, #0
 800b7a6:	d107      	bne.n	800b7b8 <RegionCommonCountNbOfEnabledChannels+0x6a>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800b7a8:	6941      	ldr	r1, [r0, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800b7aa:	2900      	cmp	r1, #0
 800b7ac:	d004      	beq.n	800b7b8 <RegionCommonCountNbOfEnabledChannels+0x6a>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800b7ae:	9e02      	ldr	r6, [sp, #8]
 800b7b0:	5b89      	ldrh	r1, [r1, r6]
 800b7b2:	4111      	asrs	r1, r2
 800b7b4:	4239      	tst	r1, r7
 800b7b6:	d017      	beq.n	800b7e8 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	5641      	ldrsb	r1, [r0, r1]
 800b7bc:	000e      	movs	r6, r1
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800b7be:	7a21      	ldrb	r1, [r4, #8]
 800b7c0:	070f      	lsls	r7, r1, #28
    if( ( value >= min ) && ( value <= max ) )
 800b7c2:	173f      	asrs	r7, r7, #28
 800b7c4:	42be      	cmp	r6, r7
 800b7c6:	db0f      	blt.n	800b7e8 <RegionCommonCountNbOfEnabledChannels+0x9a>
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800b7c8:	b249      	sxtb	r1, r1
    if( ( value >= min ) && ( value <= max ) )
 800b7ca:	1109      	asrs	r1, r1, #4
 800b7cc:	428e      	cmp	r6, r1
 800b7ce:	dc0b      	bgt.n	800b7e8 <RegionCommonCountNbOfEnabledChannels+0x9a>
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800b7d0:	2618      	movs	r6, #24
 800b7d2:	7a64      	ldrb	r4, [r4, #9]
 800b7d4:	68c1      	ldr	r1, [r0, #12]
 800b7d6:	4374      	muls	r4, r6
 800b7d8:	1909      	adds	r1, r1, r4
 800b7da:	7d09      	ldrb	r1, [r1, #20]
 800b7dc:	2900      	cmp	r1, #0
 800b7de:	d10c      	bne.n	800b7fa <RegionCommonCountNbOfEnabledChannels+0xac>
                    nbRestrictedChannelsCount++;
 800b7e0:	4661      	mov	r1, ip
 800b7e2:	3101      	adds	r1, #1
 800b7e4:	b2c9      	uxtb	r1, r1
 800b7e6:	468c      	mov	ip, r1
        for( uint8_t j = 0; j < 16; j++ )
 800b7e8:	9900      	ldr	r1, [sp, #0]
 800b7ea:	3201      	adds	r2, #1
 800b7ec:	310c      	adds	r1, #12
 800b7ee:	9100      	str	r1, [sp, #0]
 800b7f0:	2a10      	cmp	r2, #16
 800b7f2:	d1c9      	bne.n	800b788 <RegionCommonCountNbOfEnabledChannels+0x3a>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	e7b1      	b.n	800b75e <RegionCommonCountNbOfEnabledChannels+0x10>
                enabledChannels[nbChannelCount++] = i + j;
 800b7fa:	9c01      	ldr	r4, [sp, #4]
 800b7fc:	9e03      	ldr	r6, [sp, #12]
 800b7fe:	1c69      	adds	r1, r5, #1
 800b800:	18a4      	adds	r4, r4, r2
 800b802:	5574      	strb	r4, [r6, r5]
 800b804:	b2cd      	uxtb	r5, r1
 800b806:	e7ef      	b.n	800b7e8 <RegionCommonCountNbOfEnabledChannels+0x9a>

0800b808 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800b808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b80a:	0004      	movs	r4, r0
 800b80c:	b089      	sub	sp, #36	; 0x24
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b80e:	6840      	ldr	r0, [r0, #4]
{
 800b810:	001e      	movs	r6, r3
 800b812:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b814:	9205      	str	r2, [sp, #20]
 800b816:	000d      	movs	r5, r1
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800b818:	f002 fc74 	bl	800e104 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b81c:	6823      	ldr	r3, [r4, #0]
    *nbRestrictedChannels = 1;
 800b81e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800b820:	1a1b      	subs	r3, r3, r0
 800b822:	603b      	str	r3, [r7, #0]
    *nbRestrictedChannels = 1;
 800b824:	2301      	movs	r3, #1
 800b826:	7013      	strb	r3, [r2, #0]
    *nbEnabledChannels = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	7033      	strb	r3, [r6, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800b82c:	6863      	ldr	r3, [r4, #4]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d002      	beq.n	800b838 <RegionCommonIdentifyChannels+0x30>
 800b832:	6823      	ldr	r3, [r4, #0]
 800b834:	4283      	cmp	r3, r0
 800b836:	d829      	bhi.n	800b88c <RegionCommonIdentifyChannels+0x84>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800b838:	2300      	movs	r3, #0
 800b83a:	602b      	str	r3, [r5, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b83c:	69e3      	ldr	r3, [r4, #28]
 800b83e:	7a62      	ldrb	r2, [r4, #9]
 800b840:	9304      	str	r3, [sp, #16]
 800b842:	69a1      	ldr	r1, [r4, #24]
 800b844:	9206      	str	r2, [sp, #24]
 800b846:	9a04      	ldr	r2, [sp, #16]
 800b848:	7a23      	ldrb	r3, [r4, #8]
 800b84a:	7812      	ldrb	r2, [r2, #0]
 800b84c:	9103      	str	r1, [sp, #12]
 800b84e:	a901      	add	r1, sp, #4
 800b850:	468c      	mov	ip, r1
 800b852:	0021      	movs	r1, r4
 800b854:	9207      	str	r2, [sp, #28]
 800b856:	4662      	mov	r2, ip
 800b858:	310c      	adds	r1, #12
 800b85a:	c921      	ldmia	r1!, {r0, r5}
 800b85c:	c221      	stmia	r2!, {r0, r5}
 800b85e:	7d21      	ldrb	r1, [r4, #20]
 800b860:	9a06      	ldr	r2, [sp, #24]
 800b862:	9100      	str	r1, [sp, #0]
 800b864:	9904      	ldr	r1, [sp, #16]
 800b866:	9807      	ldr	r0, [sp, #28]
 800b868:	68c9      	ldr	r1, [r1, #12]
 800b86a:	f7ff fdb1 	bl	800b3d0 <RegionCommonUpdateBandTimeOff>
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b86e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800b870:	6038      	str	r0, [r7, #0]
        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800b872:	0032      	movs	r2, r6
 800b874:	9905      	ldr	r1, [sp, #20]
 800b876:	69e0      	ldr	r0, [r4, #28]
 800b878:	f7ff ff69 	bl	800b74e <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800b87c:	7833      	ldrb	r3, [r6, #0]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d004      	beq.n	800b88c <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
 800b882:	2300      	movs	r3, #0
        return LORAMAC_STATUS_OK;
 800b884:	0018      	movs	r0, r3
        *nextTxDelay = 0;
 800b886:	603b      	str	r3, [r7, #0]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800b888:	b009      	add	sp, #36	; 0x24
 800b88a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( *nbRestrictedChannels > 0 )
 800b88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b88e:	7818      	ldrb	r0, [r3, #0]
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800b890:	4243      	negs	r3, r0
 800b892:	4158      	adcs	r0, r3
 800b894:	300b      	adds	r0, #11
 800b896:	e7f7      	b.n	800b888 <RegionCommonIdentifyChannels+0x80>

0800b898 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800b898:	b573      	push	{r0, r1, r4, r5, r6, lr}
    int8_t drLocal = params->CurrentDr;
 800b89a:	2400      	movs	r4, #0

    if( params->CurrentDr == params->MinDr )
 800b89c:	2602      	movs	r6, #2
    int8_t drLocal = params->CurrentDr;
 800b89e:	5704      	ldrsb	r4, [r0, r4]
    if( params->CurrentDr == params->MinDr )
 800b8a0:	5786      	ldrsb	r6, [r0, r6]
{
 800b8a2:	0005      	movs	r5, r0
    if( params->CurrentDr == params->MinDr )
 800b8a4:	42a6      	cmp	r6, r4
 800b8a6:	d010      	beq.n	800b8ca <RegionCommonGetNextLowerTxDr+0x32>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800b8a8:	3c01      	subs	r4, #1
 800b8aa:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
 800b8ac:	42a6      	cmp	r6, r4
 800b8ae:	d00c      	beq.n	800b8ca <RegionCommonGetNextLowerTxDr+0x32>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800b8b0:	68ab      	ldr	r3, [r5, #8]
 800b8b2:	0022      	movs	r2, r4
 800b8b4:	9301      	str	r3, [sp, #4]
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	56eb      	ldrsb	r3, [r5, r3]
 800b8ba:	78e8      	ldrb	r0, [r5, #3]
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	6869      	ldr	r1, [r5, #4]
 800b8c0:	0033      	movs	r3, r6
 800b8c2:	f7ff fcd7 	bl	800b274 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d0ee      	beq.n	800b8a8 <RegionCommonGetNextLowerTxDr+0x10>

        return drLocal;
    }
}
 800b8ca:	0020      	movs	r0, r4
 800b8cc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800b8ce <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 800b8ce:	1c0b      	adds	r3, r1, #0
 800b8d0:	4281      	cmp	r1, r0
 800b8d2:	da00      	bge.n	800b8d6 <RegionCommonLimitTxPower+0x8>
 800b8d4:	1c03      	adds	r3, r0, #0
 800b8d6:	b258      	sxtb	r0, r3
}
 800b8d8:	4770      	bx	lr
	...

0800b8dc <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800b8dc:	0080      	lsls	r0, r0, #2
 800b8de:	5843      	ldr	r3, [r0, r1]
 800b8e0:	4a04      	ldr	r2, [pc, #16]	; (800b8f4 <RegionCommonGetBandwidth+0x18>)
 800b8e2:	2001      	movs	r0, #1
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d004      	beq.n	800b8f2 <RegionCommonGetBandwidth+0x16>
 800b8e8:	4a03      	ldr	r2, [pc, #12]	; (800b8f8 <RegionCommonGetBandwidth+0x1c>)
 800b8ea:	189b      	adds	r3, r3, r2
 800b8ec:	425a      	negs	r2, r3
 800b8ee:	4153      	adcs	r3, r2
 800b8f0:	0058      	lsls	r0, r3, #1
        case 250000:
            return 1;
        case 500000:
            return 2;
    }
}
 800b8f2:	4770      	bx	lr
 800b8f4:	0003d090 	.word	0x0003d090
 800b8f8:	fff85ee0 	.word	0xfff85ee0

0800b8fc <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800b8fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8fe:	b08b      	sub	sp, #44	; 0x2c
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800b900:	ad04      	add	r5, sp, #16
 800b902:	002c      	movs	r4, r5
 800b904:	4b0f      	ldr	r3, [pc, #60]	; (800b944 <RegionCommonRxConfigPrint+0x48>)
{
 800b906:	4694      	mov	ip, r2
    const char *slotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
 800b908:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800b90a:	c4c4      	stmia	r4!, {r2, r6, r7}
 800b90c:	cbc4      	ldmia	r3!, {r2, r6, r7}
 800b90e:	c4c4      	stmia	r4!, {r2, r6, r7}

    if ( rxSlot < RX_SLOT_NONE )
 800b910:	2805      	cmp	r0, #5
 800b912:	d80d      	bhi.n	800b930 <RegionCommonRxConfigPrint+0x34>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", slotStrings[rxSlot], frequency, dr );
 800b914:	4662      	mov	r2, ip
 800b916:	9101      	str	r1, [sp, #4]
 800b918:	0080      	lsls	r0, r0, #2
 800b91a:	9202      	str	r2, [sp, #8]
 800b91c:	5942      	ldr	r2, [r0, r5]
 800b91e:	2100      	movs	r1, #0
 800b920:	9200      	str	r2, [sp, #0]
 800b922:	2002      	movs	r0, #2
 800b924:	2201      	movs	r2, #1
 800b926:	4b08      	ldr	r3, [pc, #32]	; (800b948 <RegionCommonRxConfigPrint+0x4c>)
 800b928:	f002 f918 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800b92c:	b00b      	add	sp, #44	; 0x2c
 800b92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800b930:	4662      	mov	r2, ip
 800b932:	9100      	str	r1, [sp, #0]
 800b934:	9201      	str	r2, [sp, #4]
 800b936:	2100      	movs	r1, #0
 800b938:	2201      	movs	r2, #1
 800b93a:	4b04      	ldr	r3, [pc, #16]	; (800b94c <RegionCommonRxConfigPrint+0x50>)
 800b93c:	2002      	movs	r0, #2
 800b93e:	f002 f90d 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 800b942:	e7f3      	b.n	800b92c <RegionCommonRxConfigPrint+0x30>
 800b944:	0800f4e4 	.word	0x0800f4e4
 800b948:	0800fc42 	.word	0x0800fc42
 800b94c:	0800fc61 	.word	0x0800fc61

0800b950 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800b950:	b507      	push	{r0, r1, r2, lr}
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800b952:	4b04      	ldr	r3, [pc, #16]	; (800b964 <RegionCommonTxConfigPrint+0x14>)
 800b954:	9101      	str	r1, [sp, #4]
 800b956:	9000      	str	r0, [sp, #0]
 800b958:	2201      	movs	r2, #1
 800b95a:	2100      	movs	r1, #0
 800b95c:	2002      	movs	r0, #2
 800b95e:	f002 f8fd 	bl	800db5c <UTIL_ADV_TRACE_COND_FSend>
}
 800b962:	bd07      	pop	{r0, r1, r2, pc}
 800b964:	0800fc7d 	.word	0x0800fc7d

0800b968 <GetTimeOnAir>:
    }
    return true;
}

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800b968:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b96a:	000c      	movs	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800b96c:	4911      	ldr	r1, [pc, #68]	; (800b9b4 <GetTimeOnAir+0x4c>)
{
 800b96e:	b085      	sub	sp, #20
    int8_t phyDr = DataratesEU868[datarate];
 800b970:	560f      	ldrsb	r7, [r1, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800b972:	3108      	adds	r1, #8
{
 800b974:	0005      	movs	r5, r0
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800b976:	f7ff ffb1 	bl	800b8dc <RegionCommonGetBandwidth>
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b97a:	4b0f      	ldr	r3, [pc, #60]	; (800b9b8 <GetTimeOnAir+0x50>)
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800b97c:	0001      	movs	r1, r0
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b97e:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 800b980:	2001      	movs	r0, #1
 800b982:	b2e4      	uxtb	r4, r4
    if( datarate == DR_7 )
 800b984:	2d07      	cmp	r5, #7
 800b986:	d10c      	bne.n	800b9a2 <GetTimeOnAir+0x3a>
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800b988:	2305      	movs	r3, #5
 800b98a:	9003      	str	r0, [sp, #12]
 800b98c:	2000      	movs	r0, #0
 800b98e:	22fa      	movs	r2, #250	; 0xfa
 800b990:	9300      	str	r3, [sp, #0]
 800b992:	0003      	movs	r3, r0
 800b994:	0092      	lsls	r2, r2, #2
 800b996:	437a      	muls	r2, r7
 800b998:	9402      	str	r4, [sp, #8]
 800b99a:	9001      	str	r0, [sp, #4]
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b99c:	47b0      	blx	r6
    }
    return timeOnAir;
}
 800b99e:	b005      	add	sp, #20
 800b9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9301      	str	r3, [sp, #4]
 800b9a6:	3308      	adds	r3, #8
 800b9a8:	9300      	str	r3, [sp, #0]
 800b9aa:	003a      	movs	r2, r7
 800b9ac:	0003      	movs	r3, r0
 800b9ae:	9003      	str	r0, [sp, #12]
 800b9b0:	9402      	str	r4, [sp, #8]
 800b9b2:	e7f3      	b.n	800b99c <GetTimeOnAir+0x34>
 800b9b4:	0800f4fc 	.word	0x0800f4fc
 800b9b8:	0800f64c 	.word	0x0800f64c

0800b9bc <VerifyRfFreq.constprop.0>:
    if( Radio.CheckRfFrequency( freq ) == false )
 800b9bc:	4b1a      	ldr	r3, [pc, #104]	; (800ba28 <VerifyRfFreq.constprop.0+0x6c>)
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
 800b9be:	b570      	push	{r4, r5, r6, lr}
    if( Radio.CheckRfFrequency( freq ) == false )
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
 800b9c2:	0004      	movs	r4, r0
 800b9c4:	000d      	movs	r5, r1
    if( Radio.CheckRfFrequency( freq ) == false )
 800b9c6:	4798      	blx	r3
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d006      	beq.n	800b9da <VerifyRfFreq.constprop.0+0x1e>
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800b9cc:	4b17      	ldr	r3, [pc, #92]	; (800ba2c <VerifyRfFreq.constprop.0+0x70>)
 800b9ce:	4a18      	ldr	r2, [pc, #96]	; (800ba30 <VerifyRfFreq.constprop.0+0x74>)
 800b9d0:	18e3      	adds	r3, r4, r3
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d802      	bhi.n	800b9dc <VerifyRfFreq.constprop.0+0x20>
        *band = 2;
 800b9d6:	2302      	movs	r3, #2
        *band = 4;
 800b9d8:	702b      	strb	r3, [r5, #0]
}
 800b9da:	bd70      	pop	{r4, r5, r6, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800b9dc:	4b15      	ldr	r3, [pc, #84]	; (800ba34 <VerifyRfFreq.constprop.0+0x78>)
 800b9de:	4a16      	ldr	r2, [pc, #88]	; (800ba38 <VerifyRfFreq.constprop.0+0x7c>)
 800b9e0:	18e3      	adds	r3, r4, r3
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d801      	bhi.n	800b9ea <VerifyRfFreq.constprop.0+0x2e>
        *band = 0;
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	e7f6      	b.n	800b9d8 <VerifyRfFreq.constprop.0+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800b9ea:	4b14      	ldr	r3, [pc, #80]	; (800ba3c <VerifyRfFreq.constprop.0+0x80>)
 800b9ec:	4a14      	ldr	r2, [pc, #80]	; (800ba40 <VerifyRfFreq.constprop.0+0x84>)
 800b9ee:	18e3      	adds	r3, r4, r3
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d801      	bhi.n	800b9f8 <VerifyRfFreq.constprop.0+0x3c>
        *band = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	e7ef      	b.n	800b9d8 <VerifyRfFreq.constprop.0+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800b9f8:	4b12      	ldr	r3, [pc, #72]	; (800ba44 <VerifyRfFreq.constprop.0+0x88>)
 800b9fa:	4a13      	ldr	r2, [pc, #76]	; (800ba48 <VerifyRfFreq.constprop.0+0x8c>)
 800b9fc:	18e3      	adds	r3, r4, r3
 800b9fe:	4293      	cmp	r3, r2
 800ba00:	d801      	bhi.n	800ba06 <VerifyRfFreq.constprop.0+0x4a>
        *band = 5;
 800ba02:	2305      	movs	r3, #5
 800ba04:	e7e8      	b.n	800b9d8 <VerifyRfFreq.constprop.0+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800ba06:	4b11      	ldr	r3, [pc, #68]	; (800ba4c <VerifyRfFreq.constprop.0+0x90>)
 800ba08:	4a11      	ldr	r2, [pc, #68]	; (800ba50 <VerifyRfFreq.constprop.0+0x94>)
 800ba0a:	18e3      	adds	r3, r4, r3
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	d801      	bhi.n	800ba14 <VerifyRfFreq.constprop.0+0x58>
        *band = 3;
 800ba10:	2303      	movs	r3, #3
 800ba12:	e7e1      	b.n	800b9d8 <VerifyRfFreq.constprop.0+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800ba14:	4b0f      	ldr	r3, [pc, #60]	; (800ba54 <VerifyRfFreq.constprop.0+0x98>)
 800ba16:	18e4      	adds	r4, r4, r3
 800ba18:	4b0f      	ldr	r3, [pc, #60]	; (800ba58 <VerifyRfFreq.constprop.0+0x9c>)
 800ba1a:	429c      	cmp	r4, r3
 800ba1c:	d801      	bhi.n	800ba22 <VerifyRfFreq.constprop.0+0x66>
        *band = 4;
 800ba1e:	2304      	movs	r3, #4
 800ba20:	e7da      	b.n	800b9d8 <VerifyRfFreq.constprop.0+0x1c>
        return false;
 800ba22:	2000      	movs	r0, #0
 800ba24:	e7d9      	b.n	800b9da <VerifyRfFreq.constprop.0+0x1e>
 800ba26:	46c0      	nop			; (mov r8, r8)
 800ba28:	0800f64c 	.word	0x0800f64c
 800ba2c:	cc8faa40 	.word	0xcc8faa40
 800ba30:	001e847f 	.word	0x001e847f
 800ba34:	cc7125c0 	.word	0xcc7125c0
 800ba38:	002dc6c0 	.word	0x002dc6c0
 800ba3c:	cc435eff 	.word	0xcc435eff
 800ba40:	000927bf 	.word	0x000927bf
 800ba44:	cc38b0a0 	.word	0xcc38b0a0
 800ba48:	0007a120 	.word	0x0007a120
 800ba4c:	cc2e0240 	.word	0xcc2e0240
 800ba50:	0003d090 	.word	0x0003d090
 800ba54:	cc296e60 	.word	0xcc296e60
 800ba58:	000493e0 	.word	0x000493e0

0800ba5c <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800ba5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    PhyParam_t phyParam = { 0 };
 800ba5e:	2200      	movs	r2, #0
{
 800ba60:	0003      	movs	r3, r0

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800ba62:	7800      	ldrb	r0, [r0, #0]
    PhyParam_t phyParam = { 0 };
 800ba64:	9200      	str	r2, [sp, #0]
    switch( getPhy->Attribute )
 800ba66:	380b      	subs	r0, #11
 800ba68:	282e      	cmp	r0, #46	; 0x2e
 800ba6a:	d865      	bhi.n	800bb38 <RegionEU868GetPhyParam+0xdc>
 800ba6c:	f7f4 fb5e 	bl	800012c <__gnu_thumb1_case_uqi>
 800ba70:	352f2d2a 	.word	0x352f2d2a
 800ba74:	3f3c3a38 	.word	0x3f3c3a38
 800ba78:	49464442 	.word	0x49464442
 800ba7c:	54645264 	.word	0x54645264
 800ba80:	645e5c58 	.word	0x645e5c58
 800ba84:	18676164 	.word	0x18676164
 800ba88:	64646464 	.word	0x64646464
 800ba8c:	64646464 	.word	0x64646464
 800ba90:	64646464 	.word	0x64646464
 800ba94:	6d695264 	.word	0x6d695264
 800ba98:	6d526464 	.word	0x6d526464
 800ba9c:	6f64      	.short	0x6f64
 800ba9e:	71          	.byte	0x71
 800ba9f:	00          	.byte	0x00
            phyParam.Value = EU868_DEFAULT_DATARATE;
            break;
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800baa0:	785b      	ldrb	r3, [r3, #1]
 800baa2:	a801      	add	r0, sp, #4
 800baa4:	7003      	strb	r3, [r0, #0]
 800baa6:	2307      	movs	r3, #7
 800baa8:	7043      	strb	r3, [r0, #1]
 800baaa:	2380      	movs	r3, #128	; 0x80
 800baac:	015b      	lsls	r3, r3, #5
 800baae:	8043      	strh	r3, [r0, #2]
            {
                .CurrentDr = getPhy->Datarate,
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800bab0:	4b2b      	ldr	r3, [pc, #172]	; (800bb60 <RegionEU868GetPhyParam+0x104>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	001a      	movs	r2, r3
 800bab6:	32c0      	adds	r2, #192	; 0xc0
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800bab8:	6042      	str	r2, [r0, #4]
 800baba:	6083      	str	r3, [r0, #8]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800babc:	f7ff feec 	bl	800b898 <RegionCommonGetNextLowerTxDr>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
            break;
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800bac0:	9000      	str	r0, [sp, #0]
            break;
 800bac2:	e039      	b.n	800bb38 <RegionEU868GetPhyParam+0xdc>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800bac4:	2340      	movs	r3, #64	; 0x40
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bac6:	9300      	str	r3, [sp, #0]
            break;
 800bac8:	e036      	b.n	800bb38 <RegionEU868GetPhyParam+0xdc>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800baca:	2320      	movs	r3, #32
 800bacc:	e7fb      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800bace:	4a25      	ldr	r2, [pc, #148]	; (800bb64 <RegionEU868GetPhyParam+0x108>)
 800bad0:	3228      	adds	r2, #40	; 0x28
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bad2:	785b      	ldrb	r3, [r3, #1]
 800bad4:	b25b      	sxtb	r3, r3
 800bad6:	5cd3      	ldrb	r3, [r2, r3]
 800bad8:	e7f5      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800bada:	4a22      	ldr	r2, [pc, #136]	; (800bb64 <RegionEU868GetPhyParam+0x108>)
 800badc:	3230      	adds	r2, #48	; 0x30
 800bade:	e7f8      	b.n	800bad2 <RegionEU868GetPhyParam+0x76>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800bae0:	2301      	movs	r3, #1
 800bae2:	e7f0      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800bae4:	4b20      	ldr	r3, [pc, #128]	; (800bb68 <RegionEU868GetPhyParam+0x10c>)
 800bae6:	e7ee      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800bae8:	23fa      	movs	r3, #250	; 0xfa
 800baea:	009b      	lsls	r3, r3, #2
 800baec:	e7eb      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800baee:	23fa      	movs	r3, #250	; 0xfa
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	e7e8      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800baf4:	4b1d      	ldr	r3, [pc, #116]	; (800bb6c <RegionEU868GetPhyParam+0x110>)
 800baf6:	e7e6      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800baf8:	4b1d      	ldr	r3, [pc, #116]	; (800bb70 <RegionEU868GetPhyParam+0x114>)
 800bafa:	e7e4      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = REGION_COMMON_DEFAULT_MAX_FCNT_GAP;
 800bafc:	2380      	movs	r3, #128	; 0x80
 800bafe:	01db      	lsls	r3, r3, #7
 800bb00:	e7e1      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = ( REGION_COMMON_DEFAULT_ACK_TIMEOUT + randr( -REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND, REGION_COMMON_DEFAULT_ACK_TIMEOUT_RND ) );
 800bb02:	21fa      	movs	r1, #250	; 0xfa
 800bb04:	481b      	ldr	r0, [pc, #108]	; (800bb74 <RegionEU868GetPhyParam+0x118>)
 800bb06:	0089      	lsls	r1, r1, #2
 800bb08:	f000 fc7e 	bl	800c408 <randr>
 800bb0c:	23fa      	movs	r3, #250	; 0xfa
 800bb0e:	00db      	lsls	r3, r3, #3
 800bb10:	18c0      	adds	r0, r0, r3
 800bb12:	e7d5      	b.n	800bac0 <RegionEU868GetPhyParam+0x64>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800bb14:	4b18      	ldr	r3, [pc, #96]	; (800bb78 <RegionEU868GetPhyParam+0x11c>)
 800bb16:	e7d6      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800bb18:	4b11      	ldr	r3, [pc, #68]	; (800bb60 <RegionEU868GetPhyParam+0x104>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	33c0      	adds	r3, #192	; 0xc0
 800bb1e:	e7d2      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800bb20:	4b0f      	ldr	r3, [pc, #60]	; (800bb60 <RegionEU868GetPhyParam+0x104>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	33c2      	adds	r3, #194	; 0xc2
 800bb26:	e7ce      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800bb28:	2310      	movs	r3, #16
 800bb2a:	e7cc      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800bb2c:	4b0c      	ldr	r3, [pc, #48]	; (800bb60 <RegionEU868GetPhyParam+0x104>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	e7c9      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800bb32:	2383      	movs	r3, #131	; 0x83
 800bb34:	05db      	lsls	r3, r3, #23
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800bb36:	9300      	str	r3, [sp, #0]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800bb38:	9800      	ldr	r0, [sp, #0]
}
 800bb3a:	b005      	add	sp, #20
 800bb3c:	bd00      	pop	{pc}
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800bb3e:	4b0f      	ldr	r3, [pc, #60]	; (800bb7c <RegionEU868GetPhyParam+0x120>)
 800bb40:	e7f9      	b.n	800bb36 <RegionEU868GetPhyParam+0xda>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800bb42:	466a      	mov	r2, sp
 800bb44:	4b0e      	ldr	r3, [pc, #56]	; (800bb80 <RegionEU868GetPhyParam+0x124>)
 800bb46:	8013      	strh	r3, [r2, #0]
            break;
 800bb48:	e7f6      	b.n	800bb38 <RegionEU868GetPhyParam+0xdc>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800bb4a:	2303      	movs	r3, #3
 800bb4c:	e7bb      	b.n	800bac6 <RegionEU868GetPhyParam+0x6a>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800bb4e:	4a05      	ldr	r2, [pc, #20]	; (800bb64 <RegionEU868GetPhyParam+0x108>)
 800bb50:	e7bf      	b.n	800bad2 <RegionEU868GetPhyParam+0x76>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800bb52:	2001      	movs	r0, #1
 800bb54:	4903      	ldr	r1, [pc, #12]	; (800bb64 <RegionEU868GetPhyParam+0x108>)
 800bb56:	5618      	ldrsb	r0, [r3, r0]
 800bb58:	3108      	adds	r1, #8
 800bb5a:	f7ff febf 	bl	800b8dc <RegionCommonGetBandwidth>
 800bb5e:	e7af      	b.n	800bac0 <RegionEU868GetPhyParam+0x64>
 800bb60:	20001068 	.word	0x20001068
 800bb64:	0800f4fc 	.word	0x0800f4fc
 800bb68:	00000bb8 	.word	0x00000bb8
 800bb6c:	00001388 	.word	0x00001388
 800bb70:	00001770 	.word	0x00001770
 800bb74:	fffffc18 	.word	0xfffffc18
 800bb78:	33d3e608 	.word	0x33d3e608
 800bb7c:	4009999a 	.word	0x4009999a
 800bb80:	00000211 	.word	0x00000211

0800bb84 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800bb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if defined( REGION_EU868 )
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800bb86:	7805      	ldrb	r5, [r0, #0]
{
 800bb88:	0001      	movs	r1, r0
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800bb8a:	7842      	ldrb	r2, [r0, #1]
 800bb8c:	200c      	movs	r0, #12
 800bb8e:	4c08      	ldr	r4, [pc, #32]	; (800bbb0 <RegionEU868SetBandTxDone+0x2c>)
 800bb90:	4368      	muls	r0, r5
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	181b      	adds	r3, r3, r0
 800bb96:	7a58      	ldrb	r0, [r3, #9]
 800bb98:	2318      	movs	r3, #24
 800bb9a:	4343      	muls	r3, r0
 800bb9c:	6860      	ldr	r0, [r4, #4]
 800bb9e:	18c0      	adds	r0, r0, r3
 800bba0:	690b      	ldr	r3, [r1, #16]
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	68cb      	ldr	r3, [r1, #12]
 800bba6:	6889      	ldr	r1, [r1, #8]
 800bba8:	f7ff fbe4 	bl	800b374 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_EU868 */
}
 800bbac:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
 800bbae:	46c0      	nop			; (mov r8, r8)
 800bbb0:	20001068 	.word	0x20001068

0800bbb4 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800bbb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bbb6:	b0a5      	sub	sp, #148	; 0x94
 800bbb8:	0004      	movs	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800bbba:	2290      	movs	r2, #144	; 0x90
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	4668      	mov	r0, sp
 800bbc0:	f002 fdfe 	bl	800e7c0 <memset>
 800bbc4:	2364      	movs	r3, #100	; 0x64
 800bbc6:	466a      	mov	r2, sp
 800bbc8:	8013      	strh	r3, [r2, #0]
 800bbca:	8313      	strh	r3, [r2, #24]
 800bbcc:	22fa      	movs	r2, #250	; 0xfa
 800bbce:	4669      	mov	r1, sp
 800bbd0:	200a      	movs	r0, #10
 800bbd2:	0092      	lsls	r2, r2, #2
 800bbd4:	860a      	strh	r2, [r1, #48]	; 0x30
 800bbd6:	a912      	add	r1, sp, #72	; 0x48
 800bbd8:	8008      	strh	r0, [r1, #0]
 800bbda:	a918      	add	r1, sp, #96	; 0x60
 800bbdc:	800b      	strh	r3, [r1, #0]
 800bbde:	ab1e      	add	r3, sp, #120	; 0x78
 800bbe0:	801a      	strh	r2, [r3, #0]
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800bbe2:	7a22      	ldrb	r2, [r4, #8]
 800bbe4:	2a01      	cmp	r2, #1
 800bbe6:	d02a      	beq.n	800bc3e <RegionEU868InitDefaults+0x8a>
 800bbe8:	2a02      	cmp	r2, #2
 800bbea:	d032      	beq.n	800bc52 <RegionEU868InitDefaults+0x9e>
 800bbec:	2a00      	cmp	r2, #0
 800bbee:	d124      	bne.n	800bc3a <RegionEU868InitDefaults+0x86>
    {
        case INIT_TYPE_DEFAULTS:
        {
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800bbf0:	6820      	ldr	r0, [r4, #0]
 800bbf2:	2800      	cmp	r0, #0
 800bbf4:	d021      	beq.n	800bc3a <RegionEU868InitDefaults+0x86>
 800bbf6:	6863      	ldr	r3, [r4, #4]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d01e      	beq.n	800bc3a <RegionEU868InitDefaults+0x86>
            {
                return;
            }

            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800bbfc:	4c1a      	ldr	r4, [pc, #104]	; (800bc68 <RegionEU868InitDefaults+0xb4>)
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;

            // Default bands
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800bbfe:	4669      	mov	r1, sp
 800bc00:	3290      	adds	r2, #144	; 0x90
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800bc02:	6060      	str	r0, [r4, #4]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800bc04:	6023      	str	r3, [r4, #0]
            memcpy1( ( uint8_t* )RegionNvmGroup1->Bands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800bc06:	f000 fc1b 	bl	800c440 <memcpy1>

            // Default channels
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800bc0a:	4b18      	ldr	r3, [pc, #96]	; (800bc6c <RegionEU868InitDefaults+0xb8>)
 800bc0c:	6820      	ldr	r0, [r4, #0]
 800bc0e:	001a      	movs	r2, r3
 800bc10:	0001      	movs	r1, r0
 800bc12:	3238      	adds	r2, #56	; 0x38
 800bc14:	ca70      	ldmia	r2!, {r4, r5, r6}
 800bc16:	c170      	stmia	r1!, {r4, r5, r6}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800bc18:	001a      	movs	r2, r3
 800bc1a:	3244      	adds	r2, #68	; 0x44
 800bc1c:	cae0      	ldmia	r2!, {r5, r6, r7}
 800bc1e:	c1e0      	stmia	r1!, {r5, r6, r7}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800bc20:	0002      	movs	r2, r0
 800bc22:	3350      	adds	r3, #80	; 0x50
 800bc24:	3218      	adds	r2, #24
 800bc26:	cb32      	ldmia	r3!, {r1, r4, r5}
 800bc28:	c232      	stmia	r2!, {r1, r4, r5}

            // Default ChannelsMask
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800bc2a:	0001      	movs	r1, r0
 800bc2c:	2307      	movs	r3, #7

            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bc2e:	2201      	movs	r2, #1
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800bc30:	31c2      	adds	r1, #194	; 0xc2
 800bc32:	800b      	strh	r3, [r1, #0]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bc34:	30c0      	adds	r0, #192	; 0xc0
            // Reset Channels Rx1Frequency to default 0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
            // Update the channels mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bc36:	f7ff fb8f 	bl	800b358 <RegionCommonChanMaskCopy>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800bc3a:	b025      	add	sp, #148	; 0x94
 800bc3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800bc3e:	4b0a      	ldr	r3, [pc, #40]	; (800bc68 <RegionEU868InitDefaults+0xb4>)
 800bc40:	6818      	ldr	r0, [r3, #0]
 800bc42:	2300      	movs	r3, #0
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bc44:	0001      	movs	r1, r0
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800bc46:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800bc48:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800bc4a:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800bc4c:	31c2      	adds	r1, #194	; 0xc2
 800bc4e:	30c0      	adds	r0, #192	; 0xc0
 800bc50:	e7f1      	b.n	800bc36 <RegionEU868InitDefaults+0x82>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800bc52:	4b05      	ldr	r3, [pc, #20]	; (800bc68 <RegionEU868InitDefaults+0xb4>)
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	0019      	movs	r1, r3
 800bc58:	33c2      	adds	r3, #194	; 0xc2
 800bc5a:	31c0      	adds	r1, #192	; 0xc0
 800bc5c:	880a      	ldrh	r2, [r1, #0]
 800bc5e:	881b      	ldrh	r3, [r3, #0]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	800b      	strh	r3, [r1, #0]
            break;
 800bc64:	e7e9      	b.n	800bc3a <RegionEU868InitDefaults+0x86>
 800bc66:	46c0      	nop			; (mov r8, r8)
 800bc68:	20001068 	.word	0x20001068
 800bc6c:	0800f4fc 	.word	0x0800f4fc

0800bc70 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800bc70:	0003      	movs	r3, r0
 800bc72:	b507      	push	{r0, r1, r2, lr}
 800bc74:	0008      	movs	r0, r1
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800bc76:	290f      	cmp	r1, #15
 800bc78:	d809      	bhi.n	800bc8e <RegionEU868Verify+0x1e>
 800bc7a:	f7f4 fa57 	bl	800012c <__gnu_thumb1_case_uqi>
 800bc7e:	080a      	.short	0x080a
 800bc80:	1c080808 	.word	0x1c080808
 800bc84:	1c081c12 	.word	0x1c081c12
 800bc88:	0808081c 	.word	0x0808081c
 800bc8c:	2008      	.short	0x2008
 800bc8e:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800bc90:	bd0e      	pop	{r1, r2, r3, pc}
            uint8_t band = 0;
 800bc92:	466a      	mov	r2, sp
 800bc94:	1dd1      	adds	r1, r2, #7
 800bc96:	2200      	movs	r2, #0
            return VerifyRfFreq( verify->Frequency, &band );
 800bc98:	6818      	ldr	r0, [r3, #0]
            uint8_t band = 0;
 800bc9a:	700a      	strb	r2, [r1, #0]
            return VerifyRfFreq( verify->Frequency, &band );
 800bc9c:	f7ff fe8e 	bl	800b9bc <VerifyRfFreq.constprop.0>
 800bca0:	e7f6      	b.n	800bc90 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800bca2:	2000      	movs	r0, #0
 800bca4:	2205      	movs	r2, #5
 800bca6:	5618      	ldrsb	r0, [r3, r0]
 800bca8:	2100      	movs	r1, #0
 800bcaa:	f7ff fb18 	bl	800b2de <RegionCommonValueInRange>
 800bcae:	1e43      	subs	r3, r0, #1
 800bcb0:	4198      	sbcs	r0, r3
 800bcb2:	b2c0      	uxtb	r0, r0
 800bcb4:	e7ec      	b.n	800bc90 <RegionEU868Verify+0x20>
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	2207      	movs	r2, #7
 800bcba:	5618      	ldrsb	r0, [r3, r0]
 800bcbc:	e7f4      	b.n	800bca8 <RegionEU868Verify+0x38>
            return EU868_DUTY_CYCLE_ENABLED;
 800bcbe:	2001      	movs	r0, #1
 800bcc0:	e7e6      	b.n	800bc90 <RegionEU868Verify+0x20>
	...

0800bcc4 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800bcc4:	b510      	push	{r4, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800bcc6:	7904      	ldrb	r4, [r0, #4]
{
 800bcc8:	0003      	movs	r3, r0
    switch( chanMaskSet->ChannelsMaskType )
 800bcca:	2c00      	cmp	r4, #0
 800bccc:	d00b      	beq.n	800bce6 <RegionEU868ChanMaskSet+0x22>
 800bcce:	2000      	movs	r0, #0
 800bcd0:	2c01      	cmp	r4, #1
 800bcd2:	d110      	bne.n	800bcf6 <RegionEU868ChanMaskSet+0x32>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
            break;
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bcd4:	4a08      	ldr	r2, [pc, #32]	; (800bcf8 <RegionEU868ChanMaskSet+0x34>)
 800bcd6:	6819      	ldr	r1, [r3, #0]
 800bcd8:	6810      	ldr	r0, [r2, #0]
 800bcda:	0022      	movs	r2, r4
 800bcdc:	30c2      	adds	r0, #194	; 0xc2
 800bcde:	f7ff fb3b 	bl	800b358 <RegionCommonChanMaskCopy>
            break;
        }
        default:
            return false;
    }
    return true;
 800bce2:	0020      	movs	r0, r4
            break;
 800bce4:	e007      	b.n	800bcf6 <RegionEU868ChanMaskSet+0x32>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800bce6:	4a04      	ldr	r2, [pc, #16]	; (800bcf8 <RegionEU868ChanMaskSet+0x34>)
 800bce8:	6819      	ldr	r1, [r3, #0]
 800bcea:	6810      	ldr	r0, [r2, #0]
 800bcec:	2201      	movs	r2, #1
 800bcee:	30c0      	adds	r0, #192	; 0xc0
 800bcf0:	f7ff fb32 	bl	800b358 <RegionCommonChanMaskCopy>
    return true;
 800bcf4:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800bcf6:	bd10      	pop	{r4, pc}
 800bcf8:	20001068 	.word	0x20001068

0800bcfc <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800bcfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bcfe:	001c      	movs	r4, r3
 800bd00:	000e      	movs	r6, r1
 800bd02:	0017      	movs	r7, r2
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bd04:	1c03      	adds	r3, r0, #0
 800bd06:	2807      	cmp	r0, #7
 800bd08:	dd00      	ble.n	800bd0c <RegionEU868ComputeRxWindowParameters+0x10>
 800bd0a:	2307      	movs	r3, #7
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bd0c:	4d12      	ldr	r5, [pc, #72]	; (800bd58 <RegionEU868ComputeRxWindowParameters+0x5c>)
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bd0e:	b258      	sxtb	r0, r3
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bd10:	0029      	movs	r1, r5
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800bd12:	7063      	strb	r3, [r4, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bd14:	3108      	adds	r1, #8
 800bd16:	f7ff fde1 	bl	800b8dc <RegionCommonGetBandwidth>

    if( rxConfigParams->Datarate == DR_7 )
 800bd1a:	2201      	movs	r2, #1
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800bd1c:	70a0      	strb	r0, [r4, #2]
    if( rxConfigParams->Datarate == DR_7 )
 800bd1e:	56a2      	ldrsb	r2, [r4, r2]
 800bd20:	2a07      	cmp	r2, #7
 800bd22:	d112      	bne.n	800bd4a <RegionEU868ComputeRxWindowParameters+0x4e>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800bd24:	2032      	movs	r0, #50	; 0x32
 800bd26:	f7ff fcc7 	bl	800b6b8 <RegionCommonComputeSymbolTimeFsk>
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800bd2a:	4b0c      	ldr	r3, [pc, #48]	; (800bd5c <RegionEU868ComputeRxWindowParameters+0x60>)
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800bd2c:	0005      	movs	r5, r0
    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800bd2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bd30:	4798      	blx	r3
 800bd32:	0022      	movs	r2, r4
 800bd34:	3408      	adds	r4, #8
 800bd36:	320c      	adds	r2, #12
 800bd38:	0003      	movs	r3, r0
 800bd3a:	0031      	movs	r1, r6
 800bd3c:	0028      	movs	r0, r5
 800bd3e:	9201      	str	r2, [sp, #4]
 800bd40:	9400      	str	r4, [sp, #0]
 800bd42:	003a      	movs	r2, r7
 800bd44:	f7ff fcc0 	bl	800b6c8 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800bd48:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800bd4a:	0093      	lsls	r3, r2, #2
 800bd4c:	18eb      	adds	r3, r5, r3
 800bd4e:	5ca8      	ldrb	r0, [r5, r2]
 800bd50:	6899      	ldr	r1, [r3, #8]
 800bd52:	f7ff fca7 	bl	800b6a4 <RegionCommonComputeSymbolTimeLoRa>
 800bd56:	e7e8      	b.n	800bd2a <RegionEU868ComputeRxWindowParameters+0x2e>
 800bd58:	0800f4fc 	.word	0x0800f4fc
 800bd5c:	0800f64c 	.word	0x0800f64c

0800bd60 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800bd60:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800bd62:	2601      	movs	r6, #1
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800bd64:	6843      	ldr	r3, [r0, #4]
{
 800bd66:	b08f      	sub	sp, #60	; 0x3c

    if( Radio.GetStatus( ) != RF_IDLE )
 800bd68:	4f33      	ldr	r7, [pc, #204]	; (800be38 <RegionEU868RxConfig+0xd8>)
{
 800bd6a:	910d      	str	r1, [sp, #52]	; 0x34
    int8_t dr = rxConfig->Datarate;
 800bd6c:	5786      	ldrsb	r6, [r0, r6]
    uint32_t frequency = rxConfig->Frequency;
 800bd6e:	930b      	str	r3, [sp, #44]	; 0x2c
    if( Radio.GetStatus( ) != RF_IDLE )
 800bd70:	687b      	ldr	r3, [r7, #4]
{
 800bd72:	0004      	movs	r4, r0
    if( Radio.GetStatus( ) != RF_IDLE )
 800bd74:	4798      	blx	r3
 800bd76:	0005      	movs	r5, r0
    {
        return false;
 800bd78:	2000      	movs	r0, #0
    if( Radio.GetStatus( ) != RF_IDLE )
 800bd7a:	4285      	cmp	r5, r0
 800bd7c:	d143      	bne.n	800be06 <RegionEU868RxConfig+0xa6>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800bd7e:	7ce3      	ldrb	r3, [r4, #19]
 800bd80:	4283      	cmp	r3, r0
 800bd82:	d10b      	bne.n	800bd9c <RegionEU868RxConfig+0x3c>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800bd84:	220c      	movs	r2, #12
 800bd86:	7821      	ldrb	r1, [r4, #0]
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800bd88:	4b2c      	ldr	r3, [pc, #176]	; (800be3c <RegionEU868RxConfig+0xdc>)
 800bd8a:	434a      	muls	r2, r1
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	189b      	adds	r3, r3, r2
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800bd90:	685a      	ldr	r2, [r3, #4]
 800bd92:	920b      	str	r2, [sp, #44]	; 0x2c
 800bd94:	4282      	cmp	r2, r0
 800bd96:	d101      	bne.n	800bd9c <RegionEU868RxConfig+0x3c>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	930b      	str	r3, [sp, #44]	; 0x2c
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800bd9c:	4b28      	ldr	r3, [pc, #160]	; (800be40 <RegionEU868RxConfig+0xe0>)

    Radio.SetChannel( frequency );
 800bd9e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    phyDr = DataratesEU868[dr];
 800bda0:	579b      	ldrsb	r3, [r3, r6]
 800bda2:	930c      	str	r3, [sp, #48]	; 0x30
    Radio.SetChannel( frequency );
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
    {
        modem = MODEM_FSK;
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800bda8:	69bf      	ldr	r7, [r7, #24]
 800bdaa:	7ca3      	ldrb	r3, [r4, #18]
    if( dr == DR_7 )
 800bdac:	2e07      	cmp	r6, #7
 800bdae:	d12c      	bne.n	800be0a <RegionEU868RxConfig+0xaa>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800bdb0:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	9305      	str	r3, [sp, #20]
 800bdb6:	68a3      	ldr	r3, [r4, #8]
 800bdb8:	2000      	movs	r0, #0
 800bdba:	b29b      	uxth	r3, r3
 800bdbc:	9302      	str	r3, [sp, #8]
 800bdbe:	2305      	movs	r3, #5
 800bdc0:	22fa      	movs	r2, #250	; 0xfa
 800bdc2:	9301      	str	r3, [sp, #4]
 800bdc4:	4b1f      	ldr	r3, [pc, #124]	; (800be44 <RegionEU868RxConfig+0xe4>)
 800bdc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	0003      	movs	r3, r0
 800bdcc:	0092      	lsls	r2, r2, #2
 800bdce:	434a      	muls	r2, r1
 800bdd0:	491d      	ldr	r1, [pc, #116]	; (800be48 <RegionEU868RxConfig+0xe8>)
 800bdd2:	9008      	str	r0, [sp, #32]
 800bdd4:	9007      	str	r0, [sp, #28]
 800bdd6:	9006      	str	r0, [sp, #24]
 800bdd8:	9004      	str	r0, [sp, #16]
 800bdda:	9003      	str	r0, [sp, #12]
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800bddc:	47b8      	blx	r7
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 800bdde:	7c62      	ldrb	r2, [r4, #17]
 800bde0:	4b17      	ldr	r3, [pc, #92]	; (800be40 <RegionEU868RxConfig+0xe0>)
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	d025      	beq.n	800be32 <RegionEU868RxConfig+0xd2>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800bde6:	3330      	adds	r3, #48	; 0x30
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800bde8:	5d99      	ldrb	r1, [r3, r6]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800bdea:	4b13      	ldr	r3, [pc, #76]	; (800be38 <RegionEU868RxConfig+0xd8>)
 800bdec:	310d      	adds	r1, #13
 800bdee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf0:	0028      	movs	r0, r5
 800bdf2:	b2c9      	uxtb	r1, r1
 800bdf4:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800bdf6:	7ce0      	ldrb	r0, [r4, #19]
 800bdf8:	0032      	movs	r2, r6
 800bdfa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdfc:	f7ff fd7e 	bl	800b8fc <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
    return true;
 800be00:	2001      	movs	r0, #1
    *datarate = (uint8_t) dr;
 800be02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be04:	701e      	strb	r6, [r3, #0]
#else
    return false;
#endif /* REGION_EU868 */
}
 800be06:	b00f      	add	sp, #60	; 0x3c
 800be08:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800be0a:	68a2      	ldr	r2, [r4, #8]
 800be0c:	2501      	movs	r5, #1
 800be0e:	b292      	uxth	r2, r2
 800be10:	9309      	str	r3, [sp, #36]	; 0x24
 800be12:	9202      	str	r2, [sp, #8]
 800be14:	2300      	movs	r3, #0
 800be16:	2208      	movs	r2, #8
 800be18:	9307      	str	r3, [sp, #28]
 800be1a:	9306      	str	r3, [sp, #24]
 800be1c:	9305      	str	r3, [sp, #20]
 800be1e:	9304      	str	r3, [sp, #16]
 800be20:	9303      	str	r3, [sp, #12]
 800be22:	9201      	str	r2, [sp, #4]
 800be24:	9300      	str	r3, [sp, #0]
 800be26:	0028      	movs	r0, r5
 800be28:	002b      	movs	r3, r5
 800be2a:	78a1      	ldrb	r1, [r4, #2]
 800be2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be2e:	9508      	str	r5, [sp, #32]
 800be30:	e7d4      	b.n	800bddc <RegionEU868RxConfig+0x7c>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800be32:	3328      	adds	r3, #40	; 0x28
 800be34:	e7d8      	b.n	800bde8 <RegionEU868RxConfig+0x88>
 800be36:	46c0      	nop			; (mov r8, r8)
 800be38:	0800f64c 	.word	0x0800f64c
 800be3c:	20001068 	.word	0x20001068
 800be40:	0800f4fc 	.word	0x0800f4fc
 800be44:	00014585 	.word	0x00014585
 800be48:	0000c350 	.word	0x0000c350

0800be4c <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800be4c:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be4e:	250c      	movs	r5, #12
{
 800be50:	b091      	sub	sp, #68	; 0x44
 800be52:	910e      	str	r1, [sp, #56]	; 0x38
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be54:	7801      	ldrb	r1, [r0, #0]
 800be56:	4e3a      	ldr	r6, [pc, #232]	; (800bf40 <RegionEU868TxConfig+0xf4>)
 800be58:	4369      	muls	r1, r5
{
 800be5a:	920f      	str	r2, [sp, #60]	; 0x3c
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be5c:	6832      	ldr	r2, [r6, #0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800be5e:	2301      	movs	r3, #1
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be60:	1852      	adds	r2, r2, r1
 800be62:	7a51      	ldrb	r1, [r2, #9]
 800be64:	2218      	movs	r2, #24
{
 800be66:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be68:	434a      	muls	r2, r1
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800be6a:	56c3      	ldrsb	r3, [r0, r3]
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be6c:	2102      	movs	r1, #2
 800be6e:	2002      	movs	r0, #2
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800be70:	4f34      	ldr	r7, [pc, #208]	; (800bf44 <RegionEU868TxConfig+0xf8>)
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be72:	5620      	ldrsb	r0, [r4, r0]
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800be74:	56fb      	ldrsb	r3, [r7, r3]
 800be76:	930b      	str	r3, [sp, #44]	; 0x2c
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be78:	6873      	ldr	r3, [r6, #4]
 800be7a:	189b      	adds	r3, r3, r2
 800be7c:	5659      	ldrsb	r1, [r3, r1]
 800be7e:	f7ff fd26 	bl	800b8ce <RegionCommonLimitTxPower>
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800be82:	0039      	movs	r1, r7
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800be84:	900d      	str	r0, [sp, #52]	; 0x34
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800be86:	2001      	movs	r0, #1
 800be88:	3108      	adds	r1, #8
 800be8a:	5620      	ldrsb	r0, [r4, r0]
 800be8c:	f7ff fd26 	bl	800b8dc <RegionCommonGetBandwidth>
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800be90:	68a2      	ldr	r2, [r4, #8]
 800be92:	6861      	ldr	r1, [r4, #4]
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800be94:	900c      	str	r0, [sp, #48]	; 0x30
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800be96:	980d      	ldr	r0, [sp, #52]	; 0x34
 800be98:	f7ff fc44 	bl	800b724 <RegionCommonComputeTxPower>

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800be9c:	7823      	ldrb	r3, [r4, #0]
 800be9e:	6832      	ldr	r2, [r6, #0]
 800bea0:	435d      	muls	r5, r3
 800bea2:	4e29      	ldr	r6, [pc, #164]	; (800bf48 <RegionEU868TxConfig+0xfc>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800bea4:	0007      	movs	r7, r0
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800bea6:	68f3      	ldr	r3, [r6, #12]
 800bea8:	58a8      	ldr	r0, [r5, r2]
 800beaa:	4798      	blx	r3

    if( txConfig->Datarate == DR_7 )
    { // High Speed FSK channel
        modem = MODEM_FSK;
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800beac:	69f3      	ldr	r3, [r6, #28]
    if( txConfig->Datarate == DR_7 )
 800beae:	2201      	movs	r2, #1
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800beb0:	469c      	mov	ip, r3
 800beb2:	23fa      	movs	r3, #250	; 0xfa
 800beb4:	2500      	movs	r5, #0
    if( txConfig->Datarate == DR_7 )
 800beb6:	56a2      	ldrsb	r2, [r4, r2]
 800beb8:	011b      	lsls	r3, r3, #4
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800beba:	9308      	str	r3, [sp, #32]
 800bebc:	9507      	str	r5, [sp, #28]
 800bebe:	9506      	str	r5, [sp, #24]
 800bec0:	9505      	str	r5, [sp, #20]
    if( txConfig->Datarate == DR_7 )
 800bec2:	2a07      	cmp	r2, #7
 800bec4:	d12d      	bne.n	800bf22 <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800bec6:	2301      	movs	r3, #1
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	3304      	adds	r3, #4
 800becc:	9302      	str	r3, [sp, #8]
 800bece:	23fa      	movs	r3, #250	; 0xfa
 800bed0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	4353      	muls	r3, r2
 800bed6:	4666      	mov	r6, ip
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	0039      	movs	r1, r7
 800bedc:	0028      	movs	r0, r5
 800bede:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bee0:	4a1a      	ldr	r2, [pc, #104]	; (800bf4c <RegionEU868TxConfig+0x100>)
 800bee2:	9503      	str	r5, [sp, #12]
 800bee4:	9501      	str	r5, [sp, #4]
 800bee6:	47b0      	blx	r6
        modem = MODEM_FSK;
 800bee8:	002e      	movs	r6, r5
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800beea:	4b15      	ldr	r3, [pc, #84]	; (800bf40 <RegionEU868TxConfig+0xf4>)
 800beec:	2101      	movs	r1, #1
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	230c      	movs	r3, #12
 800bef2:	7820      	ldrb	r0, [r4, #0]
 800bef4:	5661      	ldrsb	r1, [r4, r1]
 800bef6:	4343      	muls	r3, r0
 800bef8:	5898      	ldr	r0, [r3, r2]
 800befa:	f7ff fd29 	bl	800b950 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800befe:	2001      	movs	r0, #1
 800bf00:	89a1      	ldrh	r1, [r4, #12]
 800bf02:	5620      	ldrsb	r0, [r4, r0]
 800bf04:	f7ff fd30 	bl	800b968 <GetTimeOnAir>
 800bf08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bf0a:	6018      	str	r0, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800bf0c:	4b0e      	ldr	r3, [pc, #56]	; (800bf48 <RegionEU868TxConfig+0xfc>)
 800bf0e:	0030      	movs	r0, r6
 800bf10:	7b21      	ldrb	r1, [r4, #12]
 800bf12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf14:	4798      	blx	r3
    *txPower = txPowerLimited;
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800bf16:	2001      	movs	r0, #1
    *txPower = txPowerLimited;
 800bf18:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf1a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bf1c:	701a      	strb	r2, [r3, #0]
}
 800bf1e:	b011      	add	sp, #68	; 0x44
 800bf20:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800bf22:	2308      	movs	r3, #8
 800bf24:	2601      	movs	r6, #1
 800bf26:	9302      	str	r3, [sp, #8]
 800bf28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf2a:	002a      	movs	r2, r5
 800bf2c:	9503      	str	r5, [sp, #12]
 800bf2e:	9300      	str	r3, [sp, #0]
 800bf30:	0039      	movs	r1, r7
 800bf32:	0030      	movs	r0, r6
 800bf34:	4665      	mov	r5, ip
 800bf36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf38:	9604      	str	r6, [sp, #16]
 800bf3a:	9601      	str	r6, [sp, #4]
 800bf3c:	47a8      	blx	r5
 800bf3e:	e7d4      	b.n	800beea <RegionEU868TxConfig+0x9e>
 800bf40:	20001068 	.word	0x20001068
 800bf44:	0800f4fc 	.word	0x0800f4fc
 800bf48:	0800f64c 	.word	0x0800f64c
 800bf4c:	000061a8 	.word	0x000061a8

0800bf50 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800bf50:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf52:	b093      	sub	sp, #76	; 0x4c
 800bf54:	9103      	str	r1, [sp, #12]
 800bf56:	9204      	str	r2, [sp, #16]
 800bf58:	0004      	movs	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800bf5a:	2206      	movs	r2, #6
 800bf5c:	2100      	movs	r1, #0
 800bf5e:	a808      	add	r0, sp, #32
{
 800bf60:	9305      	str	r3, [sp, #20]
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800bf62:	f002 fc2d 	bl	800e7c0 <memset>
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800bf66:	2300      	movs	r3, #0
    uint8_t status = 0x07;
 800bf68:	2507      	movs	r5, #7
    uint16_t chMask = 0;
 800bf6a:	aa06      	add	r2, sp, #24
 800bf6c:	80d3      	strh	r3, [r2, #6]
    uint8_t bytesProcessed = 0;
 800bf6e:	9301      	str	r3, [sp, #4]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800bf70:	7a23      	ldrb	r3, [r4, #8]
 800bf72:	9a01      	ldr	r2, [sp, #4]
 800bf74:	4293      	cmp	r3, r2
 800bf76:	d907      	bls.n	800bf88 <RegionEU868LinkAdrReq+0x38>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800bf78:	6860      	ldr	r0, [r4, #4]
 800bf7a:	9b01      	ldr	r3, [sp, #4]
 800bf7c:	a908      	add	r1, sp, #32
 800bf7e:	18c0      	adds	r0, r0, r3
 800bf80:	f7ff fb2e 	bl	800b5e0 <RegionCommonParseLinkAdrReq>

        if( nextIndex == 0 )
 800bf84:	2800      	cmp	r0, #0
 800bf86:	d144      	bne.n	800c012 <RegionEU868LinkAdrReq+0xc2>
    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
    phyParam = RegionEU868GetPhyParam( &getPhy );

    linkAdrVerifyParams.Status = status;
 800bf88:	a80a      	add	r0, sp, #40	; 0x28
 800bf8a:	7105      	strb	r5, [r0, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800bf8c:	7aa3      	ldrb	r3, [r4, #10]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800bf8e:	ad08      	add	r5, sp, #32
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800bf90:	7143      	strb	r3, [r0, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800bf92:	786b      	ldrb	r3, [r5, #1]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
    linkAdrVerifyParams.Version = linkAdrReq->Version;

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bf94:	220a      	movs	r2, #10
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800bf96:	7183      	strb	r3, [r0, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800bf98:	78ab      	ldrb	r3, [r5, #2]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800bf9a:	4e3d      	ldr	r6, [pc, #244]	; (800c090 <RegionEU868LinkAdrReq+0x140>)
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800bf9c:	71c3      	strb	r3, [r0, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800bf9e:	782b      	ldrb	r3, [r5, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bfa0:	a906      	add	r1, sp, #24
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800bfa2:	7203      	strb	r3, [r0, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800bfa4:	7ae3      	ldrb	r3, [r4, #11]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bfa6:	1852      	adds	r2, r2, r1
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800bfa8:	7243      	strb	r3, [r0, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800bfaa:	7b23      	ldrb	r3, [r4, #12]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bfac:	2109      	movs	r1, #9
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800bfae:	7283      	strb	r3, [r0, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800bfb0:	7b63      	ldrb	r3, [r4, #13]
 800bfb2:	72c3      	strb	r3, [r0, #11]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800bfb4:	2310      	movs	r3, #16
 800bfb6:	7303      	strb	r3, [r0, #12]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800bfb8:	ab06      	add	r3, sp, #24
 800bfba:	1d9f      	adds	r7, r3, #6
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800bfbc:	23e0      	movs	r3, #224	; 0xe0
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	8283      	strh	r3, [r0, #20]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800bfc2:	6833      	ldr	r3, [r6, #0]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800bfc4:	6107      	str	r7, [r0, #16]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800bfc6:	6183      	str	r3, [r0, #24]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800bfc8:	2307      	movs	r3, #7
 800bfca:	8383      	strh	r3, [r0, #28]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800bfcc:	6823      	ldr	r3, [r4, #0]
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bfce:	ac06      	add	r4, sp, #24
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800bfd0:	930a      	str	r3, [sp, #40]	; 0x28
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800bfd2:	1909      	adds	r1, r1, r4
 800bfd4:	002b      	movs	r3, r5
 800bfd6:	f7ff fb1e 	bl	800b616 <RegionCommonLinkAdrReqVerifyParams>
 800bfda:	0004      	movs	r4, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800bfdc:	2807      	cmp	r0, #7
 800bfde:	d109      	bne.n	800bff4 <RegionEU868LinkAdrReq+0xa4>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800bfe0:	6830      	ldr	r0, [r6, #0]
 800bfe2:	2202      	movs	r2, #2
 800bfe4:	2100      	movs	r1, #0
 800bfe6:	30c0      	adds	r0, #192	; 0xc0
 800bfe8:	f000 fa3f 	bl	800c46a <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800bfec:	6833      	ldr	r3, [r6, #0]
 800bfee:	883a      	ldrh	r2, [r7, #0]
 800bff0:	33c0      	adds	r3, #192	; 0xc0
 800bff2:	801a      	strh	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
    *nbBytesParsed = bytesProcessed;

#endif /* REGION_EU868 */
    return status;
}
 800bff4:	0020      	movs	r0, r4
    *drOut = linkAdrParams.Datarate;
 800bff6:	786b      	ldrb	r3, [r5, #1]
 800bff8:	9a03      	ldr	r2, [sp, #12]
 800bffa:	7013      	strb	r3, [r2, #0]
    *txPowOut = linkAdrParams.TxPower;
 800bffc:	78ab      	ldrb	r3, [r5, #2]
 800bffe:	9a04      	ldr	r2, [sp, #16]
 800c000:	7013      	strb	r3, [r2, #0]
    *nbRepOut = linkAdrParams.NbRep;
 800c002:	782b      	ldrb	r3, [r5, #0]
 800c004:	9a05      	ldr	r2, [sp, #20]
 800c006:	7013      	strb	r3, [r2, #0]
    *nbBytesParsed = bytesProcessed;
 800c008:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800c00a:	9a01      	ldr	r2, [sp, #4]
 800c00c:	701a      	strb	r2, [r3, #0]
}
 800c00e:	b013      	add	sp, #76	; 0x4c
 800c010:	bdf0      	pop	{r4, r5, r6, r7, pc}
        bytesProcessed += nextIndex;
 800c012:	9b01      	ldr	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800c014:	aa06      	add	r2, sp, #24
        bytesProcessed += nextIndex;
 800c016:	1818      	adds	r0, r3, r0
 800c018:	b2c3      	uxtb	r3, r0
 800c01a:	9301      	str	r3, [sp, #4]
        chMask = linkAdrParams.ChMask;
 800c01c:	ab06      	add	r3, sp, #24
 800c01e:	899b      	ldrh	r3, [r3, #12]
 800c020:	80d3      	strh	r3, [r2, #6]
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800c022:	aa06      	add	r2, sp, #24
 800c024:	7ad0      	ldrb	r0, [r2, #11]
 800c026:	2800      	cmp	r0, #0
 800c028:	d11f      	bne.n	800c06a <RegionEU868LinkAdrReq+0x11a>
            status &= 0xFE; // Channel mask KO
 800c02a:	2506      	movs	r5, #6
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d09f      	beq.n	800bf70 <RegionEU868LinkAdrReq+0x20>
                        status &= 0xFE; // Channel mask KO
 800c030:	2706      	movs	r7, #6
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800c032:	4a17      	ldr	r2, [pc, #92]	; (800c090 <RegionEU868LinkAdrReq+0x140>)
 800c034:	2507      	movs	r5, #7
 800c036:	6811      	ldr	r1, [r2, #0]
 800c038:	2200      	movs	r2, #0
                        status &= 0xFE; // Channel mask KO
 800c03a:	46bc      	mov	ip, r7
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800c03c:	9202      	str	r2, [sp, #8]
                if( linkAdrParams.ChMaskCtrl == 6 )
 800c03e:	2806      	cmp	r0, #6
 800c040:	d11c      	bne.n	800c07c <RegionEU868LinkAdrReq+0x12c>
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800c042:	680f      	ldr	r7, [r1, #0]
 800c044:	2f00      	cmp	r7, #0
 800c046:	d005      	beq.n	800c054 <RegionEU868LinkAdrReq+0x104>
                        chMask |= 1 << i;
 800c048:	2601      	movs	r6, #1
 800c04a:	4096      	lsls	r6, r2
 800c04c:	4333      	orrs	r3, r6
 800c04e:	2601      	movs	r6, #1
 800c050:	b29b      	uxth	r3, r3
 800c052:	9602      	str	r6, [sp, #8]
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800c054:	3201      	adds	r2, #1
 800c056:	310c      	adds	r1, #12
 800c058:	2a10      	cmp	r2, #16
 800c05a:	d1f0      	bne.n	800c03e <RegionEU868LinkAdrReq+0xee>
 800c05c:	9a02      	ldr	r2, [sp, #8]
 800c05e:	2a00      	cmp	r2, #0
 800c060:	d100      	bne.n	800c064 <RegionEU868LinkAdrReq+0x114>
 800c062:	e785      	b.n	800bf70 <RegionEU868LinkAdrReq+0x20>
 800c064:	aa06      	add	r2, sp, #24
 800c066:	80d3      	strh	r3, [r2, #6]
 800c068:	e782      	b.n	800bf70 <RegionEU868LinkAdrReq+0x20>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800c06a:	1e42      	subs	r2, r0, #1
            status &= 0xFE; // Channel mask KO
 800c06c:	2506      	movs	r5, #6
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800c06e:	2a04      	cmp	r2, #4
 800c070:	d800      	bhi.n	800c074 <RegionEU868LinkAdrReq+0x124>
 800c072:	e77d      	b.n	800bf70 <RegionEU868LinkAdrReq+0x20>
 800c074:	42a8      	cmp	r0, r5
 800c076:	d000      	beq.n	800c07a <RegionEU868LinkAdrReq+0x12a>
 800c078:	e77a      	b.n	800bf70 <RegionEU868LinkAdrReq+0x20>
 800c07a:	e7d9      	b.n	800c030 <RegionEU868LinkAdrReq+0xe0>
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800c07c:	001f      	movs	r7, r3
 800c07e:	2601      	movs	r6, #1
 800c080:	4117      	asrs	r7, r2
 800c082:	4237      	tst	r7, r6
 800c084:	d0e6      	beq.n	800c054 <RegionEU868LinkAdrReq+0x104>
 800c086:	680f      	ldr	r7, [r1, #0]
 800c088:	2f00      	cmp	r7, #0
 800c08a:	d1e3      	bne.n	800c054 <RegionEU868LinkAdrReq+0x104>
                        status &= 0xFE; // Channel mask KO
 800c08c:	4665      	mov	r5, ip
 800c08e:	e7e1      	b.n	800c054 <RegionEU868LinkAdrReq+0x104>
 800c090:	20001068 	.word	0x20001068

0800c094 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800c094:	b573      	push	{r0, r1, r4, r5, r6, lr}
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c096:	466b      	mov	r3, sp
 800c098:	2600      	movs	r6, #0
 800c09a:	1dd9      	adds	r1, r3, #7
{
 800c09c:	0005      	movs	r5, r0

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800c09e:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800c0a0:	700e      	strb	r6, [r1, #0]
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800c0a2:	f7ff fc8b 	bl	800b9bc <VerifyRfFreq.constprop.0>
 800c0a6:	3006      	adds	r0, #6
 800c0a8:	b2c4      	uxtb	r4, r0
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800c0aa:	2000      	movs	r0, #0
 800c0ac:	2207      	movs	r2, #7
 800c0ae:	0031      	movs	r1, r6
 800c0b0:	5628      	ldrsb	r0, [r5, r0]
 800c0b2:	f7ff f914 	bl	800b2de <RegionCommonValueInRange>
 800c0b6:	42b0      	cmp	r0, r6
 800c0b8:	d101      	bne.n	800c0be <RegionEU868RxParamSetupReq+0x2a>
    {
        status &= 0xFD; // Datarate KO
 800c0ba:	2302      	movs	r3, #2
 800c0bc:	439c      	bics	r4, r3
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800c0be:	2001      	movs	r0, #1
 800c0c0:	2205      	movs	r2, #5
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	5628      	ldrsb	r0, [r5, r0]
 800c0c6:	f7ff f90a 	bl	800b2de <RegionCommonValueInRange>
 800c0ca:	2800      	cmp	r0, #0
 800c0cc:	d101      	bne.n	800c0d2 <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800c0ce:	2304      	movs	r3, #4
 800c0d0:	439c      	bics	r4, r3
    }

#endif /* REGION_EU868 */
    return status;
}
 800c0d2:	0020      	movs	r0, r4
 800c0d4:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

0800c0d6 <RegionEU868TxParamSetupReq>:
}

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
 800c0d6:	2001      	movs	r0, #1
}
 800c0d8:	4240      	negs	r0, r0
 800c0da:	4770      	bx	lr

0800c0dc <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800c0dc:	b513      	push	{r0, r1, r4, lr}
    uint8_t status = 0x03;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c0de:	466b      	mov	r3, sp
 800c0e0:	1dd9      	adds	r1, r3, #7
 800c0e2:	2300      	movs	r3, #0
{
 800c0e4:	0004      	movs	r4, r0

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800c0e6:	6840      	ldr	r0, [r0, #4]
    uint8_t band = 0;
 800c0e8:	700b      	strb	r3, [r1, #0]
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800c0ea:	f7ff fc67 	bl	800b9bc <VerifyRfFreq.constprop.0>
 800c0ee:	210c      	movs	r1, #12
 800c0f0:	3002      	adds	r0, #2
 800c0f2:	b2c3      	uxtb	r3, r0
    {
        status &= 0xFE;
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800c0f4:	7820      	ldrb	r0, [r4, #0]
 800c0f6:	4a09      	ldr	r2, [pc, #36]	; (800c11c <RegionEU868DlChannelReq+0x40>)
 800c0f8:	4341      	muls	r1, r0
 800c0fa:	6812      	ldr	r2, [r2, #0]
 800c0fc:	1852      	adds	r2, r2, r1
 800c0fe:	6811      	ldr	r1, [r2, #0]
 800c100:	2900      	cmp	r1, #0
 800c102:	d103      	bne.n	800c10c <RegionEU868DlChannelReq+0x30>
    {
        status &= 0xFD;
 800c104:	2202      	movs	r2, #2
 800c106:	4393      	bics	r3, r2
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
 800c108:	b258      	sxtb	r0, r3
}
 800c10a:	bd16      	pop	{r1, r2, r4, pc}
    if( status == 0x03 )
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d102      	bne.n	800c116 <RegionEU868DlChannelReq+0x3a>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800c110:	6861      	ldr	r1, [r4, #4]
 800c112:	6051      	str	r1, [r2, #4]
 800c114:	e7f8      	b.n	800c108 <RegionEU868DlChannelReq+0x2c>
 800c116:	2302      	movs	r3, #2
 800c118:	e7f6      	b.n	800c108 <RegionEU868DlChannelReq+0x2c>
 800c11a:	46c0      	nop			; (mov r8, r8)
 800c11c:	20001068 	.word	0x20001068

0800c120 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800c120:	4770      	bx	lr
	...

0800c124 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800c124:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800c126:	2500      	movs	r5, #0
{
 800c128:	b09b      	sub	sp, #108	; 0x6c
 800c12a:	9305      	str	r3, [sp, #20]
    uint8_t nbEnabledChannels = 0;
 800c12c:	ab07      	add	r3, sp, #28
 800c12e:	701d      	strb	r5, [r3, #0]
    uint8_t nbRestrictedChannels = 0;
 800c130:	230d      	movs	r3, #13
{
 800c132:	9204      	str	r2, [sp, #16]
    uint8_t nbRestrictedChannels = 0;
 800c134:	aa04      	add	r2, sp, #16
 800c136:	189b      	adds	r3, r3, r2
{
 800c138:	9103      	str	r1, [sp, #12]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c13a:	220c      	movs	r2, #12
 800c13c:	0029      	movs	r1, r5
{
 800c13e:	0004      	movs	r4, r0
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c140:	a809      	add	r0, sp, #36	; 0x24
    uint8_t nbRestrictedChannels = 0;
 800c142:	701d      	strb	r5, [r3, #0]
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800c144:	9508      	str	r5, [sp, #32]
 800c146:	f002 fb3b 	bl	800e7c0 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c14a:	230e      	movs	r3, #14
 800c14c:	2607      	movs	r6, #7

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c14e:	4f2f      	ldr	r7, [pc, #188]	; (800c20c <RegionEU868NextChannel+0xe8>)
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c150:	aa04      	add	r2, sp, #16
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c152:	6838      	ldr	r0, [r7, #0]
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c154:	189b      	adds	r3, r3, r2
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c156:	0029      	movs	r1, r5
 800c158:	2201      	movs	r2, #1
 800c15a:	30c0      	adds	r0, #192	; 0xc0
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800c15c:	801e      	strh	r6, [r3, #0]
    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800c15e:	f7ff f8dc 	bl	800b31a <RegionCommonCountChannels>
 800c162:	42a8      	cmp	r0, r5
 800c164:	d104      	bne.n	800c170 <RegionEU868NextChannel+0x4c>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	33c0      	adds	r3, #192	; 0xc0
 800c16a:	881a      	ldrh	r2, [r3, #0]
 800c16c:	4316      	orrs	r6, r2
 800c16e:	801e      	strh	r6, [r3, #0]
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800c170:	7a63      	ldrb	r3, [r4, #9]
 800c172:	ad0c      	add	r5, sp, #48	; 0x30
 800c174:	702b      	strb	r3, [r5, #0]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c176:	2308      	movs	r3, #8
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c178:	4f24      	ldr	r7, [pc, #144]	; (800c20c <RegionEU868NextChannel+0xe8>)
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c17a:	56e3      	ldrsb	r3, [r4, r3]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
    countChannelsParams.JoinChannels = &joinChannels;

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c17c:	ae12      	add	r6, sp, #72	; 0x48
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800c17e:	706b      	strb	r3, [r5, #1]
 800c180:	469c      	mov	ip, r3
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c182:	683b      	ldr	r3, [r7, #0]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800c184:	930e      	str	r3, [sp, #56]	; 0x38
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c186:	001a      	movs	r2, r3
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800c188:	687b      	ldr	r3, [r7, #4]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c18a:	32c0      	adds	r2, #192	; 0xc0
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
 800c18c:	930f      	str	r3, [sp, #60]	; 0x3c
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800c18e:	2310      	movs	r3, #16
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800c190:	920d      	str	r2, [sp, #52]	; 0x34
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800c192:	822b      	strh	r3, [r5, #16]
    countChannelsParams.JoinChannels = &joinChannels;
 800c194:	aa04      	add	r2, sp, #16
 800c196:	3b02      	subs	r3, #2
 800c198:	189b      	adds	r3, r3, r2
 800c19a:	9311      	str	r3, [sp, #68]	; 0x44
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c19c:	6823      	ldr	r3, [r4, #0]
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c19e:	0022      	movs	r2, r4
    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800c1a0:	9312      	str	r3, [sp, #72]	; 0x48
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c1a2:	6863      	ldr	r3, [r4, #4]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c1a4:	320c      	adds	r2, #12
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800c1a6:	9313      	str	r3, [sp, #76]	; 0x4c
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800c1a8:	7aa3      	ldrb	r3, [r4, #10]
 800c1aa:	7233      	strb	r3, [r6, #8]
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800c1ac:	2306      	movs	r3, #6
 800c1ae:	7273      	strb	r3, [r6, #9]
    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800c1b0:	ab15      	add	r3, sp, #84	; 0x54
 800c1b2:	ca03      	ldmia	r2!, {r0, r1}
 800c1b4:	c303      	stmia	r3!, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c1b6:	7d23      	ldrb	r3, [r4, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c1b8:	4660      	mov	r0, ip
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800c1ba:	7533      	strb	r3, [r6, #20]
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c1bc:	8ae1      	ldrh	r1, [r4, #22]
 800c1be:	f7ff fbd3 	bl	800b968 <GetTimeOnAir>

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c1c2:	9b04      	ldr	r3, [sp, #16]
 800c1c4:	aa04      	add	r2, sp, #16
 800c1c6:	9301      	str	r3, [sp, #4]
 800c1c8:	230d      	movs	r3, #13
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800c1ca:	9519      	str	r5, [sp, #100]	; 0x64
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c1cc:	189b      	adds	r3, r3, r2
 800c1ce:	ad07      	add	r5, sp, #28
 800c1d0:	ac08      	add	r4, sp, #32
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800c1d2:	9018      	str	r0, [sp, #96]	; 0x60
    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800c1d4:	9300      	str	r3, [sp, #0]
 800c1d6:	0030      	movs	r0, r6
 800c1d8:	002b      	movs	r3, r5
 800c1da:	0022      	movs	r2, r4
 800c1dc:	9905      	ldr	r1, [sp, #20]
 800c1de:	f7ff fb13 	bl	800b808 <RegionCommonIdentifyChannels>
 800c1e2:	1e06      	subs	r6, r0, #0
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800c1e4:	d109      	bne.n	800c1fa <RegionEU868NextChannel+0xd6>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800c1e6:	7829      	ldrb	r1, [r5, #0]
 800c1e8:	3901      	subs	r1, #1
 800c1ea:	f000 f90d 	bl	800c408 <randr>
 800c1ee:	9a03      	ldr	r2, [sp, #12]
 800c1f0:	5c23      	ldrb	r3, [r4, r0]
 800c1f2:	7013      	strb	r3, [r2, #0]
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c1f4:	0030      	movs	r0, r6
 800c1f6:	b01b      	add	sp, #108	; 0x6c
 800c1f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800c1fa:	280c      	cmp	r0, #12
 800c1fc:	d1fa      	bne.n	800c1f4 <RegionEU868NextChannel+0xd0>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800c1fe:	2207      	movs	r2, #7
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	33c0      	adds	r3, #192	; 0xc0
 800c204:	8819      	ldrh	r1, [r3, #0]
 800c206:	430a      	orrs	r2, r1
 800c208:	801a      	strh	r2, [r3, #0]
 800c20a:	e7f3      	b.n	800c1f4 <RegionEU868NextChannel+0xd0>
 800c20c:	20001068 	.word	0x20001068

0800c210 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800c210:	b5f0      	push	{r4, r5, r6, r7, lr}
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800c212:	2500      	movs	r5, #0
{
 800c214:	b085      	sub	sp, #20
    uint8_t band = 0;
 800c216:	ab02      	add	r3, sp, #8
 800c218:	71dd      	strb	r5, [r3, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800c21a:	7906      	ldrb	r6, [r0, #4]
{
 800c21c:	0004      	movs	r4, r0

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c21e:	2e02      	cmp	r6, #2
 800c220:	d802      	bhi.n	800c228 <RegionEU868ChannelAdd+0x18>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800c222:	2006      	movs	r0, #6
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
    return LORAMAC_STATUS_OK;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800c224:	b005      	add	sp, #20
 800c226:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c228:	2003      	movs	r0, #3
    if( id >= EU868_MAX_NB_CHANNELS )
 800c22a:	2e0f      	cmp	r6, #15
 800c22c:	d8fa      	bhi.n	800c224 <RegionEU868ChannelAdd+0x14>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c22e:	6823      	ldr	r3, [r4, #0]
 800c230:	0029      	movs	r1, r5
 800c232:	7a18      	ldrb	r0, [r3, #8]
 800c234:	2207      	movs	r2, #7
 800c236:	0700      	lsls	r0, r0, #28
 800c238:	1700      	asrs	r0, r0, #28
 800c23a:	f7ff f850 	bl	800b2de <RegionCommonValueInRange>
 800c23e:	0007      	movs	r7, r0
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c240:	2008      	movs	r0, #8
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	0029      	movs	r1, r5
 800c246:	5618      	ldrsb	r0, [r3, r0]
 800c248:	2207      	movs	r2, #7
 800c24a:	1100      	asrs	r0, r0, #4
 800c24c:	f7ff f847 	bl	800b2de <RegionCommonValueInRange>
        drInvalid = true;
 800c250:	2501      	movs	r5, #1
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c252:	2800      	cmp	r0, #0
 800c254:	d002      	beq.n	800c25c <RegionEU868ChannelAdd+0x4c>
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800c256:	427b      	negs	r3, r7
 800c258:	415f      	adcs	r7, r3
 800c25a:	b2fd      	uxtb	r5, r7
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800c25c:	6820      	ldr	r0, [r4, #0]
 800c25e:	7a03      	ldrb	r3, [r0, #8]
 800c260:	071a      	lsls	r2, r3, #28
 800c262:	b25b      	sxtb	r3, r3
 800c264:	1712      	asrs	r2, r2, #28
 800c266:	111b      	asrs	r3, r3, #4
 800c268:	429a      	cmp	r2, r3
 800c26a:	dd00      	ble.n	800c26e <RegionEU868ChannelAdd+0x5e>
        drInvalid = true;
 800c26c:	2501      	movs	r5, #1
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800c26e:	ab02      	add	r3, sp, #8
 800c270:	6800      	ldr	r0, [r0, #0]
 800c272:	1dd9      	adds	r1, r3, #7
 800c274:	f7ff fba2 	bl	800b9bc <VerifyRfFreq.constprop.0>
 800c278:	2800      	cmp	r0, #0
 800c27a:	d103      	bne.n	800c284 <RegionEU868ChannelAdd+0x74>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800c27c:	2004      	movs	r0, #4
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c27e:	2d00      	cmp	r5, #0
 800c280:	d0d0      	beq.n	800c224 <RegionEU868ChannelAdd+0x14>
 800c282:	e7ce      	b.n	800c222 <RegionEU868ChannelAdd+0x12>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800c284:	2005      	movs	r0, #5
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800c286:	2d00      	cmp	r5, #0
 800c288:	d1cc      	bne.n	800c224 <RegionEU868ChannelAdd+0x14>
    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800c28a:	220c      	movs	r2, #12
 800c28c:	0013      	movs	r3, r2
 800c28e:	4f0b      	ldr	r7, [pc, #44]	; (800c2bc <RegionEU868ChannelAdd+0xac>)
 800c290:	4373      	muls	r3, r6
 800c292:	6838      	ldr	r0, [r7, #0]
 800c294:	6821      	ldr	r1, [r4, #0]
 800c296:	18c0      	adds	r0, r0, r3
 800c298:	9301      	str	r3, [sp, #4]
 800c29a:	f000 f8d1 	bl	800c440 <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	9a01      	ldr	r2, [sp, #4]
 800c2a2:	a902      	add	r1, sp, #8
 800c2a4:	79c9      	ldrb	r1, [r1, #7]
 800c2a6:	189a      	adds	r2, r3, r2
 800c2a8:	7251      	strb	r1, [r2, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c2aa:	2101      	movs	r1, #1
 800c2ac:	40b1      	lsls	r1, r6
 800c2ae:	33c0      	adds	r3, #192	; 0xc0
 800c2b0:	881a      	ldrh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800c2b2:	0028      	movs	r0, r5
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800c2b4:	430a      	orrs	r2, r1
 800c2b6:	801a      	strh	r2, [r3, #0]
    return LORAMAC_STATUS_OK;
 800c2b8:	e7b4      	b.n	800c224 <RegionEU868ChannelAdd+0x14>
 800c2ba:	46c0      	nop			; (mov r8, r8)
 800c2bc:	20001068 	.word	0x20001068

0800c2c0 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 800c2c0:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800c2c2:	7805      	ldrb	r5, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
    {
        return false;
 800c2c4:	2100      	movs	r1, #0
    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800c2c6:	2d02      	cmp	r5, #2
 800c2c8:	d90e      	bls.n	800c2e8 <RegionEU868ChannelsRemove+0x28>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800c2ca:	220c      	movs	r2, #12
 800c2cc:	0010      	movs	r0, r2
 800c2ce:	4b07      	ldr	r3, [pc, #28]	; (800c2ec <RegionEU868ChannelsRemove+0x2c>)
 800c2d0:	4368      	muls	r0, r5
 800c2d2:	681c      	ldr	r4, [r3, #0]
 800c2d4:	1820      	adds	r0, r4, r0
 800c2d6:	f002 fa73 	bl	800e7c0 <memset>

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800c2da:	0020      	movs	r0, r4
 800c2dc:	0029      	movs	r1, r5
 800c2de:	2210      	movs	r2, #16
 800c2e0:	30c0      	adds	r0, #192	; 0xc0
 800c2e2:	f7ff f806 	bl	800b2f2 <RegionCommonChanDisable>
 800c2e6:	0001      	movs	r1, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 800c2e8:	0008      	movs	r0, r1
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
 800c2ec:	20001068 	.word	0x20001068

0800c2f0 <RegionEU868ApplyCFList>:
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c2f0:	2350      	movs	r3, #80	; 0x50
{
 800c2f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c2f4:	b087      	sub	sp, #28
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800c2f6:	ac03      	add	r4, sp, #12
 800c2f8:	7223      	strb	r3, [r4, #8]
    if( applyCFList->Size != 16 )
 800c2fa:	7903      	ldrb	r3, [r0, #4]
{
 800c2fc:	0007      	movs	r7, r0
    if( applyCFList->Size != 16 )
 800c2fe:	2b10      	cmp	r3, #16
 800c300:	d12d      	bne.n	800c35e <RegionEU868ApplyCFList+0x6e>
    if( applyCFList->Payload[15] != 0 )
 800c302:	6803      	ldr	r3, [r0, #0]
 800c304:	7bde      	ldrb	r6, [r3, #15]
 800c306:	2e00      	cmp	r6, #0
 800c308:	d129      	bne.n	800c35e <RegionEU868ApplyCFList+0x6e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c30a:	2503      	movs	r5, #3
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800c30c:	2d07      	cmp	r5, #7
 800c30e:	d817      	bhi.n	800c340 <RegionEU868ApplyCFList+0x50>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c310:	683b      	ldr	r3, [r7, #0]
 800c312:	5d99      	ldrb	r1, [r3, r6]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c314:	199b      	adds	r3, r3, r6
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800c316:	6021      	str	r1, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800c318:	785a      	ldrb	r2, [r3, #1]
 800c31a:	0212      	lsls	r2, r2, #8
 800c31c:	430a      	orrs	r2, r1
 800c31e:	6022      	str	r2, [r4, #0]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800c320:	789b      	ldrb	r3, [r3, #2]
 800c322:	041b      	lsls	r3, r3, #16
 800c324:	4313      	orrs	r3, r2
            newChannel.Frequency *= 100;
 800c326:	2264      	movs	r2, #100	; 0x64
 800c328:	4353      	muls	r3, r2
            newChannel.Rx1Frequency = 0;
 800c32a:	2200      	movs	r2, #0
            newChannel.Frequency *= 100;
 800c32c:	6023      	str	r3, [r4, #0]
            newChannel.Rx1Frequency = 0;
 800c32e:	6062      	str	r2, [r4, #4]
        if( newChannel.Frequency != 0 )
 800c330:	4293      	cmp	r3, r2
 800c332:	d10a      	bne.n	800c34a <RegionEU868ApplyCFList+0x5a>
            channelRemove.ChannelId = chanIdx;
 800c334:	466b      	mov	r3, sp
            RegionEU868ChannelsRemove( &channelRemove );
 800c336:	4668      	mov	r0, sp
            channelRemove.ChannelId = chanIdx;
 800c338:	701d      	strb	r5, [r3, #0]
            RegionEU868ChannelsRemove( &channelRemove );
 800c33a:	f7ff ffc1 	bl	800c2c0 <RegionEU868ChannelsRemove>
 800c33e:	e009      	b.n	800c354 <RegionEU868ApplyCFList+0x64>
            newChannel.Frequency = 0;
 800c340:	2300      	movs	r3, #0
 800c342:	6023      	str	r3, [r4, #0]
            newChannel.DrRange.Value = 0;
 800c344:	7223      	strb	r3, [r4, #8]
            newChannel.Rx1Frequency = 0;
 800c346:	6063      	str	r3, [r4, #4]
        if( newChannel.Frequency != 0 )
 800c348:	e7f4      	b.n	800c334 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800c34a:	a801      	add	r0, sp, #4
 800c34c:	9401      	str	r4, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800c34e:	7105      	strb	r5, [r0, #4]
            RegionEU868ChannelAdd( &channelAdd );
 800c350:	f7ff ff5e 	bl	800c210 <RegionEU868ChannelAdd>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800c354:	3501      	adds	r5, #1
 800c356:	b2ed      	uxtb	r5, r5
 800c358:	3603      	adds	r6, #3
 800c35a:	2d10      	cmp	r5, #16
 800c35c:	d1d6      	bne.n	800c30c <RegionEU868ApplyCFList+0x1c>
}
 800c35e:	b007      	add	sp, #28
 800c360:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800c364 <RegionEU868NewChannelReq>:
{
 800c364:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c366:	6802      	ldr	r2, [r0, #0]
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c368:	7903      	ldrb	r3, [r0, #4]
    if( newChannelReq->NewChannel->Frequency == 0 )
 800c36a:	6811      	ldr	r1, [r2, #0]
 800c36c:	2900      	cmp	r1, #0
 800c36e:	d10a      	bne.n	800c386 <RegionEU868NewChannelReq+0x22>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800c370:	a801      	add	r0, sp, #4
 800c372:	7003      	strb	r3, [r0, #0]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c374:	f7ff ffa4 	bl	800c2c0 <RegionEU868ChannelsRemove>
    uint8_t status = 0x03;
 800c378:	2303      	movs	r3, #3
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800c37a:	2800      	cmp	r0, #0
 800c37c:	d100      	bne.n	800c380 <RegionEU868NewChannelReq+0x1c>
            status &= 0xFC;
 800c37e:	2300      	movs	r3, #0
    return status;
 800c380:	b258      	sxtb	r0, r3
}
 800c382:	b005      	add	sp, #20
 800c384:	bd00      	pop	{pc}
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800c386:	a802      	add	r0, sp, #8
 800c388:	9202      	str	r2, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800c38a:	7103      	strb	r3, [r0, #4]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800c38c:	f7ff ff40 	bl	800c210 <RegionEU868ChannelAdd>
 800c390:	2806      	cmp	r0, #6
 800c392:	d8f4      	bhi.n	800c37e <RegionEU868NewChannelReq+0x1a>
 800c394:	4b01      	ldr	r3, [pc, #4]	; (800c39c <RegionEU868NewChannelReq+0x38>)
 800c396:	335c      	adds	r3, #92	; 0x5c
 800c398:	5c1b      	ldrb	r3, [r3, r0]
 800c39a:	e7f1      	b.n	800c380 <RegionEU868NewChannelReq+0x1c>
 800c39c:	0800f4fc 	.word	0x0800f4fc

0800c3a0 <RegionEU868SetContinuousWave>:

void RegionEU868SetContinuousWave( ContinuousWaveParams_t* continuousWave )
{
 800c3a0:	b570      	push	{r4, r5, r6, lr}
#if defined( REGION_EU868 )
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c3a2:	250c      	movs	r5, #12
 800c3a4:	7801      	ldrb	r1, [r0, #0]
 800c3a6:	4e0f      	ldr	r6, [pc, #60]	; (800c3e4 <RegionEU868SetContinuousWave+0x44>)
 800c3a8:	4369      	muls	r1, r5
 800c3aa:	6832      	ldr	r2, [r6, #0]
{
 800c3ac:	0004      	movs	r4, r0
    int8_t txPowerLimited = RegionCommonLimitTxPower( continuousWave->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[continuousWave->Channel].Band].TxMaxPower );
 800c3ae:	1852      	adds	r2, r2, r1
 800c3b0:	7a51      	ldrb	r1, [r2, #9]
 800c3b2:	2218      	movs	r2, #24
 800c3b4:	2002      	movs	r0, #2
 800c3b6:	434a      	muls	r2, r1
 800c3b8:	2102      	movs	r1, #2
 800c3ba:	6873      	ldr	r3, [r6, #4]
 800c3bc:	5620      	ldrsb	r0, [r4, r0]
 800c3be:	189b      	adds	r3, r3, r2
 800c3c0:	5659      	ldrsb	r1, [r3, r1]
 800c3c2:	f7ff fa84 	bl	800b8ce <RegionCommonLimitTxPower>
    int8_t phyTxPower = 0;
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c3c6:	7822      	ldrb	r2, [r4, #0]
 800c3c8:	6833      	ldr	r3, [r6, #0]
 800c3ca:	4355      	muls	r5, r2

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c3cc:	6861      	ldr	r1, [r4, #4]
 800c3ce:	68a2      	ldr	r2, [r4, #8]
    uint32_t frequency = RegionNvmGroup2->Channels[continuousWave->Channel].Frequency;
 800c3d0:	58ed      	ldr	r5, [r5, r3]
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c3d2:	f7ff f9a7 	bl	800b724 <RegionCommonComputeTxPower>

    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c3d6:	4b04      	ldr	r3, [pc, #16]	; (800c3e8 <RegionEU868SetContinuousWave+0x48>)
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, continuousWave->MaxEirp, continuousWave->AntennaGain );
 800c3d8:	0001      	movs	r1, r0
    Radio.SetTxContinuousWave( frequency, phyTxPower, continuousWave->Timeout );
 800c3da:	89a2      	ldrh	r2, [r4, #12]
 800c3dc:	0028      	movs	r0, r5
 800c3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3e0:	4798      	blx	r3
#endif /* REGION_EU868 */
}
 800c3e2:	bd70      	pop	{r4, r5, r6, pc}
 800c3e4:	20001068 	.word	0x20001068
 800c3e8:	0800f64c 	.word	0x0800f64c

0800c3ec <RegionEU868ApplyDrOffset>:

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800c3ec:	1a89      	subs	r1, r1, r2

    if( datarate < 0 )
    {
        datarate = DR_0;
    }
    return datarate;
 800c3ee:	1c08      	adds	r0, r1, #0
 800c3f0:	0609      	lsls	r1, r1, #24
 800c3f2:	d500      	bpl.n	800c3f6 <RegionEU868ApplyDrOffset+0xa>
 800c3f4:	2000      	movs	r0, #0
 800c3f6:	b2c0      	uxtb	r0, r0
#else
    return 0;
#endif /* REGION_EU868 */
}
 800c3f8:	4770      	bx	lr
	...

0800c3fc <srand1>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
}

void srand1( uint32_t seed )
{
    next = seed;
 800c3fc:	4b01      	ldr	r3, [pc, #4]	; (800c404 <srand1+0x8>)
 800c3fe:	6018      	str	r0, [r3, #0]
}
 800c400:	4770      	bx	lr
 800c402:	46c0      	nop			; (mov r8, r8)
 800c404:	200000e0 	.word	0x200000e0

0800c408 <randr>:
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c408:	4b09      	ldr	r3, [pc, #36]	; (800c430 <randr+0x28>)
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 800c40a:	b570      	push	{r4, r5, r6, lr}
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c40c:	681a      	ldr	r2, [r3, #0]
{
 800c40e:	0005      	movs	r5, r0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c410:	4808      	ldr	r0, [pc, #32]	; (800c434 <randr+0x2c>)
{
 800c412:	000c      	movs	r4, r1
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 800c414:	4350      	muls	r0, r2
 800c416:	4a08      	ldr	r2, [pc, #32]	; (800c438 <randr+0x30>)
 800c418:	4908      	ldr	r1, [pc, #32]	; (800c43c <randr+0x34>)
 800c41a:	1880      	adds	r0, r0, r2
 800c41c:	6018      	str	r0, [r3, #0]
 800c41e:	f7f3 ff29 	bl	8000274 <__aeabi_uidivmod>
 800c422:	0008      	movs	r0, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 800c424:	1b61      	subs	r1, r4, r5
 800c426:	3101      	adds	r1, #1
 800c428:	f7f4 f80e 	bl	8000448 <__aeabi_idivmod>
 800c42c:	1948      	adds	r0, r1, r5
}
 800c42e:	bd70      	pop	{r4, r5, r6, pc}
 800c430:	200000e0 	.word	0x200000e0
 800c434:	41c64e6d 	.word	0x41c64e6d
 800c438:	00003039 	.word	0x00003039
 800c43c:	7fffffff 	.word	0x7fffffff

0800c440 <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 800c440:	2300      	movs	r3, #0
{
 800c442:	b510      	push	{r4, lr}
    while( size-- )
 800c444:	4293      	cmp	r3, r2
 800c446:	d100      	bne.n	800c44a <memcpy1+0xa>
    {
        *dst++ = *src++;
    }
}
 800c448:	bd10      	pop	{r4, pc}
        *dst++ = *src++;
 800c44a:	5ccc      	ldrb	r4, [r1, r3]
 800c44c:	54c4      	strb	r4, [r0, r3]
 800c44e:	3301      	adds	r3, #1
 800c450:	e7f8      	b.n	800c444 <memcpy1+0x4>

0800c452 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 800c452:	1e53      	subs	r3, r2, #1
 800c454:	18c0      	adds	r0, r0, r3
    while( size-- )
 800c456:	2300      	movs	r3, #0
{
 800c458:	b530      	push	{r4, r5, lr}
    while( size-- )
 800c45a:	429a      	cmp	r2, r3
 800c45c:	d100      	bne.n	800c460 <memcpyr+0xe>
    {
        *dst-- = *src++;
    }
}
 800c45e:	bd30      	pop	{r4, r5, pc}
        *dst-- = *src++;
 800c460:	5ccd      	ldrb	r5, [r1, r3]
 800c462:	425c      	negs	r4, r3
 800c464:	5505      	strb	r5, [r0, r4]
 800c466:	3301      	adds	r3, #1
 800c468:	e7f7      	b.n	800c45a <memcpyr+0x8>

0800c46a <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 800c46a:	b510      	push	{r4, lr}
    while( size-- )
    {
        *dst++ = value;
 800c46c:	f002 f9a8 	bl	800e7c0 <memset>
    }
}
 800c470:	bd10      	pop	{r4, pc}
	...

0800c474 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 800c474:	0002      	movs	r2, r0
 800c476:	b5f0      	push	{r4, r5, r6, r7, lr}
    const uint32_t reversedPolynom = 0xEDB88320;

    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 800c478:	2800      	cmp	r0, #0
 800c47a:	d008      	beq.n	800c48e <Crc32+0x1a>
    uint32_t crc = 0xFFFFFFFF;
 800c47c:	2301      	movs	r3, #1
 800c47e:	2500      	movs	r5, #0
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
    {
        crc ^= ( uint32_t )buffer[i];
 800c480:	2608      	movs	r6, #8
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c482:	2701      	movs	r7, #1
    uint32_t crc = 0xFFFFFFFF;
 800c484:	425b      	negs	r3, r3
    for( uint16_t i = 0; i < length; ++i )
 800c486:	b2ac      	uxth	r4, r5
 800c488:	428c      	cmp	r4, r1
 800c48a:	d301      	bcc.n	800c490 <Crc32+0x1c>
        }
    }

    return ~crc;
 800c48c:	43d8      	mvns	r0, r3
}
 800c48e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        crc ^= ( uint32_t )buffer[i];
 800c490:	5d54      	ldrb	r4, [r2, r5]
 800c492:	4063      	eors	r3, r4
 800c494:	0034      	movs	r4, r6
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c496:	0858      	lsrs	r0, r3, #1
 800c498:	4684      	mov	ip, r0
 800c49a:	403b      	ands	r3, r7
 800c49c:	4805      	ldr	r0, [pc, #20]	; (800c4b4 <Crc32+0x40>)
 800c49e:	425b      	negs	r3, r3
 800c4a0:	4003      	ands	r3, r0
 800c4a2:	4660      	mov	r0, ip
        for( uint16_t i = 0; i < 8; i++ )
 800c4a4:	3c01      	subs	r4, #1
 800c4a6:	b2a4      	uxth	r4, r4
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 800c4a8:	4043      	eors	r3, r0
        for( uint16_t i = 0; i < 8; i++ )
 800c4aa:	2c00      	cmp	r4, #0
 800c4ac:	d1f3      	bne.n	800c496 <Crc32+0x22>
    for( uint16_t i = 0; i < length; ++i )
 800c4ae:	3501      	adds	r5, #1
 800c4b0:	e7e9      	b.n	800c486 <Crc32+0x12>
 800c4b2:	46c0      	nop			; (mov r8, r8)
 800c4b4:	edb88320 	.word	0xedb88320

0800c4b8 <SX1276GetStatus>:
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
}

RadioState_t SX1276GetStatus( void )
{
    return SX1276.Settings.State;
 800c4b8:	4b01      	ldr	r3, [pc, #4]	; (800c4c0 <SX1276GetStatus+0x8>)
 800c4ba:	7918      	ldrb	r0, [r3, #4]
}
 800c4bc:	4770      	bx	lr
 800c4be:	46c0      	nop			; (mov r8, r8)
 800c4c0:	20001070 	.word	0x20001070

0800c4c4 <GetFskBandwidthRegValue>:

static uint8_t GetFskBandwidthRegValue( uint32_t bw )
{
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c4c4:	4a09      	ldr	r2, [pc, #36]	; (800c4ec <GetFskBandwidthRegValue+0x28>)
{
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	0011      	movs	r1, r2
 800c4ca:	b510      	push	{r4, lr}
    {
        if( ( bw >= FskBandwidths[i].bandwidth ) && ( bw < FskBandwidths[i + 1].bandwidth ) )
 800c4cc:	6814      	ldr	r4, [r2, #0]
 800c4ce:	4284      	cmp	r4, r0
 800c4d0:	d802      	bhi.n	800c4d8 <GetFskBandwidthRegValue+0x14>
 800c4d2:	6894      	ldr	r4, [r2, #8]
 800c4d4:	4284      	cmp	r4, r0
 800c4d6:	d804      	bhi.n	800c4e2 <GetFskBandwidthRegValue+0x1e>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 800c4d8:	3301      	adds	r3, #1
 800c4da:	3208      	adds	r2, #8
 800c4dc:	2b15      	cmp	r3, #21
 800c4de:	d1f5      	bne.n	800c4cc <GetFskBandwidthRegValue+0x8>
        {
            return FskBandwidths[i].RegValue;
        }
    }
    // ERROR: Value not found
    while( 1 );
 800c4e0:	e7fe      	b.n	800c4e0 <GetFskBandwidthRegValue+0x1c>
            return FskBandwidths[i].RegValue;
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	18c9      	adds	r1, r1, r3
 800c4e6:	7908      	ldrb	r0, [r1, #4]
}
 800c4e8:	bd10      	pop	{r4, pc}
 800c4ea:	46c0      	nop			; (mov r8, r8)
 800c4ec:	0800f59c 	.word	0x0800f59c

0800c4f0 <SX1276GetTimeOnAir>:
{
 800c4f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4f2:	0014      	movs	r4, r2
 800c4f4:	aa08      	add	r2, sp, #32
 800c4f6:	8816      	ldrh	r6, [r2, #0]
 800c4f8:	aa09      	add	r2, sp, #36	; 0x24
 800c4fa:	000d      	movs	r5, r1
 800c4fc:	7811      	ldrb	r1, [r2, #0]
 800c4fe:	aa0a      	add	r2, sp, #40	; 0x28
 800c500:	7812      	ldrb	r2, [r2, #0]
 800c502:	af0b      	add	r7, sp, #44	; 0x2c
 800c504:	4694      	mov	ip, r2
 800c506:	783f      	ldrb	r7, [r7, #0]
    switch( modem )
 800c508:	2800      	cmp	r0, #0
 800c50a:	d009      	beq.n	800c520 <SX1276GetTimeOnAir+0x30>
 800c50c:	2801      	cmp	r0, #1
 800c50e:	d014      	beq.n	800c53a <SX1276GetTimeOnAir+0x4a>
 800c510:	2401      	movs	r4, #1
 800c512:	2000      	movs	r0, #0
    return ( numerator + denominator - 1 ) / denominator;
 800c514:	1900      	adds	r0, r0, r4
 800c516:	0021      	movs	r1, r4
 800c518:	3801      	subs	r0, #1
 800c51a:	f7f3 fe25 	bl	8000168 <__udivsi3>
}
 800c51e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
                                                 uint8_t payloadLen, bool crcOn )
{
    const uint8_t syncWordLength = 3;

    return ( preambleLen << 3 ) +
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c520:	2301      	movs	r3, #1
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c522:	20fa      	movs	r0, #250	; 0xfa
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c524:	404b      	eors	r3, r1
    return ( preambleLen << 3 ) +
 800c526:	18f3      	adds	r3, r6, r3
             ( syncWordLength << 3 ) +
             ( ( payloadLen +
               ( 0 ) + // Address filter size
               ( ( crcOn == true ) ? 2 : 0 ) 
 800c528:	007f      	lsls	r7, r7, #1
    return ( preambleLen << 3 ) +
 800c52a:	00db      	lsls	r3, r3, #3
               ( 0 ) + // Address filter size
 800c52c:	4467      	add	r7, ip
           ( ( fixLen == false ) ? 8 : 0 ) +
 800c52e:	3318      	adds	r3, #24
               ) << 3 
 800c530:	00ff      	lsls	r7, r7, #3
             ( syncWordLength << 3 ) +
 800c532:	19df      	adds	r7, r3, r7
            numerator   = 1000U * SX1276GetGfskTimeOnAirNumerator( preambleLen, fixLen, payloadLen, crcOn );
 800c534:	0080      	lsls	r0, r0, #2
 800c536:	4378      	muls	r0, r7
        break;
 800c538:	e7ec      	b.n	800c514 <SX1276GetTimeOnAir+0x24>
static uint32_t SX1276GetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                              uint32_t datarate, uint8_t coderate,
                              uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                              bool crcOn )
{
    int32_t crDenom           = coderate + 4;
 800c53a:	3304      	adds	r3, #4
 800c53c:	9301      	str	r3, [sp, #4]
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or
    // SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800c53e:	1f63      	subs	r3, r4, #5
 800c540:	2b01      	cmp	r3, #1
 800c542:	d804      	bhi.n	800c54e <SX1276GetTimeOnAir+0x5e>
    {
        if( preambleLen < 12 )
 800c544:	1c33      	adds	r3, r6, #0
 800c546:	2e0c      	cmp	r6, #12
 800c548:	d200      	bcs.n	800c54c <SX1276GetTimeOnAir+0x5c>
 800c54a:	230c      	movs	r3, #12
 800c54c:	b29e      	uxth	r6, r3
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c54e:	2d00      	cmp	r5, #0
 800c550:	d135      	bne.n	800c5be <SX1276GetTimeOnAir+0xce>
 800c552:	0023      	movs	r3, r4
 800c554:	2001      	movs	r0, #1
 800c556:	002a      	movs	r2, r5
 800c558:	3b0b      	subs	r3, #11
 800c55a:	4298      	cmp	r0, r3
 800c55c:	416a      	adcs	r2, r5
 800c55e:	0013      	movs	r3, r2
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c560:	b2db      	uxtb	r3, r3
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c562:	4662      	mov	r2, ip
                            ( crcOn ? 16 : 0 ) -
 800c564:	013f      	lsls	r7, r7, #4
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 800c566:	00d2      	lsls	r2, r2, #3
 800c568:	19d2      	adds	r2, r2, r7
                            ( 4 * datarate ) +
                            ( fixLen ? 0 : 20 );
 800c56a:	2700      	movs	r7, #0
                            ( 4 * datarate ) +
 800c56c:	00a0      	lsls	r0, r4, #2
                            ( crcOn ? 16 : 0 ) -
 800c56e:	1a12      	subs	r2, r2, r0
                            ( fixLen ? 0 : 20 );
 800c570:	42b9      	cmp	r1, r7
 800c572:	d100      	bne.n	800c576 <SX1276GetTimeOnAir+0x86>
 800c574:	3714      	adds	r7, #20
                            ( 4 * datarate ) +
 800c576:	19d2      	adds	r2, r2, r7

    if( datarate <= 6 )
    {
        ceilDenominator = 4 * datarate;
 800c578:	0001      	movs	r1, r0
    {
        ceilNumerator += 8;

        if( lowDatareOptimize == true )
        {
            ceilDenominator = 4 * ( datarate - 2 );
 800c57a:	1ea7      	subs	r7, r4, #2
    if( datarate <= 6 )
 800c57c:	2c06      	cmp	r4, #6
 800c57e:	d903      	bls.n	800c588 <SX1276GetTimeOnAir+0x98>
        ceilNumerator += 8;
 800c580:	3208      	adds	r2, #8
        if( lowDatareOptimize == true )
 800c582:	2b00      	cmp	r3, #0
 800c584:	d000      	beq.n	800c588 <SX1276GetTimeOnAir+0x98>
            ceilDenominator = 4 * ( datarate - 2 );
 800c586:	00b9      	lsls	r1, r7, #2
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800c588:	43d3      	mvns	r3, r2
 800c58a:	17db      	asrs	r3, r3, #31
 800c58c:	401a      	ands	r2, r3
 800c58e:	1852      	adds	r2, r2, r1
 800c590:	1e50      	subs	r0, r2, #1
 800c592:	f7f3 fe73 	bl	800027c <__divsi3>
 800c596:	9b01      	ldr	r3, [sp, #4]
 800c598:	4343      	muls	r3, r0
 800c59a:	1998      	adds	r0, r3, r6

    if( datarate <= 6 )
    {
        intermediate += 2;
 800c59c:	0003      	movs	r3, r0
 800c59e:	330e      	adds	r3, #14
    if( datarate <= 6 )
 800c5a0:	2c06      	cmp	r4, #6
 800c5a2:	d900      	bls.n	800c5a6 <SX1276GetTimeOnAir+0xb6>
    int32_t intermediate =
 800c5a4:	3b02      	subs	r3, #2
    switch( bw )
 800c5a6:	2d02      	cmp	r5, #2
 800c5a8:	d811      	bhi.n	800c5ce <SX1276GetTimeOnAir+0xde>
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c5aa:	009b      	lsls	r3, r3, #2
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c5ac:	20fa      	movs	r0, #250	; 0xfa
    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 800c5ae:	3301      	adds	r3, #1
 800c5b0:	40bb      	lsls	r3, r7
            numerator   = 1000U * SX1276GetLoRaTimeOnAirNumerator( bandwidth, datarate, coderate, preambleLen, fixLen,
 800c5b2:	0080      	lsls	r0, r0, #2
 800c5b4:	4358      	muls	r0, r3
 800c5b6:	4b06      	ldr	r3, [pc, #24]	; (800c5d0 <SX1276GetTimeOnAir+0xe0>)
 800c5b8:	00ad      	lsls	r5, r5, #2
 800c5ba:	58ec      	ldr	r4, [r5, r3]
 800c5bc:	e7aa      	b.n	800c514 <SX1276GetTimeOnAir+0x24>
    bool    lowDatareOptimize = false;
 800c5be:	2300      	movs	r3, #0
    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800c5c0:	2d01      	cmp	r5, #1
 800c5c2:	d1ce      	bne.n	800c562 <SX1276GetTimeOnAir+0x72>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800c5c4:	0023      	movs	r3, r4
 800c5c6:	3b0c      	subs	r3, #12
 800c5c8:	4258      	negs	r0, r3
 800c5ca:	4143      	adcs	r3, r0
 800c5cc:	e7c8      	b.n	800c560 <SX1276GetTimeOnAir+0x70>
    return ( numerator + denominator - 1 ) / denominator;
 800c5ce:	deff      	udf	#255	; 0xff
 800c5d0:	0800f560 	.word	0x0800f560

0800c5d4 <SX1276GetWakeupTime>:
{
 800c5d4:	b510      	push	{r4, lr}
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800c5d6:	f7f6 fda7 	bl	8003128 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800c5da:	3002      	adds	r0, #2
}
 800c5dc:	bd10      	pop	{r4, pc}

0800c5de <SX1276WriteBuffer>:
{
 800c5de:	b570      	push	{r4, r5, r6, lr}
 800c5e0:	0006      	movs	r6, r0
    Sx_Board_ChipSelect( 0 );
 800c5e2:	2000      	movs	r0, #0
{
 800c5e4:	000c      	movs	r4, r1
 800c5e6:	0015      	movs	r5, r2
    Sx_Board_ChipSelect( 0 );
 800c5e8:	f7f6 ff78 	bl	80034dc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr | 0x80 );
 800c5ec:	2080      	movs	r0, #128	; 0x80
 800c5ee:	4330      	orrs	r0, r6
 800c5f0:	b280      	uxth	r0, r0
 800c5f2:	f7f6 ff65 	bl	80034c0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c5f6:	1965      	adds	r5, r4, r5
 800c5f8:	42ac      	cmp	r4, r5
 800c5fa:	d103      	bne.n	800c604 <SX1276WriteBuffer+0x26>
    Sx_Board_ChipSelect( 1 );
 800c5fc:	2001      	movs	r0, #1
 800c5fe:	f7f6 ff6d 	bl	80034dc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800c602:	bd70      	pop	{r4, r5, r6, pc}
        Sx_Board_SendRecv( buffer[i] );
 800c604:	7820      	ldrb	r0, [r4, #0]
 800c606:	f7f6 ff5b 	bl	80034c0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c60a:	3401      	adds	r4, #1
 800c60c:	e7f4      	b.n	800c5f8 <SX1276WriteBuffer+0x1a>

0800c60e <SX1276Write>:
{
 800c60e:	b507      	push	{r0, r1, r2, lr}
 800c610:	466b      	mov	r3, sp
 800c612:	71d9      	strb	r1, [r3, #7]
 800c614:	3307      	adds	r3, #7
    SX1276WriteBuffer( addr, &data, 1 );
 800c616:	2201      	movs	r2, #1
 800c618:	0019      	movs	r1, r3
 800c61a:	f7ff ffe0 	bl	800c5de <SX1276WriteBuffer>
}
 800c61e:	bd07      	pop	{r0, r1, r2, pc}

0800c620 <SX1276SetChannel>:
{
 800c620:	b570      	push	{r4, r5, r6, lr}
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c622:	4911      	ldr	r1, [pc, #68]	; (800c668 <SX1276SetChannel+0x48>)
{
 800c624:	0005      	movs	r5, r0
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c626:	f7f3 fe25 	bl	8000274 <__aeabi_uidivmod>
 800c62a:	4b10      	ldr	r3, [pc, #64]	; (800c66c <SX1276SetChannel+0x4c>)
 800c62c:	0208      	lsls	r0, r1, #8
 800c62e:	18c0      	adds	r0, r0, r3
 800c630:	490d      	ldr	r1, [pc, #52]	; (800c668 <SX1276SetChannel+0x48>)
 800c632:	f7f3 fd99 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c636:	490c      	ldr	r1, [pc, #48]	; (800c668 <SX1276SetChannel+0x48>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800c638:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800c63a:	0028      	movs	r0, r5
 800c63c:	f7f3 fd94 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800c640:	0200      	lsls	r0, r0, #8
 800c642:	1824      	adds	r4, r4, r0
    SX1276.Settings.Channel = freq;
 800c644:	4b0a      	ldr	r3, [pc, #40]	; (800c670 <SX1276SetChannel+0x50>)
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c646:	0c21      	lsrs	r1, r4, #16
 800c648:	2006      	movs	r0, #6
 800c64a:	b2c9      	uxtb	r1, r1
    SX1276.Settings.Channel = freq;
 800c64c:	609d      	str	r5, [r3, #8]
    SX1276Write( REG_FRFMSB, ( uint8_t )( ( freqInPllSteps >> 16 ) & 0xFF ) );
 800c64e:	f7ff ffde 	bl	800c60e <SX1276Write>
    SX1276Write( REG_FRFMID, ( uint8_t )( ( freqInPllSteps >> 8 ) & 0xFF ) );
 800c652:	0a21      	lsrs	r1, r4, #8
 800c654:	2007      	movs	r0, #7
 800c656:	b2c9      	uxtb	r1, r1
 800c658:	f7ff ffd9 	bl	800c60e <SX1276Write>
    SX1276Write( REG_FRFLSB, ( uint8_t )( freqInPllSteps & 0xFF ) );
 800c65c:	2008      	movs	r0, #8
 800c65e:	b2e1      	uxtb	r1, r4
 800c660:	f7ff ffd5 	bl	800c60e <SX1276Write>
}
 800c664:	bd70      	pop	{r4, r5, r6, pc}
 800c666:	46c0      	nop			; (mov r8, r8)
 800c668:	00003d09 	.word	0x00003d09
 800c66c:	00001e84 	.word	0x00001e84
 800c670:	20001070 	.word	0x20001070

0800c674 <SX1276ReadBuffer>:
{
 800c674:	b570      	push	{r4, r5, r6, lr}
 800c676:	0005      	movs	r5, r0
    Sx_Board_ChipSelect( 0 );
 800c678:	2000      	movs	r0, #0
{
 800c67a:	000c      	movs	r4, r1
 800c67c:	0016      	movs	r6, r2
    Sx_Board_ChipSelect( 0 );
 800c67e:	f7f6 ff2d 	bl	80034dc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
    Sx_Board_SendRecv( addr & 0x7F );
 800c682:	207f      	movs	r0, #127	; 0x7f
 800c684:	4028      	ands	r0, r5
 800c686:	f7f6 ff1b 	bl	80034c0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
    for( i = 0; i < size; i++ )
 800c68a:	19a6      	adds	r6, r4, r6
 800c68c:	42b4      	cmp	r4, r6
 800c68e:	d103      	bne.n	800c698 <SX1276ReadBuffer+0x24>
    Sx_Board_ChipSelect( 1 );
 800c690:	2001      	movs	r0, #1
 800c692:	f7f6 ff23 	bl	80034dc <CMWX1ZZABZ0XX_RADIO_ChipSelect>
}
 800c696:	bd70      	pop	{r4, r5, r6, pc}
        buffer[i] = Sx_Board_SendRecv( 0 );
 800c698:	2000      	movs	r0, #0
 800c69a:	f7f6 ff11 	bl	80034c0 <CMWX1ZZABZ0XX_RADIO_SendRecv>
 800c69e:	7020      	strb	r0, [r4, #0]
    for( i = 0; i < size; i++ )
 800c6a0:	3401      	adds	r4, #1
 800c6a2:	e7f3      	b.n	800c68c <SX1276ReadBuffer+0x18>

0800c6a4 <SX1276Read>:
{
 800c6a4:	b513      	push	{r0, r1, r4, lr}
    SX1276ReadBuffer( addr, &data, 1 );
 800c6a6:	466b      	mov	r3, sp
 800c6a8:	1ddc      	adds	r4, r3, #7
 800c6aa:	2201      	movs	r2, #1
 800c6ac:	0021      	movs	r1, r4
 800c6ae:	f7ff ffe1 	bl	800c674 <SX1276ReadBuffer>
    return data;
 800c6b2:	7820      	ldrb	r0, [r4, #0]
}
 800c6b4:	bd16      	pop	{r1, r2, r4, pc}
	...

0800c6b8 <SX1276OnDio2Irq>:
            break;
    }
}

static void SX1276OnDio2Irq( void )
{
 800c6b8:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800c6ba:	4c2c      	ldr	r4, [pc, #176]	; (800c76c <SX1276OnDio2Irq+0xb4>)
 800c6bc:	7925      	ldrb	r5, [r4, #4]
 800c6be:	2d01      	cmp	r5, #1
 800c6c0:	d002      	beq.n	800c6c8 <SX1276OnDio2Irq+0x10>
 800c6c2:	2d02      	cmp	r5, #2
 800c6c4:	d049      	beq.n	800c75a <SX1276OnDio2Irq+0xa2>
            }
            break;
        default:
            break;
    }
}
 800c6c6:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800c6c8:	7963      	ldrb	r3, [r4, #5]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d017      	beq.n	800c6fe <SX1276OnDio2Irq+0x46>
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d1f9      	bne.n	800c6c6 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c6d2:	3453      	adds	r4, #83	; 0x53
 800c6d4:	7823      	ldrb	r3, [r4, #0]
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c6d6:	2102      	movs	r1, #2
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d0f4      	beq.n	800c6c6 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c6dc:	2012      	movs	r0, #18
 800c6de:	f7ff ff96 	bl	800c60e <SX1276Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 800c6e2:	4b23      	ldr	r3, [pc, #140]	; (800c770 <SX1276OnDio2Irq+0xb8>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d0ed      	beq.n	800c6c6 <SX1276OnDio2Irq+0xe>
 800c6ea:	695c      	ldr	r4, [r3, #20]
 800c6ec:	2c00      	cmp	r4, #0
 800c6ee:	d0ea      	beq.n	800c6c6 <SX1276OnDio2Irq+0xe>
                        RadioEvents->FhssChangeChannel( ( SX1276Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 800c6f0:	201c      	movs	r0, #28
 800c6f2:	f7ff ffd7 	bl	800c6a4 <SX1276Read>
 800c6f6:	233f      	movs	r3, #63	; 0x3f
 800c6f8:	4018      	ands	r0, r3
 800c6fa:	47a0      	blx	r4
}
 800c6fc:	e7e3      	b.n	800c6c6 <SX1276OnDio2Irq+0xe>
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c6fe:	0023      	movs	r3, r4
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c700:	0026      	movs	r6, r4
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c702:	3330      	adds	r3, #48	; 0x30
 800c704:	701d      	strb	r5, [r3, #0]
                if( ( SX1276.Settings.FskPacketHandler.PreambleDetected != 0 ) && ( SX1276.Settings.FskPacketHandler.SyncWordDetected == 0 ) )
 800c706:	3631      	adds	r6, #49	; 0x31
 800c708:	7833      	ldrb	r3, [r6, #0]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1db      	bne.n	800c6c6 <SX1276OnDio2Irq+0xe>
                    TimerStop( &RxTimeoutSyncWord );
 800c70e:	0020      	movs	r0, r4
 800c710:	3068      	adds	r0, #104	; 0x68
 800c712:	f001 fd2f 	bl	800e174 <UTIL_TIMER_Stop>
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c716:	2011      	movs	r0, #17
                    SX1276.Settings.FskPacketHandler.SyncWordDetected = true;
 800c718:	7035      	strb	r5, [r6, #0]
                    SX1276.Settings.FskPacketHandler.RssiValue = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800c71a:	f7ff ffc3 	bl	800c6a4 <SX1276Read>
 800c71e:	0023      	movs	r3, r4
 800c720:	0840      	lsrs	r0, r0, #1
 800c722:	3332      	adds	r3, #50	; 0x32
 800c724:	4240      	negs	r0, r0
 800c726:	7018      	strb	r0, [r3, #0]
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c728:	201b      	movs	r0, #27
 800c72a:	f7ff ffbb 	bl	800c6a4 <SX1276Read>
 800c72e:	0005      	movs	r5, r0
                                                                                                           ( uint16_t )SX1276Read( REG_AFCLSB ) );
 800c730:	201c      	movs	r0, #28
 800c732:	f7ff ffb7 	bl	800c6a4 <SX1276Read>
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c736:	022d      	lsls	r5, r5, #8
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c738:	4b0e      	ldr	r3, [pc, #56]	; (800c774 <SX1276OnDio2Irq+0xbc>)
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c73a:	4305      	orrs	r5, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c73c:	b2c0      	uxtb	r0, r0
 800c73e:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800c740:	0a2d      	lsrs	r5, r5, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c742:	436b      	muls	r3, r5
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800c744:	3080      	adds	r0, #128	; 0x80
 800c746:	0a00      	lsrs	r0, r0, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800c748:	18c0      	adds	r0, r0, r3
                    SX1276.Settings.FskPacketHandler.AfcValue = ( int32_t )SX1276ConvertPllStepToFreqInHz( ( ( uint16_t )SX1276Read( REG_AFCMSB ) << 8 ) |
 800c74a:	6360      	str	r0, [r4, #52]	; 0x34
                    SX1276.Settings.FskPacketHandler.RxGain = ( SX1276Read( REG_LNA ) >> 5 ) & 0x07;
 800c74c:	200c      	movs	r0, #12
 800c74e:	f7ff ffa9 	bl	800c6a4 <SX1276Read>
 800c752:	3438      	adds	r4, #56	; 0x38
 800c754:	0940      	lsrs	r0, r0, #5
 800c756:	7020      	strb	r0, [r4, #0]
 800c758:	e7b5      	b.n	800c6c6 <SX1276OnDio2Irq+0xe>
            switch( SX1276.Settings.Modem )
 800c75a:	7963      	ldrb	r3, [r4, #5]
 800c75c:	2b01      	cmp	r3, #1
 800c75e:	d1b2      	bne.n	800c6c6 <SX1276OnDio2Irq+0xe>
                if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c760:	3453      	adds	r4, #83	; 0x53
 800c762:	7823      	ldrb	r3, [r4, #0]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d0ae      	beq.n	800c6c6 <SX1276OnDio2Irq+0xe>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 800c768:	0029      	movs	r1, r5
 800c76a:	e7b7      	b.n	800c6dc <SX1276OnDio2Irq+0x24>
 800c76c:	20001070 	.word	0x20001070
 800c770:	200010f0 	.word	0x200010f0
 800c774:	00003d09 	.word	0x00003d09

0800c778 <SX1276OnDio4Irq>:
    }
}

static void SX1276OnDio4Irq( void )
{
    switch( SX1276.Settings.Modem )
 800c778:	4b05      	ldr	r3, [pc, #20]	; (800c790 <SX1276OnDio4Irq+0x18>)
 800c77a:	795a      	ldrb	r2, [r3, #5]
 800c77c:	2a00      	cmp	r2, #0
 800c77e:	d105      	bne.n	800c78c <SX1276OnDio4Irq+0x14>
    {
    case MODEM_FSK:
        {
            if( SX1276.Settings.FskPacketHandler.PreambleDetected == false )
 800c780:	3330      	adds	r3, #48	; 0x30
 800c782:	781a      	ldrb	r2, [r3, #0]
 800c784:	2a00      	cmp	r2, #0
 800c786:	d101      	bne.n	800c78c <SX1276OnDio4Irq+0x14>
            {
                SX1276.Settings.FskPacketHandler.PreambleDetected = true;
 800c788:	3201      	adds	r2, #1
 800c78a:	701a      	strb	r2, [r3, #0]
    case MODEM_LORA:
        break;
    default:
        break;
    }
}
 800c78c:	4770      	bx	lr
 800c78e:	46c0      	nop			; (mov r8, r8)
 800c790:	20001070 	.word	0x20001070

0800c794 <SX1276OnDio3Irq>:
{
 800c794:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800c796:	4b12      	ldr	r3, [pc, #72]	; (800c7e0 <SX1276OnDio3Irq+0x4c>)
 800c798:	795c      	ldrb	r4, [r3, #5]
 800c79a:	2c01      	cmp	r4, #1
 800c79c:	d112      	bne.n	800c7c4 <SX1276OnDio3Irq+0x30>
        if( ( SX1276Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 800c79e:	2012      	movs	r0, #18
 800c7a0:	f7ff ff80 	bl	800c6a4 <SX1276Read>
 800c7a4:	0005      	movs	r5, r0
 800c7a6:	4e0f      	ldr	r6, [pc, #60]	; (800c7e4 <SX1276OnDio3Irq+0x50>)
 800c7a8:	4025      	ands	r5, r4
 800c7aa:	4220      	tst	r0, r4
 800c7ac:	d00b      	beq.n	800c7c6 <SX1276OnDio3Irq+0x32>
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 800c7ae:	2105      	movs	r1, #5
 800c7b0:	2012      	movs	r0, #18
 800c7b2:	f7ff ff2c 	bl	800c60e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c7b6:	6833      	ldr	r3, [r6, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d003      	beq.n	800c7c4 <SX1276OnDio3Irq+0x30>
 800c7bc:	699b      	ldr	r3, [r3, #24]
                RadioEvents->CadDone( true );
 800c7be:	0020      	movs	r0, r4
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10b      	bne.n	800c7dc <SX1276OnDio3Irq+0x48>
}
 800c7c4:	bd70      	pop	{r4, r5, r6, pc}
            SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 800c7c6:	2104      	movs	r1, #4
 800c7c8:	2012      	movs	r0, #18
 800c7ca:	f7ff ff20 	bl	800c60e <SX1276Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800c7ce:	6833      	ldr	r3, [r6, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d0f7      	beq.n	800c7c4 <SX1276OnDio3Irq+0x30>
 800c7d4:	699b      	ldr	r3, [r3, #24]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d0f4      	beq.n	800c7c4 <SX1276OnDio3Irq+0x30>
                RadioEvents->CadDone( false );
 800c7da:	0028      	movs	r0, r5
 800c7dc:	4798      	blx	r3
}
 800c7de:	e7f1      	b.n	800c7c4 <SX1276OnDio3Irq+0x30>
 800c7e0:	20001070 	.word	0x20001070
 800c7e4:	200010f0 	.word	0x200010f0

0800c7e8 <SX1276SetOpMode.part.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800c7e8:	b570      	push	{r4, r5, r6, lr}
 800c7ea:	0004      	movs	r4, r0
    else if ( opMode == RF_OPMODE_RECEIVER )
 800c7ec:	2805      	cmp	r0, #5
 800c7ee:	d111      	bne.n	800c814 <SX1276SetOpMode.part.0+0x2c>
      Sx_Board_SetXO( SET ); 
 800c7f0:	2001      	movs	r0, #1
 800c7f2:	f7f6 fc9b 	bl	800312c <CMWX1ZZABZ0XX_RADIO_SetXO>
      Sx_Board_SetAntSw( RFSW_RX );
 800c7f6:	2001      	movs	r0, #1
 800c7f8:	f7f6 fe10 	bl	800341c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c7fc:	2001      	movs	r0, #1
 800c7fe:	f7ff ff51 	bl	800c6a4 <SX1276Read>
 800c802:	2307      	movs	r3, #7
 800c804:	0001      	movs	r1, r0
 800c806:	4399      	bics	r1, r3
 800c808:	4321      	orrs	r1, r4
 800c80a:	b2c9      	uxtb	r1, r1
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c80c:	2001      	movs	r0, #1
 800c80e:	f7ff fefe 	bl	800c60e <SX1276Write>
}
 800c812:	bd70      	pop	{r4, r5, r6, pc}
      uint8_t paConfig =  SX1276Read( REG_PACONFIG );
 800c814:	2009      	movs	r0, #9
 800c816:	f7ff ff45 	bl	800c6a4 <SX1276Read>
 800c81a:	0005      	movs	r5, r0
      Sx_Board_SetXO( SET ); 
 800c81c:	2001      	movs	r0, #1
 800c81e:	f7f6 fc85 	bl	800312c <CMWX1ZZABZ0XX_RADIO_SetXO>
        Sx_Board_SetAntSw( RFSW_RFO_HP );
 800c822:	2003      	movs	r0, #3
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800c824:	062d      	lsls	r5, r5, #24
 800c826:	d400      	bmi.n	800c82a <SX1276SetOpMode.part.0+0x42>
        Sx_Board_SetAntSw( RFSW_RFO_LP );
 800c828:	2002      	movs	r0, #2
 800c82a:	f7f6 fdf7 	bl	800341c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800c82e:	2001      	movs	r0, #1
 800c830:	f7ff ff38 	bl	800c6a4 <SX1276Read>
 800c834:	2307      	movs	r3, #7
 800c836:	4398      	bics	r0, r3
 800c838:	4304      	orrs	r4, r0
 800c83a:	b2e1      	uxtb	r1, r4
 800c83c:	e7e6      	b.n	800c80c <SX1276SetOpMode.part.0+0x24>
	...

0800c840 <SX1276SetStby>:
{
 800c840:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800c842:	4c09      	ldr	r4, [pc, #36]	; (800c868 <SX1276SetStby+0x28>)
 800c844:	1d20      	adds	r0, r4, #4
 800c846:	f001 fc95 	bl	800e174 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800c84a:	0020      	movs	r0, r4
 800c84c:	301c      	adds	r0, #28
 800c84e:	f001 fc91 	bl	800e174 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800c852:	4c06      	ldr	r4, [pc, #24]	; (800c86c <SX1276SetStby+0x2c>)
 800c854:	0020      	movs	r0, r4
 800c856:	3068      	adds	r0, #104	; 0x68
 800c858:	f001 fc8c 	bl	800e174 <UTIL_TIMER_Stop>
    if( opMode == RF_OPMODE_SLEEP )
 800c85c:	2001      	movs	r0, #1
 800c85e:	f7ff ffc3 	bl	800c7e8 <SX1276SetOpMode.part.0>
    SX1276.Settings.State = RF_IDLE;
 800c862:	2300      	movs	r3, #0
 800c864:	7123      	strb	r3, [r4, #4]
}
 800c866:	bd10      	pop	{r4, pc}
 800c868:	200010f0 	.word	0x200010f0
 800c86c:	20001070 	.word	0x20001070

0800c870 <SX1276SetRx>:
    TimerStop( &TxTimeoutTimer );
 800c870:	4b7b      	ldr	r3, [pc, #492]	; (800ca60 <SX1276SetRx+0x1f0>)
{
 800c872:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c874:	0007      	movs	r7, r0
    TimerStop( &TxTimeoutTimer );
 800c876:	0018      	movs	r0, r3
 800c878:	301c      	adds	r0, #28
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	f001 fc7a 	bl	800e174 <UTIL_TIMER_Stop>
    switch( SX1276.Settings.Modem )
 800c880:	4c78      	ldr	r4, [pc, #480]	; (800ca64 <SX1276SetRx+0x1f4>)
 800c882:	7965      	ldrb	r5, [r4, #5]
 800c884:	2d00      	cmp	r5, #0
 800c886:	d02f      	beq.n	800c8e8 <SX1276SetRx+0x78>
 800c888:	2600      	movs	r6, #0
 800c88a:	2d01      	cmp	r5, #1
 800c88c:	d151      	bne.n	800c932 <SX1276SetRx+0xc2>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c88e:	0023      	movs	r3, r4
 800c890:	3355      	adds	r3, #85	; 0x55
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	2641      	movs	r6, #65	; 0x41
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c896:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d100      	bne.n	800c89e <SX1276SetRx+0x2e>
 800c89c:	e06f      	b.n	800c97e <SX1276SetRx+0x10e>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800c89e:	f7ff ff01 	bl	800c6a4 <SX1276Read>
 800c8a2:	4330      	orrs	r0, r6
 800c8a4:	b2c1      	uxtb	r1, r0
 800c8a6:	2033      	movs	r0, #51	; 0x33
 800c8a8:	f7ff feb1 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800c8ac:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800c8ae:	203b      	movs	r0, #59	; 0x3b
 800c8b0:	f7ff fead 	bl	800c60e <SX1276Write>
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c8b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c8b6:	2031      	movs	r0, #49	; 0x31
            if( SX1276.Settings.LoRa.Bandwidth < 9 )
 800c8b8:	2b08      	cmp	r3, #8
 800c8ba:	d900      	bls.n	800c8be <SX1276SetRx+0x4e>
 800c8bc:	e0b7      	b.n	800ca2e <SX1276SetRx+0x1be>
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) & 0x7F );
 800c8be:	f7ff fef1 	bl	800c6a4 <SX1276Read>
 800c8c2:	217f      	movs	r1, #127	; 0x7f
 800c8c4:	4001      	ands	r1, r0
 800c8c6:	2031      	movs	r0, #49	; 0x31
 800c8c8:	f7ff fea1 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_IFFREQ2, 0x00 );
 800c8cc:	2030      	movs	r0, #48	; 0x30
 800c8ce:	2100      	movs	r1, #0
 800c8d0:	f7ff fe9d 	bl	800c60e <SX1276Write>
                switch( SX1276.Settings.LoRa.Bandwidth )
 800c8d4:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800c8d6:	2808      	cmp	r0, #8
 800c8d8:	d864      	bhi.n	800c9a4 <SX1276SetRx+0x134>
 800c8da:	f7f3 fc27 	bl	800012c <__gnu_thumb1_case_uqi>
 800c8de:	805a      	.short	0x805a
 800c8e0:	9c958e87 	.word	0x9c958e87
 800c8e4:	a3a3      	.short	0xa3a3
 800c8e6:	a3          	.byte	0xa3
 800c8e7:	00          	.byte	0x00
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c8e8:	1de3      	adds	r3, r4, #7
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c8ea:	2040      	movs	r0, #64	; 0x40
            rxContinuous = SX1276.Settings.Fsk.RxContinuous;
 800c8ec:	7fde      	ldrb	r6, [r3, #31]
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c8ee:	f7ff fed9 	bl	800c6a4 <SX1276Read>
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800c8f2:	2303      	movs	r3, #3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c8f4:	210c      	movs	r1, #12
                                                                            RF_DIOMAPPING1_DIO0_00 |
 800c8f6:	4018      	ands	r0, r3
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800c8f8:	4301      	orrs	r1, r0
 800c8fa:	2040      	movs	r0, #64	; 0x40
 800c8fc:	f7ff fe87 	bl	800c60e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800c900:	2041      	movs	r0, #65	; 0x41
 800c902:	f7ff fecf 	bl	800c6a4 <SX1276Read>
 800c906:	213f      	movs	r1, #63	; 0x3f
 800c908:	4249      	negs	r1, r1
 800c90a:	4301      	orrs	r1, r0
 800c90c:	b2c9      	uxtb	r1, r1
 800c90e:	2041      	movs	r0, #65	; 0x41
 800c910:	f7ff fe7d 	bl	800c60e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800c914:	2035      	movs	r0, #53	; 0x35
 800c916:	f7ff fec5 	bl	800c6a4 <SX1276Read>
 800c91a:	233f      	movs	r3, #63	; 0x3f
 800c91c:	4018      	ands	r0, r3
 800c91e:	0023      	movs	r3, r4
 800c920:	333e      	adds	r3, #62	; 0x3e
 800c922:	7018      	strb	r0, [r3, #0]
            SX1276Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 800c924:	211e      	movs	r1, #30
 800c926:	200d      	movs	r0, #13
 800c928:	f7ff fe71 	bl	800c60e <SX1276Write>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800c92c:	8625      	strh	r5, [r4, #48]	; 0x30
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800c92e:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800c930:	8765      	strh	r5, [r4, #58]	; 0x3a
    memset( RxTxBuffer, 0, ( size_t )RX_TX_BUFFER_SIZE );
 800c932:	2280      	movs	r2, #128	; 0x80
 800c934:	2100      	movs	r1, #0
 800c936:	484c      	ldr	r0, [pc, #304]	; (800ca68 <SX1276SetRx+0x1f8>)
 800c938:	0052      	lsls	r2, r2, #1
 800c93a:	f001 ff41 	bl	800e7c0 <memset>
    SX1276.Settings.State = RF_RX_RUNNING;
 800c93e:	2301      	movs	r3, #1
 800c940:	7123      	strb	r3, [r4, #4]
    if( timeout != 0 )
 800c942:	2f00      	cmp	r7, #0
 800c944:	d008      	beq.n	800c958 <SX1276SetRx+0xe8>
        TimerSetValue( &RxTimeoutTimer, timeout );
 800c946:	9d01      	ldr	r5, [sp, #4]
 800c948:	0039      	movs	r1, r7
 800c94a:	3504      	adds	r5, #4
 800c94c:	0028      	movs	r0, r5
 800c94e:	f001 fca3 	bl	800e298 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 800c952:	0028      	movs	r0, r5
 800c954:	f001 fc62 	bl	800e21c <UTIL_TIMER_Start>
    if( SX1276.Settings.Modem == MODEM_FSK )
 800c958:	7963      	ldrb	r3, [r4, #5]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d000      	beq.n	800c960 <SX1276SetRx+0xf0>
 800c95e:	e077      	b.n	800ca50 <SX1276SetRx+0x1e0>
    if( opMode == RF_OPMODE_SLEEP )
 800c960:	2005      	movs	r0, #5
 800c962:	f7ff ff41 	bl	800c7e8 <SX1276SetOpMode.part.0>
        if( rxContinuous == false )
 800c966:	2e00      	cmp	r6, #0
 800c968:	d108      	bne.n	800c97c <SX1276SetRx+0x10c>
            TimerSetValue( &RxTimeoutSyncWord, SX1276.Settings.Fsk.RxSingleTimeout );
 800c96a:	0025      	movs	r5, r4
 800c96c:	3568      	adds	r5, #104	; 0x68
 800c96e:	0028      	movs	r0, r5
 800c970:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800c972:	f001 fc91 	bl	800e298 <UTIL_TIMER_SetPeriod>
            TimerStart( &RxTimeoutSyncWord );
 800c976:	0028      	movs	r0, r5
 800c978:	f001 fc50 	bl	800e21c <UTIL_TIMER_Start>
}
 800c97c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800c97e:	f7ff fe91 	bl	800c6a4 <SX1276Read>
 800c982:	43b0      	bics	r0, r6
 800c984:	4305      	orrs	r5, r0
 800c986:	b2e9      	uxtb	r1, r5
 800c988:	2033      	movs	r0, #51	; 0x33
 800c98a:	f7ff fe40 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800c98e:	211d      	movs	r1, #29
 800c990:	e78d      	b.n	800c8ae <SX1276SetRx+0x3e>
                    SX1276Write( REG_LR_IFFREQ1, 0x48 );
 800c992:	202f      	movs	r0, #47	; 0x2f
 800c994:	2148      	movs	r1, #72	; 0x48
 800c996:	f7ff fe3a 	bl	800c60e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 7810 );
 800c99a:	68a0      	ldr	r0, [r4, #8]
 800c99c:	4b33      	ldr	r3, [pc, #204]	; (800ca6c <SX1276SetRx+0x1fc>)
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800c99e:	18c0      	adds	r0, r0, r3
 800c9a0:	f7ff fe3e 	bl	800c620 <SX1276SetChannel>
            rxContinuous = SX1276.Settings.LoRa.RxContinuous;
 800c9a4:	0023      	movs	r3, r4
 800c9a6:	3356      	adds	r3, #86	; 0x56
 800c9a8:	781e      	ldrb	r6, [r3, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800c9aa:	0023      	movs	r3, r4
 800c9ac:	3353      	adds	r3, #83	; 0x53
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d044      	beq.n	800ca3e <SX1276SetRx+0x1ce>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800c9b4:	211d      	movs	r1, #29
 800c9b6:	2011      	movs	r0, #17
 800c9b8:	f7ff fe29 	bl	800c60e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 800c9bc:	2040      	movs	r0, #64	; 0x40
 800c9be:	f7ff fe71 	bl	800c6a4 <SX1276Read>
 800c9c2:	2133      	movs	r1, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800c9c4:	4001      	ands	r1, r0
 800c9c6:	2040      	movs	r0, #64	; 0x40
 800c9c8:	f7ff fe21 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_FIFORXBASEADDR, 0 );
 800c9cc:	2100      	movs	r1, #0
 800c9ce:	200f      	movs	r0, #15
 800c9d0:	f7ff fe1d 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800c9d4:	2100      	movs	r1, #0
 800c9d6:	200d      	movs	r0, #13
 800c9d8:	f7ff fe19 	bl	800c60e <SX1276Write>
        break;
 800c9dc:	e7a9      	b.n	800c932 <SX1276SetRx+0xc2>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c9de:	202f      	movs	r0, #47	; 0x2f
 800c9e0:	2144      	movs	r1, #68	; 0x44
 800c9e2:	f7ff fe14 	bl	800c60e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 10420 );
 800c9e6:	68a0      	ldr	r0, [r4, #8]
 800c9e8:	4b21      	ldr	r3, [pc, #132]	; (800ca70 <SX1276SetRx+0x200>)
 800c9ea:	e7d8      	b.n	800c99e <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c9ec:	202f      	movs	r0, #47	; 0x2f
 800c9ee:	2144      	movs	r1, #68	; 0x44
 800c9f0:	f7ff fe0d 	bl	800c60e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 15620 );
 800c9f4:	68a0      	ldr	r0, [r4, #8]
 800c9f6:	4b1f      	ldr	r3, [pc, #124]	; (800ca74 <SX1276SetRx+0x204>)
 800c9f8:	e7d1      	b.n	800c99e <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800c9fa:	202f      	movs	r0, #47	; 0x2f
 800c9fc:	2144      	movs	r1, #68	; 0x44
 800c9fe:	f7ff fe06 	bl	800c60e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 20830 );
 800ca02:	68a0      	ldr	r0, [r4, #8]
 800ca04:	4b1c      	ldr	r3, [pc, #112]	; (800ca78 <SX1276SetRx+0x208>)
 800ca06:	e7ca      	b.n	800c99e <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800ca08:	202f      	movs	r0, #47	; 0x2f
 800ca0a:	2144      	movs	r1, #68	; 0x44
 800ca0c:	f7ff fdff 	bl	800c60e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 31250 );
 800ca10:	68a0      	ldr	r0, [r4, #8]
 800ca12:	4b1a      	ldr	r3, [pc, #104]	; (800ca7c <SX1276SetRx+0x20c>)
 800ca14:	e7c3      	b.n	800c99e <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x44 );
 800ca16:	202f      	movs	r0, #47	; 0x2f
 800ca18:	2144      	movs	r1, #68	; 0x44
 800ca1a:	f7ff fdf8 	bl	800c60e <SX1276Write>
                    SX1276SetChannel(SX1276.Settings.Channel + 41670 );
 800ca1e:	68a0      	ldr	r0, [r4, #8]
 800ca20:	4b17      	ldr	r3, [pc, #92]	; (800ca80 <SX1276SetRx+0x210>)
 800ca22:	e7bc      	b.n	800c99e <SX1276SetRx+0x12e>
                    SX1276Write( REG_LR_IFFREQ1, 0x40 );
 800ca24:	2140      	movs	r1, #64	; 0x40
 800ca26:	202f      	movs	r0, #47	; 0x2f
                SX1276Write( REG_LR_DETECTOPTIMIZE, SX1276Read( REG_LR_DETECTOPTIMIZE ) | 0x80 );
 800ca28:	f7ff fdf1 	bl	800c60e <SX1276Write>
 800ca2c:	e7ba      	b.n	800c9a4 <SX1276SetRx+0x134>
 800ca2e:	f7ff fe39 	bl	800c6a4 <SX1276Read>
 800ca32:	2180      	movs	r1, #128	; 0x80
 800ca34:	4249      	negs	r1, r1
 800ca36:	4301      	orrs	r1, r0
 800ca38:	b2c9      	uxtb	r1, r1
 800ca3a:	2031      	movs	r0, #49	; 0x31
 800ca3c:	e7f4      	b.n	800ca28 <SX1276SetRx+0x1b8>
                SX1276Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 800ca3e:	211f      	movs	r1, #31
 800ca40:	2011      	movs	r0, #17
 800ca42:	f7ff fde4 	bl	800c60e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 800ca46:	2040      	movs	r0, #64	; 0x40
 800ca48:	f7ff fe2c 	bl	800c6a4 <SX1276Read>
 800ca4c:	213f      	movs	r1, #63	; 0x3f
 800ca4e:	e7b9      	b.n	800c9c4 <SX1276SetRx+0x154>
        if( rxContinuous == true )
 800ca50:	2005      	movs	r0, #5
 800ca52:	2e00      	cmp	r6, #0
 800ca54:	d100      	bne.n	800ca58 <SX1276SetRx+0x1e8>
    if( opMode == RF_OPMODE_SLEEP )
 800ca56:	2006      	movs	r0, #6
 800ca58:	f7ff fec6 	bl	800c7e8 <SX1276SetOpMode.part.0>
}
 800ca5c:	e78e      	b.n	800c97c <SX1276SetRx+0x10c>
 800ca5e:	46c0      	nop			; (mov r8, r8)
 800ca60:	200010f0 	.word	0x200010f0
 800ca64:	20001070 	.word	0x20001070
 800ca68:	20001124 	.word	0x20001124
 800ca6c:	00001e82 	.word	0x00001e82
 800ca70:	000028b4 	.word	0x000028b4
 800ca74:	00003d04 	.word	0x00003d04
 800ca78:	0000515e 	.word	0x0000515e
 800ca7c:	00007a12 	.word	0x00007a12
 800ca80:	0000a2c6 	.word	0x0000a2c6

0800ca84 <SX1276StartCad>:
{
 800ca84:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.Modem )
 800ca86:	4c0b      	ldr	r4, [pc, #44]	; (800cab4 <SX1276StartCad+0x30>)
 800ca88:	7963      	ldrb	r3, [r4, #5]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d110      	bne.n	800cab0 <SX1276StartCad+0x2c>
            SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800ca8e:	21fa      	movs	r1, #250	; 0xfa
 800ca90:	2011      	movs	r0, #17
 800ca92:	f7ff fdbc 	bl	800c60e <SX1276Write>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800ca96:	2040      	movs	r0, #64	; 0x40
 800ca98:	f7ff fe04 	bl	800c6a4 <SX1276Read>
 800ca9c:	2503      	movs	r5, #3
 800ca9e:	43a8      	bics	r0, r5
 800caa0:	b2c1      	uxtb	r1, r0
 800caa2:	2040      	movs	r0, #64	; 0x40
 800caa4:	f7ff fdb3 	bl	800c60e <SX1276Write>
            SX1276.Settings.State = RF_CAD;
 800caa8:	2007      	movs	r0, #7
 800caaa:	7125      	strb	r5, [r4, #4]
    if( opMode == RF_OPMODE_SLEEP )
 800caac:	f7ff fe9c 	bl	800c7e8 <SX1276SetOpMode.part.0>
}
 800cab0:	bd70      	pop	{r4, r5, r6, pc}
 800cab2:	46c0      	nop			; (mov r8, r8)
 800cab4:	20001070 	.word	0x20001070

0800cab8 <SX1276ReadRssi>:
{
 800cab8:	b510      	push	{r4, lr}
    switch( modem )
 800caba:	2800      	cmp	r0, #0
 800cabc:	d004      	beq.n	800cac8 <SX1276ReadRssi+0x10>
 800cabe:	2801      	cmp	r0, #1
 800cac0:	d00a      	beq.n	800cad8 <SX1276ReadRssi+0x20>
 800cac2:	2001      	movs	r0, #1
 800cac4:	4240      	negs	r0, r0
}
 800cac6:	bd10      	pop	{r4, pc}
        rssi = -( SX1276Read( REG_RSSIVALUE ) >> 1 );
 800cac8:	2011      	movs	r0, #17
 800caca:	f7ff fdeb 	bl	800c6a4 <SX1276Read>
 800cace:	0840      	lsrs	r0, r0, #1
 800cad0:	b2c0      	uxtb	r0, r0
 800cad2:	4240      	negs	r0, r0
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800cad4:	b200      	sxth	r0, r0
 800cad6:	e7f6      	b.n	800cac6 <SX1276ReadRssi+0xe>
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800cad8:	4b06      	ldr	r3, [pc, #24]	; (800caf4 <SX1276ReadRssi+0x3c>)
 800cada:	4a07      	ldr	r2, [pc, #28]	; (800caf8 <SX1276ReadRssi+0x40>)
 800cadc:	689b      	ldr	r3, [r3, #8]
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800cade:	201b      	movs	r0, #27
        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800cae0:	4293      	cmp	r3, r2
 800cae2:	d903      	bls.n	800caec <SX1276ReadRssi+0x34>
            rssi = RSSI_OFFSET_HF + SX1276Read( REG_LR_RSSIVALUE );
 800cae4:	f7ff fdde 	bl	800c6a4 <SX1276Read>
 800cae8:	389d      	subs	r0, #157	; 0x9d
 800caea:	e7f3      	b.n	800cad4 <SX1276ReadRssi+0x1c>
            rssi = RSSI_OFFSET_LF + SX1276Read( REG_LR_RSSIVALUE );
 800caec:	f7ff fdda 	bl	800c6a4 <SX1276Read>
 800caf0:	38a4      	subs	r0, #164	; 0xa4
 800caf2:	e7ef      	b.n	800cad4 <SX1276ReadRssi+0x1c>
 800caf4:	20001070 	.word	0x20001070
 800caf8:	1f4add40 	.word	0x1f4add40

0800cafc <SX1276SetOpMode.constprop.0>:
static void SX1276SetOpMode( uint8_t opMode )
 800cafc:	b510      	push	{r4, lr}
      SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 800cafe:	2001      	movs	r0, #1
 800cb00:	f7ff fdd0 	bl	800c6a4 <SX1276Read>
 800cb04:	21f8      	movs	r1, #248	; 0xf8
 800cb06:	4001      	ands	r1, r0
 800cb08:	2001      	movs	r0, #1
 800cb0a:	f7ff fd80 	bl	800c60e <SX1276Write>
      Sx_Board_SetAntSw( RFSW_OFF );
 800cb0e:	2000      	movs	r0, #0
 800cb10:	f7f6 fc84 	bl	800341c <CMWX1ZZABZ0XX_RADIO_SetAntSw>
      Sx_Board_SetXO( RESET ); 
 800cb14:	2000      	movs	r0, #0
 800cb16:	f7f6 fb09 	bl	800312c <CMWX1ZZABZ0XX_RADIO_SetXO>
}
 800cb1a:	bd10      	pop	{r4, pc}

0800cb1c <SX1276SetModem>:
{
 800cb1c:	b510      	push	{r4, lr}
 800cb1e:	0004      	movs	r4, r0
    if( ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 800cb20:	2001      	movs	r0, #1
 800cb22:	f7ff fdbf 	bl	800c6a4 <SX1276Read>
 800cb26:	b2c0      	uxtb	r0, r0
 800cb28:	4b16      	ldr	r3, [pc, #88]	; (800cb84 <SX1276SetModem+0x68>)
        SX1276.Settings.Modem = MODEM_LORA;
 800cb2a:	09c0      	lsrs	r0, r0, #7
    if( SX1276.Settings.Modem == modem )
 800cb2c:	42a0      	cmp	r0, r4
 800cb2e:	d101      	bne.n	800cb34 <SX1276SetModem+0x18>
 800cb30:	7158      	strb	r0, [r3, #5]
}
 800cb32:	bd10      	pop	{r4, pc}
    SX1276.Settings.Modem = modem;
 800cb34:	715c      	strb	r4, [r3, #5]
    switch( SX1276.Settings.Modem )
 800cb36:	2c01      	cmp	r4, #1
 800cb38:	d012      	beq.n	800cb60 <SX1276SetModem+0x44>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800cb3a:	f7ff ffdf 	bl	800cafc <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 800cb3e:	2001      	movs	r0, #1
 800cb40:	f7ff fdb0 	bl	800c6a4 <SX1276Read>
 800cb44:	217f      	movs	r1, #127	; 0x7f
 800cb46:	4001      	ands	r1, r0
 800cb48:	2001      	movs	r0, #1
 800cb4a:	f7ff fd60 	bl	800c60e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800cb4e:	2100      	movs	r1, #0
 800cb50:	2040      	movs	r0, #64	; 0x40
 800cb52:	f7ff fd5c 	bl	800c60e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 800cb56:	2130      	movs	r1, #48	; 0x30
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800cb58:	2041      	movs	r0, #65	; 0x41
 800cb5a:	f7ff fd58 	bl	800c60e <SX1276Write>
        break;
 800cb5e:	e7e8      	b.n	800cb32 <SX1276SetModem+0x16>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800cb60:	f7ff ffcc 	bl	800cafc <SX1276SetOpMode.constprop.0>
        SX1276Write( REG_OPMODE, ( SX1276Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 800cb64:	0020      	movs	r0, r4
 800cb66:	f7ff fd9d 	bl	800c6a4 <SX1276Read>
 800cb6a:	2180      	movs	r1, #128	; 0x80
 800cb6c:	4249      	negs	r1, r1
 800cb6e:	4301      	orrs	r1, r0
 800cb70:	b2c9      	uxtb	r1, r1
 800cb72:	0020      	movs	r0, r4
 800cb74:	f7ff fd4b 	bl	800c60e <SX1276Write>
        SX1276Write( REG_DIOMAPPING1, 0x00 );
 800cb78:	2100      	movs	r1, #0
 800cb7a:	2040      	movs	r0, #64	; 0x40
 800cb7c:	f7ff fd47 	bl	800c60e <SX1276Write>
        SX1276Write( REG_DIOMAPPING2, 0x00 );
 800cb80:	2100      	movs	r1, #0
 800cb82:	e7e9      	b.n	800cb58 <SX1276SetModem+0x3c>
 800cb84:	20001070 	.word	0x20001070

0800cb88 <SX1276SetMaxPayloadLength>:
{
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	0004      	movs	r4, r0
 800cb8c:	000d      	movs	r5, r1
    SX1276SetModem( modem );
 800cb8e:	f7ff ffc5 	bl	800cb1c <SX1276SetModem>
    switch( modem )
 800cb92:	2c00      	cmp	r4, #0
 800cb94:	d002      	beq.n	800cb9c <SX1276SetMaxPayloadLength+0x14>
 800cb96:	2c01      	cmp	r4, #1
 800cb98:	d00a      	beq.n	800cbb0 <SX1276SetMaxPayloadLength+0x28>
}
 800cb9a:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Fsk.FixLen == false )
 800cb9c:	4b06      	ldr	r3, [pc, #24]	; (800cbb8 <SX1276SetMaxPayloadLength+0x30>)
 800cb9e:	3303      	adds	r3, #3
 800cba0:	7fdb      	ldrb	r3, [r3, #31]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1f9      	bne.n	800cb9a <SX1276SetMaxPayloadLength+0x12>
            SX1276Write( REG_PAYLOADLENGTH, max );
 800cba6:	0029      	movs	r1, r5
 800cba8:	2032      	movs	r0, #50	; 0x32
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800cbaa:	f7ff fd30 	bl	800c60e <SX1276Write>
}
 800cbae:	e7f4      	b.n	800cb9a <SX1276SetMaxPayloadLength+0x12>
        SX1276Write( REG_LR_PAYLOADMAXLENGTH, max );
 800cbb0:	0029      	movs	r1, r5
 800cbb2:	2023      	movs	r0, #35	; 0x23
 800cbb4:	e7f9      	b.n	800cbaa <SX1276SetMaxPayloadLength+0x22>
 800cbb6:	46c0      	nop			; (mov r8, r8)
 800cbb8:	20001070 	.word	0x20001070

0800cbbc <SX1276SetPublicNetwork>:
{
 800cbbc:	b510      	push	{r4, lr}
 800cbbe:	0004      	movs	r4, r0
    SX1276SetModem( MODEM_LORA );
 800cbc0:	2001      	movs	r0, #1
 800cbc2:	f7ff ffab 	bl	800cb1c <SX1276SetModem>
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800cbc6:	4b05      	ldr	r3, [pc, #20]	; (800cbdc <SX1276SetPublicNetwork+0x20>)
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800cbc8:	2134      	movs	r1, #52	; 0x34
    SX1276.Settings.LoRa.PublicNetwork = enable;
 800cbca:	335c      	adds	r3, #92	; 0x5c
 800cbcc:	701c      	strb	r4, [r3, #0]
    if( enable == true )
 800cbce:	2c00      	cmp	r4, #0
 800cbd0:	d100      	bne.n	800cbd4 <SX1276SetPublicNetwork+0x18>
        SX1276Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 800cbd2:	2112      	movs	r1, #18
 800cbd4:	2039      	movs	r0, #57	; 0x39
 800cbd6:	f7ff fd1a 	bl	800c60e <SX1276Write>
}
 800cbda:	bd10      	pop	{r4, pc}
 800cbdc:	20001070 	.word	0x20001070

0800cbe0 <SX1276SetRxConfig>:
{
 800cbe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbe2:	b08b      	sub	sp, #44	; 0x2c
 800cbe4:	9305      	str	r3, [sp, #20]
 800cbe6:	ab10      	add	r3, sp, #64	; 0x40
 800cbe8:	cb80      	ldmia	r3!, {r7}
 800cbea:	0014      	movs	r4, r2
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	aa0a      	add	r2, sp, #40	; 0x28
 800cbf0:	9300      	str	r3, [sp, #0]
 800cbf2:	ab12      	add	r3, sp, #72	; 0x48
 800cbf4:	881b      	ldrh	r3, [r3, #0]
 800cbf6:	0005      	movs	r5, r0
 800cbf8:	9304      	str	r3, [sp, #16]
 800cbfa:	ab13      	add	r3, sp, #76	; 0x4c
 800cbfc:	781b      	ldrb	r3, [r3, #0]
 800cbfe:	000e      	movs	r6, r1
 800cc00:	9301      	str	r3, [sp, #4]
 800cc02:	ab14      	add	r3, sp, #80	; 0x50
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	ab15      	add	r3, sp, #84	; 0x54
 800cc0a:	781b      	ldrb	r3, [r3, #0]
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	ab16      	add	r3, sp, #88	; 0x58
 800cc10:	781b      	ldrb	r3, [r3, #0]
 800cc12:	9308      	str	r3, [sp, #32]
 800cc14:	ab17      	add	r3, sp, #92	; 0x5c
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	9309      	str	r3, [sp, #36]	; 0x24
 800cc1a:	2319      	movs	r3, #25
 800cc1c:	189b      	adds	r3, r3, r2
 800cc1e:	7fdb      	ldrb	r3, [r3, #31]
 800cc20:	9306      	str	r3, [sp, #24]
 800cc22:	231d      	movs	r3, #29
 800cc24:	189b      	adds	r3, r3, r2
 800cc26:	7fdb      	ldrb	r3, [r3, #31]
 800cc28:	9307      	str	r3, [sp, #28]
    SX1276SetModem( modem );
 800cc2a:	f7ff ff77 	bl	800cb1c <SX1276SetModem>
    switch( modem )
 800cc2e:	2d00      	cmp	r5, #0
 800cc30:	d003      	beq.n	800cc3a <SX1276SetRxConfig+0x5a>
 800cc32:	2d01      	cmp	r5, #1
 800cc34:	d067      	beq.n	800cd06 <SX1276SetRxConfig+0x126>
}
 800cc36:	b00b      	add	sp, #44	; 0x2c
 800cc38:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800cc3a:	20fa      	movs	r0, #250	; 0xfa
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800cc3c:	4d99      	ldr	r5, [pc, #612]	; (800cea4 <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.Fsk.FixLen = fixLen;
 800cc3e:	9a01      	ldr	r2, [sp, #4]
 800cc40:	1ceb      	adds	r3, r5, #3
 800cc42:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PayloadLen = payloadLen;
 800cc44:	9a02      	ldr	r2, [sp, #8]
 800cc46:	1d2b      	adds	r3, r5, #4
 800cc48:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800cc4a:	9a03      	ldr	r2, [sp, #12]
 800cc4c:	1d6b      	adds	r3, r5, #5
 800cc4e:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800cc50:	9a06      	ldr	r2, [sp, #24]
 800cc52:	1dab      	adds	r3, r5, #6
 800cc54:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.RxContinuous = rxContinuous;
 800cc56:	9a07      	ldr	r2, [sp, #28]
 800cc58:	1deb      	adds	r3, r5, #7
 800cc5a:	77da      	strb	r2, [r3, #31]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800cc5c:	9b00      	ldr	r3, [sp, #0]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800cc5e:	0140      	lsls	r0, r0, #5
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800cc60:	842b      	strh	r3, [r5, #32]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800cc62:	9b04      	ldr	r3, [sp, #16]
 800cc64:	0021      	movs	r1, r4
 800cc66:	4358      	muls	r0, r3
            SX1276.Settings.Fsk.Datarate = datarate;
 800cc68:	61ec      	str	r4, [r5, #28]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800cc6a:	616e      	str	r6, [r5, #20]
            SX1276.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800cc6c:	61af      	str	r7, [r5, #24]
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800cc6e:	f7f3 fa7b 	bl	8000168 <__udivsi3>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800cc72:	0021      	movs	r1, r4
            SX1276.Settings.Fsk.RxSingleTimeout = ( uint32_t )symbTimeout * 8000UL / datarate;
 800cc74:	62e8      	str	r0, [r5, #44]	; 0x2c
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800cc76:	488c      	ldr	r0, [pc, #560]	; (800cea8 <SX1276SetRxConfig+0x2c8>)
 800cc78:	f7f3 fa76 	bl	8000168 <__udivsi3>
 800cc7c:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800cc7e:	0a01      	lsrs	r1, r0, #8
 800cc80:	b2c9      	uxtb	r1, r1
 800cc82:	2002      	movs	r0, #2
 800cc84:	f7ff fcc3 	bl	800c60e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800cc88:	b2e1      	uxtb	r1, r4
 800cc8a:	2003      	movs	r0, #3
 800cc8c:	f7ff fcbf 	bl	800c60e <SX1276Write>
            SX1276Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 800cc90:	0030      	movs	r0, r6
 800cc92:	f7ff fc17 	bl	800c4c4 <GetFskBandwidthRegValue>
 800cc96:	0001      	movs	r1, r0
 800cc98:	2012      	movs	r0, #18
 800cc9a:	f7ff fcb8 	bl	800c60e <SX1276Write>
            SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 800cc9e:	0038      	movs	r0, r7
 800cca0:	f7ff fc10 	bl	800c4c4 <GetFskBandwidthRegValue>
 800cca4:	0001      	movs	r1, r0
 800cca6:	2013      	movs	r0, #19
 800cca8:	f7ff fcb1 	bl	800c60e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800ccac:	9b00      	ldr	r3, [sp, #0]
 800ccae:	2025      	movs	r0, #37	; 0x25
 800ccb0:	0a19      	lsrs	r1, r3, #8
 800ccb2:	f7ff fcac 	bl	800c60e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800ccb6:	466b      	mov	r3, sp
 800ccb8:	2026      	movs	r0, #38	; 0x26
 800ccba:	7819      	ldrb	r1, [r3, #0]
 800ccbc:	f7ff fca7 	bl	800c60e <SX1276Write>
            if( fixLen == 1 )
 800ccc0:	9b01      	ldr	r3, [sp, #4]
                SX1276Write( REG_PAYLOADLENGTH, payloadLen );
 800ccc2:	9902      	ldr	r1, [sp, #8]
            if( fixLen == 1 )
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d100      	bne.n	800ccca <SX1276SetRxConfig+0xea>
                SX1276Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 800ccc8:	21ff      	movs	r1, #255	; 0xff
 800ccca:	2032      	movs	r0, #50	; 0x32
 800cccc:	f7ff fc9f 	bl	800c60e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800ccd0:	2030      	movs	r0, #48	; 0x30
 800ccd2:	f7ff fce7 	bl	800c6a4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	9b01      	ldr	r3, [sp, #4]
 800ccda:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 800ccdc:	9b03      	ldr	r3, [sp, #12]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800ccde:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 800cce0:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cce2:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800cce4:	236f      	movs	r3, #111	; 0x6f
 800cce6:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800cce8:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800ccea:	b2c9      	uxtb	r1, r1
 800ccec:	2030      	movs	r0, #48	; 0x30
 800ccee:	f7ff fc8e 	bl	800c60e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800ccf2:	2031      	movs	r0, #49	; 0x31
 800ccf4:	f7ff fcd6 	bl	800c6a4 <SX1276Read>
 800ccf8:	2140      	movs	r1, #64	; 0x40
 800ccfa:	4301      	orrs	r1, r0
 800ccfc:	2031      	movs	r0, #49	; 0x31
 800ccfe:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cd00:	f7ff fc85 	bl	800c60e <SX1276Write>
}
 800cd04:	e797      	b.n	800cc36 <SX1276SetRxConfig+0x56>
            if( bandwidth > 2 )
 800cd06:	2e02      	cmp	r6, #2
 800cd08:	d900      	bls.n	800cd0c <SX1276SetRxConfig+0x12c>
                while( 1 );
 800cd0a:	e7fe      	b.n	800cd0a <SX1276SetRxConfig+0x12a>
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cd0c:	4b65      	ldr	r3, [pc, #404]	; (800cea4 <SX1276SetRxConfig+0x2c4>)
            SX1276.Settings.LoRa.Coderate = coderate;
 800cd0e:	9905      	ldr	r1, [sp, #20]
 800cd10:	001a      	movs	r2, r3
 800cd12:	324d      	adds	r2, #77	; 0x4d
 800cd14:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800cd16:	001a      	movs	r2, r3
 800cd18:	9900      	ldr	r1, [sp, #0]
 800cd1a:	324e      	adds	r2, #78	; 0x4e
 800cd1c:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800cd1e:	001a      	movs	r2, r3
 800cd20:	9901      	ldr	r1, [sp, #4]
 800cd22:	3250      	adds	r2, #80	; 0x50
 800cd24:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PayloadLen = payloadLen;
 800cd26:	001a      	movs	r2, r3
 800cd28:	9902      	ldr	r1, [sp, #8]
 800cd2a:	3251      	adds	r2, #81	; 0x51
 800cd2c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800cd2e:	001a      	movs	r2, r3
 800cd30:	9903      	ldr	r1, [sp, #12]
 800cd32:	3252      	adds	r2, #82	; 0x52
 800cd34:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800cd36:	001a      	movs	r2, r3
 800cd38:	9908      	ldr	r1, [sp, #32]
 800cd3a:	3253      	adds	r2, #83	; 0x53
 800cd3c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800cd3e:	001a      	movs	r2, r3
 800cd40:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cd42:	3254      	adds	r2, #84	; 0x54
 800cd44:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cd46:	001a      	movs	r2, r3
 800cd48:	9906      	ldr	r1, [sp, #24]
 800cd4a:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800cd4c:	1df7      	adds	r7, r6, #7
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800cd4e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800cd50:	9a07      	ldr	r2, [sp, #28]
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800cd52:	645f      	str	r7, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800cd54:	649c      	str	r4, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.RxContinuous = rxContinuous;
 800cd56:	3356      	adds	r3, #86	; 0x56
 800cd58:	0025      	movs	r5, r4
 800cd5a:	701a      	strb	r2, [r3, #0]
            if( datarate > 12 )
 800cd5c:	2c06      	cmp	r4, #6
 800cd5e:	d300      	bcc.n	800cd62 <SX1276SetRxConfig+0x182>
 800cd60:	e081      	b.n	800ce66 <SX1276SetRxConfig+0x286>
 800cd62:	2506      	movs	r5, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800cd64:	2f07      	cmp	r7, #7
 800cd66:	d000      	beq.n	800cd6a <SX1276SetRxConfig+0x18a>
 800cd68:	e082      	b.n	800ce70 <SX1276SetRxConfig+0x290>
 800cd6a:	002a      	movs	r2, r5
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	2101      	movs	r1, #1
 800cd70:	3a0b      	subs	r2, #11
 800cd72:	4291      	cmp	r1, r2
 800cd74:	415b      	adcs	r3, r3
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	4a4c      	ldr	r2, [pc, #304]	; (800ceac <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800cd7a:	201d      	movs	r0, #29
 800cd7c:	7013      	strb	r3, [r2, #0]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cd7e:	4e49      	ldr	r6, [pc, #292]	; (800cea4 <SX1276SetRxConfig+0x2c4>)
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800cd80:	f7ff fc90 	bl	800c6a4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cd84:	9b05      	ldr	r3, [sp, #20]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cd86:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cd88:	0059      	lsls	r1, r3, #1
 800cd8a:	9b01      	ldr	r3, [sp, #4]
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800cd8c:	012d      	lsls	r5, r5, #4
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800cd8e:	4319      	orrs	r1, r3
 800cd90:	013b      	lsls	r3, r7, #4
 800cd92:	4319      	orrs	r1, r3
            SX1276Write( REG_LR_MODEMCONFIG1,
 800cd94:	b2c9      	uxtb	r1, r1
 800cd96:	f7ff fc3a 	bl	800c60e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800cd9a:	201e      	movs	r0, #30
 800cd9c:	f7ff fc82 	bl	800c6a4 <SX1276Read>
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800cda0:	9b04      	ldr	r3, [sp, #16]
 800cda2:	0599      	lsls	r1, r3, #22
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800cda4:	9b03      	ldr	r3, [sp, #12]
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 800cda6:	0f89      	lsrs	r1, r1, #30
                           ( datarate << 4 ) | ( crcOn << 2 ) |
 800cda8:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800cdaa:	4319      	orrs	r1, r3
 800cdac:	4329      	orrs	r1, r5
                           RFLR_MODEMCONFIG2_RXPAYLOADCRC_MASK &
 800cdae:	2508      	movs	r5, #8
 800cdb0:	4028      	ands	r0, r5
            SX1276Write( REG_LR_MODEMCONFIG2,
 800cdb2:	4301      	orrs	r1, r0
 800cdb4:	b2c9      	uxtb	r1, r1
 800cdb6:	201e      	movs	r0, #30
 800cdb8:	f7ff fc29 	bl	800c60e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800cdbc:	2026      	movs	r0, #38	; 0x26
 800cdbe:	f7ff fc71 	bl	800c6a4 <SX1276Read>
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800cdc2:	4b3a      	ldr	r3, [pc, #232]	; (800ceac <SX1276SetRxConfig+0x2cc>)
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800cdc4:	43a8      	bics	r0, r5
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800cdc6:	7819      	ldrb	r1, [r3, #0]
 800cdc8:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800cdca:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800cdcc:	b2c9      	uxtb	r1, r1
 800cdce:	2026      	movs	r0, #38	; 0x26
 800cdd0:	f7ff fc1d 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800cdd4:	466b      	mov	r3, sp
 800cdd6:	201f      	movs	r0, #31
 800cdd8:	7c19      	ldrb	r1, [r3, #16]
 800cdda:	f7ff fc18 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800cdde:	9b00      	ldr	r3, [sp, #0]
 800cde0:	2020      	movs	r0, #32
 800cde2:	0a19      	lsrs	r1, r3, #8
 800cde4:	f7ff fc13 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800cde8:	466b      	mov	r3, sp
 800cdea:	2021      	movs	r0, #33	; 0x21
 800cdec:	7819      	ldrb	r1, [r3, #0]
 800cdee:	f7ff fc0e 	bl	800c60e <SX1276Write>
            if( fixLen == 1 )
 800cdf2:	9b01      	ldr	r3, [sp, #4]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d003      	beq.n	800ce00 <SX1276SetRxConfig+0x220>
                SX1276Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800cdf8:	2022      	movs	r0, #34	; 0x22
 800cdfa:	9902      	ldr	r1, [sp, #8]
 800cdfc:	f7ff fc07 	bl	800c60e <SX1276Write>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800ce00:	0033      	movs	r3, r6
 800ce02:	3353      	adds	r3, #83	; 0x53
 800ce04:	781b      	ldrb	r3, [r3, #0]
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d00f      	beq.n	800ce2a <SX1276SetRxConfig+0x24a>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800ce0a:	2044      	movs	r0, #68	; 0x44
 800ce0c:	f7ff fc4a 	bl	800c6a4 <SX1276Read>
 800ce10:	2180      	movs	r1, #128	; 0x80
 800ce12:	4249      	negs	r1, r1
 800ce14:	4301      	orrs	r1, r0
 800ce16:	b2c9      	uxtb	r1, r1
 800ce18:	2044      	movs	r0, #68	; 0x44
 800ce1a:	f7ff fbf8 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800ce1e:	0033      	movs	r3, r6
 800ce20:	3354      	adds	r3, #84	; 0x54
 800ce22:	2024      	movs	r0, #36	; 0x24
 800ce24:	7819      	ldrb	r1, [r3, #0]
 800ce26:	f7ff fbf2 	bl	800c60e <SX1276Write>
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800ce2a:	2f09      	cmp	r7, #9
 800ce2c:	d12c      	bne.n	800ce88 <SX1276SetRxConfig+0x2a8>
 800ce2e:	4b20      	ldr	r3, [pc, #128]	; (800ceb0 <SX1276SetRxConfig+0x2d0>)
 800ce30:	68b2      	ldr	r2, [r6, #8]
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800ce32:	2102      	movs	r1, #2
 800ce34:	2036      	movs	r0, #54	; 0x36
            if( ( bandwidth == 9 ) && ( SX1276.Settings.Channel > RF_MID_BAND_THRESH ) )
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d922      	bls.n	800ce80 <SX1276SetRxConfig+0x2a0>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800ce3a:	f7ff fbe8 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x64 );
 800ce3e:	2164      	movs	r1, #100	; 0x64
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800ce40:	203a      	movs	r0, #58	; 0x3a
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800ce42:	f7ff fbe4 	bl	800c60e <SX1276Write>
            if( datarate == 6 )
 800ce46:	2507      	movs	r5, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ce48:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800ce4a:	2c06      	cmp	r4, #6
 800ce4c:	d81f      	bhi.n	800ce8e <SX1276SetRxConfig+0x2ae>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ce4e:	f7ff fc29 	bl	800c6a4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ce52:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ce54:	43a8      	bics	r0, r5
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ce56:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800ce58:	b2c9      	uxtb	r1, r1
 800ce5a:	2031      	movs	r0, #49	; 0x31
 800ce5c:	f7ff fbd7 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800ce60:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800ce62:	2037      	movs	r0, #55	; 0x37
 800ce64:	e74c      	b.n	800cd00 <SX1276SetRxConfig+0x120>
 800ce66:	2c0c      	cmp	r4, #12
 800ce68:	d800      	bhi.n	800ce6c <SX1276SetRxConfig+0x28c>
 800ce6a:	e77b      	b.n	800cd64 <SX1276SetRxConfig+0x184>
 800ce6c:	250c      	movs	r5, #12
 800ce6e:	e779      	b.n	800cd64 <SX1276SetRxConfig+0x184>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800ce70:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800ce72:	2f08      	cmp	r7, #8
 800ce74:	d180      	bne.n	800cd78 <SX1276SetRxConfig+0x198>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800ce76:	330b      	adds	r3, #11
 800ce78:	42a3      	cmp	r3, r4
 800ce7a:	419b      	sbcs	r3, r3
 800ce7c:	425b      	negs	r3, r3
 800ce7e:	e77b      	b.n	800cd78 <SX1276SetRxConfig+0x198>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x02 );
 800ce80:	f7ff fbc5 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE2, 0x7F );
 800ce84:	217f      	movs	r1, #127	; 0x7f
 800ce86:	e7db      	b.n	800ce40 <SX1276SetRxConfig+0x260>
                SX1276Write( REG_LR_HIGHBWOPTIMIZE1, 0x03 );
 800ce88:	2103      	movs	r1, #3
 800ce8a:	2036      	movs	r0, #54	; 0x36
 800ce8c:	e7d9      	b.n	800ce42 <SX1276SetRxConfig+0x262>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ce8e:	f7ff fc09 	bl	800c6a4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ce92:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800ce94:	43a8      	bics	r0, r5
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800ce96:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800ce98:	b2c9      	uxtb	r1, r1
 800ce9a:	2031      	movs	r0, #49	; 0x31
 800ce9c:	f7ff fbb7 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800cea0:	210a      	movs	r1, #10
 800cea2:	e7de      	b.n	800ce62 <SX1276SetRxConfig+0x282>
 800cea4:	20001070 	.word	0x20001070
 800cea8:	01e84800 	.word	0x01e84800
 800ceac:	200010bc 	.word	0x200010bc
 800ceb0:	1f4add40 	.word	0x1f4add40

0800ceb4 <SX1276SetSleep>:
{
 800ceb4:	b510      	push	{r4, lr}
    TimerStop( &RxTimeoutTimer );
 800ceb6:	4c0a      	ldr	r4, [pc, #40]	; (800cee0 <SX1276SetSleep+0x2c>)
 800ceb8:	1d20      	adds	r0, r4, #4
 800ceba:	f001 f95b 	bl	800e174 <UTIL_TIMER_Stop>
    TimerStop( &TxTimeoutTimer );
 800cebe:	0020      	movs	r0, r4
 800cec0:	301c      	adds	r0, #28
 800cec2:	f001 f957 	bl	800e174 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutSyncWord );
 800cec6:	4c07      	ldr	r4, [pc, #28]	; (800cee4 <SX1276SetSleep+0x30>)
 800cec8:	0020      	movs	r0, r4
 800ceca:	3068      	adds	r0, #104	; 0x68
 800cecc:	f001 f952 	bl	800e174 <UTIL_TIMER_Stop>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800ced0:	f7ff fe14 	bl	800cafc <SX1276SetOpMode.constprop.0>
    Sx_Board_SetXO( RESET );
 800ced4:	2000      	movs	r0, #0
 800ced6:	f7f6 f929 	bl	800312c <CMWX1ZZABZ0XX_RADIO_SetXO>
    SX1276.Settings.State = RF_IDLE;
 800ceda:	2300      	movs	r3, #0
 800cedc:	7123      	strb	r3, [r4, #4]
}
 800cede:	bd10      	pop	{r4, pc}
 800cee0:	200010f0 	.word	0x200010f0
 800cee4:	20001070 	.word	0x20001070

0800cee8 <SX1276IsChannelFree>:
{
 800cee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceea:	0007      	movs	r7, r0
 800ceec:	000c      	movs	r4, r1
 800ceee:	0016      	movs	r6, r2
 800cef0:	001d      	movs	r5, r3
    SX1276SetSleep( );
 800cef2:	f7ff ffdf 	bl	800ceb4 <SX1276SetSleep>
    SX1276SetModem( MODEM_FSK );
 800cef6:	2000      	movs	r0, #0
 800cef8:	f7ff fe10 	bl	800cb1c <SX1276SetModem>
    SX1276SetChannel( freq );
 800cefc:	0038      	movs	r0, r7
 800cefe:	f7ff fb8f 	bl	800c620 <SX1276SetChannel>
    SX1276Write( REG_RXBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800cf02:	0020      	movs	r0, r4
 800cf04:	f7ff fade 	bl	800c4c4 <GetFskBandwidthRegValue>
 800cf08:	0004      	movs	r4, r0
 800cf0a:	0001      	movs	r1, r0
 800cf0c:	2012      	movs	r0, #18
 800cf0e:	f7ff fb7e 	bl	800c60e <SX1276Write>
    SX1276Write( REG_AFCBW, GetFskBandwidthRegValue( rxBandwidth ) );
 800cf12:	0021      	movs	r1, r4
 800cf14:	2013      	movs	r0, #19
 800cf16:	f7ff fb7a 	bl	800c60e <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800cf1a:	2005      	movs	r0, #5
 800cf1c:	f7ff fc64 	bl	800c7e8 <SX1276SetOpMode.part.0>
    RADIO_DELAY_MS( 1 );
 800cf20:	2001      	movs	r0, #1
 800cf22:	f7f5 fe39 	bl	8002b98 <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 800cf26:	f001 f8e3 	bl	800e0f0 <UTIL_TIMER_GetCurrentTime>
 800cf2a:	0004      	movs	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800cf2c:	0020      	movs	r0, r4
 800cf2e:	f001 f8e9 	bl	800e104 <UTIL_TIMER_GetElapsedTime>
 800cf32:	42a8      	cmp	r0, r5
 800cf34:	d304      	bcc.n	800cf40 <SX1276IsChannelFree+0x58>
    bool status = true;
 800cf36:	2401      	movs	r4, #1
    SX1276SetSleep( );
 800cf38:	f7ff ffbc 	bl	800ceb4 <SX1276SetSleep>
}
 800cf3c:	0020      	movs	r0, r4
 800cf3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        rssi = SX1276ReadRssi( MODEM_FSK );
 800cf40:	2000      	movs	r0, #0
 800cf42:	f7ff fdb9 	bl	800cab8 <SX1276ReadRssi>
        if( rssi > rssiThresh )
 800cf46:	42b0      	cmp	r0, r6
 800cf48:	ddf0      	ble.n	800cf2c <SX1276IsChannelFree+0x44>
            status = false;
 800cf4a:	2400      	movs	r4, #0
 800cf4c:	e7f4      	b.n	800cf38 <SX1276IsChannelFree+0x50>

0800cf4e <SX1276Random>:
{
 800cf4e:	b570      	push	{r4, r5, r6, lr}
 800cf50:	2400      	movs	r4, #0
    SX1276SetModem( MODEM_LORA );
 800cf52:	2001      	movs	r0, #1
 800cf54:	f7ff fde2 	bl	800cb1c <SX1276SetModem>
    SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800cf58:	21ff      	movs	r1, #255	; 0xff
 800cf5a:	2011      	movs	r0, #17
 800cf5c:	f7ff fb57 	bl	800c60e <SX1276Write>
    if( opMode == RF_OPMODE_SLEEP )
 800cf60:	2005      	movs	r0, #5
 800cf62:	f7ff fc41 	bl	800c7e8 <SX1276SetOpMode.part.0>
    uint32_t rnd = 0;
 800cf66:	0025      	movs	r5, r4
        RADIO_DELAY_MS( 1 );
 800cf68:	2601      	movs	r6, #1
 800cf6a:	0030      	movs	r0, r6
 800cf6c:	f7f5 fe14 	bl	8002b98 <HAL_Delay>
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800cf70:	202c      	movs	r0, #44	; 0x2c
 800cf72:	f7ff fb97 	bl	800c6a4 <SX1276Read>
 800cf76:	4030      	ands	r0, r6
 800cf78:	40a0      	lsls	r0, r4
    for( i = 0; i < 32; i++ )
 800cf7a:	3401      	adds	r4, #1
        rnd |= ( ( uint32_t )SX1276Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 800cf7c:	4305      	orrs	r5, r0
    for( i = 0; i < 32; i++ )
 800cf7e:	2c20      	cmp	r4, #32
 800cf80:	d1f3      	bne.n	800cf6a <SX1276Random+0x1c>
    SX1276SetSleep( );
 800cf82:	f7ff ff97 	bl	800ceb4 <SX1276SetSleep>
}
 800cf86:	0028      	movs	r0, r5
 800cf88:	bd70      	pop	{r4, r5, r6, pc}
	...

0800cf8c <SX1276SetTxConfig>:
{
 800cf8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf8e:	b08d      	sub	sp, #52	; 0x34
 800cf90:	9306      	str	r3, [sp, #24]
 800cf92:	ab12      	add	r3, sp, #72	; 0x48
 800cf94:	cb40      	ldmia	r3!, {r6}
 800cf96:	9002      	str	r0, [sp, #8]
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	9205      	str	r2, [sp, #20]
 800cf9c:	9307      	str	r3, [sp, #28]
 800cf9e:	ab14      	add	r3, sp, #80	; 0x50
 800cfa0:	881b      	ldrh	r3, [r3, #0]
 800cfa2:	000c      	movs	r4, r1
 800cfa4:	9301      	str	r3, [sp, #4]
 800cfa6:	ab15      	add	r3, sp, #84	; 0x54
 800cfa8:	781b      	ldrb	r3, [r3, #0]
 800cfaa:	9303      	str	r3, [sp, #12]
 800cfac:	ab16      	add	r3, sp, #88	; 0x58
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	9304      	str	r3, [sp, #16]
 800cfb2:	ab17      	add	r3, sp, #92	; 0x5c
 800cfb4:	781b      	ldrb	r3, [r3, #0]
 800cfb6:	9308      	str	r3, [sp, #32]
 800cfb8:	ab18      	add	r3, sp, #96	; 0x60
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	930a      	str	r3, [sp, #40]	; 0x28
 800cfbe:	ab19      	add	r3, sp, #100	; 0x64
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	9309      	str	r3, [sp, #36]	; 0x24
    if( ( SX1276.Settings.State == RF_RX_RUNNING ) && ( modem == MODEM_FSK ) )
 800cfc4:	4bb8      	ldr	r3, [pc, #736]	; (800d2a8 <SX1276SetTxConfig+0x31c>)
 800cfc6:	791d      	ldrb	r5, [r3, #4]
 800cfc8:	2d01      	cmp	r5, #1
 800cfca:	d106      	bne.n	800cfda <SX1276SetTxConfig+0x4e>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	d104      	bne.n	800cfda <SX1276SetTxConfig+0x4e>
        SX1276SetSleep( );
 800cfd0:	f7ff ff70 	bl	800ceb4 <SX1276SetSleep>
        RADIO_DELAY_MS( 1 );
 800cfd4:	0028      	movs	r0, r5
 800cfd6:	f7f5 fddf 	bl	8002b98 <HAL_Delay>
    SX1276SetModem( modem );
 800cfda:	9802      	ldr	r0, [sp, #8]
 800cfdc:	f7ff fd9e 	bl	800cb1c <SX1276SetModem>
    paConfig = SX1276Read( REG_PACONFIG );
 800cfe0:	2009      	movs	r0, #9
 800cfe2:	f7ff fb5f 	bl	800c6a4 <SX1276Read>
 800cfe6:	900b      	str	r0, [sp, #44]	; 0x2c
    paDac = SX1276Read( REG_PADAC );
 800cfe8:	204d      	movs	r0, #77	; 0x4d
 800cfea:	f7ff fb5b 	bl	800c6a4 <SX1276Read>
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800cfee:	4bae      	ldr	r3, [pc, #696]	; (800d2a8 <SX1276SetTxConfig+0x31c>)
    paDac = SX1276Read( REG_PADAC );
 800cff0:	0007      	movs	r7, r0
 800cff2:	0005      	movs	r5, r0
    switch( Sx_Board_GetPaSelect(SX1276.Settings.Channel) )
 800cff4:	6898      	ldr	r0, [r3, #8]
 800cff6:	f7f6 fa0f 	bl	8003418 <CMWX1ZZABZ0XX_RADIO_GetPaSelect>
 800cffa:	2800      	cmp	r0, #0
 800cffc:	d02c      	beq.n	800d058 <SX1276SetTxConfig+0xcc>
 800cffe:	2300      	movs	r3, #0
 800d000:	2201      	movs	r2, #1
 800d002:	3802      	subs	r0, #2
 800d004:	b2c0      	uxtb	r0, r0
 800d006:	4282      	cmp	r2, r0
 800d008:	415b      	adcs	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800d00a:	217f      	movs	r1, #127	; 0x7f
 800d00c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
        if (power > 14)
 800d00e:	01db      	lsls	r3, r3, #7
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800d010:	400a      	ands	r2, r1
 800d012:	0011      	movs	r1, r2
        if (power > 14)
 800d014:	b2db      	uxtb	r3, r3
    paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | board_config;
 800d016:	4319      	orrs	r1, r3
 800d018:	b249      	sxtb	r1, r1
    if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800d01a:	2900      	cmp	r1, #0
 800d01c:	da2b      	bge.n	800d076 <SX1276SetTxConfig+0xea>
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800d01e:	23f0      	movs	r3, #240	; 0xf0
 800d020:	2507      	movs	r5, #7
 800d022:	4019      	ands	r1, r3
        if( power > 17 )
 800d024:	2c11      	cmp	r4, #17
 800d026:	dd1c      	ble.n	800d062 <SX1276SetTxConfig+0xd6>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 800d028:	433d      	orrs	r5, r7
 800d02a:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800d02c:	1c23      	adds	r3, r4, #0
 800d02e:	2c14      	cmp	r4, #20
 800d030:	dd00      	ble.n	800d034 <SX1276SetTxConfig+0xa8>
 800d032:	2314      	movs	r3, #20
 800d034:	3b05      	subs	r3, #5
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800d036:	4319      	orrs	r1, r3
    SX1276Write( REG_PACONFIG, paConfig );
 800d038:	2009      	movs	r0, #9
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800d03a:	b2c9      	uxtb	r1, r1
    SX1276Write( REG_PACONFIG, paConfig );
 800d03c:	f7ff fae7 	bl	800c60e <SX1276Write>
    SX1276Write( REG_PADAC, paDac );
 800d040:	0029      	movs	r1, r5
 800d042:	204d      	movs	r0, #77	; 0x4d
 800d044:	f7ff fae3 	bl	800c60e <SX1276Write>
    switch( modem )
 800d048:	9b02      	ldr	r3, [sp, #8]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d022      	beq.n	800d094 <SX1276SetTxConfig+0x108>
 800d04e:	2b01      	cmp	r3, #1
 800d050:	d100      	bne.n	800d054 <SX1276SetTxConfig+0xc8>
 800d052:	e080      	b.n	800d156 <SX1276SetTxConfig+0x1ca>
}
 800d054:	b00d      	add	sp, #52	; 0x34
 800d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (power > 14)
 800d058:	2301      	movs	r3, #1
 800d05a:	2c0e      	cmp	r4, #14
 800d05c:	dcd5      	bgt.n	800d00a <SX1276SetTxConfig+0x7e>
 800d05e:	1c03      	adds	r3, r0, #0
 800d060:	e7d3      	b.n	800d00a <SX1276SetTxConfig+0x7e>
            paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 800d062:	43af      	bics	r7, r5
 800d064:	2504      	movs	r5, #4
 800d066:	433d      	orrs	r5, r7
 800d068:	b2ed      	uxtb	r5, r5
            paConfig = ( paConfig & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 800d06a:	1c23      	adds	r3, r4, #0
 800d06c:	2c02      	cmp	r4, #2
 800d06e:	da00      	bge.n	800d072 <SX1276SetTxConfig+0xe6>
 800d070:	2302      	movs	r3, #2
 800d072:	3b02      	subs	r3, #2
 800d074:	e7df      	b.n	800d036 <SX1276SetTxConfig+0xaa>
        if( power > 0 )
 800d076:	2c00      	cmp	r4, #0
 800d078:	dd05      	ble.n	800d086 <SX1276SetTxConfig+0xfa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 7 << 4 ) | ( power );
 800d07a:	1c23      	adds	r3, r4, #0
 800d07c:	2c0f      	cmp	r4, #15
 800d07e:	dd00      	ble.n	800d082 <SX1276SetTxConfig+0xf6>
 800d080:	230f      	movs	r3, #15
 800d082:	2170      	movs	r1, #112	; 0x70
 800d084:	e7d7      	b.n	800d036 <SX1276SetTxConfig+0xaa>
            paConfig = ( paConfig & RF_PACONFIG_MAX_POWER_MASK & RF_PACONFIG_OUTPUTPOWER_MASK ) | ( 0 << 4 ) | ( power + 4 );
 800d086:	1c21      	adds	r1, r4, #0
 800d088:	1d23      	adds	r3, r4, #4
 800d08a:	da01      	bge.n	800d090 <SX1276SetTxConfig+0x104>
 800d08c:	4b87      	ldr	r3, [pc, #540]	; (800d2ac <SX1276SetTxConfig+0x320>)
 800d08e:	7819      	ldrb	r1, [r3, #0]
 800d090:	3104      	adds	r1, #4
 800d092:	e7d1      	b.n	800d038 <SX1276SetTxConfig+0xac>
            SX1276.Settings.Fsk.Power = power;
 800d094:	4b84      	ldr	r3, [pc, #528]	; (800d2a8 <SX1276SetTxConfig+0x31c>)
            SX1276.Settings.Fsk.Fdev = fdev;
 800d096:	9a05      	ldr	r2, [sp, #20]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800d098:	9903      	ldr	r1, [sp, #12]
            SX1276.Settings.Fsk.Fdev = fdev;
 800d09a:	611a      	str	r2, [r3, #16]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800d09c:	9a06      	ldr	r2, [sp, #24]
            SX1276.Settings.Fsk.Power = power;
 800d09e:	731c      	strb	r4, [r3, #12]
            SX1276.Settings.Fsk.Bandwidth = bandwidth;
 800d0a0:	615a      	str	r2, [r3, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800d0a2:	9a01      	ldr	r2, [sp, #4]
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d0a4:	9805      	ldr	r0, [sp, #20]
            SX1276.Settings.Fsk.PreambleLen = preambleLen;
 800d0a6:	841a      	strh	r2, [r3, #32]
            SX1276.Settings.Fsk.FixLen = fixLen;
 800d0a8:	1cda      	adds	r2, r3, #3
 800d0aa:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.CrcOn = crcOn;
 800d0ac:	9904      	ldr	r1, [sp, #16]
 800d0ae:	1d5a      	adds	r2, r3, #5
 800d0b0:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.IqInverted = iqInverted;
 800d0b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0b4:	1d9a      	adds	r2, r3, #6
 800d0b6:	77d1      	strb	r1, [r2, #31]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800d0b8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            SX1276.Settings.Fsk.Datarate = datarate;
 800d0ba:	61de      	str	r6, [r3, #28]
            SX1276.Settings.Fsk.TxTimeout = timeout;
 800d0bc:	629a      	str	r2, [r3, #40]	; 0x28
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d0be:	497c      	ldr	r1, [pc, #496]	; (800d2b0 <SX1276SetTxConfig+0x324>)
 800d0c0:	f7f3 f8d8 	bl	8000274 <__aeabi_uidivmod>
 800d0c4:	4b7b      	ldr	r3, [pc, #492]	; (800d2b4 <SX1276SetTxConfig+0x328>)
 800d0c6:	0208      	lsls	r0, r1, #8
 800d0c8:	18c0      	adds	r0, r0, r3
 800d0ca:	4979      	ldr	r1, [pc, #484]	; (800d2b0 <SX1276SetTxConfig+0x324>)
 800d0cc:	f7f3 f84c 	bl	8000168 <__udivsi3>
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800d0d0:	4977      	ldr	r1, [pc, #476]	; (800d2b0 <SX1276SetTxConfig+0x324>)
           ( ( ( stepsFrac << SX1276_PLL_STEP_SHIFT_AMOUNT ) + ( SX1276_PLL_STEP_SCALED >> 1 ) ) /
 800d0d2:	0004      	movs	r4, r0
    stepsInt = freqInHz / SX1276_PLL_STEP_SCALED;
 800d0d4:	9805      	ldr	r0, [sp, #20]
 800d0d6:	f7f3 f847 	bl	8000168 <__udivsi3>
    return ( stepsInt << SX1276_PLL_STEP_SHIFT_AMOUNT ) + 
 800d0da:	0200      	lsls	r0, r0, #8
 800d0dc:	1824      	adds	r4, r4, r0
            SX1276Write( REG_FDEVMSB, ( uint8_t )( fdevInPllSteps >> 8 ) );
 800d0de:	0a21      	lsrs	r1, r4, #8
 800d0e0:	2004      	movs	r0, #4
 800d0e2:	b2c9      	uxtb	r1, r1
 800d0e4:	f7ff fa93 	bl	800c60e <SX1276Write>
            SX1276Write( REG_FDEVLSB, ( uint8_t )( fdevInPllSteps & 0xFF ) );
 800d0e8:	b2e1      	uxtb	r1, r4
 800d0ea:	2005      	movs	r0, #5
 800d0ec:	f7ff fa8f 	bl	800c60e <SX1276Write>
            uint32_t bitRate = ( uint32_t )( SX1276_XTAL_FREQ / datarate );
 800d0f0:	0031      	movs	r1, r6
 800d0f2:	4871      	ldr	r0, [pc, #452]	; (800d2b8 <SX1276SetTxConfig+0x32c>)
 800d0f4:	f7f3 f838 	bl	8000168 <__udivsi3>
 800d0f8:	0004      	movs	r4, r0
            SX1276Write( REG_BITRATEMSB, ( uint8_t )( bitRate >> 8 ) );
 800d0fa:	0a01      	lsrs	r1, r0, #8
 800d0fc:	b2c9      	uxtb	r1, r1
 800d0fe:	2002      	movs	r0, #2
 800d100:	f7ff fa85 	bl	800c60e <SX1276Write>
            SX1276Write( REG_BITRATELSB, ( uint8_t )( bitRate & 0xFF ) );
 800d104:	2003      	movs	r0, #3
 800d106:	b2e1      	uxtb	r1, r4
 800d108:	f7ff fa81 	bl	800c60e <SX1276Write>
            SX1276Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	2025      	movs	r0, #37	; 0x25
 800d110:	0a19      	lsrs	r1, r3, #8
 800d112:	f7ff fa7c 	bl	800c60e <SX1276Write>
            SX1276Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 800d116:	466b      	mov	r3, sp
 800d118:	2026      	movs	r0, #38	; 0x26
 800d11a:	7919      	ldrb	r1, [r3, #4]
 800d11c:	f7ff fa77 	bl	800c60e <SX1276Write>
                         ( SX1276Read( REG_PACKETCONFIG1 ) &
 800d120:	2030      	movs	r0, #48	; 0x30
 800d122:	f7ff fabf 	bl	800c6a4 <SX1276Read>
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800d126:	2101      	movs	r1, #1
 800d128:	9b03      	ldr	r3, [sp, #12]
 800d12a:	4059      	eors	r1, r3
                           ( crcOn << 4 ) );
 800d12c:	9b04      	ldr	r3, [sp, #16]
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800d12e:	01c9      	lsls	r1, r1, #7
                           ( crcOn << 4 ) );
 800d130:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800d132:	4319      	orrs	r1, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 800d134:	236f      	movs	r3, #111	; 0x6f
 800d136:	4018      	ands	r0, r3
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 800d138:	4301      	orrs	r1, r0
            SX1276Write( REG_PACKETCONFIG1,
 800d13a:	b2c9      	uxtb	r1, r1
 800d13c:	2030      	movs	r0, #48	; 0x30
 800d13e:	f7ff fa66 	bl	800c60e <SX1276Write>
            SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 800d142:	2031      	movs	r0, #49	; 0x31
 800d144:	f7ff faae 	bl	800c6a4 <SX1276Read>
 800d148:	2140      	movs	r1, #64	; 0x40
 800d14a:	4301      	orrs	r1, r0
 800d14c:	2031      	movs	r0, #49	; 0x31
 800d14e:	b2c9      	uxtb	r1, r1
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d150:	f7ff fa5d 	bl	800c60e <SX1276Write>
}
 800d154:	e77e      	b.n	800d054 <SX1276SetTxConfig+0xc8>
            SX1276.Settings.LoRa.Power = power;
 800d156:	4b54      	ldr	r3, [pc, #336]	; (800d2a8 <SX1276SetTxConfig+0x31c>)
 800d158:	001a      	movs	r2, r3
 800d15a:	3240      	adds	r2, #64	; 0x40
 800d15c:	7014      	strb	r4, [r2, #0]
            if( bandwidth > 2 )
 800d15e:	9a06      	ldr	r2, [sp, #24]
 800d160:	2a02      	cmp	r2, #2
 800d162:	d900      	bls.n	800d166 <SX1276SetTxConfig+0x1da>
                while( 1 );
 800d164:	e7fe      	b.n	800d164 <SX1276SetTxConfig+0x1d8>
            SX1276.Settings.LoRa.Coderate = coderate;
 800d166:	001a      	movs	r2, r3
 800d168:	9907      	ldr	r1, [sp, #28]
 800d16a:	324d      	adds	r2, #77	; 0x4d
 800d16c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.PreambleLen = preambleLen;
 800d16e:	001a      	movs	r2, r3
 800d170:	9901      	ldr	r1, [sp, #4]
 800d172:	324e      	adds	r2, #78	; 0x4e
 800d174:	8011      	strh	r1, [r2, #0]
            SX1276.Settings.LoRa.FixLen = fixLen;
 800d176:	001a      	movs	r2, r3
 800d178:	9903      	ldr	r1, [sp, #12]
 800d17a:	3250      	adds	r2, #80	; 0x50
 800d17c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.FreqHopOn = freqHopOn;
 800d17e:	001a      	movs	r2, r3
 800d180:	9908      	ldr	r1, [sp, #32]
 800d182:	3253      	adds	r2, #83	; 0x53
 800d184:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.HopPeriod = hopPeriod;
 800d186:	001a      	movs	r2, r3
 800d188:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d18a:	3254      	adds	r2, #84	; 0x54
 800d18c:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.CrcOn = crcOn;
 800d18e:	001a      	movs	r2, r3
 800d190:	9904      	ldr	r1, [sp, #16]
 800d192:	3252      	adds	r2, #82	; 0x52
 800d194:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800d196:	001a      	movs	r2, r3
 800d198:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d19a:	3255      	adds	r2, #85	; 0x55
            bandwidth += 7;
 800d19c:	9d06      	ldr	r5, [sp, #24]
            SX1276.Settings.LoRa.IqInverted = iqInverted;
 800d19e:	7011      	strb	r1, [r2, #0]
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800d1a0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
            bandwidth += 7;
 800d1a2:	3507      	adds	r5, #7
            SX1276.Settings.LoRa.Bandwidth = bandwidth;
 800d1a4:	0034      	movs	r4, r6
 800d1a6:	645d      	str	r5, [r3, #68]	; 0x44
            SX1276.Settings.LoRa.Datarate = datarate;
 800d1a8:	649e      	str	r6, [r3, #72]	; 0x48
            SX1276.Settings.LoRa.TxTimeout = timeout;
 800d1aa:	659a      	str	r2, [r3, #88]	; 0x58
            if( datarate > 12 )
 800d1ac:	2e06      	cmp	r6, #6
 800d1ae:	d263      	bcs.n	800d278 <SX1276SetTxConfig+0x2ec>
 800d1b0:	2406      	movs	r4, #6
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d1b2:	2d07      	cmp	r5, #7
 800d1b4:	d164      	bne.n	800d280 <SX1276SetTxConfig+0x2f4>
 800d1b6:	0022      	movs	r2, r4
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	3a0b      	subs	r2, #11
 800d1be:	4291      	cmp	r1, r2
 800d1c0:	415b      	adcs	r3, r3
 800d1c2:	b2db      	uxtb	r3, r3
 800d1c4:	4f38      	ldr	r7, [pc, #224]	; (800d2a8 <SX1276SetTxConfig+0x31c>)
 800d1c6:	003a      	movs	r2, r7
 800d1c8:	324c      	adds	r2, #76	; 0x4c
 800d1ca:	7013      	strb	r3, [r2, #0]
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d1cc:	9b08      	ldr	r3, [sp, #32]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00f      	beq.n	800d1f2 <SX1276SetTxConfig+0x266>
                SX1276Write( REG_LR_PLLHOP, ( SX1276Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 800d1d2:	2044      	movs	r0, #68	; 0x44
 800d1d4:	f7ff fa66 	bl	800c6a4 <SX1276Read>
 800d1d8:	2180      	movs	r1, #128	; 0x80
 800d1da:	4249      	negs	r1, r1
 800d1dc:	4301      	orrs	r1, r0
 800d1de:	b2c9      	uxtb	r1, r1
 800d1e0:	2044      	movs	r0, #68	; 0x44
 800d1e2:	f7ff fa14 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_HOPPERIOD, SX1276.Settings.LoRa.HopPeriod );
 800d1e6:	003b      	movs	r3, r7
 800d1e8:	3354      	adds	r3, #84	; 0x54
 800d1ea:	2024      	movs	r0, #36	; 0x24
 800d1ec:	7819      	ldrb	r1, [r3, #0]
 800d1ee:	f7ff fa0e 	bl	800c60e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG1 ) &
 800d1f2:	201d      	movs	r0, #29
 800d1f4:	f7ff fa56 	bl	800c6a4 <SX1276Read>
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d1f8:	9b07      	ldr	r3, [sp, #28]
 800d1fa:	012d      	lsls	r5, r5, #4
 800d1fc:	0059      	lsls	r1, r3, #1
 800d1fe:	9b03      	ldr	r3, [sp, #12]
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d200:	201d      	movs	r0, #29
                           ( bandwidth << 4 ) | ( coderate << 1 ) |
 800d202:	430b      	orrs	r3, r1
 800d204:	0019      	movs	r1, r3
 800d206:	4329      	orrs	r1, r5
            SX1276Write( REG_LR_MODEMCONFIG1,
 800d208:	b2c9      	uxtb	r1, r1
 800d20a:	f7ff fa00 	bl	800c60e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG2 ) &
 800d20e:	201e      	movs	r0, #30
 800d210:	f7ff fa48 	bl	800c6a4 <SX1276Read>
                           ( datarate << 4 ) | ( crcOn << 2 ) );
 800d214:	9b04      	ldr	r3, [sp, #16]
 800d216:	0124      	lsls	r4, r4, #4
 800d218:	009b      	lsls	r3, r3, #2
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d21a:	431c      	orrs	r4, r3
                           RFLR_MODEMCONFIG2_SF_MASK &
 800d21c:	230b      	movs	r3, #11
 800d21e:	4018      	ands	r0, r3
            SX1276Write( REG_LR_MODEMCONFIG2,
 800d220:	4304      	orrs	r4, r0
 800d222:	b2e1      	uxtb	r1, r4
 800d224:	201e      	movs	r0, #30
 800d226:	f7ff f9f2 	bl	800c60e <SX1276Write>
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800d22a:	2026      	movs	r0, #38	; 0x26
 800d22c:	f7ff fa3a 	bl	800c6a4 <SX1276Read>
 800d230:	2308      	movs	r3, #8
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800d232:	374c      	adds	r7, #76	; 0x4c
 800d234:	7839      	ldrb	r1, [r7, #0]
                         ( SX1276Read( REG_LR_MODEMCONFIG3 ) &
 800d236:	4398      	bics	r0, r3
                           ( SX1276.Settings.LoRa.LowDatarateOptimize << 3 ) );
 800d238:	00c9      	lsls	r1, r1, #3
                           RFLR_MODEMCONFIG3_LOWDATARATEOPTIMIZE_MASK ) |
 800d23a:	4301      	orrs	r1, r0
            SX1276Write( REG_LR_MODEMCONFIG3,
 800d23c:	b2c9      	uxtb	r1, r1
 800d23e:	2026      	movs	r0, #38	; 0x26
 800d240:	f7ff f9e5 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 800d244:	9b01      	ldr	r3, [sp, #4]
 800d246:	2020      	movs	r0, #32
 800d248:	0a19      	lsrs	r1, r3, #8
 800d24a:	f7ff f9e0 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 800d24e:	466b      	mov	r3, sp
 800d250:	2021      	movs	r0, #33	; 0x21
 800d252:	7919      	ldrb	r1, [r3, #4]
 800d254:	f7ff f9db 	bl	800c60e <SX1276Write>
            if( datarate == 6 )
 800d258:	2407      	movs	r4, #7
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d25a:	2031      	movs	r0, #49	; 0x31
            if( datarate == 6 )
 800d25c:	2e06      	cmp	r6, #6
 800d25e:	d817      	bhi.n	800d290 <SX1276SetTxConfig+0x304>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d260:	f7ff fa20 	bl	800c6a4 <SX1276Read>
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d264:	2105      	movs	r1, #5
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d266:	43a0      	bics	r0, r4
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d268:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d26a:	b2c9      	uxtb	r1, r1
 800d26c:	2031      	movs	r0, #49	; 0x31
 800d26e:	f7ff f9ce 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d272:	210c      	movs	r1, #12
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d274:	2037      	movs	r0, #55	; 0x37
 800d276:	e76b      	b.n	800d150 <SX1276SetTxConfig+0x1c4>
 800d278:	2e0c      	cmp	r6, #12
 800d27a:	d99a      	bls.n	800d1b2 <SX1276SetTxConfig+0x226>
 800d27c:	240c      	movs	r4, #12
 800d27e:	e798      	b.n	800d1b2 <SX1276SetTxConfig+0x226>
                SX1276.Settings.LoRa.LowDatarateOptimize = 0x00;
 800d280:	2300      	movs	r3, #0
            if( ( ( bandwidth == 7 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800d282:	2d08      	cmp	r5, #8
 800d284:	d19e      	bne.n	800d1c4 <SX1276SetTxConfig+0x238>
                ( ( bandwidth == 8 ) && ( datarate == 12 ) ) )
 800d286:	330b      	adds	r3, #11
 800d288:	42b3      	cmp	r3, r6
 800d28a:	419b      	sbcs	r3, r3
 800d28c:	425b      	negs	r3, r3
 800d28e:	e799      	b.n	800d1c4 <SX1276SetTxConfig+0x238>
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d290:	f7ff fa08 	bl	800c6a4 <SX1276Read>
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d294:	2103      	movs	r1, #3
                             ( SX1276Read( REG_LR_DETECTOPTIMIZE ) &
 800d296:	43a0      	bics	r0, r4
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 800d298:	4301      	orrs	r1, r0
                SX1276Write( REG_LR_DETECTOPTIMIZE,
 800d29a:	b2c9      	uxtb	r1, r1
 800d29c:	2031      	movs	r0, #49	; 0x31
 800d29e:	f7ff f9b6 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_DETECTIONTHRESHOLD,
 800d2a2:	210a      	movs	r1, #10
 800d2a4:	e7e6      	b.n	800d274 <SX1276SetTxConfig+0x2e8>
 800d2a6:	46c0      	nop			; (mov r8, r8)
 800d2a8:	20001070 	.word	0x20001070
 800d2ac:	0800fca9 	.word	0x0800fca9
 800d2b0:	00003d09 	.word	0x00003d09
 800d2b4:	00001e84 	.word	0x00001e84
 800d2b8:	01e84800 	.word	0x01e84800

0800d2bc <SX1276SetTxContinuousWave>:
{
 800d2bc:	b530      	push	{r4, r5, lr}
    uint32_t timeout = ( uint32_t )time * 1000;
 800d2be:	24fa      	movs	r4, #250	; 0xfa
{
 800d2c0:	b08b      	sub	sp, #44	; 0x2c
    uint32_t timeout = ( uint32_t )time * 1000;
 800d2c2:	00a4      	lsls	r4, r4, #2
 800d2c4:	4354      	muls	r4, r2
{
 800d2c6:	000d      	movs	r5, r1
    SX1276SetChannel( freq );
 800d2c8:	f7ff f9aa 	bl	800c620 <SX1276SetChannel>
    SX1276SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 800d2cc:	2305      	movs	r3, #5
 800d2ce:	9302      	str	r3, [sp, #8]
 800d2d0:	2396      	movs	r3, #150	; 0x96
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	015b      	lsls	r3, r3, #5
 800d2d6:	0002      	movs	r2, r0
 800d2d8:	0029      	movs	r1, r5
 800d2da:	9007      	str	r0, [sp, #28]
 800d2dc:	9006      	str	r0, [sp, #24]
 800d2de:	9005      	str	r0, [sp, #20]
 800d2e0:	9004      	str	r0, [sp, #16]
 800d2e2:	9003      	str	r0, [sp, #12]
 800d2e4:	9001      	str	r0, [sp, #4]
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	9408      	str	r4, [sp, #32]
 800d2ea:	0003      	movs	r3, r0
 800d2ec:	f7ff fe4e 	bl	800cf8c <SX1276SetTxConfig>
    SX1276Write( REG_PACKETCONFIG2, ( SX1276Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 800d2f0:	2031      	movs	r0, #49	; 0x31
 800d2f2:	f7ff f9d7 	bl	800c6a4 <SX1276Read>
 800d2f6:	2540      	movs	r5, #64	; 0x40
 800d2f8:	43a8      	bics	r0, r5
 800d2fa:	b2c1      	uxtb	r1, r0
 800d2fc:	2031      	movs	r0, #49	; 0x31
 800d2fe:	f7ff f986 	bl	800c60e <SX1276Write>
    SX1276Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 800d302:	0028      	movs	r0, r5
 800d304:	21f0      	movs	r1, #240	; 0xf0
 800d306:	f7ff f982 	bl	800c60e <SX1276Write>
    SX1276Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 800d30a:	21a0      	movs	r1, #160	; 0xa0
 800d30c:	2041      	movs	r0, #65	; 0x41
 800d30e:	f7ff f97e 	bl	800c60e <SX1276Write>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d312:	4d08      	ldr	r5, [pc, #32]	; (800d334 <SX1276SetTxContinuousWave+0x78>)
 800d314:	0021      	movs	r1, r4
 800d316:	351c      	adds	r5, #28
 800d318:	0028      	movs	r0, r5
 800d31a:	f000 ffbd 	bl	800e298 <UTIL_TIMER_SetPeriod>
    SX1276.Settings.State = RF_TX_RUNNING;
 800d31e:	2202      	movs	r2, #2
 800d320:	4b05      	ldr	r3, [pc, #20]	; (800d338 <SX1276SetTxContinuousWave+0x7c>)
    TimerStart( &TxTimeoutTimer );
 800d322:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800d324:	711a      	strb	r2, [r3, #4]
    TimerStart( &TxTimeoutTimer );
 800d326:	f000 ff79 	bl	800e21c <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800d32a:	2003      	movs	r0, #3
 800d32c:	f7ff fa5c 	bl	800c7e8 <SX1276SetOpMode.part.0>
}
 800d330:	b00b      	add	sp, #44	; 0x2c
 800d332:	bd30      	pop	{r4, r5, pc}
 800d334:	200010f0 	.word	0x200010f0
 800d338:	20001070 	.word	0x20001070

0800d33c <RxChainCalibration>:
{
 800d33c:	b570      	push	{r4, r5, r6, lr}
    regPaConfigInitVal = SX1276Read( REG_PACONFIG );
 800d33e:	2009      	movs	r0, #9
 800d340:	f7ff f9b0 	bl	800c6a4 <SX1276Read>
 800d344:	0005      	movs	r5, r0
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d346:	2006      	movs	r0, #6
 800d348:	f7ff f9ac 	bl	800c6a4 <SX1276Read>
 800d34c:	0004      	movs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d34e:	2007      	movs	r0, #7
 800d350:	f7ff f9a8 	bl	800c6a4 <SX1276Read>
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d354:	0424      	lsls	r4, r4, #16
                                                    ( ( uint32_t )SX1276Read( REG_FRFMID ) << 8 ) |
 800d356:	0200      	lsls	r0, r0, #8
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d358:	4304      	orrs	r4, r0
                                                    ( ( uint32_t )SX1276Read( REG_FRFLSB ) ) ) );
 800d35a:	2008      	movs	r0, #8
 800d35c:	f7ff f9a2 	bl	800c6a4 <SX1276Read>
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d360:	4b1a      	ldr	r3, [pc, #104]	; (800d3cc <RxChainCalibration+0x90>)
    initialFreq = SX1276ConvertPllStepToFreqInHz( ( ( ( uint32_t )SX1276Read( REG_FRFMSB ) << 16 ) |
 800d362:	4304      	orrs	r4, r0
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d364:	b2c0      	uxtb	r0, r0
 800d366:	4358      	muls	r0, r3
    freqInHzInt = pllSteps >> SX1276_PLL_STEP_SHIFT_AMOUNT;
 800d368:	0a24      	lsrs	r4, r4, #8
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800d36a:	435c      	muls	r4, r3
           ( ( freqInHzFrac * SX1276_PLL_STEP_SCALED + ( 128 ) ) >> SX1276_PLL_STEP_SHIFT_AMOUNT );
 800d36c:	3080      	adds	r0, #128	; 0x80
 800d36e:	0a00      	lsrs	r0, r0, #8
    SX1276Write( REG_PACONFIG, 0x00 );
 800d370:	2100      	movs	r1, #0
    return freqInHzInt * SX1276_PLL_STEP_SCALED + 
 800d372:	1904      	adds	r4, r0, r4
    SX1276Write( REG_PACONFIG, 0x00 );
 800d374:	2009      	movs	r0, #9
 800d376:	f7ff f94a 	bl	800c60e <SX1276Write>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d37a:	203b      	movs	r0, #59	; 0x3b
 800d37c:	f7ff f992 	bl	800c6a4 <SX1276Read>
 800d380:	2140      	movs	r1, #64	; 0x40
 800d382:	4301      	orrs	r1, r0
 800d384:	b2c9      	uxtb	r1, r1
 800d386:	203b      	movs	r0, #59	; 0x3b
 800d388:	f7ff f941 	bl	800c60e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d38c:	2620      	movs	r6, #32
 800d38e:	203b      	movs	r0, #59	; 0x3b
 800d390:	f7ff f988 	bl	800c6a4 <SX1276Read>
 800d394:	4230      	tst	r0, r6
 800d396:	d1fa      	bne.n	800d38e <RxChainCalibration+0x52>
    SX1276SetChannel( 868000000 );
 800d398:	480d      	ldr	r0, [pc, #52]	; (800d3d0 <RxChainCalibration+0x94>)
 800d39a:	f7ff f941 	bl	800c620 <SX1276SetChannel>
    SX1276Write( REG_IMAGECAL, ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_MASK ) | RF_IMAGECAL_IMAGECAL_START );
 800d39e:	203b      	movs	r0, #59	; 0x3b
 800d3a0:	f7ff f980 	bl	800c6a4 <SX1276Read>
 800d3a4:	2140      	movs	r1, #64	; 0x40
 800d3a6:	4301      	orrs	r1, r0
 800d3a8:	b2c9      	uxtb	r1, r1
 800d3aa:	203b      	movs	r0, #59	; 0x3b
 800d3ac:	f7ff f92f 	bl	800c60e <SX1276Write>
    while( ( SX1276Read( REG_IMAGECAL ) & RF_IMAGECAL_IMAGECAL_RUNNING ) == RF_IMAGECAL_IMAGECAL_RUNNING )
 800d3b0:	2620      	movs	r6, #32
 800d3b2:	203b      	movs	r0, #59	; 0x3b
 800d3b4:	f7ff f976 	bl	800c6a4 <SX1276Read>
 800d3b8:	4230      	tst	r0, r6
 800d3ba:	d1fa      	bne.n	800d3b2 <RxChainCalibration+0x76>
    SX1276Write( REG_PACONFIG, regPaConfigInitVal );
 800d3bc:	0029      	movs	r1, r5
 800d3be:	2009      	movs	r0, #9
 800d3c0:	f7ff f925 	bl	800c60e <SX1276Write>
    SX1276SetChannel( initialFreq );
 800d3c4:	0020      	movs	r0, r4
 800d3c6:	f7ff f92b 	bl	800c620 <SX1276SetChannel>
}
 800d3ca:	bd70      	pop	{r4, r5, r6, pc}
 800d3cc:	00003d09 	.word	0x00003d09
 800d3d0:	33bca100 	.word	0x33bca100

0800d3d4 <SX1276Init>:
{
 800d3d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    RadioEvents = events;
 800d3d6:	4e21      	ldr	r6, [pc, #132]	; (800d45c <SX1276Init+0x88>)
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800d3d8:	2400      	movs	r4, #0
    RadioEvents = events;
 800d3da:	6030      	str	r0, [r6, #0]
    TimerInit( &TxTimeoutTimer, SX1276OnTimeoutIrq );
 800d3dc:	2101      	movs	r1, #1
 800d3de:	0030      	movs	r0, r6
 800d3e0:	4d1f      	ldr	r5, [pc, #124]	; (800d460 <SX1276Init+0x8c>)
 800d3e2:	0022      	movs	r2, r4
 800d3e4:	002b      	movs	r3, r5
 800d3e6:	9400      	str	r4, [sp, #0]
 800d3e8:	4249      	negs	r1, r1
 800d3ea:	301c      	adds	r0, #28
 800d3ec:	f000 fe64 	bl	800e0b8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, SX1276OnTimeoutIrq );
 800d3f0:	2101      	movs	r1, #1
 800d3f2:	002b      	movs	r3, r5
 800d3f4:	0022      	movs	r2, r4
 800d3f6:	1d30      	adds	r0, r6, #4
 800d3f8:	9400      	str	r4, [sp, #0]
 800d3fa:	4249      	negs	r1, r1
 800d3fc:	f000 fe5c 	bl	800e0b8 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutSyncWord, SX1276OnTimeoutIrq );
 800d400:	4e18      	ldr	r6, [pc, #96]	; (800d464 <SX1276Init+0x90>)
 800d402:	2101      	movs	r1, #1
 800d404:	0030      	movs	r0, r6
 800d406:	002b      	movs	r3, r5
 800d408:	0022      	movs	r2, r4
 800d40a:	4249      	negs	r1, r1
 800d40c:	9400      	str	r4, [sp, #0]
 800d40e:	3068      	adds	r0, #104	; 0x68
 800d410:	f000 fe52 	bl	800e0b8 <UTIL_TIMER_Create>
    Sx_Board_SetXO( SET );
 800d414:	2001      	movs	r0, #1
 800d416:	f7f5 fe89 	bl	800312c <CMWX1ZZABZ0XX_RADIO_SetXO>
    Sx_Board_Reset();
 800d41a:	f7f6 f827 	bl	800346c <CMWX1ZZABZ0XX_RADIO_Reset>
    RxChainCalibration( );
 800d41e:	f7ff ff8d 	bl	800d33c <RxChainCalibration>
    SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d422:	f7ff fb6b 	bl	800cafc <SX1276SetOpMode.constprop.0>
    Sx_Board_IoIrqInit( DioIrq );
 800d426:	4810      	ldr	r0, [pc, #64]	; (800d468 <SX1276Init+0x94>)
 800d428:	f7f5 ffc8 	bl	80033bc <CMWX1ZZABZ0XX_RADIO_IoIrqInit>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d42c:	4d0f      	ldr	r5, [pc, #60]	; (800d46c <SX1276Init+0x98>)
 800d42e:	002c      	movs	r4, r5
 800d430:	353c      	adds	r5, #60	; 0x3c
 800d432:	340c      	adds	r4, #12
        SX1276SetModem( RadioRegsInit[i].Modem );
 800d434:	7820      	ldrb	r0, [r4, #0]
 800d436:	f7ff fb71 	bl	800cb1c <SX1276SetModem>
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d43a:	78a1      	ldrb	r1, [r4, #2]
 800d43c:	7860      	ldrb	r0, [r4, #1]
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d43e:	3403      	adds	r4, #3
        SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d440:	f7ff f8e5 	bl	800c60e <SX1276Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d444:	42ac      	cmp	r4, r5
 800d446:	d1f5      	bne.n	800d434 <SX1276Init+0x60>
    SX1276SetModem( MODEM_FSK );
 800d448:	2000      	movs	r0, #0
 800d44a:	f7ff fb67 	bl	800cb1c <SX1276SetModem>
    SX1276.Settings.State = RF_IDLE;
 800d44e:	2300      	movs	r3, #0
 800d450:	7133      	strb	r3, [r6, #4]
    return ( uint32_t )Sx_Board_GetWakeUpTime( ) + RADIO_WAKEUP_TIME;
 800d452:	f7f5 fe69 	bl	8003128 <CMWX1ZZABZ0XX_RADIO_GetWakeUpTime>
 800d456:	3002      	adds	r0, #2
}
 800d458:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800d45a:	46c0      	nop			; (mov r8, r8)
 800d45c:	200010f0 	.word	0x200010f0
 800d460:	0800d471 	.word	0x0800d471
 800d464:	20001070 	.word	0x20001070
 800d468:	200000e4 	.word	0x200000e4
 800d46c:	0800f560 	.word	0x0800f560

0800d470 <SX1276OnTimeoutIrq>:
{
 800d470:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d472:	4c2a      	ldr	r4, [pc, #168]	; (800d51c <SX1276OnTimeoutIrq+0xac>)
 800d474:	7923      	ldrb	r3, [r4, #4]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d002      	beq.n	800d480 <SX1276OnTimeoutIrq+0x10>
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d02a      	beq.n	800d4d4 <SX1276OnTimeoutIrq+0x64>
}
 800d47e:	bd70      	pop	{r4, r5, r6, pc}
        if( SX1276.Settings.Modem == MODEM_FSK )
 800d480:	7963      	ldrb	r3, [r4, #5]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d117      	bne.n	800d4b6 <SX1276OnTimeoutIrq+0x46>
            SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800d486:	8623      	strh	r3, [r4, #48]	; 0x30
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d488:	210b      	movs	r1, #11
 800d48a:	203e      	movs	r0, #62	; 0x3e
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d48c:	87a3      	strh	r3, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = 0;
 800d48e:	8763      	strh	r3, [r4, #58]	; 0x3a
            SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d490:	f7ff f8bd 	bl	800c60e <SX1276Write>
            SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800d494:	2110      	movs	r1, #16
 800d496:	203f      	movs	r0, #63	; 0x3f
 800d498:	f7ff f8b9 	bl	800c60e <SX1276Write>
            if( SX1276.Settings.Fsk.RxContinuous == true )
 800d49c:	1de3      	adds	r3, r4, #7
 800d49e:	7fdb      	ldrb	r3, [r3, #31]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d011      	beq.n	800d4c8 <SX1276OnTimeoutIrq+0x58>
                SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d4a4:	200d      	movs	r0, #13
 800d4a6:	f7ff f8fd 	bl	800c6a4 <SX1276Read>
 800d4aa:	2140      	movs	r1, #64	; 0x40
 800d4ac:	4301      	orrs	r1, r0
 800d4ae:	b2c9      	uxtb	r1, r1
 800d4b0:	200d      	movs	r0, #13
 800d4b2:	f7ff f8ac 	bl	800c60e <SX1276Write>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d4b6:	4b1a      	ldr	r3, [pc, #104]	; (800d520 <SX1276OnTimeoutIrq+0xb0>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d0df      	beq.n	800d47e <SX1276OnTimeoutIrq+0xe>
 800d4be:	68db      	ldr	r3, [r3, #12]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d0dc      	beq.n	800d47e <SX1276OnTimeoutIrq+0xe>
            RadioEvents->TxTimeout( );
 800d4c4:	4798      	blx	r3
}
 800d4c6:	e7da      	b.n	800d47e <SX1276OnTimeoutIrq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	3068      	adds	r0, #104	; 0x68
                SX1276.Settings.State = RF_IDLE;
 800d4cc:	7123      	strb	r3, [r4, #4]
                TimerStop( &RxTimeoutSyncWord );
 800d4ce:	f000 fe51 	bl	800e174 <UTIL_TIMER_Stop>
 800d4d2:	e7f0      	b.n	800d4b6 <SX1276OnTimeoutIrq+0x46>
    Sx_Board_Reset();
 800d4d4:	f7f5 ffca 	bl	800346c <CMWX1ZZABZ0XX_RADIO_Reset>
        RxChainCalibration( );
 800d4d8:	f7ff ff30 	bl	800d33c <RxChainCalibration>
        SX1276SetOpMode( RF_OPMODE_SLEEP );
 800d4dc:	f7ff fb0e 	bl	800cafc <SX1276SetOpMode.constprop.0>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d4e0:	4e10      	ldr	r6, [pc, #64]	; (800d524 <SX1276OnTimeoutIrq+0xb4>)
 800d4e2:	0035      	movs	r5, r6
 800d4e4:	363c      	adds	r6, #60	; 0x3c
 800d4e6:	350c      	adds	r5, #12
            SX1276SetModem( RadioRegsInit[i].Modem );
 800d4e8:	7828      	ldrb	r0, [r5, #0]
 800d4ea:	f7ff fb17 	bl	800cb1c <SX1276SetModem>
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d4ee:	78a9      	ldrb	r1, [r5, #2]
 800d4f0:	7868      	ldrb	r0, [r5, #1]
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d4f2:	3503      	adds	r5, #3
            SX1276Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800d4f4:	f7ff f88b 	bl	800c60e <SX1276Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 800d4f8:	42b5      	cmp	r5, r6
 800d4fa:	d1f5      	bne.n	800d4e8 <SX1276OnTimeoutIrq+0x78>
        SX1276SetModem( MODEM_FSK );
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	f7ff fb0d 	bl	800cb1c <SX1276SetModem>
        SX1276SetPublicNetwork( SX1276.Settings.LoRa.PublicNetwork );
 800d502:	0023      	movs	r3, r4
 800d504:	335c      	adds	r3, #92	; 0x5c
 800d506:	7818      	ldrb	r0, [r3, #0]
 800d508:	f7ff fb58 	bl	800cbbc <SX1276SetPublicNetwork>
        SX1276.Settings.State = RF_IDLE;
 800d50c:	2300      	movs	r3, #0
 800d50e:	7123      	strb	r3, [r4, #4]
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800d510:	4b03      	ldr	r3, [pc, #12]	; (800d520 <SX1276OnTimeoutIrq+0xb0>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d0b2      	beq.n	800d47e <SX1276OnTimeoutIrq+0xe>
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	e7d1      	b.n	800d4c0 <SX1276OnTimeoutIrq+0x50>
 800d51c:	20001070 	.word	0x20001070
 800d520:	200010f0 	.word	0x200010f0
 800d524:	0800f560 	.word	0x0800f560

0800d528 <SX1276OnDio0Irq>:
{
 800d528:	b573      	push	{r0, r1, r4, r5, r6, lr}
    volatile uint8_t irqFlags = 0;
 800d52a:	466b      	mov	r3, sp
 800d52c:	1dde      	adds	r6, r3, #7
 800d52e:	2300      	movs	r3, #0
    switch( SX1276.Settings.State )
 800d530:	4c8b      	ldr	r4, [pc, #556]	; (800d760 <SX1276OnDio0Irq+0x238>)
    volatile uint8_t irqFlags = 0;
 800d532:	7033      	strb	r3, [r6, #0]
    switch( SX1276.Settings.State )
 800d534:	7923      	ldrb	r3, [r4, #4]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d003      	beq.n	800d542 <SX1276OnDio0Irq+0x1a>
 800d53a:	2b02      	cmp	r3, #2
 800d53c:	d100      	bne.n	800d540 <SX1276OnDio0Irq+0x18>
 800d53e:	e0fa      	b.n	800d736 <SX1276OnDio0Irq+0x20e>
}
 800d540:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800d542:	7963      	ldrb	r3, [r4, #5]
 800d544:	2b00      	cmp	r3, #0
 800d546:	d023      	beq.n	800d590 <SX1276OnDio0Irq+0x68>
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d1f9      	bne.n	800d540 <SX1276OnDio0Irq+0x18>
                    SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 800d54c:	2140      	movs	r1, #64	; 0x40
 800d54e:	2012      	movs	r0, #18
 800d550:	f7ff f85d 	bl	800c60e <SX1276Write>
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d554:	2012      	movs	r0, #18
 800d556:	f7ff f8a5 	bl	800c6a4 <SX1276Read>
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d55a:	2120      	movs	r1, #32
                    irqFlags = SX1276Read( REG_LR_IRQFLAGS );
 800d55c:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 800d55e:	7833      	ldrb	r3, [r6, #0]
 800d560:	4d80      	ldr	r5, [pc, #512]	; (800d764 <SX1276OnDio0Irq+0x23c>)
 800d562:	420b      	tst	r3, r1
 800d564:	d100      	bne.n	800d568 <SX1276OnDio0Irq+0x40>
 800d566:	e08a      	b.n	800d67e <SX1276OnDio0Irq+0x156>
                        SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 800d568:	2012      	movs	r0, #18
 800d56a:	f7ff f850 	bl	800c60e <SX1276Write>
                        if( SX1276.Settings.LoRa.RxContinuous == false )
 800d56e:	0023      	movs	r3, r4
 800d570:	3356      	adds	r3, #86	; 0x56
 800d572:	781b      	ldrb	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d100      	bne.n	800d57a <SX1276OnDio0Irq+0x52>
                            SX1276.Settings.State = RF_IDLE;
 800d578:	7123      	strb	r3, [r4, #4]
                        TimerStop( &RxTimeoutTimer );
 800d57a:	1d28      	adds	r0, r5, #4
 800d57c:	f000 fdfa 	bl	800e174 <UTIL_TIMER_Stop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d580:	682b      	ldr	r3, [r5, #0]
 800d582:	2b00      	cmp	r3, #0
 800d584:	d0dc      	beq.n	800d540 <SX1276OnDio0Irq+0x18>
 800d586:	691b      	ldr	r3, [r3, #16]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d0d9      	beq.n	800d540 <SX1276OnDio0Irq+0x18>
                    RadioEvents->TxDone( );
 800d58c:	4798      	blx	r3
}
 800d58e:	e7d7      	b.n	800d540 <SX1276OnDio0Irq+0x18>
                if( SX1276.Settings.Fsk.CrcOn == true )
 800d590:	1d63      	adds	r3, r4, #5
 800d592:	7fdb      	ldrb	r3, [r3, #31]
 800d594:	4d73      	ldr	r5, [pc, #460]	; (800d764 <SX1276OnDio0Irq+0x23c>)
 800d596:	2b00      	cmp	r3, #0
 800d598:	d030      	beq.n	800d5fc <SX1276OnDio0Irq+0xd4>
                    irqFlags = SX1276Read( REG_IRQFLAGS2 );
 800d59a:	203f      	movs	r0, #63	; 0x3f
 800d59c:	f7ff f882 	bl	800c6a4 <SX1276Read>
 800d5a0:	7030      	strb	r0, [r6, #0]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 800d5a2:	7833      	ldrb	r3, [r6, #0]
 800d5a4:	079b      	lsls	r3, r3, #30
 800d5a6:	d429      	bmi.n	800d5fc <SX1276OnDio0Irq+0xd4>
                        SX1276Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 800d5a8:	210b      	movs	r1, #11
 800d5aa:	203e      	movs	r0, #62	; 0x3e
 800d5ac:	f7ff f82f 	bl	800c60e <SX1276Write>
                        SX1276Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 800d5b0:	2110      	movs	r1, #16
 800d5b2:	203f      	movs	r0, #63	; 0x3f
 800d5b4:	f7ff f82b 	bl	800c60e <SX1276Write>
                        TimerStop( &RxTimeoutTimer );
 800d5b8:	1d28      	adds	r0, r5, #4
 800d5ba:	f000 fddb 	bl	800e174 <UTIL_TIMER_Stop>
                        if( SX1276.Settings.Fsk.RxContinuous == false )
 800d5be:	1de3      	adds	r3, r4, #7
 800d5c0:	7fde      	ldrb	r6, [r3, #31]
 800d5c2:	2e00      	cmp	r6, #0
 800d5c4:	d110      	bne.n	800d5e8 <SX1276OnDio0Irq+0xc0>
                            TimerStop( &RxTimeoutSyncWord );
 800d5c6:	0020      	movs	r0, r4
 800d5c8:	3068      	adds	r0, #104	; 0x68
 800d5ca:	f000 fdd3 	bl	800e174 <UTIL_TIMER_Stop>
                            SX1276.Settings.State = RF_IDLE;
 800d5ce:	7126      	strb	r6, [r4, #4]
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 800d5d0:	682b      	ldr	r3, [r5, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d003      	beq.n	800d5de <SX1276OnDio0Irq+0xb6>
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d000      	beq.n	800d5de <SX1276OnDio0Irq+0xb6>
                            RadioEvents->RxError( );
 800d5dc:	4798      	blx	r3
                        SX1276.Settings.FskPacketHandler.PreambleDetected = false;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	8623      	strh	r3, [r4, #48]	; 0x30
                        SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d5e2:	87a3      	strh	r3, [r4, #60]	; 0x3c
                        SX1276.Settings.FskPacketHandler.Size = 0;
 800d5e4:	8763      	strh	r3, [r4, #58]	; 0x3a
                        break;
 800d5e6:	e7ab      	b.n	800d540 <SX1276OnDio0Irq+0x18>
                            SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d5e8:	200d      	movs	r0, #13
 800d5ea:	f7ff f85b 	bl	800c6a4 <SX1276Read>
 800d5ee:	2140      	movs	r1, #64	; 0x40
 800d5f0:	4301      	orrs	r1, r0
 800d5f2:	b2c9      	uxtb	r1, r1
 800d5f4:	200d      	movs	r0, #13
 800d5f6:	f7ff f80a 	bl	800c60e <SX1276Write>
 800d5fa:	e7e9      	b.n	800d5d0 <SX1276OnDio0Irq+0xa8>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800d5fc:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 800d5fe:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800d600:	0013      	movs	r3, r2
 800d602:	4e59      	ldr	r6, [pc, #356]	; (800d768 <SX1276OnDio0Irq+0x240>)
 800d604:	430b      	orrs	r3, r1
 800d606:	d10a      	bne.n	800d61e <SX1276OnDio0Irq+0xf6>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800d608:	1ce3      	adds	r3, r4, #3
 800d60a:	7fd8      	ldrb	r0, [r3, #31]
 800d60c:	2800      	cmp	r0, #0
 800d60e:	d127      	bne.n	800d660 <SX1276OnDio0Irq+0x138>
    SX1276ReadBuffer( 0, buffer, size );
 800d610:	0021      	movs	r1, r4
 800d612:	2201      	movs	r2, #1
 800d614:	313a      	adds	r1, #58	; 0x3a
 800d616:	f7ff f82d 	bl	800c674 <SX1276ReadBuffer>
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d61a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
 800d61c:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d61e:	1a52      	subs	r2, r2, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d620:	2000      	movs	r0, #0
 800d622:	b2d2      	uxtb	r2, r2
                    SX1276ReadFifo( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes, SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d624:	1871      	adds	r1, r6, r1
    SX1276ReadBuffer( 0, buffer, size );
 800d626:	f7ff f825 	bl	800c674 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d62a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                TimerStop( &RxTimeoutTimer );
 800d62c:	1d28      	adds	r0, r5, #4
                    SX1276.Settings.FskPacketHandler.NbBytes += ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes );
 800d62e:	87a3      	strh	r3, [r4, #60]	; 0x3c
                TimerStop( &RxTimeoutTimer );
 800d630:	f000 fda0 	bl	800e174 <UTIL_TIMER_Stop>
                if( SX1276.Settings.Fsk.RxContinuous == false )
 800d634:	1de3      	adds	r3, r4, #7
 800d636:	7fdb      	ldrb	r3, [r3, #31]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d116      	bne.n	800d66a <SX1276OnDio0Irq+0x142>
                    TimerStop( &RxTimeoutSyncWord );
 800d63c:	0020      	movs	r0, r4
 800d63e:	3068      	adds	r0, #104	; 0x68
                    SX1276.Settings.State = RF_IDLE;
 800d640:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutSyncWord );
 800d642:	f000 fd97 	bl	800e174 <UTIL_TIMER_Stop>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d646:	682b      	ldr	r3, [r5, #0]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d0c8      	beq.n	800d5de <SX1276OnDio0Irq+0xb6>
 800d64c:	689d      	ldr	r5, [r3, #8]
 800d64e:	2d00      	cmp	r5, #0
 800d650:	d0c5      	beq.n	800d5de <SX1276OnDio0Irq+0xb6>
                    RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.FskPacketHandler.Size, SX1276.Settings.FskPacketHandler.RssiValue, 0 );
 800d652:	2232      	movs	r2, #50	; 0x32
 800d654:	2300      	movs	r3, #0
 800d656:	0030      	movs	r0, r6
 800d658:	56a2      	ldrsb	r2, [r4, r2]
 800d65a:	8f61      	ldrh	r1, [r4, #58]	; 0x3a
 800d65c:	47a8      	blx	r5
 800d65e:	e7be      	b.n	800d5de <SX1276OnDio0Irq+0xb6>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800d660:	2032      	movs	r0, #50	; 0x32
 800d662:	f7ff f81f 	bl	800c6a4 <SX1276Read>
 800d666:	8760      	strh	r0, [r4, #58]	; 0x3a
 800d668:	e7d7      	b.n	800d61a <SX1276OnDio0Irq+0xf2>
                    SX1276Write( REG_RXCONFIG, SX1276Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 800d66a:	200d      	movs	r0, #13
 800d66c:	f7ff f81a 	bl	800c6a4 <SX1276Read>
 800d670:	2140      	movs	r1, #64	; 0x40
 800d672:	4301      	orrs	r1, r0
 800d674:	b2c9      	uxtb	r1, r1
 800d676:	200d      	movs	r0, #13
 800d678:	f7fe ffc9 	bl	800c60e <SX1276Write>
 800d67c:	e7e3      	b.n	800d646 <SX1276OnDio0Irq+0x11e>
                    SX1276.Settings.LoRaPacketHandler.SnrValue = ( ( ( int8_t )SX1276Read( REG_LR_PKTSNRVALUE ) ) + 2 ) >> 2;
 800d67e:	2019      	movs	r0, #25
 800d680:	f7ff f810 	bl	800c6a4 <SX1276Read>
 800d684:	0026      	movs	r6, r4
 800d686:	b240      	sxtb	r0, r0
 800d688:	3002      	adds	r0, #2
 800d68a:	1080      	asrs	r0, r0, #2
 800d68c:	3660      	adds	r6, #96	; 0x60
 800d68e:	7030      	strb	r0, [r6, #0]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d690:	201a      	movs	r0, #26
 800d692:	f7ff f807 	bl	800c6a4 <SX1276Read>
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d696:	2200      	movs	r2, #0
 800d698:	56b2      	ldrsb	r2, [r6, r2]
                    int16_t rssi = SX1276Read( REG_LR_PKTRSSIVALUE );
 800d69a:	b203      	sxth	r3, r0
                    if( SX1276.Settings.LoRaPacketHandler.SnrValue < 0 )
 800d69c:	4933      	ldr	r1, [pc, #204]	; (800d76c <SX1276OnDio0Irq+0x244>)
 800d69e:	111b      	asrs	r3, r3, #4
 800d6a0:	b280      	uxth	r0, r0
 800d6a2:	2a00      	cmp	r2, #0
 800d6a4:	da3e      	bge.n	800d724 <SX1276OnDio0Irq+0x1fc>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d6a6:	68a6      	ldr	r6, [r4, #8]
                                                                          SX1276.Settings.LoRaPacketHandler.SnrValue;
 800d6a8:	b292      	uxth	r2, r2
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d6aa:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d6ac:	428e      	cmp	r6, r1
 800d6ae:	d937      	bls.n	800d720 <SX1276OnDio0Irq+0x1f8>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d6b0:	3a9d      	subs	r2, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d6b2:	1882      	adds	r2, r0, r2
 800d6b4:	189b      	adds	r3, r3, r2
 800d6b6:	0022      	movs	r2, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d6b8:	b21b      	sxth	r3, r3
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d6ba:	3262      	adds	r2, #98	; 0x62
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800d6bc:	2013      	movs	r0, #19
 800d6be:	0026      	movs	r6, r4
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d6c0:	8013      	strh	r3, [r2, #0]
                    SX1276.Settings.LoRaPacketHandler.Size = SX1276Read( REG_LR_RXNBBYTES );
 800d6c2:	f7fe ffef 	bl	800c6a4 <SX1276Read>
 800d6c6:	3664      	adds	r6, #100	; 0x64
 800d6c8:	7030      	strb	r0, [r6, #0]
                    SX1276Write( REG_LR_FIFOADDRPTR, SX1276Read( REG_LR_FIFORXCURRENTADDR ) );
 800d6ca:	2010      	movs	r0, #16
 800d6cc:	f7fe ffea 	bl	800c6a4 <SX1276Read>
 800d6d0:	0001      	movs	r1, r0
 800d6d2:	200d      	movs	r0, #13
 800d6d4:	f7fe ff9b 	bl	800c60e <SX1276Write>
    SX1276ReadBuffer( 0, buffer, size );
 800d6d8:	7832      	ldrb	r2, [r6, #0]
 800d6da:	4e23      	ldr	r6, [pc, #140]	; (800d768 <SX1276OnDio0Irq+0x240>)
 800d6dc:	2000      	movs	r0, #0
 800d6de:	0031      	movs	r1, r6
 800d6e0:	f7fe ffc8 	bl	800c674 <SX1276ReadBuffer>
                    if( SX1276.Settings.LoRa.RxContinuous == false )
 800d6e4:	0023      	movs	r3, r4
 800d6e6:	3356      	adds	r3, #86	; 0x56
 800d6e8:	781b      	ldrb	r3, [r3, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d100      	bne.n	800d6f0 <SX1276OnDio0Irq+0x1c8>
                        SX1276.Settings.State = RF_IDLE;
 800d6ee:	7123      	strb	r3, [r4, #4]
                    TimerStop( &RxTimeoutTimer );
 800d6f0:	1d28      	adds	r0, r5, #4
 800d6f2:	f000 fd3f 	bl	800e174 <UTIL_TIMER_Stop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800d6f6:	682b      	ldr	r3, [r5, #0]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d100      	bne.n	800d6fe <SX1276OnDio0Irq+0x1d6>
 800d6fc:	e720      	b.n	800d540 <SX1276OnDio0Irq+0x18>
 800d6fe:	689d      	ldr	r5, [r3, #8]
 800d700:	2d00      	cmp	r5, #0
 800d702:	d100      	bne.n	800d706 <SX1276OnDio0Irq+0x1de>
 800d704:	e71c      	b.n	800d540 <SX1276OnDio0Irq+0x18>
                        RadioEvents->RxDone( RxTxBuffer, SX1276.Settings.LoRaPacketHandler.Size, SX1276.Settings.LoRaPacketHandler.RssiValue, SX1276.Settings.LoRaPacketHandler.SnrValue );
 800d706:	0023      	movs	r3, r4
 800d708:	0022      	movs	r2, r4
 800d70a:	3360      	adds	r3, #96	; 0x60
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	3464      	adds	r4, #100	; 0x64
 800d710:	3262      	adds	r2, #98	; 0x62
 800d712:	2100      	movs	r1, #0
 800d714:	5e52      	ldrsh	r2, [r2, r1]
 800d716:	0030      	movs	r0, r6
 800d718:	7821      	ldrb	r1, [r4, #0]
 800d71a:	b25b      	sxtb	r3, r3
 800d71c:	47a8      	blx	r5
 800d71e:	e70f      	b.n	800d540 <SX1276OnDio0Irq+0x18>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 ) +
 800d720:	3aa4      	subs	r2, #164	; 0xa4
 800d722:	e7c6      	b.n	800d6b2 <SX1276OnDio0Irq+0x18a>
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d724:	68a2      	ldr	r2, [r4, #8]
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 ) +
 800d726:	b29b      	uxth	r3, r3
                        if( SX1276.Settings.Channel > RF_MID_BAND_THRESH )
 800d728:	428a      	cmp	r2, r1
 800d72a:	d902      	bls.n	800d732 <SX1276OnDio0Irq+0x20a>
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_HF + rssi + ( rssi >> 4 );
 800d72c:	389d      	subs	r0, #157	; 0x9d
                            SX1276.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET_LF + rssi + ( rssi >> 4 );
 800d72e:	181b      	adds	r3, r3, r0
 800d730:	e7c1      	b.n	800d6b6 <SX1276OnDio0Irq+0x18e>
 800d732:	38a4      	subs	r0, #164	; 0xa4
 800d734:	e7fb      	b.n	800d72e <SX1276OnDio0Irq+0x206>
            TimerStop( &TxTimeoutTimer );
 800d736:	4d0b      	ldr	r5, [pc, #44]	; (800d764 <SX1276OnDio0Irq+0x23c>)
 800d738:	0028      	movs	r0, r5
 800d73a:	301c      	adds	r0, #28
 800d73c:	f000 fd1a 	bl	800e174 <UTIL_TIMER_Stop>
            switch( SX1276.Settings.Modem )
 800d740:	7963      	ldrb	r3, [r4, #5]
 800d742:	2b01      	cmp	r3, #1
 800d744:	d103      	bne.n	800d74e <SX1276OnDio0Irq+0x226>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 800d746:	2108      	movs	r1, #8
 800d748:	2012      	movs	r0, #18
 800d74a:	f7fe ff60 	bl	800c60e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d74e:	2300      	movs	r3, #0
 800d750:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 800d752:	682b      	ldr	r3, [r5, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d100      	bne.n	800d75a <SX1276OnDio0Irq+0x232>
 800d758:	e6f2      	b.n	800d540 <SX1276OnDio0Irq+0x18>
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	e714      	b.n	800d588 <SX1276OnDio0Irq+0x60>
 800d75e:	46c0      	nop			; (mov r8, r8)
 800d760:	20001070 	.word	0x20001070
 800d764:	200010f0 	.word	0x200010f0
 800d768:	20001124 	.word	0x20001124
 800d76c:	1f4add40 	.word	0x1f4add40

0800d770 <SX1276Send>:
{
 800d770:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d772:	466b      	mov	r3, sp
    switch( SX1276.Settings.Modem )
 800d774:	4c5f      	ldr	r4, [pc, #380]	; (800d8f4 <SX1276Send+0x184>)
{
 800d776:	71d9      	strb	r1, [r3, #7]
    switch( SX1276.Settings.Modem )
 800d778:	7965      	ldrb	r5, [r4, #5]
{
 800d77a:	1ddf      	adds	r7, r3, #7
 800d77c:	0006      	movs	r6, r0
    switch( SX1276.Settings.Modem )
 800d77e:	2d00      	cmp	r5, #0
 800d780:	d01c      	beq.n	800d7bc <SX1276Send+0x4c>
 800d782:	2d01      	cmp	r5, #1
 800d784:	d040      	beq.n	800d808 <SX1276Send+0x98>
 800d786:	2600      	movs	r6, #0
    TimerStop( &RxTimeoutTimer );
 800d788:	4d5b      	ldr	r5, [pc, #364]	; (800d8f8 <SX1276Send+0x188>)
 800d78a:	1d28      	adds	r0, r5, #4
 800d78c:	f000 fcf2 	bl	800e174 <UTIL_TIMER_Stop>
    TimerSetValue( &TxTimeoutTimer, timeout );
 800d790:	0028      	movs	r0, r5
 800d792:	0031      	movs	r1, r6
 800d794:	301c      	adds	r0, #28
 800d796:	f000 fd7f 	bl	800e298 <UTIL_TIMER_SetPeriod>
    switch( SX1276.Settings.Modem )
 800d79a:	7963      	ldrb	r3, [r4, #5]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d100      	bne.n	800d7a2 <SX1276Send+0x32>
 800d7a0:	e071      	b.n	800d886 <SX1276Send+0x116>
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d100      	bne.n	800d7a8 <SX1276Send+0x38>
 800d7a6:	e087      	b.n	800d8b8 <SX1276Send+0x148>
    TimerStart( &TxTimeoutTimer );
 800d7a8:	0028      	movs	r0, r5
    SX1276.Settings.State = RF_TX_RUNNING;
 800d7aa:	2302      	movs	r3, #2
    TimerStart( &TxTimeoutTimer );
 800d7ac:	301c      	adds	r0, #28
    SX1276.Settings.State = RF_TX_RUNNING;
 800d7ae:	7123      	strb	r3, [r4, #4]
    TimerStart( &TxTimeoutTimer );
 800d7b0:	f000 fd34 	bl	800e21c <UTIL_TIMER_Start>
    if( opMode == RF_OPMODE_SLEEP )
 800d7b4:	2003      	movs	r0, #3
 800d7b6:	f7ff f817 	bl	800c7e8 <SX1276SetOpMode.part.0>
}
 800d7ba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
            SX1276.Settings.FskPacketHandler.Size = size;
 800d7bc:	7839      	ldrb	r1, [r7, #0]
            SX1276.Settings.FskPacketHandler.NbBytes = 0;
 800d7be:	87a5      	strh	r5, [r4, #60]	; 0x3c
            SX1276.Settings.FskPacketHandler.Size = size;
 800d7c0:	8761      	strh	r1, [r4, #58]	; 0x3a
            if( SX1276.Settings.Fsk.FixLen == false )
 800d7c2:	1ce3      	adds	r3, r4, #3
 800d7c4:	7fd8      	ldrb	r0, [r3, #31]
 800d7c6:	2800      	cmp	r0, #0
 800d7c8:	d11a      	bne.n	800d800 <SX1276Send+0x90>
    SX1276WriteBuffer( 0, buffer, size );
 800d7ca:	2201      	movs	r2, #1
 800d7cc:	0039      	movs	r1, r7
 800d7ce:	f7fe ff06 	bl	800c5de <SX1276WriteBuffer>
            if( ( size > 0 ) && ( size <= 64 ) )
 800d7d2:	783a      	ldrb	r2, [r7, #0]
 800d7d4:	1e53      	subs	r3, r2, #1
 800d7d6:	2b3f      	cmp	r3, #63	; 0x3f
 800d7d8:	d905      	bls.n	800d7e6 <SX1276Send+0x76>
                RADIO_MEMCPY8( RxTxBuffer, buffer, size );
 800d7da:	b292      	uxth	r2, r2
 800d7dc:	0031      	movs	r1, r6
 800d7de:	4847      	ldr	r0, [pc, #284]	; (800d8fc <SX1276Send+0x18c>)
 800d7e0:	f000 fad2 	bl	800dd88 <UTIL_MEM_cpy_8>
 800d7e4:	2220      	movs	r2, #32
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d7e6:	0025      	movs	r5, r4
    SX1276WriteBuffer( 0, buffer, size );
 800d7e8:	0031      	movs	r1, r6
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d7ea:	353f      	adds	r5, #63	; 0x3f
    SX1276WriteBuffer( 0, buffer, size );
 800d7ec:	2000      	movs	r0, #0
                SX1276.Settings.FskPacketHandler.ChunkSize = size;
 800d7ee:	702a      	strb	r2, [r5, #0]
    SX1276WriteBuffer( 0, buffer, size );
 800d7f0:	f7fe fef5 	bl	800c5de <SX1276WriteBuffer>
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d7f4:	782b      	ldrb	r3, [r5, #0]
 800d7f6:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
            txTimeout = SX1276.Settings.Fsk.TxTimeout;
 800d7f8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
            SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d7fa:	189b      	adds	r3, r3, r2
 800d7fc:	87a3      	strh	r3, [r4, #60]	; 0x3c
        break;
 800d7fe:	e7c3      	b.n	800d788 <SX1276Send+0x18>
                SX1276Write( REG_PAYLOADLENGTH, size );
 800d800:	2032      	movs	r0, #50	; 0x32
 800d802:	f7fe ff04 	bl	800c60e <SX1276Write>
 800d806:	e7e4      	b.n	800d7d2 <SX1276Send+0x62>
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d808:	0023      	movs	r3, r4
 800d80a:	3355      	adds	r3, #85	; 0x55
 800d80c:	781b      	ldrb	r3, [r3, #0]
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d80e:	2033      	movs	r0, #51	; 0x33
            if( SX1276.Settings.LoRa.IqInverted == true )
 800d810:	2b00      	cmp	r3, #0
 800d812:	d02d      	beq.n	800d870 <SX1276Send+0x100>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800d814:	f7fe ff46 	bl	800c6a4 <SX1276Read>
 800d818:	2341      	movs	r3, #65	; 0x41
 800d81a:	4398      	bics	r0, r3
 800d81c:	b2c1      	uxtb	r1, r0
 800d81e:	2033      	movs	r0, #51	; 0x33
 800d820:	f7fe fef5 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 800d824:	2119      	movs	r1, #25
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d826:	203b      	movs	r0, #59	; 0x3b
 800d828:	f7fe fef1 	bl	800c60e <SX1276Write>
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d82c:	0023      	movs	r3, r4
 800d82e:	783d      	ldrb	r5, [r7, #0]
 800d830:	3364      	adds	r3, #100	; 0x64
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d832:	0029      	movs	r1, r5
 800d834:	2022      	movs	r0, #34	; 0x22
            SX1276.Settings.LoRaPacketHandler.Size = size;
 800d836:	701d      	strb	r5, [r3, #0]
            SX1276Write( REG_LR_PAYLOADLENGTH, size );
 800d838:	f7fe fee9 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_FIFOTXBASEADDR, 0 );
 800d83c:	2100      	movs	r1, #0
 800d83e:	200e      	movs	r0, #14
 800d840:	f7fe fee5 	bl	800c60e <SX1276Write>
            SX1276Write( REG_LR_FIFOADDRPTR, 0 );
 800d844:	2100      	movs	r1, #0
 800d846:	200d      	movs	r0, #13
 800d848:	f7fe fee1 	bl	800c60e <SX1276Write>
            if( ( SX1276Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 800d84c:	2001      	movs	r0, #1
 800d84e:	f7fe ff29 	bl	800c6a4 <SX1276Read>
 800d852:	23f8      	movs	r3, #248	; 0xf8
 800d854:	4398      	bics	r0, r3
 800d856:	d104      	bne.n	800d862 <SX1276Send+0xf2>
                SX1276SetStby( );
 800d858:	f7fe fff2 	bl	800c840 <SX1276SetStby>
                RADIO_DELAY_MS( 1 );
 800d85c:	2001      	movs	r0, #1
 800d85e:	f7f5 f99b 	bl	8002b98 <HAL_Delay>
    SX1276WriteBuffer( 0, buffer, size );
 800d862:	0031      	movs	r1, r6
 800d864:	002a      	movs	r2, r5
 800d866:	2000      	movs	r0, #0
 800d868:	f7fe feb9 	bl	800c5de <SX1276WriteBuffer>
            txTimeout = SX1276.Settings.LoRa.TxTimeout;
 800d86c:	6da6      	ldr	r6, [r4, #88]	; 0x58
        break;
 800d86e:	e78b      	b.n	800d788 <SX1276Send+0x18>
                SX1276Write( REG_LR_INVERTIQ, ( ( SX1276Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800d870:	f7fe ff18 	bl	800c6a4 <SX1276Read>
 800d874:	2341      	movs	r3, #65	; 0x41
 800d876:	4398      	bics	r0, r3
 800d878:	4305      	orrs	r5, r0
 800d87a:	b2e9      	uxtb	r1, r5
 800d87c:	2033      	movs	r0, #51	; 0x33
 800d87e:	f7fe fec6 	bl	800c60e <SX1276Write>
                SX1276Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800d882:	211d      	movs	r1, #29
 800d884:	e7cf      	b.n	800d826 <SX1276Send+0xb6>
            SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 800d886:	2040      	movs	r0, #64	; 0x40
 800d888:	f7fe ff0c 	bl	800c6a4 <SX1276Read>
 800d88c:	2103      	movs	r1, #3
 800d88e:	4001      	ands	r1, r0
 800d890:	2040      	movs	r0, #64	; 0x40
 800d892:	f7fe febc 	bl	800c60e <SX1276Write>
            SX1276Write( REG_DIOMAPPING2, ( SX1276Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 800d896:	2041      	movs	r0, #65	; 0x41
 800d898:	f7fe ff04 	bl	800c6a4 <SX1276Read>
 800d89c:	213e      	movs	r1, #62	; 0x3e
 800d89e:	4001      	ands	r1, r0
 800d8a0:	2041      	movs	r0, #65	; 0x41
 800d8a2:	f7fe feb4 	bl	800c60e <SX1276Write>
            SX1276.Settings.FskPacketHandler.FifoThresh = SX1276Read( REG_FIFOTHRESH ) & 0x3F;
 800d8a6:	2035      	movs	r0, #53	; 0x35
 800d8a8:	f7fe fefc 	bl	800c6a4 <SX1276Read>
 800d8ac:	233f      	movs	r3, #63	; 0x3f
 800d8ae:	4018      	ands	r0, r3
 800d8b0:	0023      	movs	r3, r4
 800d8b2:	333e      	adds	r3, #62	; 0x3e
 800d8b4:	7018      	strb	r0, [r3, #0]
        break;
 800d8b6:	e777      	b.n	800d7a8 <SX1276Send+0x38>
            if( SX1276.Settings.LoRa.FreqHopOn == true )
 800d8b8:	0023      	movs	r3, r4
 800d8ba:	3353      	adds	r3, #83	; 0x53
 800d8bc:	781b      	ldrb	r3, [r3, #0]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d00e      	beq.n	800d8e0 <SX1276Send+0x170>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d8c2:	21f5      	movs	r1, #245	; 0xf5
 800d8c4:	2011      	movs	r0, #17
 800d8c6:	f7fe fea2 	bl	800c60e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 800d8ca:	2040      	movs	r0, #64	; 0x40
 800d8cc:	f7fe feea 	bl	800c6a4 <SX1276Read>
 800d8d0:	2333      	movs	r3, #51	; 0x33
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d8d2:	0001      	movs	r1, r0
 800d8d4:	2040      	movs	r0, #64	; 0x40
 800d8d6:	4019      	ands	r1, r3
 800d8d8:	4301      	orrs	r1, r0
 800d8da:	f7fe fe98 	bl	800c60e <SX1276Write>
 800d8de:	e763      	b.n	800d7a8 <SX1276Send+0x38>
                SX1276Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 800d8e0:	21f7      	movs	r1, #247	; 0xf7
 800d8e2:	2011      	movs	r0, #17
 800d8e4:	f7fe fe93 	bl	800c60e <SX1276Write>
                SX1276Write( REG_DIOMAPPING1, ( SX1276Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 800d8e8:	2040      	movs	r0, #64	; 0x40
 800d8ea:	f7fe fedb 	bl	800c6a4 <SX1276Read>
 800d8ee:	233f      	movs	r3, #63	; 0x3f
 800d8f0:	e7ef      	b.n	800d8d2 <SX1276Send+0x162>
 800d8f2:	46c0      	nop			; (mov r8, r8)
 800d8f4:	20001070 	.word	0x20001070
 800d8f8:	200010f0 	.word	0x200010f0
 800d8fc:	20001124 	.word	0x20001124

0800d900 <SX1276OnDio1Irq>:
{
 800d900:	b570      	push	{r4, r5, r6, lr}
    switch( SX1276.Settings.State )
 800d902:	4c39      	ldr	r4, [pc, #228]	; (800d9e8 <SX1276OnDio1Irq+0xe8>)
 800d904:	7925      	ldrb	r5, [r4, #4]
 800d906:	2d01      	cmp	r5, #1
 800d908:	d002      	beq.n	800d910 <SX1276OnDio1Irq+0x10>
 800d90a:	2d02      	cmp	r5, #2
 800d90c:	d050      	beq.n	800d9b0 <SX1276OnDio1Irq+0xb0>
}
 800d90e:	bd70      	pop	{r4, r5, r6, pc}
            switch( SX1276.Settings.Modem )
 800d910:	7963      	ldrb	r3, [r4, #5]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d017      	beq.n	800d946 <SX1276OnDio1Irq+0x46>
 800d916:	2b01      	cmp	r3, #1
 800d918:	d1f9      	bne.n	800d90e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d91a:	f7f5 fded 	bl	80034f8 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d91e:	2800      	cmp	r0, #0
 800d920:	d0f5      	beq.n	800d90e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutTimer );
 800d922:	4d32      	ldr	r5, [pc, #200]	; (800d9ec <SX1276OnDio1Irq+0xec>)
 800d924:	1d28      	adds	r0, r5, #4
 800d926:	f000 fc25 	bl	800e174 <UTIL_TIMER_Stop>
                SX1276Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 800d92a:	2180      	movs	r1, #128	; 0x80
 800d92c:	2012      	movs	r0, #18
 800d92e:	f7fe fe6e 	bl	800c60e <SX1276Write>
                SX1276.Settings.State = RF_IDLE;
 800d932:	2300      	movs	r3, #0
 800d934:	7123      	strb	r3, [r4, #4]
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800d936:	682b      	ldr	r3, [r5, #0]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d0e8      	beq.n	800d90e <SX1276OnDio1Irq+0xe>
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d0e5      	beq.n	800d90e <SX1276OnDio1Irq+0xe>
                    RadioEvents->RxTimeout( );
 800d942:	4798      	blx	r3
 800d944:	e7e3      	b.n	800d90e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 0 )
 800d946:	f7f5 fdd7 	bl	80034f8 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d0df      	beq.n	800d90e <SX1276OnDio1Irq+0xe>
                TimerStop( &RxTimeoutSyncWord );
 800d94e:	0020      	movs	r0, r4
 800d950:	3068      	adds	r0, #104	; 0x68
 800d952:	f000 fc0f 	bl	800e174 <UTIL_TIMER_Stop>
                if( ( SX1276.Settings.FskPacketHandler.Size == 0 ) && ( SX1276.Settings.FskPacketHandler.NbBytes == 0 ) )
 800d956:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d958:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d95a:	4313      	orrs	r3, r2
 800d95c:	d108      	bne.n	800d970 <SX1276OnDio1Irq+0x70>
                    if( SX1276.Settings.Fsk.FixLen == false )
 800d95e:	1ce3      	adds	r3, r4, #3
 800d960:	7fd8      	ldrb	r0, [r3, #31]
 800d962:	2800      	cmp	r0, #0
 800d964:	d119      	bne.n	800d99a <SX1276OnDio1Irq+0x9a>
    SX1276ReadBuffer( 0, buffer, size );
 800d966:	0021      	movs	r1, r4
 800d968:	002a      	movs	r2, r5
 800d96a:	313a      	adds	r1, #58	; 0x3a
 800d96c:	f7fe fe82 	bl	800c674 <SX1276ReadBuffer>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d970:	0025      	movs	r5, r4
 800d972:	353e      	adds	r5, #62	; 0x3e
 800d974:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800d976:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d978:	491d      	ldr	r1, [pc, #116]	; (800d9f0 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d97a:	782a      	ldrb	r2, [r5, #0]
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d97c:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) >= SX1276.Settings.FskPacketHandler.FifoThresh )
 800d97e:	1a1b      	subs	r3, r3, r0
 800d980:	4293      	cmp	r3, r2
 800d982:	db0f      	blt.n	800d9a4 <SX1276OnDio1Irq+0xa4>
                    SX1276ReadFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.FifoThresh - 1 );
 800d984:	3a01      	subs	r2, #1
    SX1276ReadBuffer( 0, buffer, size );
 800d986:	b2d2      	uxtb	r2, r2
 800d988:	2000      	movs	r0, #0
 800d98a:	f7fe fe73 	bl	800c674 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.FifoThresh - 1;
 800d98e:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d990:	782b      	ldrb	r3, [r5, #0]
 800d992:	3a01      	subs	r2, #1
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d994:	189b      	adds	r3, r3, r2
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800d996:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 800d998:	e7b9      	b.n	800d90e <SX1276OnDio1Irq+0xe>
                        SX1276.Settings.FskPacketHandler.Size = SX1276Read( REG_PAYLOADLENGTH );
 800d99a:	2032      	movs	r0, #50	; 0x32
 800d99c:	f7fe fe82 	bl	800c6a4 <SX1276Read>
 800d9a0:	8760      	strh	r0, [r4, #58]	; 0x3a
 800d9a2:	e7e5      	b.n	800d970 <SX1276OnDio1Irq+0x70>
    SX1276ReadBuffer( 0, buffer, size );
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	b2da      	uxtb	r2, r3
 800d9a8:	f7fe fe64 	bl	800c674 <SX1276ReadBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes;
 800d9ac:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 800d9ae:	e7f2      	b.n	800d996 <SX1276OnDio1Irq+0x96>
            switch( SX1276.Settings.Modem )
 800d9b0:	7965      	ldrb	r5, [r4, #5]
 800d9b2:	2d00      	cmp	r5, #0
 800d9b4:	d1ab      	bne.n	800d90e <SX1276OnDio1Irq+0xe>
                if( Sx_Board_GetDio1PinState( ) == 1 )
 800d9b6:	f7f5 fd9f 	bl	80034f8 <CMWX1ZZABZ0XX_RADIO_GetDio1PinState>
 800d9ba:	2801      	cmp	r0, #1
 800d9bc:	d0a7      	beq.n	800d90e <SX1276OnDio1Irq+0xe>
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d9be:	0026      	movs	r6, r4
 800d9c0:	363f      	adds	r6, #63	; 0x3f
 800d9c2:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
 800d9c4:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800d9c6:	490a      	ldr	r1, [pc, #40]	; (800d9f0 <SX1276OnDio1Irq+0xf0>)
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d9c8:	7832      	ldrb	r2, [r6, #0]
                    SX1276WriteFifo( ( RxTxBuffer + SX1276.Settings.FskPacketHandler.NbBytes ), SX1276.Settings.FskPacketHandler.ChunkSize );
 800d9ca:	1841      	adds	r1, r0, r1
                if( ( SX1276.Settings.FskPacketHandler.Size - SX1276.Settings.FskPacketHandler.NbBytes ) > SX1276.Settings.FskPacketHandler.ChunkSize )
 800d9cc:	1a1b      	subs	r3, r3, r0
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	dd05      	ble.n	800d9de <SX1276OnDio1Irq+0xde>
    SX1276WriteBuffer( 0, buffer, size );
 800d9d2:	0028      	movs	r0, r5
 800d9d4:	f7fe fe03 	bl	800c5de <SX1276WriteBuffer>
                    SX1276.Settings.FskPacketHandler.NbBytes += SX1276.Settings.FskPacketHandler.ChunkSize;
 800d9d8:	7833      	ldrb	r3, [r6, #0]
 800d9da:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
 800d9dc:	e7da      	b.n	800d994 <SX1276OnDio1Irq+0x94>
    SX1276WriteBuffer( 0, buffer, size );
 800d9de:	0028      	movs	r0, r5
 800d9e0:	b2da      	uxtb	r2, r3
 800d9e2:	f7fe fdfc 	bl	800c5de <SX1276WriteBuffer>
 800d9e6:	e7e1      	b.n	800d9ac <SX1276OnDio1Irq+0xac>
 800d9e8:	20001070 	.word	0x20001070
 800d9ec:	200010f0 	.word	0x200010f0
 800d9f0:	20001124 	.word	0x20001124

0800d9f4 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800d9f4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d9f6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800d9fa:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800d9fc:	4b16      	ldr	r3, [pc, #88]	; (800da58 <TRACE_AllocateBufer+0x64>)
 800d9fe:	8a5d      	ldrh	r5, [r3, #18]
 800da00:	8a1a      	ldrh	r2, [r3, #16]
 800da02:	4295      	cmp	r5, r2
 800da04:	d114      	bne.n	800da30 <TRACE_AllocateBufer+0x3c>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800da06:	2280      	movs	r2, #128	; 0x80
 800da08:	00d2      	lsls	r2, r2, #3
 800da0a:	1b52      	subs	r2, r2, r5
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800da0c:	b292      	uxth	r2, r2
 800da0e:	4290      	cmp	r0, r2
 800da10:	d306      	bcc.n	800da20 <TRACE_AllocateBufer+0x2c>
 800da12:	4285      	cmp	r5, r0
 800da14:	d916      	bls.n	800da44 <TRACE_AllocateBufer+0x50>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800da16:	2201      	movs	r2, #1
 800da18:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800da1a:	2200      	movs	r2, #0
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800da1c:	801d      	strh	r5, [r3, #0]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800da1e:	825a      	strh	r2, [r3, #18]
#endif
  }

  if(freesize > Size)
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800da20:	8a5a      	ldrh	r2, [r3, #18]
 800da22:	800a      	strh	r2, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800da24:	1812      	adds	r2, r2, r0
 800da26:	0592      	lsls	r2, r2, #22
 800da28:	0d92      	lsrs	r2, r2, #22
    ret = 0;
 800da2a:	2000      	movs	r0, #0
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800da2c:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800da2e:	e00b      	b.n	800da48 <TRACE_AllocateBufer+0x54>
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800da30:	4295      	cmp	r5, r2
 800da32:	d90c      	bls.n	800da4e <TRACE_AllocateBufer+0x5a>
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800da34:	2680      	movs	r6, #128	; 0x80
 800da36:	00f6      	lsls	r6, r6, #3
 800da38:	1b76      	subs	r6, r6, r5
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800da3a:	b2b6      	uxth	r6, r6
 800da3c:	4286      	cmp	r6, r0
 800da3e:	d8ef      	bhi.n	800da20 <TRACE_AllocateBufer+0x2c>
 800da40:	4282      	cmp	r2, r0
 800da42:	d8e8      	bhi.n	800da16 <TRACE_AllocateBufer+0x22>
  int16_t ret = -1;
 800da44:	2001      	movs	r0, #1
 800da46:	4240      	negs	r0, r0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da48:	f384 8810 	msr	PRIMASK, r4
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800da4c:	bd70      	pop	{r4, r5, r6, pc}
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800da4e:	1b52      	subs	r2, r2, r5
  if(freesize > Size)
 800da50:	b292      	uxth	r2, r2
 800da52:	4282      	cmp	r2, r0
 800da54:	d8e4      	bhi.n	800da20 <TRACE_AllocateBufer+0x2c>
 800da56:	e7f5      	b.n	800da44 <TRACE_AllocateBufer+0x50>
 800da58:	20001224 	.word	0x20001224

0800da5c <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da5c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da60:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800da62:	4a03      	ldr	r2, [pc, #12]	; (800da70 <TRACE_Lock+0x14>)
 800da64:	8ad3      	ldrh	r3, [r2, #22]
 800da66:	3301      	adds	r3, #1
 800da68:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da6a:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800da6e:	4770      	bx	lr
 800da70:	20001224 	.word	0x20001224

0800da74 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800da74:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800da78:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 800da7a:	4a03      	ldr	r2, [pc, #12]	; (800da88 <TRACE_UnLock+0x14>)
 800da7c:	8ad3      	ldrh	r3, [r2, #22]
 800da7e:	3b01      	subs	r3, #1
 800da80:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800da82:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800da86:	4770      	bx	lr
 800da88:	20001224 	.word	0x20001224

0800da8c <UTIL_ADV_TRACE_Init>:
{
 800da8c:	b510      	push	{r4, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800da8e:	2218      	movs	r2, #24
 800da90:	2100      	movs	r1, #0
 800da92:	4807      	ldr	r0, [pc, #28]	; (800dab0 <UTIL_ADV_TRACE_Init+0x24>)
 800da94:	f000 f981 	bl	800dd9a <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800da98:	2280      	movs	r2, #128	; 0x80
 800da9a:	2100      	movs	r1, #0
 800da9c:	4805      	ldr	r0, [pc, #20]	; (800dab4 <UTIL_ADV_TRACE_Init+0x28>)
 800da9e:	00d2      	lsls	r2, r2, #3
 800daa0:	f000 f97b 	bl	800dd9a <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800daa4:	4b04      	ldr	r3, [pc, #16]	; (800dab8 <UTIL_ADV_TRACE_Init+0x2c>)
 800daa6:	4805      	ldr	r0, [pc, #20]	; (800dabc <UTIL_ADV_TRACE_Init+0x30>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4798      	blx	r3
}
 800daac:	bd10      	pop	{r4, pc}
 800daae:	46c0      	nop			; (mov r8, r8)
 800dab0:	20001224 	.word	0x20001224
 800dab4:	2000143c 	.word	0x2000143c
 800dab8:	0800f11c 	.word	0x0800f11c
 800dabc:	0800dc29 	.word	0x0800dc29

0800dac0 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800dac0:	4b01      	ldr	r3, [pc, #4]	; (800dac8 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800dac2:	6058      	str	r0, [r3, #4]
}
 800dac4:	4770      	bx	lr
 800dac6:	46c0      	nop			; (mov r8, r8)
 800dac8:	20001224 	.word	0x20001224

0800dacc <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800dacc:	4b01      	ldr	r3, [pc, #4]	; (800dad4 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800dace:	7218      	strb	r0, [r3, #8]
}
 800dad0:	4770      	bx	lr
 800dad2:	46c0      	nop			; (mov r8, r8)
 800dad4:	20001224 	.word	0x20001224

0800dad8 <TRACE_Send>:
{
 800dad8:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dada:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dade:	b672      	cpsid	i
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800dae0:	4c1b      	ldr	r4, [pc, #108]	; (800db50 <TRACE_Send+0x78>)
  if(TRACE_IsLocked() == 0u)
 800dae2:	8ae5      	ldrh	r5, [r4, #22]
 800dae4:	2d00      	cmp	r5, #0
 800dae6:	d12f      	bne.n	800db48 <TRACE_Send+0x70>
    TRACE_Lock();
 800dae8:	f7ff ffb8 	bl	800da5c <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800daec:	8a21      	ldrh	r1, [r4, #16]
 800daee:	8a62      	ldrh	r2, [r4, #18]
 800daf0:	4291      	cmp	r1, r2
 800daf2:	d027      	beq.n	800db44 <TRACE_Send+0x6c>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800daf4:	78a3      	ldrb	r3, [r4, #2]
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d110      	bne.n	800db1c <TRACE_Send+0x44>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800dafa:	8823      	ldrh	r3, [r4, #0]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dafc:	8025      	strh	r5, [r4, #0]
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800dafe:	1a5b      	subs	r3, r3, r1
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800db00:	2102      	movs	r1, #2
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800db02:	b29b      	uxth	r3, r3
 800db04:	82a3      	strh	r3, [r4, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800db06:	70a1      	strb	r1, [r4, #2]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d109      	bne.n	800db20 <TRACE_Send+0x48>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800db0c:	70a3      	strb	r3, [r4, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800db0e:	8223      	strh	r3, [r4, #16]
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800db10:	8a21      	ldrh	r1, [r4, #16]
 800db12:	428a      	cmp	r2, r1
 800db14:	d911      	bls.n	800db3a <TRACE_Send+0x62>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800db16:	1a52      	subs	r2, r2, r1
 800db18:	82a2      	strh	r2, [r4, #20]
 800db1a:	e001      	b.n	800db20 <TRACE_Send+0x48>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d0f7      	beq.n	800db10 <TRACE_Send+0x38>
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800db20:	8a25      	ldrh	r5, [r4, #16]
 800db22:	4b0c      	ldr	r3, [pc, #48]	; (800db54 <TRACE_Send+0x7c>)
 800db24:	18ed      	adds	r5, r5, r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db26:	f386 8810 	msr	PRIMASK, r6
      UTIL_ADV_TRACE_PreSendHook();
 800db2a:	f7f5 f823 	bl	8002b74 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800db2e:	4b0a      	ldr	r3, [pc, #40]	; (800db58 <TRACE_Send+0x80>)
 800db30:	0028      	movs	r0, r5
 800db32:	8aa1      	ldrh	r1, [r4, #20]
 800db34:	68db      	ldr	r3, [r3, #12]
 800db36:	4798      	blx	r3
}
 800db38:	bd70      	pop	{r4, r5, r6, pc}
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800db3a:	2380      	movs	r3, #128	; 0x80
 800db3c:	00db      	lsls	r3, r3, #3
 800db3e:	1a5b      	subs	r3, r3, r1
 800db40:	82a3      	strh	r3, [r4, #20]
 800db42:	e7ed      	b.n	800db20 <TRACE_Send+0x48>
      TRACE_UnLock();
 800db44:	f7ff ff96 	bl	800da74 <TRACE_UnLock>
 800db48:	f386 8810 	msr	PRIMASK, r6
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800db4c:	2000      	movs	r0, #0
}
 800db4e:	e7f3      	b.n	800db38 <TRACE_Send+0x60>
 800db50:	20001224 	.word	0x20001224
 800db54:	2000143c 	.word	0x2000143c
 800db58:	0800f11c 	.word	0x0800f11c

0800db5c <UTIL_ADV_TRACE_COND_FSend>:
{
 800db5c:	b408      	push	{r3}
 800db5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800db60:	b086      	sub	sp, #24
  uint16_t timestamp_size = 0u;
 800db62:	2300      	movs	r3, #0
 800db64:	466c      	mov	r4, sp
 800db66:	8023      	strh	r3, [r4, #0]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800db68:	4b2c      	ldr	r3, [pc, #176]	; (800dc1c <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800db6a:	7a1c      	ldrb	r4, [r3, #8]
 800db6c:	4284      	cmp	r4, r0
 800db6e:	d350      	bcc.n	800dc12 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800db70:	68d8      	ldr	r0, [r3, #12]
 800db72:	4008      	ands	r0, r1
 800db74:	4288      	cmp	r0, r1
 800db76:	d14e      	bne.n	800dc16 <UTIL_ADV_TRACE_COND_FSend+0xba>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800db78:	685b      	ldr	r3, [r3, #4]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d004      	beq.n	800db88 <UTIL_ADV_TRACE_COND_FSend+0x2c>
 800db7e:	2a00      	cmp	r2, #0
 800db80:	d002      	beq.n	800db88 <UTIL_ADV_TRACE_COND_FSend+0x2c>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800db82:	4669      	mov	r1, sp
 800db84:	a802      	add	r0, sp, #8
 800db86:	4798      	blx	r3
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800db88:	2180      	movs	r1, #128	; 0x80
  va_start( vaArgs, strFormat);
 800db8a:	ab0c      	add	r3, sp, #48	; 0x30
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800db8c:	0089      	lsls	r1, r1, #2
 800db8e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800db90:	4823      	ldr	r0, [pc, #140]	; (800dc20 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
  va_start( vaArgs, strFormat);
 800db92:	9301      	str	r3, [sp, #4]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800db94:	f000 fbde 	bl	800e354 <tiny_vsnprintf_like>
 800db98:	0005      	movs	r5, r0
  TRACE_Lock();
 800db9a:	f7ff ff5f 	bl	800da5c <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800db9e:	466b      	mov	r3, sp
 800dba0:	8818      	ldrh	r0, [r3, #0]
 800dba2:	1c9c      	adds	r4, r3, #2
 800dba4:	1940      	adds	r0, r0, r5
 800dba6:	0021      	movs	r1, r4
 800dba8:	b280      	uxth	r0, r0
 800dbaa:	f7ff ff23 	bl	800d9f4 <TRACE_AllocateBufer>
 800dbae:	3001      	adds	r0, #1
 800dbb0:	d02a      	beq.n	800dc08 <UTIL_ADV_TRACE_COND_FSend+0xac>
    for (idx = 0u; idx < timestamp_size; idx++)
 800dbb2:	2200      	movs	r2, #0
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800dbb4:	2101      	movs	r1, #1
    for (idx = 0u; idx < timestamp_size; idx++)
 800dbb6:	466b      	mov	r3, sp
 800dbb8:	0015      	movs	r5, r2
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800dbba:	468c      	mov	ip, r1
    for (idx = 0u; idx < timestamp_size; idx++)
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	8826      	ldrh	r6, [r4, #0]
 800dbc0:	4818      	ldr	r0, [pc, #96]	; (800dc24 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 800dbc2:	b297      	uxth	r7, r2
 800dbc4:	19f1      	adds	r1, r6, r7
 800dbc6:	b289      	uxth	r1, r1
 800dbc8:	42bb      	cmp	r3, r7
 800dbca:	d815      	bhi.n	800dbf8 <UTIL_ADV_TRACE_COND_FSend+0x9c>
 800dbcc:	199b      	adds	r3, r3, r6
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	2d00      	cmp	r5, #0
 800dbd2:	d000      	beq.n	800dbd6 <UTIL_ADV_TRACE_COND_FSend+0x7a>
 800dbd4:	8023      	strh	r3, [r4, #0]
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800dbd6:	2180      	movs	r1, #128	; 0x80
 800dbd8:	8823      	ldrh	r3, [r4, #0]
 800dbda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbdc:	0089      	lsls	r1, r1, #2
 800dbde:	18c0      	adds	r0, r0, r3
 800dbe0:	9b01      	ldr	r3, [sp, #4]
 800dbe2:	f000 fbb7 	bl	800e354 <tiny_vsnprintf_like>
    TRACE_UnLock();
 800dbe6:	f7ff ff45 	bl	800da74 <TRACE_UnLock>
    return TRACE_Send();
 800dbea:	f7ff ff75 	bl	800dad8 <TRACE_Send>
}
 800dbee:	b006      	add	sp, #24
 800dbf0:	bcf0      	pop	{r4, r5, r6, r7}
 800dbf2:	bc08      	pop	{r3}
 800dbf4:	b001      	add	sp, #4
 800dbf6:	4718      	bx	r3
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800dbf8:	466d      	mov	r5, sp
 800dbfa:	2708      	movs	r7, #8
 800dbfc:	19ed      	adds	r5, r5, r7
 800dbfe:	5cad      	ldrb	r5, [r5, r2]
 800dc00:	3201      	adds	r2, #1
 800dc02:	5445      	strb	r5, [r0, r1]
 800dc04:	4665      	mov	r5, ip
 800dc06:	e7dc      	b.n	800dbc2 <UTIL_ADV_TRACE_COND_FSend+0x66>
  TRACE_UnLock();
 800dc08:	f7ff ff34 	bl	800da74 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 800dc0c:	2003      	movs	r0, #3
    return UTIL_ADV_TRACE_REGIONMASKED;
 800dc0e:	4240      	negs	r0, r0
 800dc10:	e7ed      	b.n	800dbee <UTIL_ADV_TRACE_COND_FSend+0x92>
    return UTIL_ADV_TRACE_GIVEUP;
 800dc12:	2005      	movs	r0, #5
 800dc14:	e7fb      	b.n	800dc0e <UTIL_ADV_TRACE_COND_FSend+0xb2>
    return UTIL_ADV_TRACE_REGIONMASKED;
 800dc16:	2006      	movs	r0, #6
 800dc18:	e7f9      	b.n	800dc0e <UTIL_ADV_TRACE_COND_FSend+0xb2>
 800dc1a:	46c0      	nop			; (mov r8, r8)
 800dc1c:	20001224 	.word	0x20001224
 800dc20:	2000123c 	.word	0x2000123c
 800dc24:	2000143c 	.word	0x2000143c

0800dc28 <TRACE_TxCpltCallback>:
{
 800dc28:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc2a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dc2e:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800dc30:	4b1f      	ldr	r3, [pc, #124]	; (800dcb0 <TRACE_TxCpltCallback+0x88>)
 800dc32:	789a      	ldrb	r2, [r3, #2]
 800dc34:	2a02      	cmp	r2, #2
 800dc36:	d11d      	bne.n	800dc74 <TRACE_TxCpltCallback+0x4c>
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dc38:	2200      	movs	r2, #0
 800dc3a:	709a      	strb	r2, [r3, #2]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800dc3c:	8a5c      	ldrh	r4, [r3, #18]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dc3e:	821a      	strh	r2, [r3, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800dc40:	4294      	cmp	r4, r2
 800dc42:	d02e      	beq.n	800dca2 <TRACE_TxCpltCallback+0x7a>
 800dc44:	8ad8      	ldrh	r0, [r3, #22]
 800dc46:	2801      	cmp	r0, #1
 800dc48:	d12b      	bne.n	800dca2 <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800dc4a:	7898      	ldrb	r0, [r3, #2]
 800dc4c:	2801      	cmp	r0, #1
 800dc4e:	d117      	bne.n	800dc80 <TRACE_TxCpltCallback+0x58>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800dc50:	8818      	ldrh	r0, [r3, #0]
 800dc52:	1a82      	subs	r2, r0, r2
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800dc54:	2002      	movs	r0, #2
 800dc56:	7098      	strb	r0, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dc58:	2000      	movs	r0, #0
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800dc5a:	b292      	uxth	r2, r2
 800dc5c:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800dc5e:	8018      	strh	r0, [r3, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800dc60:	4282      	cmp	r2, r0
 800dc62:	d10f      	bne.n	800dc84 <TRACE_TxCpltCallback+0x5c>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800dc64:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800dc66:	821a      	strh	r2, [r3, #16]
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800dc68:	8a18      	ldrh	r0, [r3, #16]
 800dc6a:	4284      	cmp	r4, r0
 800dc6c:	d914      	bls.n	800dc98 <TRACE_TxCpltCallback+0x70>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800dc6e:	1a24      	subs	r4, r4, r0
 800dc70:	829c      	strh	r4, [r3, #20]
 800dc72:	e007      	b.n	800dc84 <TRACE_TxCpltCallback+0x5c>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800dc74:	8a1a      	ldrh	r2, [r3, #16]
 800dc76:	8a98      	ldrh	r0, [r3, #20]
 800dc78:	1812      	adds	r2, r2, r0
 800dc7a:	0592      	lsls	r2, r2, #22
 800dc7c:	0d92      	lsrs	r2, r2, #22
 800dc7e:	e7dd      	b.n	800dc3c <TRACE_TxCpltCallback+0x14>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800dc80:	2800      	cmp	r0, #0
 800dc82:	d0f1      	beq.n	800dc68 <TRACE_TxCpltCallback+0x40>
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800dc84:	8a18      	ldrh	r0, [r3, #16]
 800dc86:	4a0b      	ldr	r2, [pc, #44]	; (800dcb4 <TRACE_TxCpltCallback+0x8c>)
 800dc88:	1880      	adds	r0, r0, r2
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc8a:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800dc8e:	8a99      	ldrh	r1, [r3, #20]
 800dc90:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <TRACE_TxCpltCallback+0x90>)
 800dc92:	68db      	ldr	r3, [r3, #12]
 800dc94:	4798      	blx	r3
}
 800dc96:	bd10      	pop	{r4, pc}
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800dc98:	2280      	movs	r2, #128	; 0x80
 800dc9a:	00d2      	lsls	r2, r2, #3
 800dc9c:	1a12      	subs	r2, r2, r0
 800dc9e:	829a      	strh	r2, [r3, #20]
 800dca0:	e7f0      	b.n	800dc84 <TRACE_TxCpltCallback+0x5c>
 800dca2:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800dca6:	f7f4 ff6b 	bl	8002b80 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800dcaa:	f7ff fee3 	bl	800da74 <TRACE_UnLock>
}
 800dcae:	e7f2      	b.n	800dc96 <TRACE_TxCpltCallback+0x6e>
 800dcb0:	20001224 	.word	0x20001224
 800dcb4:	2000143c 	.word	0x2000143c
 800dcb8:	0800f11c 	.word	0x0800f11c

0800dcbc <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	4b02      	ldr	r3, [pc, #8]	; (800dcc8 <UTIL_LPM_Init+0xc>)
 800dcc0:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800dcc2:	605a      	str	r2, [r3, #4]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800dcc4:	4770      	bx	lr
 800dcc6:	46c0      	nop			; (mov r8, r8)
 800dcc8:	2000183c 	.word	0x2000183c

0800dccc <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800dccc:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcce:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dcd2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 800dcd4:	2900      	cmp	r1, #0
 800dcd6:	d008      	beq.n	800dcea <UTIL_LPM_SetStopMode+0x1e>
 800dcd8:	2901      	cmp	r1, #1
 800dcda:	d103      	bne.n	800dce4 <UTIL_LPM_SetStopMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800dcdc:	4a05      	ldr	r2, [pc, #20]	; (800dcf4 <UTIL_LPM_SetStopMode+0x28>)
 800dcde:	6813      	ldr	r3, [r2, #0]
 800dce0:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800dce2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dce4:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dce8:	bd10      	pop	{r4, pc}
      StopModeDisable &= ( ~lpm_id_bm );
 800dcea:	4a02      	ldr	r2, [pc, #8]	; (800dcf4 <UTIL_LPM_SetStopMode+0x28>)
 800dcec:	6813      	ldr	r3, [r2, #0]
 800dcee:	4383      	bics	r3, r0
 800dcf0:	e7f7      	b.n	800dce2 <UTIL_LPM_SetStopMode+0x16>
 800dcf2:	46c0      	nop			; (mov r8, r8)
 800dcf4:	2000183c 	.word	0x2000183c

0800dcf8 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800dcf8:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dcfa:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dcfe:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 800dd00:	2900      	cmp	r1, #0
 800dd02:	d008      	beq.n	800dd16 <UTIL_LPM_SetOffMode+0x1e>
 800dd04:	2901      	cmp	r1, #1
 800dd06:	d103      	bne.n	800dd10 <UTIL_LPM_SetOffMode+0x18>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800dd08:	4a05      	ldr	r2, [pc, #20]	; (800dd20 <UTIL_LPM_SetOffMode+0x28>)
 800dd0a:	6853      	ldr	r3, [r2, #4]
 800dd0c:	4303      	orrs	r3, r0
      break;
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800dd0e:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd10:	f384 8810 	msr	PRIMASK, r4
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800dd14:	bd10      	pop	{r4, pc}
      OffModeDisable &= ( ~lpm_id_bm );
 800dd16:	4a02      	ldr	r2, [pc, #8]	; (800dd20 <UTIL_LPM_SetOffMode+0x28>)
 800dd18:	6853      	ldr	r3, [r2, #4]
 800dd1a:	4383      	bics	r3, r0
 800dd1c:	e7f7      	b.n	800dd0e <UTIL_LPM_SetOffMode+0x16>
 800dd1e:	46c0      	nop			; (mov r8, r8)
 800dd20:	2000183c 	.word	0x2000183c

0800dd24 <UTIL_LPM_GetMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd24:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dd28:	b672      	cpsid	i
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
  {
    /**
     * At least one user disallows Stop Mode
     */
    mode_selected = UTIL_LPM_SLEEPMODE;
 800dd2a:	2000      	movs	r0, #0
  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800dd2c:	4b05      	ldr	r3, [pc, #20]	; (800dd44 <UTIL_LPM_GetMode+0x20>)
 800dd2e:	6819      	ldr	r1, [r3, #0]
 800dd30:	4281      	cmp	r1, r0
 800dd32:	d103      	bne.n	800dd3c <UTIL_LPM_GetMode+0x18>
  }
  else
  {
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800dd34:	6858      	ldr	r0, [r3, #4]
       */
      mode_selected = UTIL_LPM_STOPMODE;
    }
    else
    {
      mode_selected = UTIL_LPM_OFFMODE;
 800dd36:	4243      	negs	r3, r0
 800dd38:	4158      	adcs	r0, r3
 800dd3a:	3001      	adds	r0, #1
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd3c:	f382 8810 	msr	PRIMASK, r2
  }

  UTIL_LPM_EXIT_CRITICAL_SECTION( );

  return mode_selected;
}
 800dd40:	4770      	bx	lr
 800dd42:	46c0      	nop			; (mov r8, r8)
 800dd44:	2000183c 	.word	0x2000183c

0800dd48 <UTIL_LPM_EnterLowPower>:

void UTIL_LPM_EnterLowPower( void )
{
 800dd48:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd4a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800dd4e:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800dd50:	4b0b      	ldr	r3, [pc, #44]	; (800dd80 <UTIL_LPM_EnterLowPower+0x38>)
 800dd52:	4c0c      	ldr	r4, [pc, #48]	; (800dd84 <UTIL_LPM_EnterLowPower+0x3c>)
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	2a00      	cmp	r2, #0
 800dd58:	d006      	beq.n	800dd68 <UTIL_LPM_EnterLowPower+0x20>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800dd5a:	6823      	ldr	r3, [r4, #0]
 800dd5c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800dd5e:	6863      	ldr	r3, [r4, #4]
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
      UTIL_PowerDriver.ExitOffMode( );
 800dd60:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dd62:	f385 8810 	msr	PRIMASK, r5
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d003      	beq.n	800dd76 <UTIL_LPM_EnterLowPower+0x2e>
        UTIL_PowerDriver.EnterStopMode( );
 800dd6e:	68a3      	ldr	r3, [r4, #8]
 800dd70:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800dd72:	68e3      	ldr	r3, [r4, #12]
 800dd74:	e7f4      	b.n	800dd60 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 800dd76:	6923      	ldr	r3, [r4, #16]
 800dd78:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800dd7a:	6963      	ldr	r3, [r4, #20]
 800dd7c:	e7f0      	b.n	800dd60 <UTIL_LPM_EnterLowPower+0x18>
 800dd7e:	46c0      	nop			; (mov r8, r8)
 800dd80:	2000183c 	.word	0x2000183c
 800dd84:	0800f104 	.word	0x0800f104

0800dd88 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800dd88:	2300      	movs	r3, #0
{
 800dd8a:	b510      	push	{r4, lr}
  while( size-- )
 800dd8c:	4293      	cmp	r3, r2
 800dd8e:	d100      	bne.n	800dd92 <UTIL_MEM_cpy_8+0xa>
    {
        *dst8++ = *src8++;
    }
}
 800dd90:	bd10      	pop	{r4, pc}
        *dst8++ = *src8++;
 800dd92:	5ccc      	ldrb	r4, [r1, r3]
 800dd94:	54c4      	strb	r4, [r0, r3]
 800dd96:	3301      	adds	r3, #1
 800dd98:	e7f8      	b.n	800dd8c <UTIL_MEM_cpy_8+0x4>

0800dd9a <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800dd9a:	b510      	push	{r4, lr}
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
  {
    *dst8++ = value;
 800dd9c:	f000 fd10 	bl	800e7c0 <memset>
  }
}
 800dda0:	bd10      	pop	{r4, pc}
	...

0800dda4 <UTIL_SEQ_SetTask>:

  return;
}

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800dda4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dda6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ddaa:	b672      	cpsid	i
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800ddac:	4b05      	ldr	r3, [pc, #20]	; (800ddc4 <UTIL_SEQ_SetTask+0x20>)
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ddae:	00c9      	lsls	r1, r1, #3
  TaskSet |= TaskId_bm;
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	4302      	orrs	r2, r0
 800ddb4:	601a      	str	r2, [r3, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800ddb6:	185b      	adds	r3, r3, r1
 800ddb8:	691a      	ldr	r2, [r3, #16]
 800ddba:	4302      	orrs	r2, r0
 800ddbc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ddbe:	f384 8810 	msr	PRIMASK, r4

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 800ddc2:	bd10      	pop	{r4, pc}
 800ddc4:	20001844 	.word	0x20001844

0800ddc8 <UTIL_SEQ_PreIdle>:
 800ddc8:	4770      	bx	lr

0800ddca <UTIL_SEQ_PostIdle>:
 800ddca:	4770      	bx	lr

0800ddcc <SEQ_BitPosition>:
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
  uint8_t n = 0U;
 800ddcc:	2300      	movs	r3, #0

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800ddce:	0c02      	lsrs	r2, r0, #16
 800ddd0:	429a      	cmp	r2, r3
 800ddd2:	d101      	bne.n	800ddd8 <SEQ_BitPosition+0xc>
 800ddd4:	0400      	lsls	r0, r0, #16
 800ddd6:	3310      	adds	r3, #16
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800ddd8:	0e02      	lsrs	r2, r0, #24
 800ddda:	d102      	bne.n	800dde2 <SEQ_BitPosition+0x16>
 800dddc:	3308      	adds	r3, #8
 800ddde:	b2db      	uxtb	r3, r3
 800dde0:	0200      	lsls	r0, r0, #8
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800dde2:	0f02      	lsrs	r2, r0, #28
 800dde4:	d102      	bne.n	800ddec <SEQ_BitPosition+0x20>
 800dde6:	3304      	adds	r3, #4
 800dde8:	b2db      	uxtb	r3, r3
 800ddea:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[Value >> (32-4)];

  return (uint8_t)(31U-n);
 800ddec:	221f      	movs	r2, #31
 800ddee:	1ad3      	subs	r3, r2, r3
  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800ddf0:	4a02      	ldr	r2, [pc, #8]	; (800ddfc <SEQ_BitPosition+0x30>)
 800ddf2:	0f00      	lsrs	r0, r0, #28
  return (uint8_t)(31U-n);
 800ddf4:	5c10      	ldrb	r0, [r2, r0]
 800ddf6:	1a18      	subs	r0, r3, r0
 800ddf8:	b2c0      	uxtb	r0, r0
}
 800ddfa:	4770      	bx	lr
 800ddfc:	0800f6b8 	.word	0x0800f6b8

0800de00 <UTIL_SEQ_Run>:
{
 800de00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  super_mask_backup = SuperMask;
 800de02:	4e2f      	ldr	r6, [pc, #188]	; (800dec0 <UTIL_SEQ_Run+0xc0>)
 800de04:	6873      	ldr	r3, [r6, #4]
  SuperMask &= Mask_bm;
 800de06:	4018      	ands	r0, r3
  super_mask_backup = SuperMask;
 800de08:	9301      	str	r3, [sp, #4]
  SuperMask &= Mask_bm;
 800de0a:	6070      	str	r0, [r6, #4]
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800de0c:	4c2d      	ldr	r4, [pc, #180]	; (800dec4 <UTIL_SEQ_Run+0xc4>)
 800de0e:	6831      	ldr	r1, [r6, #0]
 800de10:	6822      	ldr	r2, [r4, #0]
 800de12:	6873      	ldr	r3, [r6, #4]
 800de14:	400a      	ands	r2, r1
 800de16:	4213      	tst	r3, r2
 800de18:	d037      	beq.n	800de8a <UTIL_SEQ_Run+0x8a>
 800de1a:	68a0      	ldr	r0, [r4, #8]
 800de1c:	6862      	ldr	r2, [r4, #4]
 800de1e:	0005      	movs	r5, r0
 800de20:	4015      	ands	r5, r2
 800de22:	4210      	tst	r0, r2
 800de24:	d131      	bne.n	800de8a <UTIL_SEQ_Run+0x8a>
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800de26:	6922      	ldr	r2, [r4, #16]
 800de28:	400b      	ands	r3, r1
 800de2a:	0010      	movs	r0, r2
 800de2c:	4018      	ands	r0, r3
 800de2e:	421a      	tst	r2, r3
 800de30:	d102      	bne.n	800de38 <UTIL_SEQ_Run+0x38>
      counter++;
 800de32:	2501      	movs	r5, #1
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800de34:	69a0      	ldr	r0, [r4, #24]
 800de36:	4018      	ands	r0, r3
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800de38:	00ed      	lsls	r5, r5, #3
 800de3a:	1963      	adds	r3, r4, r5
 800de3c:	695a      	ldr	r2, [r3, #20]
 800de3e:	4202      	tst	r2, r0
 800de40:	d102      	bne.n	800de48 <UTIL_SEQ_Run+0x48>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800de42:	2201      	movs	r2, #1
 800de44:	4252      	negs	r2, r2
 800de46:	615a      	str	r2, [r3, #20]
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800de48:	1965      	adds	r5, r4, r5
 800de4a:	696f      	ldr	r7, [r5, #20]
 800de4c:	4038      	ands	r0, r7
 800de4e:	f7ff ffbd 	bl	800ddcc <SEQ_BitPosition>
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800de52:	2301      	movs	r3, #1
 800de54:	4083      	lsls	r3, r0
 800de56:	439f      	bics	r7, r3
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800de58:	60e0      	str	r0, [r4, #12]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800de5a:	616f      	str	r7, [r5, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de5c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800de60:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 800de62:	2201      	movs	r2, #1
 800de64:	68e3      	ldr	r3, [r4, #12]
 800de66:	409a      	lsls	r2, r3
 800de68:	6823      	ldr	r3, [r4, #0]
 800de6a:	4393      	bics	r3, r2
 800de6c:	6023      	str	r3, [r4, #0]
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800de6e:	69a3      	ldr	r3, [r4, #24]
 800de70:	4393      	bics	r3, r2
 800de72:	61a3      	str	r3, [r4, #24]
 800de74:	6923      	ldr	r3, [r4, #16]
 800de76:	4393      	bics	r3, r2
 800de78:	6123      	str	r3, [r4, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de7a:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800de7e:	68e2      	ldr	r2, [r4, #12]
 800de80:	4b11      	ldr	r3, [pc, #68]	; (800dec8 <UTIL_SEQ_Run+0xc8>)
 800de82:	0092      	lsls	r2, r2, #2
 800de84:	58d3      	ldr	r3, [r2, r3]
 800de86:	4798      	blx	r3
 800de88:	e7c0      	b.n	800de0c <UTIL_SEQ_Run+0xc>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800de8a:	2301      	movs	r3, #1
 800de8c:	425b      	negs	r3, r3
 800de8e:	60e3      	str	r3, [r4, #12]
  UTIL_SEQ_PreIdle( );
 800de90:	f7ff ff9a 	bl	800ddc8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de94:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800de98:	b672      	cpsid	i
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800de9a:	6823      	ldr	r3, [r4, #0]
 800de9c:	6832      	ldr	r2, [r6, #0]
 800de9e:	6861      	ldr	r1, [r4, #4]
 800dea0:	401a      	ands	r2, r3
 800dea2:	6873      	ldr	r3, [r6, #4]
 800dea4:	4013      	ands	r3, r2
 800dea6:	68a2      	ldr	r2, [r4, #8]
 800dea8:	400a      	ands	r2, r1
 800deaa:	4313      	orrs	r3, r2
 800deac:	d101      	bne.n	800deb2 <UTIL_SEQ_Run+0xb2>
	UTIL_SEQ_Idle( );
 800deae:	f7f4 fe0b 	bl	8002ac8 <UTIL_SEQ_Idle>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800deb2:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 800deb6:	f7ff ff88 	bl	800ddca <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	6073      	str	r3, [r6, #4]
}
 800debe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800dec0:	200000fc 	.word	0x200000fc
 800dec4:	20001844 	.word	0x20001844
 800dec8:	20001864 	.word	0x20001864

0800decc <UTIL_SEQ_RegTask>:
{
 800decc:	b570      	push	{r4, r5, r6, lr}
 800dece:	0014      	movs	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ded0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800ded4:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800ded6:	f7ff ff79 	bl	800ddcc <SEQ_BitPosition>
 800deda:	4b03      	ldr	r3, [pc, #12]	; (800dee8 <UTIL_SEQ_RegTask+0x1c>)
 800dedc:	0080      	lsls	r0, r0, #2
 800dede:	50c4      	str	r4, [r0, r3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dee0:	f385 8810 	msr	PRIMASK, r5
}
 800dee4:	bd70      	pop	{r4, r5, r6, pc}
 800dee6:	46c0      	nop			; (mov r8, r8)
 800dee8:	20001864 	.word	0x20001864

0800deec <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800deec:	b082      	sub	sp, #8
 800deee:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds + b.Seconds;
 800def0:	18c9      	adds	r1, r1, r3
{
 800def2:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800def4:	ab05      	add	r3, sp, #20
{
 800def6:	1c14      	adds	r4, r2, #0
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800def8:	889a      	ldrh	r2, [r3, #4]
 800defa:	1912      	adds	r2, r2, r4
  if( c.SubSeconds >= 1000 )
 800defc:	24fa      	movs	r4, #250	; 0xfa
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800defe:	b293      	uxth	r3, r2
 800df00:	b212      	sxth	r2, r2
  if( c.SubSeconds >= 1000 )
 800df02:	00a4      	lsls	r4, r4, #2
 800df04:	42a2      	cmp	r2, r4
 800df06:	db03      	blt.n	800df10 <SysTimeAdd+0x24>
  {
    c.Seconds++;
    c.SubSeconds -= 1000;
 800df08:	4a04      	ldr	r2, [pc, #16]	; (800df1c <SysTimeAdd+0x30>)
    c.Seconds++;
 800df0a:	3101      	adds	r1, #1
    c.SubSeconds -= 1000;
 800df0c:	189b      	adds	r3, r3, r2
 800df0e:	b21a      	sxth	r2, r3
  }
  return c;
 800df10:	6001      	str	r1, [r0, #0]
 800df12:	8082      	strh	r2, [r0, #4]
}
 800df14:	bc16      	pop	{r1, r2, r4}
 800df16:	bc08      	pop	{r3}
 800df18:	b002      	add	sp, #8
 800df1a:	4718      	bx	r3
 800df1c:	fffffc18 	.word	0xfffffc18

0800df20 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 800df20:	b082      	sub	sp, #8
 800df22:	b513      	push	{r0, r1, r4, lr}
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };

  c.Seconds = a.Seconds - b.Seconds;
 800df24:	1ac9      	subs	r1, r1, r3
{
 800df26:	9305      	str	r3, [sp, #20]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800df28:	ab05      	add	r3, sp, #20
 800df2a:	889b      	ldrh	r3, [r3, #4]
 800df2c:	1ad2      	subs	r2, r2, r3
 800df2e:	b293      	uxth	r3, r2
 800df30:	b214      	sxth	r4, r2
  if( c.SubSeconds < 0 )
 800df32:	0412      	lsls	r2, r2, #16
 800df34:	d504      	bpl.n	800df40 <SysTimeSub+0x20>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
 800df36:	22fa      	movs	r2, #250	; 0xfa
 800df38:	0092      	lsls	r2, r2, #2
 800df3a:	189b      	adds	r3, r3, r2
    c.Seconds--;
 800df3c:	3901      	subs	r1, #1
    c.SubSeconds += 1000;
 800df3e:	b21c      	sxth	r4, r3
  }
  return c;
 800df40:	6001      	str	r1, [r0, #0]
 800df42:	8084      	strh	r4, [r0, #4]
}
 800df44:	bc16      	pop	{r1, r2, r4}
 800df46:	bc08      	pop	{r3}
 800df48:	b002      	add	sp, #8
 800df4a:	4718      	bx	r3

0800df4c <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
  SysTime_t DeltaTime;
  
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800df4c:	2300      	movs	r3, #0
{
 800df4e:	b530      	push	{r4, r5, lr}

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800df50:	4c10      	ldr	r4, [pc, #64]	; (800df94 <SysTimeSet+0x48>)
{
 800df52:	b085      	sub	sp, #20
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800df54:	ad02      	add	r5, sp, #8
 800df56:	80ab      	strh	r3, [r5, #4]
{
 800df58:	9000      	str	r0, [sp, #0]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800df5a:	9302      	str	r3, [sp, #8]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800df5c:	a803      	add	r0, sp, #12
 800df5e:	6923      	ldr	r3, [r4, #16]
{
 800df60:	9101      	str	r1, [sp, #4]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800df62:	4798      	blx	r3
  c.Seconds = a.Seconds - b.Seconds;
 800df64:	9b00      	ldr	r3, [sp, #0]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800df66:	9002      	str	r0, [sp, #8]
  c.Seconds = a.Seconds - b.Seconds;
 800df68:	1a18      	subs	r0, r3, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800df6a:	466b      	mov	r3, sp
 800df6c:	88aa      	ldrh	r2, [r5, #4]
 800df6e:	889b      	ldrh	r3, [r3, #4]
 800df70:	1a9b      	subs	r3, r3, r2
 800df72:	b29a      	uxth	r2, r3
 800df74:	b21d      	sxth	r5, r3
  if( c.SubSeconds < 0 )
 800df76:	041b      	lsls	r3, r3, #16
 800df78:	d504      	bpl.n	800df84 <SysTimeSet+0x38>
    c.SubSeconds += 1000;
 800df7a:	23fa      	movs	r3, #250	; 0xfa
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	18d2      	adds	r2, r2, r3
    c.Seconds--;
 800df80:	3801      	subs	r0, #1
    c.SubSeconds += 1000;
 800df82:	b215      	sxth	r5, r2

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 800df84:	6823      	ldr	r3, [r4, #0]
 800df86:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 800df88:	0028      	movs	r0, r5
 800df8a:	68a3      	ldr	r3, [r4, #8]
 800df8c:	4798      	blx	r3
}
 800df8e:	b005      	add	sp, #20
 800df90:	bd30      	pop	{r4, r5, pc}
 800df92:	46c0      	nop			; (mov r8, r8)
 800df94:	0800f0c4 	.word	0x0800f0c4

0800df98 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 800df98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800df9a:	2300      	movs	r3, #0
 800df9c:	466a      	mov	r2, sp
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800df9e:	4e10      	ldr	r6, [pc, #64]	; (800dfe0 <SysTimeGet+0x48>)
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dfa0:	8093      	strh	r3, [r2, #4]
 800dfa2:	9300      	str	r3, [sp, #0]
{
 800dfa4:	0004      	movs	r4, r0
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dfa6:	6933      	ldr	r3, [r6, #16]
 800dfa8:	a801      	add	r0, sp, #4
 800dfaa:	4798      	blx	r3

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dfac:	68f3      	ldr	r3, [r6, #12]
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dfae:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dfb0:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800dfb2:	6873      	ldr	r3, [r6, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800dfb4:	0005      	movs	r5, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800dfb6:	4798      	blx	r3
  c.Seconds = a.Seconds + b.Seconds;
 800dfb8:	9b00      	ldr	r3, [sp, #0]
  if( c.SubSeconds >= 1000 )
 800dfba:	21fa      	movs	r1, #250	; 0xfa
  c.Seconds = a.Seconds + b.Seconds;
 800dfbc:	18c0      	adds	r0, r0, r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dfbe:	466b      	mov	r3, sp
 800dfc0:	889b      	ldrh	r3, [r3, #4]
  if( c.SubSeconds >= 1000 )
 800dfc2:	0089      	lsls	r1, r1, #2
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800dfc4:	195b      	adds	r3, r3, r5
 800dfc6:	b29a      	uxth	r2, r3
 800dfc8:	b21b      	sxth	r3, r3
  if( c.SubSeconds >= 1000 )
 800dfca:	428b      	cmp	r3, r1
 800dfcc:	db03      	blt.n	800dfd6 <SysTimeGet+0x3e>
    c.SubSeconds -= 1000;
 800dfce:	4b05      	ldr	r3, [pc, #20]	; (800dfe4 <SysTimeGet+0x4c>)
    c.Seconds++;
 800dfd0:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800dfd2:	18d2      	adds	r2, r2, r3
 800dfd4:	b213      	sxth	r3, r2

  sysTime = SysTimeAdd( DeltaTime, calendarTime );

  return sysTime;
 800dfd6:	6020      	str	r0, [r4, #0]
 800dfd8:	80a3      	strh	r3, [r4, #4]
}
 800dfda:	0020      	movs	r0, r4
 800dfdc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 800dfde:	46c0      	nop			; (mov r8, r8)
 800dfe0:	0800f0c4 	.word	0x0800f0c4
 800dfe4:	fffffc18 	.word	0xfffffc18

0800dfe8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 800dfe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dfea:	2300      	movs	r3, #0
 800dfec:	466d      	mov	r5, sp
{
 800dfee:	0004      	movs	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	80ab      	strh	r3, [r5, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dff4:	4b04      	ldr	r3, [pc, #16]	; (800e008 <SysTimeGetMcuTime+0x20>)
 800dff6:	a801      	add	r0, sp, #4
 800dff8:	691b      	ldr	r3, [r3, #16]
 800dffa:	4798      	blx	r3
  
  return calendarTime;
 800dffc:	0023      	movs	r3, r4
  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800dffe:	9000      	str	r0, [sp, #0]
  return calendarTime;
 800e000:	cd06      	ldmia	r5!, {r1, r2}
 800e002:	c306      	stmia	r3!, {r1, r2}
}
 800e004:	0020      	movs	r0, r4
 800e006:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800e008:	0800f0c4 	.word	0x0800f0c4

0800e00c <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 800e00c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e00e:	4d0d      	ldr	r5, [pc, #52]	; (800e044 <SysTimeToMs+0x38>)
{
 800e010:	9101      	str	r1, [sp, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e012:	68eb      	ldr	r3, [r5, #12]
{
 800e014:	9000      	str	r0, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e016:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e018:	686b      	ldr	r3, [r5, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e01a:	0004      	movs	r4, r0
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e01c:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e01e:	466b      	mov	r3, sp
 800e020:	889b      	ldrh	r3, [r3, #4]
  c.Seconds = a.Seconds - b.Seconds;
 800e022:	9a00      	ldr	r2, [sp, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e024:	1b1b      	subs	r3, r3, r4
  c.Seconds = a.Seconds - b.Seconds;
 800e026:	1a12      	subs	r2, r2, r0
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 800e028:	b299      	uxth	r1, r3
 800e02a:	b21c      	sxth	r4, r3
  if( c.SubSeconds < 0 )
 800e02c:	041b      	lsls	r3, r3, #16
 800e02e:	d504      	bpl.n	800e03a <SysTimeToMs+0x2e>
    c.SubSeconds += 1000;
 800e030:	23fa      	movs	r3, #250	; 0xfa
 800e032:	009b      	lsls	r3, r3, #2
 800e034:	18c9      	adds	r1, r1, r3
    c.Seconds--;
 800e036:	3a01      	subs	r2, #1
    c.SubSeconds += 1000;
 800e038:	b20c      	sxth	r4, r1
  
  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 800e03a:	20fa      	movs	r0, #250	; 0xfa
 800e03c:	0080      	lsls	r0, r0, #2
 800e03e:	4350      	muls	r0, r2
 800e040:	1900      	adds	r0, r0, r4
}
 800e042:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 800e044:	0800f0c4 	.word	0x0800f0c4

0800e048 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 800e048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e04a:	000f      	movs	r7, r1
  uint32_t seconds = timeMs / 1000;
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e04c:	26fa      	movs	r6, #250	; 0xfa
  uint32_t seconds = timeMs / 1000;
 800e04e:	21fa      	movs	r1, #250	; 0xfa
{
 800e050:	0004      	movs	r4, r0
  uint32_t seconds = timeMs / 1000;
 800e052:	0089      	lsls	r1, r1, #2
 800e054:	0038      	movs	r0, r7
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e056:	00b6      	lsls	r6, r6, #2
  uint32_t seconds = timeMs / 1000;
 800e058:	f7f2 f886 	bl	8000168 <__udivsi3>
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e05c:	0033      	movs	r3, r6
 800e05e:	4343      	muls	r3, r0
 800e060:	1aff      	subs	r7, r7, r3
 800e062:	b2bb      	uxth	r3, r7
  SysTime_t DeltaTime = { 0 };

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e064:	4f0c      	ldr	r7, [pc, #48]	; (800e098 <SysTimeFromMs+0x50>)
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 800e066:	9300      	str	r3, [sp, #0]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e068:	68fb      	ldr	r3, [r7, #12]
  uint32_t seconds = timeMs / 1000;
 800e06a:	0005      	movs	r5, r0
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e06c:	4798      	blx	r3
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e06e:	687b      	ldr	r3, [r7, #4]
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800e070:	9001      	str	r0, [sp, #4]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800e072:	4798      	blx	r3
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800e074:	9a00      	ldr	r2, [sp, #0]
 800e076:	9b01      	ldr	r3, [sp, #4]
 800e078:	4694      	mov	ip, r2
 800e07a:	4463      	add	r3, ip
 800e07c:	b29a      	uxth	r2, r3
 800e07e:	b21b      	sxth	r3, r3
  c.Seconds = a.Seconds + b.Seconds;
 800e080:	1940      	adds	r0, r0, r5
  if( c.SubSeconds >= 1000 )
 800e082:	42b3      	cmp	r3, r6
 800e084:	db03      	blt.n	800e08e <SysTimeFromMs+0x46>
    c.SubSeconds -= 1000;
 800e086:	4b05      	ldr	r3, [pc, #20]	; (800e09c <SysTimeFromMs+0x54>)
    c.Seconds++;
 800e088:	3001      	adds	r0, #1
    c.SubSeconds -= 1000;
 800e08a:	18d2      	adds	r2, r2, r3
 800e08c:	b213      	sxth	r3, r2
  return c;
 800e08e:	6020      	str	r0, [r4, #0]
 800e090:	80a3      	strh	r3, [r4, #4]
  return SysTimeAdd( sysTime, DeltaTime );
}
 800e092:	0020      	movs	r0, r4
 800e094:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e096:	46c0      	nop			; (mov r8, r8)
 800e098:	0800f0c4 	.word	0x0800f0c4
 800e09c:	fffffc18 	.word	0xfffffc18

0800e0a0 <UTIL_TIMER_Init>:
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800e0a0:	2200      	movs	r2, #0
{
 800e0a2:	b510      	push	{r4, lr}
  TimerListHead = NULL;
 800e0a4:	4b02      	ldr	r3, [pc, #8]	; (800e0b0 <UTIL_TIMER_Init+0x10>)
 800e0a6:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800e0a8:	4b02      	ldr	r3, [pc, #8]	; (800e0b4 <UTIL_TIMER_Init+0x14>)
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	4798      	blx	r3
}
 800e0ae:	bd10      	pop	{r4, pc}
 800e0b0:	200018e4 	.word	0x200018e4
 800e0b4:	0800f0d8 	.word	0x0800f0d8

0800e0b8 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800e0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0ba:	0004      	movs	r4, r0
 800e0bc:	0017      	movs	r7, r2
 800e0be:	0008      	movs	r0, r1
 800e0c0:	001e      	movs	r6, r3
    TimerObject->Next = NULL;
    return UTIL_TIMER_OK;
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800e0c2:	2501      	movs	r5, #1
  if((TimerObject != NULL) && (Callback != NULL))
 800e0c4:	2c00      	cmp	r4, #0
 800e0c6:	d00e      	beq.n	800e0e6 <UTIL_TIMER_Create+0x2e>
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d00c      	beq.n	800e0e6 <UTIL_TIMER_Create+0x2e>
    TimerObject->Timestamp = 0U;
 800e0cc:	2500      	movs	r5, #0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e0ce:	4b07      	ldr	r3, [pc, #28]	; (800e0ec <UTIL_TIMER_Create+0x34>)
    TimerObject->Timestamp = 0U;
 800e0d0:	6025      	str	r5, [r4, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e0d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0d4:	4798      	blx	r3
    TimerObject->argument = Argument;
 800e0d6:	9b06      	ldr	r3, [sp, #24]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800e0d8:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 800e0da:	8125      	strh	r5, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800e0dc:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 800e0de:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 800e0e0:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800e0e2:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800e0e4:	6165      	str	r5, [r4, #20]
  }
}
 800e0e6:	0028      	movs	r0, r5
 800e0e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0ea:	46c0      	nop			; (mov r8, r8)
 800e0ec:	0800f0d8 	.word	0x0800f0d8

0800e0f0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800e0f0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800e0f2:	4c03      	ldr	r4, [pc, #12]	; (800e100 <UTIL_TIMER_GetCurrentTime+0x10>)
 800e0f4:	69e3      	ldr	r3, [r4, #28]
 800e0f6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 800e0f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e0fa:	4798      	blx	r3
}
 800e0fc:	bd10      	pop	{r4, pc}
 800e0fe:	46c0      	nop			; (mov r8, r8)
 800e100:	0800f0d8 	.word	0x0800f0d8

0800e104 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800e104:	b570      	push	{r4, r5, r6, lr}
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800e106:	4d06      	ldr	r5, [pc, #24]	; (800e120 <UTIL_TIMER_GetElapsedTime+0x1c>)
{
 800e108:	0006      	movs	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800e10a:	69eb      	ldr	r3, [r5, #28]
 800e10c:	4798      	blx	r3
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800e10e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800e110:	0004      	movs	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800e112:	0030      	movs	r0, r6
 800e114:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800e116:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800e118:	1a20      	subs	r0, r4, r0
 800e11a:	4798      	blx	r3
}
 800e11c:	bd70      	pop	{r4, r5, r6, pc}
 800e11e:	46c0      	nop			; (mov r8, r8)
 800e120:	0800f0d8 	.word	0x0800f0d8

0800e124 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e124:	4b05      	ldr	r3, [pc, #20]	; (800e13c <TimerExists+0x18>)
 800e126:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d101      	bne.n	800e130 <TimerExists+0xc>
    {
      return true;
    }
    cur = cur->Next;
  }
  return false;
 800e12c:	0018      	movs	r0, r3
}
 800e12e:	4770      	bx	lr
    if( cur == TimerObject )
 800e130:	4283      	cmp	r3, r0
 800e132:	d001      	beq.n	800e138 <TimerExists+0x14>
    cur = cur->Next;
 800e134:	695b      	ldr	r3, [r3, #20]
 800e136:	e7f7      	b.n	800e128 <TimerExists+0x4>
      return true;
 800e138:	2001      	movs	r0, #1
 800e13a:	e7f8      	b.n	800e12e <TimerExists+0xa>
 800e13c:	200018e4 	.word	0x200018e4

0800e140 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800e140:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e142:	4e0b      	ldr	r6, [pc, #44]	; (800e170 <TimerSetTimeout+0x30>)
{
 800e144:	0004      	movs	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e146:	6a33      	ldr	r3, [r6, #32]
 800e148:	4798      	blx	r3
  TimerObject->IsPending = 1;
 800e14a:	2301      	movs	r3, #1
 800e14c:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	69b7      	ldr	r7, [r6, #24]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800e152:	0005      	movs	r5, r0
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	47b8      	blx	r7
 800e158:	9b01      	ldr	r3, [sp, #4]
 800e15a:	1940      	adds	r0, r0, r5
 800e15c:	4283      	cmp	r3, r0
 800e15e:	d202      	bcs.n	800e166 <TimerSetTimeout+0x26>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800e160:	47b8      	blx	r7
 800e162:	1940      	adds	r0, r0, r5
 800e164:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800e166:	68b3      	ldr	r3, [r6, #8]
 800e168:	6820      	ldr	r0, [r4, #0]
 800e16a:	4798      	blx	r3
}
 800e16c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e16e:	46c0      	nop			; (mov r8, r8)
 800e170:	0800f0d8 	.word	0x0800f0d8

0800e174 <UTIL_TIMER_Stop>:
{
 800e174:	0003      	movs	r3, r0
 800e176:	b570      	push	{r4, r5, r6, lr}
    ret = UTIL_TIMER_INVALID_PARAM;
 800e178:	2001      	movs	r0, #1
  if (NULL != TimerObject)
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	d016      	beq.n	800e1ac <UTIL_TIMER_Stop+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e17e:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e182:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800e184:	4d11      	ldr	r5, [pc, #68]	; (800e1cc <UTIL_TIMER_Stop+0x58>)
    TimerObject->IsReloadStopped = 1U;
 800e186:	7298      	strb	r0, [r3, #10]
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800e188:	682a      	ldr	r2, [r5, #0]
    if(NULL != TimerListHead)
 800e18a:	2a00      	cmp	r2, #0
 800e18c:	d00b      	beq.n	800e1a6 <UTIL_TIMER_Stop+0x32>
      TimerObject->IsRunning = 0U;
 800e18e:	2100      	movs	r1, #0
 800e190:	7259      	strb	r1, [r3, #9]
          if( TimerListHead->Next != NULL )
 800e192:	6954      	ldr	r4, [r2, #20]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800e194:	4293      	cmp	r3, r2
 800e196:	d10f      	bne.n	800e1b8 <UTIL_TIMER_Stop+0x44>
          TimerListHead->IsPending = 0;
 800e198:	7219      	strb	r1, [r3, #8]
          if( TimerListHead->Next != NULL )
 800e19a:	428c      	cmp	r4, r1
 800e19c:	d007      	beq.n	800e1ae <UTIL_TIMER_Stop+0x3a>
            TimerSetTimeout( TimerListHead );
 800e19e:	0020      	movs	r0, r4
            TimerListHead = TimerListHead->Next;
 800e1a0:	602c      	str	r4, [r5, #0]
            TimerSetTimeout( TimerListHead );
 800e1a2:	f7ff ffcd 	bl	800e140 <TimerSetTimeout>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e1a6:	f386 8810 	msr	PRIMASK, r6
}
 800e1aa:	2000      	movs	r0, #0
}
 800e1ac:	bd70      	pop	{r4, r5, r6, pc}
            UTIL_TimerDriver.StopTimerEvt( );
 800e1ae:	4b08      	ldr	r3, [pc, #32]	; (800e1d0 <UTIL_TIMER_Stop+0x5c>)
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	4798      	blx	r3
            TimerListHead = NULL;
 800e1b4:	602c      	str	r4, [r5, #0]
 800e1b6:	e7f6      	b.n	800e1a6 <UTIL_TIMER_Stop+0x32>
            cur = cur->Next;
 800e1b8:	0011      	movs	r1, r2
 800e1ba:	6952      	ldr	r2, [r2, #20]
        while( cur != NULL )
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	d0f2      	beq.n	800e1a6 <UTIL_TIMER_Stop+0x32>
          if( cur == TimerObject )
 800e1c0:	4293      	cmp	r3, r2
 800e1c2:	d1f9      	bne.n	800e1b8 <UTIL_TIMER_Stop+0x44>
            if( cur->Next != NULL )
 800e1c4:	695b      	ldr	r3, [r3, #20]
              prev->Next = cur;
 800e1c6:	614b      	str	r3, [r1, #20]
 800e1c8:	e7ed      	b.n	800e1a6 <UTIL_TIMER_Stop+0x32>
 800e1ca:	46c0      	nop			; (mov r8, r8)
 800e1cc:	200018e4 	.word	0x200018e4
 800e1d0:	0800f0d8 	.word	0x0800f0d8

0800e1d4 <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e1d4:	4b09      	ldr	r3, [pc, #36]	; (800e1fc <TimerInsertTimer+0x28>)
{
 800e1d6:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e1d8:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800e1da:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 800e1dc:	6951      	ldr	r1, [r2, #20]
 800e1de:	2900      	cmp	r1, #0
 800e1e0:	d102      	bne.n	800e1e8 <TimerInsertTimer+0x14>
        cur = next;
        next = next->Next;
    }
    else
    {
        cur->Next = TimerObject;
 800e1e2:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 800e1e4:	6141      	str	r1, [r0, #20]

    }
  }
  cur->Next = TimerObject;
  TimerObject->Next = NULL;
}
 800e1e6:	bd10      	pop	{r4, pc}
    if( TimerObject->Timestamp  > next->Timestamp )
 800e1e8:	6804      	ldr	r4, [r0, #0]
 800e1ea:	6819      	ldr	r1, [r3, #0]
 800e1ec:	428c      	cmp	r4, r1
 800e1ee:	d902      	bls.n	800e1f6 <TimerInsertTimer+0x22>
        next = next->Next;
 800e1f0:	001a      	movs	r2, r3
 800e1f2:	695b      	ldr	r3, [r3, #20]
 800e1f4:	e7f2      	b.n	800e1dc <TimerInsertTimer+0x8>
 800e1f6:	0019      	movs	r1, r3
 800e1f8:	e7f3      	b.n	800e1e2 <TimerInsertTimer+0xe>
 800e1fa:	46c0      	nop			; (mov r8, r8)
 800e1fc:	200018e4 	.word	0x200018e4

0800e200 <TimerInsertNewHeadTimer>:
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e200:	4a05      	ldr	r2, [pc, #20]	; (800e218 <TimerInsertNewHeadTimer+0x18>)
{
 800e202:	b510      	push	{r4, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800e204:	6813      	ldr	r3, [r2, #0]

  if( cur != NULL )
 800e206:	2b00      	cmp	r3, #0
 800e208:	d001      	beq.n	800e20e <TimerInsertNewHeadTimer+0xe>
  {
    cur->IsPending = 0;
 800e20a:	2100      	movs	r1, #0
 800e20c:	7219      	strb	r1, [r3, #8]
  }

  TimerObject->Next = cur;
 800e20e:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 800e210:	6010      	str	r0, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800e212:	f7ff ff95 	bl	800e140 <TimerSetTimeout>
}
 800e216:	bd10      	pop	{r4, pc}
 800e218:	200018e4 	.word	0x200018e4

0800e21c <UTIL_TIMER_Start>:
{
 800e21c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e21e:	0004      	movs	r4, r0
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e220:	2501      	movs	r5, #1
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800e222:	2800      	cmp	r0, #0
 800e224:	d023      	beq.n	800e26e <UTIL_TIMER_Start+0x52>
 800e226:	f7ff ff7d 	bl	800e124 <TimerExists>
 800e22a:	2800      	cmp	r0, #0
 800e22c:	d11f      	bne.n	800e26e <UTIL_TIMER_Start+0x52>
 800e22e:	7a65      	ldrb	r5, [r4, #9]
 800e230:	2d00      	cmp	r5, #0
 800e232:	d12b      	bne.n	800e28c <UTIL_TIMER_Start+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e234:	f3ef 8310 	mrs	r3, PRIMASK
 800e238:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800e23a:	b672      	cpsid	i
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e23c:	4e14      	ldr	r6, [pc, #80]	; (800e290 <UTIL_TIMER_Start+0x74>)
    ticks = TimerObject->ReloadValue;
 800e23e:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800e240:	6a33      	ldr	r3, [r6, #32]
 800e242:	4798      	blx	r3
    TimerObject->Timestamp = ticks;
 800e244:	4287      	cmp	r7, r0
 800e246:	d200      	bcs.n	800e24a <UTIL_TIMER_Start+0x2e>
 800e248:	0007      	movs	r7, r0
    TimerObject->IsPending = 0U;
 800e24a:	2380      	movs	r3, #128	; 0x80
 800e24c:	005b      	lsls	r3, r3, #1
 800e24e:	8123      	strh	r3, [r4, #8]
    TimerObject->IsReloadStopped = 0U;
 800e250:	2300      	movs	r3, #0
    TimerObject->Timestamp = ticks;
 800e252:	6027      	str	r7, [r4, #0]
    if( TimerListHead == NULL )
 800e254:	4f0f      	ldr	r7, [pc, #60]	; (800e294 <UTIL_TIMER_Start+0x78>)
    TimerObject->IsReloadStopped = 0U;
 800e256:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d109      	bne.n	800e272 <UTIL_TIMER_Start+0x56>
      UTIL_TimerDriver.SetTimerContext();
 800e25e:	6933      	ldr	r3, [r6, #16]
 800e260:	4798      	blx	r3
        TimerInsertNewHeadTimer( TimerObject);
 800e262:	0020      	movs	r0, r4
 800e264:	f7ff ffcc 	bl	800e200 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e268:	9b01      	ldr	r3, [sp, #4]
 800e26a:	f383 8810 	msr	PRIMASK, r3
}
 800e26e:	0028      	movs	r0, r5
 800e270:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800e272:	69b3      	ldr	r3, [r6, #24]
 800e274:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 800e276:	6823      	ldr	r3, [r4, #0]
 800e278:	18c0      	adds	r0, r0, r3
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e27a:	683b      	ldr	r3, [r7, #0]
      TimerObject->Timestamp += elapsedTime;
 800e27c:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4298      	cmp	r0, r3
 800e282:	d3ee      	bcc.n	800e262 <UTIL_TIMER_Start+0x46>
        TimerInsertTimer( TimerObject);
 800e284:	0020      	movs	r0, r4
 800e286:	f7ff ffa5 	bl	800e1d4 <TimerInsertTimer>
 800e28a:	e7ed      	b.n	800e268 <UTIL_TIMER_Start+0x4c>
    ret =  UTIL_TIMER_INVALID_PARAM;
 800e28c:	2501      	movs	r5, #1
 800e28e:	e7ee      	b.n	800e26e <UTIL_TIMER_Start+0x52>
 800e290:	0800f0d8 	.word	0x0800f0d8
 800e294:	200018e4 	.word	0x200018e4

0800e298 <UTIL_TIMER_SetPeriod>:
{
 800e298:	b510      	push	{r4, lr}
	  ret = UTIL_TIMER_INVALID_PARAM;
 800e29a:	2301      	movs	r3, #1
{
 800e29c:	0004      	movs	r4, r0
 800e29e:	0008      	movs	r0, r1
  if(NULL == TimerObject)
 800e2a0:	2c00      	cmp	r4, #0
 800e2a2:	d010      	beq.n	800e2c6 <UTIL_TIMER_SetPeriod+0x2e>
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800e2a4:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <UTIL_TIMER_SetPeriod+0x34>)
 800e2a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a8:	4798      	blx	r3
 800e2aa:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 800e2ac:	0020      	movs	r0, r4
 800e2ae:	f7ff ff39 	bl	800e124 <TimerExists>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800e2b2:	2300      	movs	r3, #0
    if(TimerExists(TimerObject))
 800e2b4:	4298      	cmp	r0, r3
 800e2b6:	d006      	beq.n	800e2c6 <UTIL_TIMER_SetPeriod+0x2e>
      (void)UTIL_TIMER_Stop(TimerObject);
 800e2b8:	0020      	movs	r0, r4
 800e2ba:	f7ff ff5b 	bl	800e174 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800e2be:	0020      	movs	r0, r4
 800e2c0:	f7ff ffac 	bl	800e21c <UTIL_TIMER_Start>
 800e2c4:	0003      	movs	r3, r0
}
 800e2c6:	0018      	movs	r0, r3
 800e2c8:	bd10      	pop	{r4, pc}
 800e2ca:	46c0      	nop			; (mov r8, r8)
 800e2cc:	0800f0d8 	.word	0x0800f0d8

0800e2d0 <UTIL_TIMER_IRQ_Handler>:
{
 800e2d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2d2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800e2d6:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e2d8:	4e1c      	ldr	r6, [pc, #112]	; (800e34c <UTIL_TIMER_IRQ_Handler+0x7c>)
 800e2da:	6973      	ldr	r3, [r6, #20]
 800e2dc:	4798      	blx	r3
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e2de:	6933      	ldr	r3, [r6, #16]
  old  =  UTIL_TimerDriver.GetTimerContext( );
 800e2e0:	0004      	movs	r4, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800e2e2:	4798      	blx	r3
  if ( TimerListHead != NULL )
 800e2e4:	4d1a      	ldr	r5, [pc, #104]	; (800e350 <UTIL_TIMER_IRQ_Handler+0x80>)
  DeltaContext = now  - old; /*intentional wrap around */
 800e2e6:	1b01      	subs	r1, r0, r4
  if ( TimerListHead != NULL )
 800e2e8:	682b      	ldr	r3, [r5, #0]
        cur->Timestamp -= DeltaContext;
 800e2ea:	1a24      	subs	r4, r4, r0
  if ( TimerListHead != NULL )
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d01e      	beq.n	800e32e <UTIL_TIMER_IRQ_Handler+0x5e>
      if (cur->Timestamp > DeltaContext)
 800e2f0:	6818      	ldr	r0, [r3, #0]
        cur->Timestamp = 0;
 800e2f2:	2200      	movs	r2, #0
      if (cur->Timestamp > DeltaContext)
 800e2f4:	4288      	cmp	r0, r1
 800e2f6:	d900      	bls.n	800e2fa <UTIL_TIMER_IRQ_Handler+0x2a>
        cur->Timestamp -= DeltaContext;
 800e2f8:	1822      	adds	r2, r4, r0
 800e2fa:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 800e2fc:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 800e2fe:	e7f5      	b.n	800e2ec <UTIL_TIMER_IRQ_Handler+0x1c>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e300:	681c      	ldr	r4, [r3, #0]
 800e302:	2c00      	cmp	r4, #0
 800e304:	d003      	beq.n	800e30e <UTIL_TIMER_IRQ_Handler+0x3e>
 800e306:	69b3      	ldr	r3, [r6, #24]
 800e308:	4798      	blx	r3
 800e30a:	4284      	cmp	r4, r0
 800e30c:	d212      	bcs.n	800e334 <UTIL_TIMER_IRQ_Handler+0x64>
      cur = TimerListHead;
 800e30e:	682c      	ldr	r4, [r5, #0]
      TimerListHead = TimerListHead->Next;
 800e310:	6963      	ldr	r3, [r4, #20]
      cur->Callback(cur->argument);
 800e312:	6920      	ldr	r0, [r4, #16]
      TimerListHead = TimerListHead->Next;
 800e314:	602b      	str	r3, [r5, #0]
      cur->IsPending = 0;
 800e316:	2300      	movs	r3, #0
 800e318:	8123      	strh	r3, [r4, #8]
      cur->Callback(cur->argument);
 800e31a:	68e3      	ldr	r3, [r4, #12]
 800e31c:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800e31e:	2280      	movs	r2, #128	; 0x80
 800e320:	8963      	ldrh	r3, [r4, #10]
 800e322:	0052      	lsls	r2, r2, #1
 800e324:	4293      	cmp	r3, r2
 800e326:	d102      	bne.n	800e32e <UTIL_TIMER_IRQ_Handler+0x5e>
        (void)UTIL_TIMER_Start(cur);
 800e328:	0020      	movs	r0, r4
 800e32a:	f7ff ff77 	bl	800e21c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800e32e:	682b      	ldr	r3, [r5, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d1e5      	bne.n	800e300 <UTIL_TIMER_IRQ_Handler+0x30>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e334:	6828      	ldr	r0, [r5, #0]
 800e336:	2800      	cmp	r0, #0
 800e338:	d102      	bne.n	800e340 <UTIL_TIMER_IRQ_Handler+0x70>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e33a:	f387 8810 	msr	PRIMASK, r7
}
 800e33e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800e340:	7a03      	ldrb	r3, [r0, #8]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1f9      	bne.n	800e33a <UTIL_TIMER_IRQ_Handler+0x6a>
    TimerSetTimeout( TimerListHead );
 800e346:	f7ff fefb 	bl	800e140 <TimerSetTimeout>
 800e34a:	e7f6      	b.n	800e33a <UTIL_TIMER_IRQ_Handler+0x6a>
 800e34c:	0800f0d8 	.word	0x0800f0d8
 800e350:	200018e4 	.word	0x200018e4

0800e354 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800e354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e356:	b09d      	sub	sp, #116	; 0x74
 800e358:	9002      	str	r0, [sp, #8]
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
  {
    return 0;
 800e35a:	2000      	movs	r0, #0
{
 800e35c:	001c      	movs	r4, r3
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e35e:	9f02      	ldr	r7, [sp, #8]
{
 800e360:	9109      	str	r1, [sp, #36]	; 0x24
  if (size <= 0)
 800e362:	4281      	cmp	r1, r0
 800e364:	dc0a      	bgt.n	800e37c <tiny_vsnprintf_like+0x28>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
  }

  *str = '\0';
  return str - buf;
}
 800e366:	b01d      	add	sp, #116	; 0x74
 800e368:	bdf0      	pop	{r4, r5, r6, r7, pc}
    CHECK_STR_SIZE(buf, str, size);
 800e36a:	4298      	cmp	r0, r3
 800e36c:	da0d      	bge.n	800e38a <tiny_vsnprintf_like+0x36>
    if (*fmt != '%')
 800e36e:	2925      	cmp	r1, #37	; 0x25
 800e370:	d00e      	beq.n	800e390 <tiny_vsnprintf_like+0x3c>
      *str++ = *fmt;
 800e372:	7039      	strb	r1, [r7, #0]
      continue;
 800e374:	9201      	str	r2, [sp, #4]
      *str++ = *fmt;
 800e376:	3701      	adds	r7, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e378:	9a01      	ldr	r2, [sp, #4]
 800e37a:	3201      	adds	r2, #1
    CHECK_STR_SIZE(buf, str, size);
 800e37c:	9b02      	ldr	r3, [sp, #8]
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e37e:	7811      	ldrb	r1, [r2, #0]
    CHECK_STR_SIZE(buf, str, size);
 800e380:	1af8      	subs	r0, r7, r3
 800e382:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e384:	3b01      	subs	r3, #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800e386:	2900      	cmp	r1, #0
 800e388:	d1ef      	bne.n	800e36a <tiny_vsnprintf_like+0x16>
  *str = '\0';
 800e38a:	2300      	movs	r3, #0
 800e38c:	703b      	strb	r3, [r7, #0]
  return str - buf;
 800e38e:	e7ea      	b.n	800e366 <tiny_vsnprintf_like+0x12>
    fmt++;
 800e390:	1c51      	adds	r1, r2, #1
    if (*fmt == '0')
 800e392:	7852      	ldrb	r2, [r2, #1]
    fmt++;
 800e394:	9101      	str	r1, [sp, #4]
    if (*fmt == '0')
 800e396:	0010      	movs	r0, r2
 800e398:	3830      	subs	r0, #48	; 0x30
 800e39a:	9203      	str	r2, [sp, #12]
 800e39c:	4241      	negs	r1, r0
 800e39e:	4141      	adcs	r1, r0
    if (is_digit(*fmt))
 800e3a0:	b2c0      	uxtb	r0, r0
    flags = 0;
 800e3a2:	000a      	movs	r2, r1
    if (is_digit(*fmt))
 800e3a4:	2809      	cmp	r0, #9
 800e3a6:	d92e      	bls.n	800e406 <tiny_vsnprintf_like+0xb2>
    field_width = -1;
 800e3a8:	2001      	movs	r0, #1
 800e3aa:	4240      	negs	r0, r0
 800e3ac:	9000      	str	r0, [sp, #0]
    switch (*fmt)
 800e3ae:	9801      	ldr	r0, [sp, #4]
 800e3b0:	7800      	ldrb	r0, [r0, #0]
 800e3b2:	2869      	cmp	r0, #105	; 0x69
 800e3b4:	d100      	bne.n	800e3b8 <tiny_vsnprintf_like+0x64>
 800e3b6:	e0a4      	b.n	800e502 <tiny_vsnprintf_like+0x1ae>
 800e3b8:	d829      	bhi.n	800e40e <tiny_vsnprintf_like+0xba>
 800e3ba:	2863      	cmp	r0, #99	; 0x63
 800e3bc:	d038      	beq.n	800e430 <tiny_vsnprintf_like+0xdc>
 800e3be:	2864      	cmp	r0, #100	; 0x64
 800e3c0:	d100      	bne.n	800e3c4 <tiny_vsnprintf_like+0x70>
 800e3c2:	e09e      	b.n	800e502 <tiny_vsnprintf_like+0x1ae>
 800e3c4:	2858      	cmp	r0, #88	; 0x58
 800e3c6:	d066      	beq.n	800e496 <tiny_vsnprintf_like+0x142>
        if (*fmt != '%') *str++ = '%';
 800e3c8:	0039      	movs	r1, r7
 800e3ca:	2825      	cmp	r0, #37	; 0x25
 800e3cc:	d126      	bne.n	800e41c <tiny_vsnprintf_like+0xc8>
        if (*fmt)
 800e3ce:	9801      	ldr	r0, [sp, #4]
 800e3d0:	7800      	ldrb	r0, [r0, #0]
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d100      	bne.n	800e3d8 <tiny_vsnprintf_like+0x84>
 800e3d6:	e098      	b.n	800e50a <tiny_vsnprintf_like+0x1b6>
          *str++ = *fmt;
 800e3d8:	1c4f      	adds	r7, r1, #1
 800e3da:	7008      	strb	r0, [r1, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e3dc:	9902      	ldr	r1, [sp, #8]
 800e3de:	1a79      	subs	r1, r7, r1
 800e3e0:	4299      	cmp	r1, r3
 800e3e2:	db00      	blt.n	800e3e6 <tiny_vsnprintf_like+0x92>
 800e3e4:	e08f      	b.n	800e506 <tiny_vsnprintf_like+0x1b2>
 800e3e6:	e7c7      	b.n	800e378 <tiny_vsnprintf_like+0x24>
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e3e8:	9d01      	ldr	r5, [sp, #4]
 800e3ea:	3501      	adds	r5, #1
 800e3ec:	9501      	str	r5, [sp, #4]
 800e3ee:	9d00      	ldr	r5, [sp, #0]
 800e3f0:	4375      	muls	r5, r6
 800e3f2:	182d      	adds	r5, r5, r0
 800e3f4:	3d30      	subs	r5, #48	; 0x30
 800e3f6:	9500      	str	r5, [sp, #0]
 800e3f8:	9801      	ldr	r0, [sp, #4]
 800e3fa:	7800      	ldrb	r0, [r0, #0]
 800e3fc:	0005      	movs	r5, r0
 800e3fe:	3d30      	subs	r5, #48	; 0x30
 800e400:	2d09      	cmp	r5, #9
 800e402:	d9f1      	bls.n	800e3e8 <tiny_vsnprintf_like+0x94>
 800e404:	e7d3      	b.n	800e3ae <tiny_vsnprintf_like+0x5a>
  int i = 0;
 800e406:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800e408:	260a      	movs	r6, #10
  int i = 0;
 800e40a:	9000      	str	r0, [sp, #0]
 800e40c:	e7f4      	b.n	800e3f8 <tiny_vsnprintf_like+0xa4>
    switch (*fmt)
 800e40e:	2875      	cmp	r0, #117	; 0x75
 800e410:	d079      	beq.n	800e506 <tiny_vsnprintf_like+0x1b2>
 800e412:	2510      	movs	r5, #16
 800e414:	2878      	cmp	r0, #120	; 0x78
 800e416:	d041      	beq.n	800e49c <tiny_vsnprintf_like+0x148>
 800e418:	2873      	cmp	r0, #115	; 0x73
 800e41a:	d01d      	beq.n	800e458 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 800e41c:	2025      	movs	r0, #37	; 0x25
 800e41e:	7038      	strb	r0, [r7, #0]
        CHECK_STR_SIZE(buf, str, size);
 800e420:	9802      	ldr	r0, [sp, #8]
        if (*fmt != '%') *str++ = '%';
 800e422:	1c79      	adds	r1, r7, #1
 800e424:	000f      	movs	r7, r1
    base = 10;
 800e426:	250a      	movs	r5, #10
        CHECK_STR_SIZE(buf, str, size);
 800e428:	1a08      	subs	r0, r1, r0
 800e42a:	4298      	cmp	r0, r3
 800e42c:	da36      	bge.n	800e49c <tiny_vsnprintf_like+0x148>
 800e42e:	e7ce      	b.n	800e3ce <tiny_vsnprintf_like+0x7a>
          while (--field_width > 0) *str++ = ' ';
 800e430:	2500      	movs	r5, #0
 800e432:	9b00      	ldr	r3, [sp, #0]
 800e434:	42ab      	cmp	r3, r5
 800e436:	dd00      	ble.n	800e43a <tiny_vsnprintf_like+0xe6>
 800e438:	1e5d      	subs	r5, r3, #1
 800e43a:	002a      	movs	r2, r5
 800e43c:	2120      	movs	r1, #32
 800e43e:	0038      	movs	r0, r7
 800e440:	f000 f9be 	bl	800e7c0 <memset>
 800e444:	9a00      	ldr	r2, [sp, #0]
 800e446:	2301      	movs	r3, #1
 800e448:	197d      	adds	r5, r7, r5
 800e44a:	2a00      	cmp	r2, #0
 800e44c:	dd00      	ble.n	800e450 <tiny_vsnprintf_like+0xfc>
 800e44e:	0013      	movs	r3, r2
 800e450:	18ff      	adds	r7, r7, r3
        *str++ = (unsigned char) va_arg(args, int);
 800e452:	cc08      	ldmia	r4!, {r3}
 800e454:	702b      	strb	r3, [r5, #0]
        continue;
 800e456:	e78f      	b.n	800e378 <tiny_vsnprintf_like+0x24>
        s = va_arg(args, char *);
 800e458:	cc40      	ldmia	r4!, {r6}
        if (!s) s = "<NULL>";
 800e45a:	2e00      	cmp	r6, #0
 800e45c:	d100      	bne.n	800e460 <tiny_vsnprintf_like+0x10c>
 800e45e:	4e4f      	ldr	r6, [pc, #316]	; (800e59c <tiny_vsnprintf_like+0x248>)
        len = strlen(s);
 800e460:	0030      	movs	r0, r6
 800e462:	f7f1 fe51 	bl	8000108 <strlen>
          while (len < field_width--) *str++ = ' ';
 800e466:	2300      	movs	r3, #0
 800e468:	9303      	str	r3, [sp, #12]
 800e46a:	9b00      	ldr	r3, [sp, #0]
        len = strlen(s);
 800e46c:	0005      	movs	r5, r0
          while (len < field_width--) *str++ = ' ';
 800e46e:	4283      	cmp	r3, r0
 800e470:	db01      	blt.n	800e476 <tiny_vsnprintf_like+0x122>
 800e472:	1a1b      	subs	r3, r3, r0
 800e474:	9303      	str	r3, [sp, #12]
 800e476:	0038      	movs	r0, r7
 800e478:	2120      	movs	r1, #32
 800e47a:	9a03      	ldr	r2, [sp, #12]
 800e47c:	f000 f9a0 	bl	800e7c0 <memset>
 800e480:	9b03      	ldr	r3, [sp, #12]
 800e482:	18ff      	adds	r7, r7, r3
        for (i = 0; i < len; ++i) *str++ = *s++;
 800e484:	2300      	movs	r3, #0
 800e486:	42ab      	cmp	r3, r5
 800e488:	db01      	blt.n	800e48e <tiny_vsnprintf_like+0x13a>
 800e48a:	197f      	adds	r7, r7, r5
 800e48c:	e774      	b.n	800e378 <tiny_vsnprintf_like+0x24>
 800e48e:	5cf2      	ldrb	r2, [r6, r3]
 800e490:	54fa      	strb	r2, [r7, r3]
 800e492:	3301      	adds	r3, #1
 800e494:	e7f7      	b.n	800e486 <tiny_vsnprintf_like+0x132>
        flags |= UPPERCASE;
 800e496:	2240      	movs	r2, #64	; 0x40
        base = 16;
 800e498:	2510      	movs	r5, #16
        flags |= UPPERCASE;
 800e49a:	430a      	orrs	r2, r1
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e49c:	9802      	ldr	r0, [sp, #8]
    else if (flags & SIGN)
 800e49e:	2102      	movs	r1, #2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e4a0:	1a3e      	subs	r6, r7, r0
 800e4a2:	0020      	movs	r0, r4
 800e4a4:	1b9e      	subs	r6, r3, r6
 800e4a6:	c808      	ldmia	r0!, {r3}
    else if (flags & SIGN)
 800e4a8:	4011      	ands	r1, r2
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e4aa:	9004      	str	r0, [sp, #16]
  if (type & UPPERCASE)  dig = upper_digits;
 800e4ac:	483c      	ldr	r0, [pc, #240]	; (800e5a0 <tiny_vsnprintf_like+0x24c>)
 800e4ae:	9007      	str	r0, [sp, #28]
 800e4b0:	2040      	movs	r0, #64	; 0x40
 800e4b2:	4202      	tst	r2, r0
 800e4b4:	d101      	bne.n	800e4ba <tiny_vsnprintf_like+0x166>
  char *dig = lower_digits;
 800e4b6:	4a3b      	ldr	r2, [pc, #236]	; (800e5a4 <tiny_vsnprintf_like+0x250>)
 800e4b8:	9207      	str	r2, [sp, #28]
  c = (type & ZEROPAD) ? '0' : ' ';
 800e4ba:	2230      	movs	r2, #48	; 0x30
 800e4bc:	9208      	str	r2, [sp, #32]
 800e4be:	9a03      	ldr	r2, [sp, #12]
 800e4c0:	2a30      	cmp	r2, #48	; 0x30
 800e4c2:	d001      	beq.n	800e4c8 <tiny_vsnprintf_like+0x174>
 800e4c4:	2220      	movs	r2, #32
 800e4c6:	9208      	str	r2, [sp, #32]
  if (type & SIGN)
 800e4c8:	2900      	cmp	r1, #0
 800e4ca:	d023      	beq.n	800e514 <tiny_vsnprintf_like+0x1c0>
    if (num < 0)
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	da21      	bge.n	800e514 <tiny_vsnprintf_like+0x1c0>
      size--;
 800e4d0:	9a00      	ldr	r2, [sp, #0]
      num = -num;
 800e4d2:	425b      	negs	r3, r3
      size--;
 800e4d4:	3a01      	subs	r2, #1
 800e4d6:	9200      	str	r2, [sp, #0]
      sign = '-';
 800e4d8:	222d      	movs	r2, #45	; 0x2d
  if (base < 2 || base > 36) return 0;
 800e4da:	2400      	movs	r4, #0
 800e4dc:	9205      	str	r2, [sp, #20]
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800e4de:	0018      	movs	r0, r3
 800e4e0:	0029      	movs	r1, r5
 800e4e2:	9306      	str	r3, [sp, #24]
 800e4e4:	f7f1 fec6 	bl	8000274 <__aeabi_uidivmod>
 800e4e8:	0022      	movs	r2, r4
 800e4ea:	4684      	mov	ip, r0
 800e4ec:	9b07      	ldr	r3, [sp, #28]
 800e4ee:	3401      	adds	r4, #1
 800e4f0:	5c59      	ldrb	r1, [r3, r1]
 800e4f2:	ab0b      	add	r3, sp, #44	; 0x2c
 800e4f4:	5499      	strb	r1, [r3, r2]
    while (num != 0)
 800e4f6:	9a06      	ldr	r2, [sp, #24]
 800e4f8:	0020      	movs	r0, r4
      num = ((unsigned long) num) / (unsigned) base;
 800e4fa:	4663      	mov	r3, ip
    while (num != 0)
 800e4fc:	4295      	cmp	r5, r2
 800e4fe:	d9ee      	bls.n	800e4de <tiny_vsnprintf_like+0x18a>
 800e500:	e011      	b.n	800e526 <tiny_vsnprintf_like+0x1d2>
        flags |= SIGN;
 800e502:	2202      	movs	r2, #2
 800e504:	430a      	orrs	r2, r1
    base = 10;
 800e506:	250a      	movs	r5, #10
 800e508:	e7c8      	b.n	800e49c <tiny_vsnprintf_like+0x148>
          --fmt;
 800e50a:	9801      	ldr	r0, [sp, #4]
 800e50c:	000f      	movs	r7, r1
 800e50e:	3801      	subs	r0, #1
 800e510:	9001      	str	r0, [sp, #4]
 800e512:	e763      	b.n	800e3dc <tiny_vsnprintf_like+0x88>
  if (num == 0)
 800e514:	2b00      	cmp	r3, #0
 800e516:	d001      	beq.n	800e51c <tiny_vsnprintf_like+0x1c8>
 800e518:	2200      	movs	r2, #0
 800e51a:	e7de      	b.n	800e4da <tiny_vsnprintf_like+0x186>
    tmp[i++] = '0';
 800e51c:	2130      	movs	r1, #48	; 0x30
 800e51e:	2001      	movs	r0, #1
 800e520:	aa0b      	add	r2, sp, #44	; 0x2c
 800e522:	7011      	strb	r1, [r2, #0]
 800e524:	9305      	str	r3, [sp, #20]
  size -= precision;
 800e526:	9b00      	ldr	r3, [sp, #0]
 800e528:	1a1c      	subs	r4, r3, r0
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e52a:	9b03      	ldr	r3, [sp, #12]
 800e52c:	2b30      	cmp	r3, #48	; 0x30
 800e52e:	d006      	beq.n	800e53e <tiny_vsnprintf_like+0x1ea>
 800e530:	003b      	movs	r3, r7
 800e532:	2120      	movs	r1, #32
 800e534:	0022      	movs	r2, r4
 800e536:	001f      	movs	r7, r3
 800e538:	3c01      	subs	r4, #1
 800e53a:	2a00      	cmp	r2, #0
 800e53c:	dc0c      	bgt.n	800e558 <tiny_vsnprintf_like+0x204>
  if (sign) ASSIGN_STR(sign);
 800e53e:	9b05      	ldr	r3, [sp, #20]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d029      	beq.n	800e598 <tiny_vsnprintf_like+0x244>
 800e544:	232d      	movs	r3, #45	; 0x2d
 800e546:	3e01      	subs	r6, #1
 800e548:	1c7a      	adds	r2, r7, #1
 800e54a:	703b      	strb	r3, [r7, #0]
 800e54c:	2e00      	cmp	r6, #0
 800e54e:	d009      	beq.n	800e564 <tiny_vsnprintf_like+0x210>
 800e550:	0013      	movs	r3, r2
 800e552:	0031      	movs	r1, r6
 800e554:	1ba4      	subs	r4, r4, r6
 800e556:	e00f      	b.n	800e578 <tiny_vsnprintf_like+0x224>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800e558:	3301      	adds	r3, #1
 800e55a:	3e01      	subs	r6, #1
 800e55c:	001a      	movs	r2, r3
 800e55e:	7039      	strb	r1, [r7, #0]
 800e560:	2e00      	cmp	r6, #0
 800e562:	d1e7      	bne.n	800e534 <tiny_vsnprintf_like+0x1e0>
    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800e564:	0017      	movs	r7, r2
 800e566:	9c04      	ldr	r4, [sp, #16]
 800e568:	e706      	b.n	800e378 <tiny_vsnprintf_like+0x24>
  while (size-- > 0) ASSIGN_STR(c);
 800e56a:	9e08      	ldr	r6, [sp, #32]
 800e56c:	3301      	adds	r3, #1
 800e56e:	3901      	subs	r1, #1
 800e570:	001a      	movs	r2, r3
 800e572:	702e      	strb	r6, [r5, #0]
 800e574:	2900      	cmp	r1, #0
 800e576:	d0f5      	beq.n	800e564 <tiny_vsnprintf_like+0x210>
 800e578:	1862      	adds	r2, r4, r1
 800e57a:	001d      	movs	r5, r3
 800e57c:	2a00      	cmp	r2, #0
 800e57e:	dcf4      	bgt.n	800e56a <tiny_vsnprintf_like+0x216>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800e580:	ac0b      	add	r4, sp, #44	; 0x2c
 800e582:	1859      	adds	r1, r3, r1
 800e584:	001a      	movs	r2, r3
 800e586:	3801      	subs	r0, #1
 800e588:	d3ec      	bcc.n	800e564 <tiny_vsnprintf_like+0x210>
 800e58a:	5d05      	ldrb	r5, [r0, r4]
 800e58c:	1c53      	adds	r3, r2, #1
 800e58e:	7015      	strb	r5, [r2, #0]
 800e590:	428b      	cmp	r3, r1
 800e592:	d1f7      	bne.n	800e584 <tiny_vsnprintf_like+0x230>
 800e594:	001a      	movs	r2, r3
 800e596:	e7e5      	b.n	800e564 <tiny_vsnprintf_like+0x210>
 800e598:	003a      	movs	r2, r7
 800e59a:	e7d9      	b.n	800e550 <tiny_vsnprintf_like+0x1fc>
 800e59c:	0800fcaa 	.word	0x0800fcaa
 800e5a0:	0800fcd6 	.word	0x0800fcd6
 800e5a4:	0800fcb1 	.word	0x0800fcb1

0800e5a8 <calloc>:
 800e5a8:	b510      	push	{r4, lr}
 800e5aa:	4b03      	ldr	r3, [pc, #12]	; (800e5b8 <calloc+0x10>)
 800e5ac:	000a      	movs	r2, r1
 800e5ae:	0001      	movs	r1, r0
 800e5b0:	6818      	ldr	r0, [r3, #0]
 800e5b2:	f000 f803 	bl	800e5bc <_calloc_r>
 800e5b6:	bd10      	pop	{r4, pc}
 800e5b8:	20000150 	.word	0x20000150

0800e5bc <_calloc_r>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	0c0b      	lsrs	r3, r1, #16
 800e5c0:	0c15      	lsrs	r5, r2, #16
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d11e      	bne.n	800e604 <_calloc_r+0x48>
 800e5c6:	2d00      	cmp	r5, #0
 800e5c8:	d10c      	bne.n	800e5e4 <_calloc_r+0x28>
 800e5ca:	b289      	uxth	r1, r1
 800e5cc:	b294      	uxth	r4, r2
 800e5ce:	434c      	muls	r4, r1
 800e5d0:	0021      	movs	r1, r4
 800e5d2:	f000 f843 	bl	800e65c <_malloc_r>
 800e5d6:	1e05      	subs	r5, r0, #0
 800e5d8:	d01b      	beq.n	800e612 <_calloc_r+0x56>
 800e5da:	0022      	movs	r2, r4
 800e5dc:	2100      	movs	r1, #0
 800e5de:	f000 f8ef 	bl	800e7c0 <memset>
 800e5e2:	e016      	b.n	800e612 <_calloc_r+0x56>
 800e5e4:	1c2b      	adds	r3, r5, #0
 800e5e6:	1c0c      	adds	r4, r1, #0
 800e5e8:	b289      	uxth	r1, r1
 800e5ea:	b292      	uxth	r2, r2
 800e5ec:	434a      	muls	r2, r1
 800e5ee:	b2a1      	uxth	r1, r4
 800e5f0:	b29c      	uxth	r4, r3
 800e5f2:	434c      	muls	r4, r1
 800e5f4:	0c13      	lsrs	r3, r2, #16
 800e5f6:	18e4      	adds	r4, r4, r3
 800e5f8:	0c23      	lsrs	r3, r4, #16
 800e5fa:	d107      	bne.n	800e60c <_calloc_r+0x50>
 800e5fc:	0424      	lsls	r4, r4, #16
 800e5fe:	b292      	uxth	r2, r2
 800e600:	4314      	orrs	r4, r2
 800e602:	e7e5      	b.n	800e5d0 <_calloc_r+0x14>
 800e604:	2d00      	cmp	r5, #0
 800e606:	d101      	bne.n	800e60c <_calloc_r+0x50>
 800e608:	1c14      	adds	r4, r2, #0
 800e60a:	e7ed      	b.n	800e5e8 <_calloc_r+0x2c>
 800e60c:	230c      	movs	r3, #12
 800e60e:	2500      	movs	r5, #0
 800e610:	6003      	str	r3, [r0, #0]
 800e612:	0028      	movs	r0, r5
 800e614:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e618 <sbrk_aligned>:
 800e618:	b570      	push	{r4, r5, r6, lr}
 800e61a:	4e0f      	ldr	r6, [pc, #60]	; (800e658 <sbrk_aligned+0x40>)
 800e61c:	000d      	movs	r5, r1
 800e61e:	6831      	ldr	r1, [r6, #0]
 800e620:	0004      	movs	r4, r0
 800e622:	2900      	cmp	r1, #0
 800e624:	d102      	bne.n	800e62c <sbrk_aligned+0x14>
 800e626:	f000 f8d3 	bl	800e7d0 <_sbrk_r>
 800e62a:	6030      	str	r0, [r6, #0]
 800e62c:	0029      	movs	r1, r5
 800e62e:	0020      	movs	r0, r4
 800e630:	f000 f8ce 	bl	800e7d0 <_sbrk_r>
 800e634:	1c43      	adds	r3, r0, #1
 800e636:	d00a      	beq.n	800e64e <sbrk_aligned+0x36>
 800e638:	2303      	movs	r3, #3
 800e63a:	1cc5      	adds	r5, r0, #3
 800e63c:	439d      	bics	r5, r3
 800e63e:	42a8      	cmp	r0, r5
 800e640:	d007      	beq.n	800e652 <sbrk_aligned+0x3a>
 800e642:	1a29      	subs	r1, r5, r0
 800e644:	0020      	movs	r0, r4
 800e646:	f000 f8c3 	bl	800e7d0 <_sbrk_r>
 800e64a:	3001      	adds	r0, #1
 800e64c:	d101      	bne.n	800e652 <sbrk_aligned+0x3a>
 800e64e:	2501      	movs	r5, #1
 800e650:	426d      	negs	r5, r5
 800e652:	0028      	movs	r0, r5
 800e654:	bd70      	pop	{r4, r5, r6, pc}
 800e656:	46c0      	nop			; (mov r8, r8)
 800e658:	200018ec 	.word	0x200018ec

0800e65c <_malloc_r>:
 800e65c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e65e:	2203      	movs	r2, #3
 800e660:	1ccb      	adds	r3, r1, #3
 800e662:	4393      	bics	r3, r2
 800e664:	3308      	adds	r3, #8
 800e666:	0006      	movs	r6, r0
 800e668:	001f      	movs	r7, r3
 800e66a:	2b0c      	cmp	r3, #12
 800e66c:	d238      	bcs.n	800e6e0 <_malloc_r+0x84>
 800e66e:	270c      	movs	r7, #12
 800e670:	42b9      	cmp	r1, r7
 800e672:	d837      	bhi.n	800e6e4 <_malloc_r+0x88>
 800e674:	0030      	movs	r0, r6
 800e676:	f000 f873 	bl	800e760 <__malloc_lock>
 800e67a:	4b38      	ldr	r3, [pc, #224]	; (800e75c <_malloc_r+0x100>)
 800e67c:	9300      	str	r3, [sp, #0]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	001c      	movs	r4, r3
 800e682:	2c00      	cmp	r4, #0
 800e684:	d133      	bne.n	800e6ee <_malloc_r+0x92>
 800e686:	0039      	movs	r1, r7
 800e688:	0030      	movs	r0, r6
 800e68a:	f7ff ffc5 	bl	800e618 <sbrk_aligned>
 800e68e:	0004      	movs	r4, r0
 800e690:	1c43      	adds	r3, r0, #1
 800e692:	d15e      	bne.n	800e752 <_malloc_r+0xf6>
 800e694:	9b00      	ldr	r3, [sp, #0]
 800e696:	681c      	ldr	r4, [r3, #0]
 800e698:	0025      	movs	r5, r4
 800e69a:	2d00      	cmp	r5, #0
 800e69c:	d14e      	bne.n	800e73c <_malloc_r+0xe0>
 800e69e:	2c00      	cmp	r4, #0
 800e6a0:	d051      	beq.n	800e746 <_malloc_r+0xea>
 800e6a2:	6823      	ldr	r3, [r4, #0]
 800e6a4:	0029      	movs	r1, r5
 800e6a6:	18e3      	adds	r3, r4, r3
 800e6a8:	0030      	movs	r0, r6
 800e6aa:	9301      	str	r3, [sp, #4]
 800e6ac:	f000 f890 	bl	800e7d0 <_sbrk_r>
 800e6b0:	9b01      	ldr	r3, [sp, #4]
 800e6b2:	4283      	cmp	r3, r0
 800e6b4:	d147      	bne.n	800e746 <_malloc_r+0xea>
 800e6b6:	6823      	ldr	r3, [r4, #0]
 800e6b8:	0030      	movs	r0, r6
 800e6ba:	1aff      	subs	r7, r7, r3
 800e6bc:	0039      	movs	r1, r7
 800e6be:	f7ff ffab 	bl	800e618 <sbrk_aligned>
 800e6c2:	3001      	adds	r0, #1
 800e6c4:	d03f      	beq.n	800e746 <_malloc_r+0xea>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	19db      	adds	r3, r3, r7
 800e6ca:	6023      	str	r3, [r4, #0]
 800e6cc:	9b00      	ldr	r3, [sp, #0]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d040      	beq.n	800e756 <_malloc_r+0xfa>
 800e6d4:	685a      	ldr	r2, [r3, #4]
 800e6d6:	42a2      	cmp	r2, r4
 800e6d8:	d133      	bne.n	800e742 <_malloc_r+0xe6>
 800e6da:	2200      	movs	r2, #0
 800e6dc:	605a      	str	r2, [r3, #4]
 800e6de:	e014      	b.n	800e70a <_malloc_r+0xae>
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	dac5      	bge.n	800e670 <_malloc_r+0x14>
 800e6e4:	230c      	movs	r3, #12
 800e6e6:	2500      	movs	r5, #0
 800e6e8:	6033      	str	r3, [r6, #0]
 800e6ea:	0028      	movs	r0, r5
 800e6ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e6ee:	6821      	ldr	r1, [r4, #0]
 800e6f0:	1bc9      	subs	r1, r1, r7
 800e6f2:	d420      	bmi.n	800e736 <_malloc_r+0xda>
 800e6f4:	290b      	cmp	r1, #11
 800e6f6:	d918      	bls.n	800e72a <_malloc_r+0xce>
 800e6f8:	19e2      	adds	r2, r4, r7
 800e6fa:	6027      	str	r7, [r4, #0]
 800e6fc:	42a3      	cmp	r3, r4
 800e6fe:	d112      	bne.n	800e726 <_malloc_r+0xca>
 800e700:	9b00      	ldr	r3, [sp, #0]
 800e702:	601a      	str	r2, [r3, #0]
 800e704:	6863      	ldr	r3, [r4, #4]
 800e706:	6011      	str	r1, [r2, #0]
 800e708:	6053      	str	r3, [r2, #4]
 800e70a:	0030      	movs	r0, r6
 800e70c:	0025      	movs	r5, r4
 800e70e:	f000 f82f 	bl	800e770 <__malloc_unlock>
 800e712:	2207      	movs	r2, #7
 800e714:	350b      	adds	r5, #11
 800e716:	1d23      	adds	r3, r4, #4
 800e718:	4395      	bics	r5, r2
 800e71a:	1aea      	subs	r2, r5, r3
 800e71c:	429d      	cmp	r5, r3
 800e71e:	d0e4      	beq.n	800e6ea <_malloc_r+0x8e>
 800e720:	1b5b      	subs	r3, r3, r5
 800e722:	50a3      	str	r3, [r4, r2]
 800e724:	e7e1      	b.n	800e6ea <_malloc_r+0x8e>
 800e726:	605a      	str	r2, [r3, #4]
 800e728:	e7ec      	b.n	800e704 <_malloc_r+0xa8>
 800e72a:	6862      	ldr	r2, [r4, #4]
 800e72c:	42a3      	cmp	r3, r4
 800e72e:	d1d5      	bne.n	800e6dc <_malloc_r+0x80>
 800e730:	9b00      	ldr	r3, [sp, #0]
 800e732:	601a      	str	r2, [r3, #0]
 800e734:	e7e9      	b.n	800e70a <_malloc_r+0xae>
 800e736:	0023      	movs	r3, r4
 800e738:	6864      	ldr	r4, [r4, #4]
 800e73a:	e7a2      	b.n	800e682 <_malloc_r+0x26>
 800e73c:	002c      	movs	r4, r5
 800e73e:	686d      	ldr	r5, [r5, #4]
 800e740:	e7ab      	b.n	800e69a <_malloc_r+0x3e>
 800e742:	0013      	movs	r3, r2
 800e744:	e7c4      	b.n	800e6d0 <_malloc_r+0x74>
 800e746:	230c      	movs	r3, #12
 800e748:	0030      	movs	r0, r6
 800e74a:	6033      	str	r3, [r6, #0]
 800e74c:	f000 f810 	bl	800e770 <__malloc_unlock>
 800e750:	e7cb      	b.n	800e6ea <_malloc_r+0x8e>
 800e752:	6027      	str	r7, [r4, #0]
 800e754:	e7d9      	b.n	800e70a <_malloc_r+0xae>
 800e756:	605b      	str	r3, [r3, #4]
 800e758:	deff      	udf	#255	; 0xff
 800e75a:	46c0      	nop			; (mov r8, r8)
 800e75c:	200018e8 	.word	0x200018e8

0800e760 <__malloc_lock>:
 800e760:	b510      	push	{r4, lr}
 800e762:	4802      	ldr	r0, [pc, #8]	; (800e76c <__malloc_lock+0xc>)
 800e764:	f000 f870 	bl	800e848 <__retarget_lock_acquire_recursive>
 800e768:	bd10      	pop	{r4, pc}
 800e76a:	46c0      	nop			; (mov r8, r8)
 800e76c:	20001a28 	.word	0x20001a28

0800e770 <__malloc_unlock>:
 800e770:	b510      	push	{r4, lr}
 800e772:	4802      	ldr	r0, [pc, #8]	; (800e77c <__malloc_unlock+0xc>)
 800e774:	f000 f869 	bl	800e84a <__retarget_lock_release_recursive>
 800e778:	bd10      	pop	{r4, pc}
 800e77a:	46c0      	nop			; (mov r8, r8)
 800e77c:	20001a28 	.word	0x20001a28

0800e780 <siprintf>:
 800e780:	b40e      	push	{r1, r2, r3}
 800e782:	b500      	push	{lr}
 800e784:	490b      	ldr	r1, [pc, #44]	; (800e7b4 <siprintf+0x34>)
 800e786:	b09c      	sub	sp, #112	; 0x70
 800e788:	ab1d      	add	r3, sp, #116	; 0x74
 800e78a:	9002      	str	r0, [sp, #8]
 800e78c:	9006      	str	r0, [sp, #24]
 800e78e:	9107      	str	r1, [sp, #28]
 800e790:	9104      	str	r1, [sp, #16]
 800e792:	4809      	ldr	r0, [pc, #36]	; (800e7b8 <siprintf+0x38>)
 800e794:	4909      	ldr	r1, [pc, #36]	; (800e7bc <siprintf+0x3c>)
 800e796:	cb04      	ldmia	r3!, {r2}
 800e798:	9105      	str	r1, [sp, #20]
 800e79a:	6800      	ldr	r0, [r0, #0]
 800e79c:	a902      	add	r1, sp, #8
 800e79e:	9301      	str	r3, [sp, #4]
 800e7a0:	f000 f8c0 	bl	800e924 <_svfiprintf_r>
 800e7a4:	2200      	movs	r2, #0
 800e7a6:	9b02      	ldr	r3, [sp, #8]
 800e7a8:	701a      	strb	r2, [r3, #0]
 800e7aa:	b01c      	add	sp, #112	; 0x70
 800e7ac:	bc08      	pop	{r3}
 800e7ae:	b003      	add	sp, #12
 800e7b0:	4718      	bx	r3
 800e7b2:	46c0      	nop			; (mov r8, r8)
 800e7b4:	7fffffff 	.word	0x7fffffff
 800e7b8:	20000150 	.word	0x20000150
 800e7bc:	ffff0208 	.word	0xffff0208

0800e7c0 <memset>:
 800e7c0:	0003      	movs	r3, r0
 800e7c2:	1882      	adds	r2, r0, r2
 800e7c4:	4293      	cmp	r3, r2
 800e7c6:	d100      	bne.n	800e7ca <memset+0xa>
 800e7c8:	4770      	bx	lr
 800e7ca:	7019      	strb	r1, [r3, #0]
 800e7cc:	3301      	adds	r3, #1
 800e7ce:	e7f9      	b.n	800e7c4 <memset+0x4>

0800e7d0 <_sbrk_r>:
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	b570      	push	{r4, r5, r6, lr}
 800e7d4:	4d06      	ldr	r5, [pc, #24]	; (800e7f0 <_sbrk_r+0x20>)
 800e7d6:	0004      	movs	r4, r0
 800e7d8:	0008      	movs	r0, r1
 800e7da:	602b      	str	r3, [r5, #0]
 800e7dc:	f7f4 fb94 	bl	8002f08 <_sbrk>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d103      	bne.n	800e7ec <_sbrk_r+0x1c>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d000      	beq.n	800e7ec <_sbrk_r+0x1c>
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	bd70      	pop	{r4, r5, r6, pc}
 800e7ee:	46c0      	nop			; (mov r8, r8)
 800e7f0:	20001a2c 	.word	0x20001a2c

0800e7f4 <__errno>:
 800e7f4:	4b01      	ldr	r3, [pc, #4]	; (800e7fc <__errno+0x8>)
 800e7f6:	6818      	ldr	r0, [r3, #0]
 800e7f8:	4770      	bx	lr
 800e7fa:	46c0      	nop			; (mov r8, r8)
 800e7fc:	20000150 	.word	0x20000150

0800e800 <__libc_init_array>:
 800e800:	b570      	push	{r4, r5, r6, lr}
 800e802:	2600      	movs	r6, #0
 800e804:	4c0c      	ldr	r4, [pc, #48]	; (800e838 <__libc_init_array+0x38>)
 800e806:	4d0d      	ldr	r5, [pc, #52]	; (800e83c <__libc_init_array+0x3c>)
 800e808:	1b64      	subs	r4, r4, r5
 800e80a:	10a4      	asrs	r4, r4, #2
 800e80c:	42a6      	cmp	r6, r4
 800e80e:	d109      	bne.n	800e824 <__libc_init_array+0x24>
 800e810:	2600      	movs	r6, #0
 800e812:	f000 fc33 	bl	800f07c <_init>
 800e816:	4c0a      	ldr	r4, [pc, #40]	; (800e840 <__libc_init_array+0x40>)
 800e818:	4d0a      	ldr	r5, [pc, #40]	; (800e844 <__libc_init_array+0x44>)
 800e81a:	1b64      	subs	r4, r4, r5
 800e81c:	10a4      	asrs	r4, r4, #2
 800e81e:	42a6      	cmp	r6, r4
 800e820:	d105      	bne.n	800e82e <__libc_init_array+0x2e>
 800e822:	bd70      	pop	{r4, r5, r6, pc}
 800e824:	00b3      	lsls	r3, r6, #2
 800e826:	58eb      	ldr	r3, [r5, r3]
 800e828:	4798      	blx	r3
 800e82a:	3601      	adds	r6, #1
 800e82c:	e7ee      	b.n	800e80c <__libc_init_array+0xc>
 800e82e:	00b3      	lsls	r3, r6, #2
 800e830:	58eb      	ldr	r3, [r5, r3]
 800e832:	4798      	blx	r3
 800e834:	3601      	adds	r6, #1
 800e836:	e7f2      	b.n	800e81e <__libc_init_array+0x1e>
 800e838:	0800fd38 	.word	0x0800fd38
 800e83c:	0800fd38 	.word	0x0800fd38
 800e840:	0800fd3c 	.word	0x0800fd3c
 800e844:	0800fd38 	.word	0x0800fd38

0800e848 <__retarget_lock_acquire_recursive>:
 800e848:	4770      	bx	lr

0800e84a <__retarget_lock_release_recursive>:
 800e84a:	4770      	bx	lr

0800e84c <memcpy>:
 800e84c:	2300      	movs	r3, #0
 800e84e:	b510      	push	{r4, lr}
 800e850:	429a      	cmp	r2, r3
 800e852:	d100      	bne.n	800e856 <memcpy+0xa>
 800e854:	bd10      	pop	{r4, pc}
 800e856:	5ccc      	ldrb	r4, [r1, r3]
 800e858:	54c4      	strb	r4, [r0, r3]
 800e85a:	3301      	adds	r3, #1
 800e85c:	e7f8      	b.n	800e850 <memcpy+0x4>
	...

0800e860 <__ssputs_r>:
 800e860:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e862:	b085      	sub	sp, #20
 800e864:	9301      	str	r3, [sp, #4]
 800e866:	9203      	str	r2, [sp, #12]
 800e868:	688e      	ldr	r6, [r1, #8]
 800e86a:	9a01      	ldr	r2, [sp, #4]
 800e86c:	0007      	movs	r7, r0
 800e86e:	000c      	movs	r4, r1
 800e870:	680b      	ldr	r3, [r1, #0]
 800e872:	4296      	cmp	r6, r2
 800e874:	d831      	bhi.n	800e8da <__ssputs_r+0x7a>
 800e876:	898a      	ldrh	r2, [r1, #12]
 800e878:	2190      	movs	r1, #144	; 0x90
 800e87a:	00c9      	lsls	r1, r1, #3
 800e87c:	420a      	tst	r2, r1
 800e87e:	d029      	beq.n	800e8d4 <__ssputs_r+0x74>
 800e880:	2003      	movs	r0, #3
 800e882:	6921      	ldr	r1, [r4, #16]
 800e884:	1a5b      	subs	r3, r3, r1
 800e886:	9302      	str	r3, [sp, #8]
 800e888:	6963      	ldr	r3, [r4, #20]
 800e88a:	4343      	muls	r3, r0
 800e88c:	0fdd      	lsrs	r5, r3, #31
 800e88e:	18ed      	adds	r5, r5, r3
 800e890:	9b01      	ldr	r3, [sp, #4]
 800e892:	9802      	ldr	r0, [sp, #8]
 800e894:	3301      	adds	r3, #1
 800e896:	181b      	adds	r3, r3, r0
 800e898:	106d      	asrs	r5, r5, #1
 800e89a:	42ab      	cmp	r3, r5
 800e89c:	d900      	bls.n	800e8a0 <__ssputs_r+0x40>
 800e89e:	001d      	movs	r5, r3
 800e8a0:	0552      	lsls	r2, r2, #21
 800e8a2:	d529      	bpl.n	800e8f8 <__ssputs_r+0x98>
 800e8a4:	0029      	movs	r1, r5
 800e8a6:	0038      	movs	r0, r7
 800e8a8:	f7ff fed8 	bl	800e65c <_malloc_r>
 800e8ac:	1e06      	subs	r6, r0, #0
 800e8ae:	d02d      	beq.n	800e90c <__ssputs_r+0xac>
 800e8b0:	9a02      	ldr	r2, [sp, #8]
 800e8b2:	6921      	ldr	r1, [r4, #16]
 800e8b4:	f7ff ffca 	bl	800e84c <memcpy>
 800e8b8:	89a2      	ldrh	r2, [r4, #12]
 800e8ba:	4b19      	ldr	r3, [pc, #100]	; (800e920 <__ssputs_r+0xc0>)
 800e8bc:	401a      	ands	r2, r3
 800e8be:	2380      	movs	r3, #128	; 0x80
 800e8c0:	4313      	orrs	r3, r2
 800e8c2:	81a3      	strh	r3, [r4, #12]
 800e8c4:	9b02      	ldr	r3, [sp, #8]
 800e8c6:	6126      	str	r6, [r4, #16]
 800e8c8:	18f6      	adds	r6, r6, r3
 800e8ca:	6026      	str	r6, [r4, #0]
 800e8cc:	6165      	str	r5, [r4, #20]
 800e8ce:	9e01      	ldr	r6, [sp, #4]
 800e8d0:	1aed      	subs	r5, r5, r3
 800e8d2:	60a5      	str	r5, [r4, #8]
 800e8d4:	9b01      	ldr	r3, [sp, #4]
 800e8d6:	429e      	cmp	r6, r3
 800e8d8:	d900      	bls.n	800e8dc <__ssputs_r+0x7c>
 800e8da:	9e01      	ldr	r6, [sp, #4]
 800e8dc:	0032      	movs	r2, r6
 800e8de:	9903      	ldr	r1, [sp, #12]
 800e8e0:	6820      	ldr	r0, [r4, #0]
 800e8e2:	f000 face 	bl	800ee82 <memmove>
 800e8e6:	2000      	movs	r0, #0
 800e8e8:	68a3      	ldr	r3, [r4, #8]
 800e8ea:	1b9b      	subs	r3, r3, r6
 800e8ec:	60a3      	str	r3, [r4, #8]
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	199b      	adds	r3, r3, r6
 800e8f2:	6023      	str	r3, [r4, #0]
 800e8f4:	b005      	add	sp, #20
 800e8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8f8:	002a      	movs	r2, r5
 800e8fa:	0038      	movs	r0, r7
 800e8fc:	f000 fa92 	bl	800ee24 <_realloc_r>
 800e900:	1e06      	subs	r6, r0, #0
 800e902:	d1df      	bne.n	800e8c4 <__ssputs_r+0x64>
 800e904:	0038      	movs	r0, r7
 800e906:	6921      	ldr	r1, [r4, #16]
 800e908:	f000 fada 	bl	800eec0 <_free_r>
 800e90c:	230c      	movs	r3, #12
 800e90e:	2001      	movs	r0, #1
 800e910:	603b      	str	r3, [r7, #0]
 800e912:	89a2      	ldrh	r2, [r4, #12]
 800e914:	3334      	adds	r3, #52	; 0x34
 800e916:	4313      	orrs	r3, r2
 800e918:	81a3      	strh	r3, [r4, #12]
 800e91a:	4240      	negs	r0, r0
 800e91c:	e7ea      	b.n	800e8f4 <__ssputs_r+0x94>
 800e91e:	46c0      	nop			; (mov r8, r8)
 800e920:	fffffb7f 	.word	0xfffffb7f

0800e924 <_svfiprintf_r>:
 800e924:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e926:	b0a1      	sub	sp, #132	; 0x84
 800e928:	9003      	str	r0, [sp, #12]
 800e92a:	001d      	movs	r5, r3
 800e92c:	898b      	ldrh	r3, [r1, #12]
 800e92e:	000f      	movs	r7, r1
 800e930:	0016      	movs	r6, r2
 800e932:	061b      	lsls	r3, r3, #24
 800e934:	d511      	bpl.n	800e95a <_svfiprintf_r+0x36>
 800e936:	690b      	ldr	r3, [r1, #16]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d10e      	bne.n	800e95a <_svfiprintf_r+0x36>
 800e93c:	2140      	movs	r1, #64	; 0x40
 800e93e:	f7ff fe8d 	bl	800e65c <_malloc_r>
 800e942:	6038      	str	r0, [r7, #0]
 800e944:	6138      	str	r0, [r7, #16]
 800e946:	2800      	cmp	r0, #0
 800e948:	d105      	bne.n	800e956 <_svfiprintf_r+0x32>
 800e94a:	230c      	movs	r3, #12
 800e94c:	9a03      	ldr	r2, [sp, #12]
 800e94e:	3801      	subs	r0, #1
 800e950:	6013      	str	r3, [r2, #0]
 800e952:	b021      	add	sp, #132	; 0x84
 800e954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e956:	2340      	movs	r3, #64	; 0x40
 800e958:	617b      	str	r3, [r7, #20]
 800e95a:	2300      	movs	r3, #0
 800e95c:	ac08      	add	r4, sp, #32
 800e95e:	6163      	str	r3, [r4, #20]
 800e960:	3320      	adds	r3, #32
 800e962:	7663      	strb	r3, [r4, #25]
 800e964:	3310      	adds	r3, #16
 800e966:	76a3      	strb	r3, [r4, #26]
 800e968:	9507      	str	r5, [sp, #28]
 800e96a:	0035      	movs	r5, r6
 800e96c:	782b      	ldrb	r3, [r5, #0]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d001      	beq.n	800e976 <_svfiprintf_r+0x52>
 800e972:	2b25      	cmp	r3, #37	; 0x25
 800e974:	d148      	bne.n	800ea08 <_svfiprintf_r+0xe4>
 800e976:	1bab      	subs	r3, r5, r6
 800e978:	9305      	str	r3, [sp, #20]
 800e97a:	42b5      	cmp	r5, r6
 800e97c:	d00b      	beq.n	800e996 <_svfiprintf_r+0x72>
 800e97e:	0032      	movs	r2, r6
 800e980:	0039      	movs	r1, r7
 800e982:	9803      	ldr	r0, [sp, #12]
 800e984:	f7ff ff6c 	bl	800e860 <__ssputs_r>
 800e988:	3001      	adds	r0, #1
 800e98a:	d100      	bne.n	800e98e <_svfiprintf_r+0x6a>
 800e98c:	e0af      	b.n	800eaee <_svfiprintf_r+0x1ca>
 800e98e:	6963      	ldr	r3, [r4, #20]
 800e990:	9a05      	ldr	r2, [sp, #20]
 800e992:	189b      	adds	r3, r3, r2
 800e994:	6163      	str	r3, [r4, #20]
 800e996:	782b      	ldrb	r3, [r5, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d100      	bne.n	800e99e <_svfiprintf_r+0x7a>
 800e99c:	e0a7      	b.n	800eaee <_svfiprintf_r+0x1ca>
 800e99e:	2201      	movs	r2, #1
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	4252      	negs	r2, r2
 800e9a4:	6062      	str	r2, [r4, #4]
 800e9a6:	a904      	add	r1, sp, #16
 800e9a8:	3254      	adds	r2, #84	; 0x54
 800e9aa:	1852      	adds	r2, r2, r1
 800e9ac:	1c6e      	adds	r6, r5, #1
 800e9ae:	6023      	str	r3, [r4, #0]
 800e9b0:	60e3      	str	r3, [r4, #12]
 800e9b2:	60a3      	str	r3, [r4, #8]
 800e9b4:	7013      	strb	r3, [r2, #0]
 800e9b6:	65a3      	str	r3, [r4, #88]	; 0x58
 800e9b8:	4b55      	ldr	r3, [pc, #340]	; (800eb10 <_svfiprintf_r+0x1ec>)
 800e9ba:	2205      	movs	r2, #5
 800e9bc:	0018      	movs	r0, r3
 800e9be:	7831      	ldrb	r1, [r6, #0]
 800e9c0:	9305      	str	r3, [sp, #20]
 800e9c2:	f000 fa71 	bl	800eea8 <memchr>
 800e9c6:	1c75      	adds	r5, r6, #1
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d11f      	bne.n	800ea0c <_svfiprintf_r+0xe8>
 800e9cc:	6822      	ldr	r2, [r4, #0]
 800e9ce:	06d3      	lsls	r3, r2, #27
 800e9d0:	d504      	bpl.n	800e9dc <_svfiprintf_r+0xb8>
 800e9d2:	2353      	movs	r3, #83	; 0x53
 800e9d4:	a904      	add	r1, sp, #16
 800e9d6:	185b      	adds	r3, r3, r1
 800e9d8:	2120      	movs	r1, #32
 800e9da:	7019      	strb	r1, [r3, #0]
 800e9dc:	0713      	lsls	r3, r2, #28
 800e9de:	d504      	bpl.n	800e9ea <_svfiprintf_r+0xc6>
 800e9e0:	2353      	movs	r3, #83	; 0x53
 800e9e2:	a904      	add	r1, sp, #16
 800e9e4:	185b      	adds	r3, r3, r1
 800e9e6:	212b      	movs	r1, #43	; 0x2b
 800e9e8:	7019      	strb	r1, [r3, #0]
 800e9ea:	7833      	ldrb	r3, [r6, #0]
 800e9ec:	2b2a      	cmp	r3, #42	; 0x2a
 800e9ee:	d016      	beq.n	800ea1e <_svfiprintf_r+0xfa>
 800e9f0:	0035      	movs	r5, r6
 800e9f2:	2100      	movs	r1, #0
 800e9f4:	200a      	movs	r0, #10
 800e9f6:	68e3      	ldr	r3, [r4, #12]
 800e9f8:	782a      	ldrb	r2, [r5, #0]
 800e9fa:	1c6e      	adds	r6, r5, #1
 800e9fc:	3a30      	subs	r2, #48	; 0x30
 800e9fe:	2a09      	cmp	r2, #9
 800ea00:	d94e      	bls.n	800eaa0 <_svfiprintf_r+0x17c>
 800ea02:	2900      	cmp	r1, #0
 800ea04:	d111      	bne.n	800ea2a <_svfiprintf_r+0x106>
 800ea06:	e017      	b.n	800ea38 <_svfiprintf_r+0x114>
 800ea08:	3501      	adds	r5, #1
 800ea0a:	e7af      	b.n	800e96c <_svfiprintf_r+0x48>
 800ea0c:	9b05      	ldr	r3, [sp, #20]
 800ea0e:	6822      	ldr	r2, [r4, #0]
 800ea10:	1ac0      	subs	r0, r0, r3
 800ea12:	2301      	movs	r3, #1
 800ea14:	4083      	lsls	r3, r0
 800ea16:	4313      	orrs	r3, r2
 800ea18:	002e      	movs	r6, r5
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	e7cc      	b.n	800e9b8 <_svfiprintf_r+0x94>
 800ea1e:	9b07      	ldr	r3, [sp, #28]
 800ea20:	1d19      	adds	r1, r3, #4
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	9107      	str	r1, [sp, #28]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	db01      	blt.n	800ea2e <_svfiprintf_r+0x10a>
 800ea2a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ea2c:	e004      	b.n	800ea38 <_svfiprintf_r+0x114>
 800ea2e:	425b      	negs	r3, r3
 800ea30:	60e3      	str	r3, [r4, #12]
 800ea32:	2302      	movs	r3, #2
 800ea34:	4313      	orrs	r3, r2
 800ea36:	6023      	str	r3, [r4, #0]
 800ea38:	782b      	ldrb	r3, [r5, #0]
 800ea3a:	2b2e      	cmp	r3, #46	; 0x2e
 800ea3c:	d10a      	bne.n	800ea54 <_svfiprintf_r+0x130>
 800ea3e:	786b      	ldrb	r3, [r5, #1]
 800ea40:	2b2a      	cmp	r3, #42	; 0x2a
 800ea42:	d135      	bne.n	800eab0 <_svfiprintf_r+0x18c>
 800ea44:	9b07      	ldr	r3, [sp, #28]
 800ea46:	3502      	adds	r5, #2
 800ea48:	1d1a      	adds	r2, r3, #4
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	9207      	str	r2, [sp, #28]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	db2b      	blt.n	800eaaa <_svfiprintf_r+0x186>
 800ea52:	9309      	str	r3, [sp, #36]	; 0x24
 800ea54:	4e2f      	ldr	r6, [pc, #188]	; (800eb14 <_svfiprintf_r+0x1f0>)
 800ea56:	2203      	movs	r2, #3
 800ea58:	0030      	movs	r0, r6
 800ea5a:	7829      	ldrb	r1, [r5, #0]
 800ea5c:	f000 fa24 	bl	800eea8 <memchr>
 800ea60:	2800      	cmp	r0, #0
 800ea62:	d006      	beq.n	800ea72 <_svfiprintf_r+0x14e>
 800ea64:	2340      	movs	r3, #64	; 0x40
 800ea66:	1b80      	subs	r0, r0, r6
 800ea68:	4083      	lsls	r3, r0
 800ea6a:	6822      	ldr	r2, [r4, #0]
 800ea6c:	3501      	adds	r5, #1
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	6023      	str	r3, [r4, #0]
 800ea72:	7829      	ldrb	r1, [r5, #0]
 800ea74:	2206      	movs	r2, #6
 800ea76:	4828      	ldr	r0, [pc, #160]	; (800eb18 <_svfiprintf_r+0x1f4>)
 800ea78:	1c6e      	adds	r6, r5, #1
 800ea7a:	7621      	strb	r1, [r4, #24]
 800ea7c:	f000 fa14 	bl	800eea8 <memchr>
 800ea80:	2800      	cmp	r0, #0
 800ea82:	d03c      	beq.n	800eafe <_svfiprintf_r+0x1da>
 800ea84:	4b25      	ldr	r3, [pc, #148]	; (800eb1c <_svfiprintf_r+0x1f8>)
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d125      	bne.n	800ead6 <_svfiprintf_r+0x1b2>
 800ea8a:	2207      	movs	r2, #7
 800ea8c:	9b07      	ldr	r3, [sp, #28]
 800ea8e:	3307      	adds	r3, #7
 800ea90:	4393      	bics	r3, r2
 800ea92:	3308      	adds	r3, #8
 800ea94:	9307      	str	r3, [sp, #28]
 800ea96:	6963      	ldr	r3, [r4, #20]
 800ea98:	9a04      	ldr	r2, [sp, #16]
 800ea9a:	189b      	adds	r3, r3, r2
 800ea9c:	6163      	str	r3, [r4, #20]
 800ea9e:	e764      	b.n	800e96a <_svfiprintf_r+0x46>
 800eaa0:	4343      	muls	r3, r0
 800eaa2:	0035      	movs	r5, r6
 800eaa4:	2101      	movs	r1, #1
 800eaa6:	189b      	adds	r3, r3, r2
 800eaa8:	e7a6      	b.n	800e9f8 <_svfiprintf_r+0xd4>
 800eaaa:	2301      	movs	r3, #1
 800eaac:	425b      	negs	r3, r3
 800eaae:	e7d0      	b.n	800ea52 <_svfiprintf_r+0x12e>
 800eab0:	2300      	movs	r3, #0
 800eab2:	200a      	movs	r0, #10
 800eab4:	001a      	movs	r2, r3
 800eab6:	3501      	adds	r5, #1
 800eab8:	6063      	str	r3, [r4, #4]
 800eaba:	7829      	ldrb	r1, [r5, #0]
 800eabc:	1c6e      	adds	r6, r5, #1
 800eabe:	3930      	subs	r1, #48	; 0x30
 800eac0:	2909      	cmp	r1, #9
 800eac2:	d903      	bls.n	800eacc <_svfiprintf_r+0x1a8>
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d0c5      	beq.n	800ea54 <_svfiprintf_r+0x130>
 800eac8:	9209      	str	r2, [sp, #36]	; 0x24
 800eaca:	e7c3      	b.n	800ea54 <_svfiprintf_r+0x130>
 800eacc:	4342      	muls	r2, r0
 800eace:	0035      	movs	r5, r6
 800ead0:	2301      	movs	r3, #1
 800ead2:	1852      	adds	r2, r2, r1
 800ead4:	e7f1      	b.n	800eaba <_svfiprintf_r+0x196>
 800ead6:	aa07      	add	r2, sp, #28
 800ead8:	9200      	str	r2, [sp, #0]
 800eada:	0021      	movs	r1, r4
 800eadc:	003a      	movs	r2, r7
 800eade:	4b10      	ldr	r3, [pc, #64]	; (800eb20 <_svfiprintf_r+0x1fc>)
 800eae0:	9803      	ldr	r0, [sp, #12]
 800eae2:	e000      	b.n	800eae6 <_svfiprintf_r+0x1c2>
 800eae4:	bf00      	nop
 800eae6:	9004      	str	r0, [sp, #16]
 800eae8:	9b04      	ldr	r3, [sp, #16]
 800eaea:	3301      	adds	r3, #1
 800eaec:	d1d3      	bne.n	800ea96 <_svfiprintf_r+0x172>
 800eaee:	89bb      	ldrh	r3, [r7, #12]
 800eaf0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800eaf2:	065b      	lsls	r3, r3, #25
 800eaf4:	d400      	bmi.n	800eaf8 <_svfiprintf_r+0x1d4>
 800eaf6:	e72c      	b.n	800e952 <_svfiprintf_r+0x2e>
 800eaf8:	2001      	movs	r0, #1
 800eafa:	4240      	negs	r0, r0
 800eafc:	e729      	b.n	800e952 <_svfiprintf_r+0x2e>
 800eafe:	aa07      	add	r2, sp, #28
 800eb00:	9200      	str	r2, [sp, #0]
 800eb02:	0021      	movs	r1, r4
 800eb04:	003a      	movs	r2, r7
 800eb06:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <_svfiprintf_r+0x1fc>)
 800eb08:	9803      	ldr	r0, [sp, #12]
 800eb0a:	f000 f87b 	bl	800ec04 <_printf_i>
 800eb0e:	e7ea      	b.n	800eae6 <_svfiprintf_r+0x1c2>
 800eb10:	0800fcfb 	.word	0x0800fcfb
 800eb14:	0800fd01 	.word	0x0800fd01
 800eb18:	0800fd05 	.word	0x0800fd05
 800eb1c:	00000000 	.word	0x00000000
 800eb20:	0800e861 	.word	0x0800e861

0800eb24 <_printf_common>:
 800eb24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eb26:	0016      	movs	r6, r2
 800eb28:	9301      	str	r3, [sp, #4]
 800eb2a:	688a      	ldr	r2, [r1, #8]
 800eb2c:	690b      	ldr	r3, [r1, #16]
 800eb2e:	000c      	movs	r4, r1
 800eb30:	9000      	str	r0, [sp, #0]
 800eb32:	4293      	cmp	r3, r2
 800eb34:	da00      	bge.n	800eb38 <_printf_common+0x14>
 800eb36:	0013      	movs	r3, r2
 800eb38:	0022      	movs	r2, r4
 800eb3a:	6033      	str	r3, [r6, #0]
 800eb3c:	3243      	adds	r2, #67	; 0x43
 800eb3e:	7812      	ldrb	r2, [r2, #0]
 800eb40:	2a00      	cmp	r2, #0
 800eb42:	d001      	beq.n	800eb48 <_printf_common+0x24>
 800eb44:	3301      	adds	r3, #1
 800eb46:	6033      	str	r3, [r6, #0]
 800eb48:	6823      	ldr	r3, [r4, #0]
 800eb4a:	069b      	lsls	r3, r3, #26
 800eb4c:	d502      	bpl.n	800eb54 <_printf_common+0x30>
 800eb4e:	6833      	ldr	r3, [r6, #0]
 800eb50:	3302      	adds	r3, #2
 800eb52:	6033      	str	r3, [r6, #0]
 800eb54:	6822      	ldr	r2, [r4, #0]
 800eb56:	2306      	movs	r3, #6
 800eb58:	0015      	movs	r5, r2
 800eb5a:	401d      	ands	r5, r3
 800eb5c:	421a      	tst	r2, r3
 800eb5e:	d027      	beq.n	800ebb0 <_printf_common+0x8c>
 800eb60:	0023      	movs	r3, r4
 800eb62:	3343      	adds	r3, #67	; 0x43
 800eb64:	781b      	ldrb	r3, [r3, #0]
 800eb66:	1e5a      	subs	r2, r3, #1
 800eb68:	4193      	sbcs	r3, r2
 800eb6a:	6822      	ldr	r2, [r4, #0]
 800eb6c:	0692      	lsls	r2, r2, #26
 800eb6e:	d430      	bmi.n	800ebd2 <_printf_common+0xae>
 800eb70:	0022      	movs	r2, r4
 800eb72:	9901      	ldr	r1, [sp, #4]
 800eb74:	9800      	ldr	r0, [sp, #0]
 800eb76:	9d08      	ldr	r5, [sp, #32]
 800eb78:	3243      	adds	r2, #67	; 0x43
 800eb7a:	47a8      	blx	r5
 800eb7c:	3001      	adds	r0, #1
 800eb7e:	d025      	beq.n	800ebcc <_printf_common+0xa8>
 800eb80:	2206      	movs	r2, #6
 800eb82:	6823      	ldr	r3, [r4, #0]
 800eb84:	2500      	movs	r5, #0
 800eb86:	4013      	ands	r3, r2
 800eb88:	2b04      	cmp	r3, #4
 800eb8a:	d105      	bne.n	800eb98 <_printf_common+0x74>
 800eb8c:	6833      	ldr	r3, [r6, #0]
 800eb8e:	68e5      	ldr	r5, [r4, #12]
 800eb90:	1aed      	subs	r5, r5, r3
 800eb92:	43eb      	mvns	r3, r5
 800eb94:	17db      	asrs	r3, r3, #31
 800eb96:	401d      	ands	r5, r3
 800eb98:	68a3      	ldr	r3, [r4, #8]
 800eb9a:	6922      	ldr	r2, [r4, #16]
 800eb9c:	4293      	cmp	r3, r2
 800eb9e:	dd01      	ble.n	800eba4 <_printf_common+0x80>
 800eba0:	1a9b      	subs	r3, r3, r2
 800eba2:	18ed      	adds	r5, r5, r3
 800eba4:	2600      	movs	r6, #0
 800eba6:	42b5      	cmp	r5, r6
 800eba8:	d120      	bne.n	800ebec <_printf_common+0xc8>
 800ebaa:	2000      	movs	r0, #0
 800ebac:	e010      	b.n	800ebd0 <_printf_common+0xac>
 800ebae:	3501      	adds	r5, #1
 800ebb0:	68e3      	ldr	r3, [r4, #12]
 800ebb2:	6832      	ldr	r2, [r6, #0]
 800ebb4:	1a9b      	subs	r3, r3, r2
 800ebb6:	42ab      	cmp	r3, r5
 800ebb8:	ddd2      	ble.n	800eb60 <_printf_common+0x3c>
 800ebba:	0022      	movs	r2, r4
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	9901      	ldr	r1, [sp, #4]
 800ebc0:	9800      	ldr	r0, [sp, #0]
 800ebc2:	9f08      	ldr	r7, [sp, #32]
 800ebc4:	3219      	adds	r2, #25
 800ebc6:	47b8      	blx	r7
 800ebc8:	3001      	adds	r0, #1
 800ebca:	d1f0      	bne.n	800ebae <_printf_common+0x8a>
 800ebcc:	2001      	movs	r0, #1
 800ebce:	4240      	negs	r0, r0
 800ebd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebd2:	2030      	movs	r0, #48	; 0x30
 800ebd4:	18e1      	adds	r1, r4, r3
 800ebd6:	3143      	adds	r1, #67	; 0x43
 800ebd8:	7008      	strb	r0, [r1, #0]
 800ebda:	0021      	movs	r1, r4
 800ebdc:	1c5a      	adds	r2, r3, #1
 800ebde:	3145      	adds	r1, #69	; 0x45
 800ebe0:	7809      	ldrb	r1, [r1, #0]
 800ebe2:	18a2      	adds	r2, r4, r2
 800ebe4:	3243      	adds	r2, #67	; 0x43
 800ebe6:	3302      	adds	r3, #2
 800ebe8:	7011      	strb	r1, [r2, #0]
 800ebea:	e7c1      	b.n	800eb70 <_printf_common+0x4c>
 800ebec:	0022      	movs	r2, r4
 800ebee:	2301      	movs	r3, #1
 800ebf0:	9901      	ldr	r1, [sp, #4]
 800ebf2:	9800      	ldr	r0, [sp, #0]
 800ebf4:	9f08      	ldr	r7, [sp, #32]
 800ebf6:	321a      	adds	r2, #26
 800ebf8:	47b8      	blx	r7
 800ebfa:	3001      	adds	r0, #1
 800ebfc:	d0e6      	beq.n	800ebcc <_printf_common+0xa8>
 800ebfe:	3601      	adds	r6, #1
 800ec00:	e7d1      	b.n	800eba6 <_printf_common+0x82>
	...

0800ec04 <_printf_i>:
 800ec04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec06:	b08b      	sub	sp, #44	; 0x2c
 800ec08:	9206      	str	r2, [sp, #24]
 800ec0a:	000a      	movs	r2, r1
 800ec0c:	3243      	adds	r2, #67	; 0x43
 800ec0e:	9307      	str	r3, [sp, #28]
 800ec10:	9005      	str	r0, [sp, #20]
 800ec12:	9204      	str	r2, [sp, #16]
 800ec14:	7e0a      	ldrb	r2, [r1, #24]
 800ec16:	000c      	movs	r4, r1
 800ec18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ec1a:	2a78      	cmp	r2, #120	; 0x78
 800ec1c:	d809      	bhi.n	800ec32 <_printf_i+0x2e>
 800ec1e:	2a62      	cmp	r2, #98	; 0x62
 800ec20:	d80b      	bhi.n	800ec3a <_printf_i+0x36>
 800ec22:	2a00      	cmp	r2, #0
 800ec24:	d100      	bne.n	800ec28 <_printf_i+0x24>
 800ec26:	e0be      	b.n	800eda6 <_printf_i+0x1a2>
 800ec28:	497c      	ldr	r1, [pc, #496]	; (800ee1c <_printf_i+0x218>)
 800ec2a:	9103      	str	r1, [sp, #12]
 800ec2c:	2a58      	cmp	r2, #88	; 0x58
 800ec2e:	d100      	bne.n	800ec32 <_printf_i+0x2e>
 800ec30:	e093      	b.n	800ed5a <_printf_i+0x156>
 800ec32:	0026      	movs	r6, r4
 800ec34:	3642      	adds	r6, #66	; 0x42
 800ec36:	7032      	strb	r2, [r6, #0]
 800ec38:	e022      	b.n	800ec80 <_printf_i+0x7c>
 800ec3a:	0010      	movs	r0, r2
 800ec3c:	3863      	subs	r0, #99	; 0x63
 800ec3e:	2815      	cmp	r0, #21
 800ec40:	d8f7      	bhi.n	800ec32 <_printf_i+0x2e>
 800ec42:	f7f1 fa7d 	bl	8000140 <__gnu_thumb1_case_shi>
 800ec46:	0016      	.short	0x0016
 800ec48:	fff6001f 	.word	0xfff6001f
 800ec4c:	fff6fff6 	.word	0xfff6fff6
 800ec50:	001ffff6 	.word	0x001ffff6
 800ec54:	fff6fff6 	.word	0xfff6fff6
 800ec58:	fff6fff6 	.word	0xfff6fff6
 800ec5c:	003600a3 	.word	0x003600a3
 800ec60:	fff60083 	.word	0xfff60083
 800ec64:	00b4fff6 	.word	0x00b4fff6
 800ec68:	0036fff6 	.word	0x0036fff6
 800ec6c:	fff6fff6 	.word	0xfff6fff6
 800ec70:	0087      	.short	0x0087
 800ec72:	0026      	movs	r6, r4
 800ec74:	681a      	ldr	r2, [r3, #0]
 800ec76:	3642      	adds	r6, #66	; 0x42
 800ec78:	1d11      	adds	r1, r2, #4
 800ec7a:	6019      	str	r1, [r3, #0]
 800ec7c:	6813      	ldr	r3, [r2, #0]
 800ec7e:	7033      	strb	r3, [r6, #0]
 800ec80:	2301      	movs	r3, #1
 800ec82:	e0a2      	b.n	800edca <_printf_i+0x1c6>
 800ec84:	6818      	ldr	r0, [r3, #0]
 800ec86:	6809      	ldr	r1, [r1, #0]
 800ec88:	1d02      	adds	r2, r0, #4
 800ec8a:	060d      	lsls	r5, r1, #24
 800ec8c:	d50b      	bpl.n	800eca6 <_printf_i+0xa2>
 800ec8e:	6805      	ldr	r5, [r0, #0]
 800ec90:	601a      	str	r2, [r3, #0]
 800ec92:	2d00      	cmp	r5, #0
 800ec94:	da03      	bge.n	800ec9e <_printf_i+0x9a>
 800ec96:	232d      	movs	r3, #45	; 0x2d
 800ec98:	9a04      	ldr	r2, [sp, #16]
 800ec9a:	426d      	negs	r5, r5
 800ec9c:	7013      	strb	r3, [r2, #0]
 800ec9e:	4b5f      	ldr	r3, [pc, #380]	; (800ee1c <_printf_i+0x218>)
 800eca0:	270a      	movs	r7, #10
 800eca2:	9303      	str	r3, [sp, #12]
 800eca4:	e01b      	b.n	800ecde <_printf_i+0xda>
 800eca6:	6805      	ldr	r5, [r0, #0]
 800eca8:	601a      	str	r2, [r3, #0]
 800ecaa:	0649      	lsls	r1, r1, #25
 800ecac:	d5f1      	bpl.n	800ec92 <_printf_i+0x8e>
 800ecae:	b22d      	sxth	r5, r5
 800ecb0:	e7ef      	b.n	800ec92 <_printf_i+0x8e>
 800ecb2:	680d      	ldr	r5, [r1, #0]
 800ecb4:	6819      	ldr	r1, [r3, #0]
 800ecb6:	1d08      	adds	r0, r1, #4
 800ecb8:	6018      	str	r0, [r3, #0]
 800ecba:	062e      	lsls	r6, r5, #24
 800ecbc:	d501      	bpl.n	800ecc2 <_printf_i+0xbe>
 800ecbe:	680d      	ldr	r5, [r1, #0]
 800ecc0:	e003      	b.n	800ecca <_printf_i+0xc6>
 800ecc2:	066d      	lsls	r5, r5, #25
 800ecc4:	d5fb      	bpl.n	800ecbe <_printf_i+0xba>
 800ecc6:	680d      	ldr	r5, [r1, #0]
 800ecc8:	b2ad      	uxth	r5, r5
 800ecca:	4b54      	ldr	r3, [pc, #336]	; (800ee1c <_printf_i+0x218>)
 800eccc:	2708      	movs	r7, #8
 800ecce:	9303      	str	r3, [sp, #12]
 800ecd0:	2a6f      	cmp	r2, #111	; 0x6f
 800ecd2:	d000      	beq.n	800ecd6 <_printf_i+0xd2>
 800ecd4:	3702      	adds	r7, #2
 800ecd6:	0023      	movs	r3, r4
 800ecd8:	2200      	movs	r2, #0
 800ecda:	3343      	adds	r3, #67	; 0x43
 800ecdc:	701a      	strb	r2, [r3, #0]
 800ecde:	6863      	ldr	r3, [r4, #4]
 800ece0:	60a3      	str	r3, [r4, #8]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	db03      	blt.n	800ecee <_printf_i+0xea>
 800ece6:	2104      	movs	r1, #4
 800ece8:	6822      	ldr	r2, [r4, #0]
 800ecea:	438a      	bics	r2, r1
 800ecec:	6022      	str	r2, [r4, #0]
 800ecee:	2d00      	cmp	r5, #0
 800ecf0:	d102      	bne.n	800ecf8 <_printf_i+0xf4>
 800ecf2:	9e04      	ldr	r6, [sp, #16]
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d00c      	beq.n	800ed12 <_printf_i+0x10e>
 800ecf8:	9e04      	ldr	r6, [sp, #16]
 800ecfa:	0028      	movs	r0, r5
 800ecfc:	0039      	movs	r1, r7
 800ecfe:	f7f1 fab9 	bl	8000274 <__aeabi_uidivmod>
 800ed02:	9b03      	ldr	r3, [sp, #12]
 800ed04:	3e01      	subs	r6, #1
 800ed06:	5c5b      	ldrb	r3, [r3, r1]
 800ed08:	7033      	strb	r3, [r6, #0]
 800ed0a:	002b      	movs	r3, r5
 800ed0c:	0005      	movs	r5, r0
 800ed0e:	429f      	cmp	r7, r3
 800ed10:	d9f3      	bls.n	800ecfa <_printf_i+0xf6>
 800ed12:	2f08      	cmp	r7, #8
 800ed14:	d109      	bne.n	800ed2a <_printf_i+0x126>
 800ed16:	6823      	ldr	r3, [r4, #0]
 800ed18:	07db      	lsls	r3, r3, #31
 800ed1a:	d506      	bpl.n	800ed2a <_printf_i+0x126>
 800ed1c:	6862      	ldr	r2, [r4, #4]
 800ed1e:	6923      	ldr	r3, [r4, #16]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	dc02      	bgt.n	800ed2a <_printf_i+0x126>
 800ed24:	2330      	movs	r3, #48	; 0x30
 800ed26:	3e01      	subs	r6, #1
 800ed28:	7033      	strb	r3, [r6, #0]
 800ed2a:	9b04      	ldr	r3, [sp, #16]
 800ed2c:	1b9b      	subs	r3, r3, r6
 800ed2e:	6123      	str	r3, [r4, #16]
 800ed30:	9b07      	ldr	r3, [sp, #28]
 800ed32:	0021      	movs	r1, r4
 800ed34:	9300      	str	r3, [sp, #0]
 800ed36:	9805      	ldr	r0, [sp, #20]
 800ed38:	9b06      	ldr	r3, [sp, #24]
 800ed3a:	aa09      	add	r2, sp, #36	; 0x24
 800ed3c:	f7ff fef2 	bl	800eb24 <_printf_common>
 800ed40:	3001      	adds	r0, #1
 800ed42:	d147      	bne.n	800edd4 <_printf_i+0x1d0>
 800ed44:	2001      	movs	r0, #1
 800ed46:	4240      	negs	r0, r0
 800ed48:	b00b      	add	sp, #44	; 0x2c
 800ed4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed4c:	2220      	movs	r2, #32
 800ed4e:	6809      	ldr	r1, [r1, #0]
 800ed50:	430a      	orrs	r2, r1
 800ed52:	6022      	str	r2, [r4, #0]
 800ed54:	2278      	movs	r2, #120	; 0x78
 800ed56:	4932      	ldr	r1, [pc, #200]	; (800ee20 <_printf_i+0x21c>)
 800ed58:	9103      	str	r1, [sp, #12]
 800ed5a:	0021      	movs	r1, r4
 800ed5c:	3145      	adds	r1, #69	; 0x45
 800ed5e:	700a      	strb	r2, [r1, #0]
 800ed60:	6819      	ldr	r1, [r3, #0]
 800ed62:	6822      	ldr	r2, [r4, #0]
 800ed64:	c920      	ldmia	r1!, {r5}
 800ed66:	0610      	lsls	r0, r2, #24
 800ed68:	d402      	bmi.n	800ed70 <_printf_i+0x16c>
 800ed6a:	0650      	lsls	r0, r2, #25
 800ed6c:	d500      	bpl.n	800ed70 <_printf_i+0x16c>
 800ed6e:	b2ad      	uxth	r5, r5
 800ed70:	6019      	str	r1, [r3, #0]
 800ed72:	07d3      	lsls	r3, r2, #31
 800ed74:	d502      	bpl.n	800ed7c <_printf_i+0x178>
 800ed76:	2320      	movs	r3, #32
 800ed78:	4313      	orrs	r3, r2
 800ed7a:	6023      	str	r3, [r4, #0]
 800ed7c:	2710      	movs	r7, #16
 800ed7e:	2d00      	cmp	r5, #0
 800ed80:	d1a9      	bne.n	800ecd6 <_printf_i+0xd2>
 800ed82:	2220      	movs	r2, #32
 800ed84:	6823      	ldr	r3, [r4, #0]
 800ed86:	4393      	bics	r3, r2
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	e7a4      	b.n	800ecd6 <_printf_i+0xd2>
 800ed8c:	681a      	ldr	r2, [r3, #0]
 800ed8e:	680d      	ldr	r5, [r1, #0]
 800ed90:	1d10      	adds	r0, r2, #4
 800ed92:	6949      	ldr	r1, [r1, #20]
 800ed94:	6018      	str	r0, [r3, #0]
 800ed96:	6813      	ldr	r3, [r2, #0]
 800ed98:	062e      	lsls	r6, r5, #24
 800ed9a:	d501      	bpl.n	800eda0 <_printf_i+0x19c>
 800ed9c:	6019      	str	r1, [r3, #0]
 800ed9e:	e002      	b.n	800eda6 <_printf_i+0x1a2>
 800eda0:	066d      	lsls	r5, r5, #25
 800eda2:	d5fb      	bpl.n	800ed9c <_printf_i+0x198>
 800eda4:	8019      	strh	r1, [r3, #0]
 800eda6:	2300      	movs	r3, #0
 800eda8:	9e04      	ldr	r6, [sp, #16]
 800edaa:	6123      	str	r3, [r4, #16]
 800edac:	e7c0      	b.n	800ed30 <_printf_i+0x12c>
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	1d11      	adds	r1, r2, #4
 800edb2:	6019      	str	r1, [r3, #0]
 800edb4:	6816      	ldr	r6, [r2, #0]
 800edb6:	2100      	movs	r1, #0
 800edb8:	0030      	movs	r0, r6
 800edba:	6862      	ldr	r2, [r4, #4]
 800edbc:	f000 f874 	bl	800eea8 <memchr>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d001      	beq.n	800edc8 <_printf_i+0x1c4>
 800edc4:	1b80      	subs	r0, r0, r6
 800edc6:	6060      	str	r0, [r4, #4]
 800edc8:	6863      	ldr	r3, [r4, #4]
 800edca:	6123      	str	r3, [r4, #16]
 800edcc:	2300      	movs	r3, #0
 800edce:	9a04      	ldr	r2, [sp, #16]
 800edd0:	7013      	strb	r3, [r2, #0]
 800edd2:	e7ad      	b.n	800ed30 <_printf_i+0x12c>
 800edd4:	0032      	movs	r2, r6
 800edd6:	6923      	ldr	r3, [r4, #16]
 800edd8:	9906      	ldr	r1, [sp, #24]
 800edda:	9805      	ldr	r0, [sp, #20]
 800eddc:	9d07      	ldr	r5, [sp, #28]
 800edde:	47a8      	blx	r5
 800ede0:	3001      	adds	r0, #1
 800ede2:	d0af      	beq.n	800ed44 <_printf_i+0x140>
 800ede4:	6823      	ldr	r3, [r4, #0]
 800ede6:	079b      	lsls	r3, r3, #30
 800ede8:	d415      	bmi.n	800ee16 <_printf_i+0x212>
 800edea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800edec:	68e0      	ldr	r0, [r4, #12]
 800edee:	4298      	cmp	r0, r3
 800edf0:	daaa      	bge.n	800ed48 <_printf_i+0x144>
 800edf2:	0018      	movs	r0, r3
 800edf4:	e7a8      	b.n	800ed48 <_printf_i+0x144>
 800edf6:	0022      	movs	r2, r4
 800edf8:	2301      	movs	r3, #1
 800edfa:	9906      	ldr	r1, [sp, #24]
 800edfc:	9805      	ldr	r0, [sp, #20]
 800edfe:	9e07      	ldr	r6, [sp, #28]
 800ee00:	3219      	adds	r2, #25
 800ee02:	47b0      	blx	r6
 800ee04:	3001      	adds	r0, #1
 800ee06:	d09d      	beq.n	800ed44 <_printf_i+0x140>
 800ee08:	3501      	adds	r5, #1
 800ee0a:	68e3      	ldr	r3, [r4, #12]
 800ee0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee0e:	1a9b      	subs	r3, r3, r2
 800ee10:	42ab      	cmp	r3, r5
 800ee12:	dcf0      	bgt.n	800edf6 <_printf_i+0x1f2>
 800ee14:	e7e9      	b.n	800edea <_printf_i+0x1e6>
 800ee16:	2500      	movs	r5, #0
 800ee18:	e7f7      	b.n	800ee0a <_printf_i+0x206>
 800ee1a:	46c0      	nop			; (mov r8, r8)
 800ee1c:	0800fd0c 	.word	0x0800fd0c
 800ee20:	0800fd1d 	.word	0x0800fd1d

0800ee24 <_realloc_r>:
 800ee24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee26:	0007      	movs	r7, r0
 800ee28:	000e      	movs	r6, r1
 800ee2a:	0014      	movs	r4, r2
 800ee2c:	2900      	cmp	r1, #0
 800ee2e:	d105      	bne.n	800ee3c <_realloc_r+0x18>
 800ee30:	0011      	movs	r1, r2
 800ee32:	f7ff fc13 	bl	800e65c <_malloc_r>
 800ee36:	0005      	movs	r5, r0
 800ee38:	0028      	movs	r0, r5
 800ee3a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ee3c:	2a00      	cmp	r2, #0
 800ee3e:	d103      	bne.n	800ee48 <_realloc_r+0x24>
 800ee40:	f000 f83e 	bl	800eec0 <_free_r>
 800ee44:	0025      	movs	r5, r4
 800ee46:	e7f7      	b.n	800ee38 <_realloc_r+0x14>
 800ee48:	f000 f884 	bl	800ef54 <_malloc_usable_size_r>
 800ee4c:	9001      	str	r0, [sp, #4]
 800ee4e:	4284      	cmp	r4, r0
 800ee50:	d803      	bhi.n	800ee5a <_realloc_r+0x36>
 800ee52:	0035      	movs	r5, r6
 800ee54:	0843      	lsrs	r3, r0, #1
 800ee56:	42a3      	cmp	r3, r4
 800ee58:	d3ee      	bcc.n	800ee38 <_realloc_r+0x14>
 800ee5a:	0021      	movs	r1, r4
 800ee5c:	0038      	movs	r0, r7
 800ee5e:	f7ff fbfd 	bl	800e65c <_malloc_r>
 800ee62:	1e05      	subs	r5, r0, #0
 800ee64:	d0e8      	beq.n	800ee38 <_realloc_r+0x14>
 800ee66:	9b01      	ldr	r3, [sp, #4]
 800ee68:	0022      	movs	r2, r4
 800ee6a:	429c      	cmp	r4, r3
 800ee6c:	d900      	bls.n	800ee70 <_realloc_r+0x4c>
 800ee6e:	001a      	movs	r2, r3
 800ee70:	0031      	movs	r1, r6
 800ee72:	0028      	movs	r0, r5
 800ee74:	f7ff fcea 	bl	800e84c <memcpy>
 800ee78:	0031      	movs	r1, r6
 800ee7a:	0038      	movs	r0, r7
 800ee7c:	f000 f820 	bl	800eec0 <_free_r>
 800ee80:	e7da      	b.n	800ee38 <_realloc_r+0x14>

0800ee82 <memmove>:
 800ee82:	b510      	push	{r4, lr}
 800ee84:	4288      	cmp	r0, r1
 800ee86:	d902      	bls.n	800ee8e <memmove+0xc>
 800ee88:	188b      	adds	r3, r1, r2
 800ee8a:	4298      	cmp	r0, r3
 800ee8c:	d303      	bcc.n	800ee96 <memmove+0x14>
 800ee8e:	2300      	movs	r3, #0
 800ee90:	e007      	b.n	800eea2 <memmove+0x20>
 800ee92:	5c8b      	ldrb	r3, [r1, r2]
 800ee94:	5483      	strb	r3, [r0, r2]
 800ee96:	3a01      	subs	r2, #1
 800ee98:	d2fb      	bcs.n	800ee92 <memmove+0x10>
 800ee9a:	bd10      	pop	{r4, pc}
 800ee9c:	5ccc      	ldrb	r4, [r1, r3]
 800ee9e:	54c4      	strb	r4, [r0, r3]
 800eea0:	3301      	adds	r3, #1
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d1fa      	bne.n	800ee9c <memmove+0x1a>
 800eea6:	e7f8      	b.n	800ee9a <memmove+0x18>

0800eea8 <memchr>:
 800eea8:	b2c9      	uxtb	r1, r1
 800eeaa:	1882      	adds	r2, r0, r2
 800eeac:	4290      	cmp	r0, r2
 800eeae:	d101      	bne.n	800eeb4 <memchr+0xc>
 800eeb0:	2000      	movs	r0, #0
 800eeb2:	4770      	bx	lr
 800eeb4:	7803      	ldrb	r3, [r0, #0]
 800eeb6:	428b      	cmp	r3, r1
 800eeb8:	d0fb      	beq.n	800eeb2 <memchr+0xa>
 800eeba:	3001      	adds	r0, #1
 800eebc:	e7f6      	b.n	800eeac <memchr+0x4>
	...

0800eec0 <_free_r>:
 800eec0:	b570      	push	{r4, r5, r6, lr}
 800eec2:	0005      	movs	r5, r0
 800eec4:	2900      	cmp	r1, #0
 800eec6:	d010      	beq.n	800eeea <_free_r+0x2a>
 800eec8:	1f0c      	subs	r4, r1, #4
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	da00      	bge.n	800eed2 <_free_r+0x12>
 800eed0:	18e4      	adds	r4, r4, r3
 800eed2:	0028      	movs	r0, r5
 800eed4:	f7ff fc44 	bl	800e760 <__malloc_lock>
 800eed8:	4a1d      	ldr	r2, [pc, #116]	; (800ef50 <_free_r+0x90>)
 800eeda:	6813      	ldr	r3, [r2, #0]
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d105      	bne.n	800eeec <_free_r+0x2c>
 800eee0:	6063      	str	r3, [r4, #4]
 800eee2:	6014      	str	r4, [r2, #0]
 800eee4:	0028      	movs	r0, r5
 800eee6:	f7ff fc43 	bl	800e770 <__malloc_unlock>
 800eeea:	bd70      	pop	{r4, r5, r6, pc}
 800eeec:	42a3      	cmp	r3, r4
 800eeee:	d908      	bls.n	800ef02 <_free_r+0x42>
 800eef0:	6820      	ldr	r0, [r4, #0]
 800eef2:	1821      	adds	r1, r4, r0
 800eef4:	428b      	cmp	r3, r1
 800eef6:	d1f3      	bne.n	800eee0 <_free_r+0x20>
 800eef8:	6819      	ldr	r1, [r3, #0]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	1809      	adds	r1, r1, r0
 800eefe:	6021      	str	r1, [r4, #0]
 800ef00:	e7ee      	b.n	800eee0 <_free_r+0x20>
 800ef02:	001a      	movs	r2, r3
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d001      	beq.n	800ef0e <_free_r+0x4e>
 800ef0a:	42a3      	cmp	r3, r4
 800ef0c:	d9f9      	bls.n	800ef02 <_free_r+0x42>
 800ef0e:	6811      	ldr	r1, [r2, #0]
 800ef10:	1850      	adds	r0, r2, r1
 800ef12:	42a0      	cmp	r0, r4
 800ef14:	d10b      	bne.n	800ef2e <_free_r+0x6e>
 800ef16:	6820      	ldr	r0, [r4, #0]
 800ef18:	1809      	adds	r1, r1, r0
 800ef1a:	1850      	adds	r0, r2, r1
 800ef1c:	6011      	str	r1, [r2, #0]
 800ef1e:	4283      	cmp	r3, r0
 800ef20:	d1e0      	bne.n	800eee4 <_free_r+0x24>
 800ef22:	6818      	ldr	r0, [r3, #0]
 800ef24:	685b      	ldr	r3, [r3, #4]
 800ef26:	1841      	adds	r1, r0, r1
 800ef28:	6011      	str	r1, [r2, #0]
 800ef2a:	6053      	str	r3, [r2, #4]
 800ef2c:	e7da      	b.n	800eee4 <_free_r+0x24>
 800ef2e:	42a0      	cmp	r0, r4
 800ef30:	d902      	bls.n	800ef38 <_free_r+0x78>
 800ef32:	230c      	movs	r3, #12
 800ef34:	602b      	str	r3, [r5, #0]
 800ef36:	e7d5      	b.n	800eee4 <_free_r+0x24>
 800ef38:	6820      	ldr	r0, [r4, #0]
 800ef3a:	1821      	adds	r1, r4, r0
 800ef3c:	428b      	cmp	r3, r1
 800ef3e:	d103      	bne.n	800ef48 <_free_r+0x88>
 800ef40:	6819      	ldr	r1, [r3, #0]
 800ef42:	685b      	ldr	r3, [r3, #4]
 800ef44:	1809      	adds	r1, r1, r0
 800ef46:	6021      	str	r1, [r4, #0]
 800ef48:	6063      	str	r3, [r4, #4]
 800ef4a:	6054      	str	r4, [r2, #4]
 800ef4c:	e7ca      	b.n	800eee4 <_free_r+0x24>
 800ef4e:	46c0      	nop			; (mov r8, r8)
 800ef50:	200018e8 	.word	0x200018e8

0800ef54 <_malloc_usable_size_r>:
 800ef54:	1f0b      	subs	r3, r1, #4
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	1f18      	subs	r0, r3, #4
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	da01      	bge.n	800ef62 <_malloc_usable_size_r+0xe>
 800ef5e:	580b      	ldr	r3, [r1, r0]
 800ef60:	18c0      	adds	r0, r0, r3
 800ef62:	4770      	bx	lr

0800ef64 <floor>:
 800ef64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ef66:	004b      	lsls	r3, r1, #1
 800ef68:	4a3e      	ldr	r2, [pc, #248]	; (800f064 <floor+0x100>)
 800ef6a:	0d5b      	lsrs	r3, r3, #21
 800ef6c:	189f      	adds	r7, r3, r2
 800ef6e:	4684      	mov	ip, r0
 800ef70:	000e      	movs	r6, r1
 800ef72:	000c      	movs	r4, r1
 800ef74:	0005      	movs	r5, r0
 800ef76:	9001      	str	r0, [sp, #4]
 800ef78:	2f13      	cmp	r7, #19
 800ef7a:	dc34      	bgt.n	800efe6 <floor+0x82>
 800ef7c:	2f00      	cmp	r7, #0
 800ef7e:	da16      	bge.n	800efae <floor+0x4a>
 800ef80:	4a39      	ldr	r2, [pc, #228]	; (800f068 <floor+0x104>)
 800ef82:	4b3a      	ldr	r3, [pc, #232]	; (800f06c <floor+0x108>)
 800ef84:	4660      	mov	r0, ip
 800ef86:	0031      	movs	r1, r6
 800ef88:	f7f2 f92e 	bl	80011e8 <__aeabi_dadd>
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	2300      	movs	r3, #0
 800ef90:	f7f1 fa8a 	bl	80004a8 <__aeabi_dcmpgt>
 800ef94:	2800      	cmp	r0, #0
 800ef96:	d007      	beq.n	800efa8 <floor+0x44>
 800ef98:	2e00      	cmp	r6, #0
 800ef9a:	da5d      	bge.n	800f058 <floor+0xf4>
 800ef9c:	0074      	lsls	r4, r6, #1
 800ef9e:	0864      	lsrs	r4, r4, #1
 800efa0:	4325      	orrs	r5, r4
 800efa2:	d05c      	beq.n	800f05e <floor+0xfa>
 800efa4:	2500      	movs	r5, #0
 800efa6:	4c32      	ldr	r4, [pc, #200]	; (800f070 <floor+0x10c>)
 800efa8:	46ac      	mov	ip, r5
 800efaa:	0026      	movs	r6, r4
 800efac:	e029      	b.n	800f002 <floor+0x9e>
 800efae:	4b31      	ldr	r3, [pc, #196]	; (800f074 <floor+0x110>)
 800efb0:	413b      	asrs	r3, r7
 800efb2:	9300      	str	r3, [sp, #0]
 800efb4:	400b      	ands	r3, r1
 800efb6:	4303      	orrs	r3, r0
 800efb8:	d023      	beq.n	800f002 <floor+0x9e>
 800efba:	4a2b      	ldr	r2, [pc, #172]	; (800f068 <floor+0x104>)
 800efbc:	4b2b      	ldr	r3, [pc, #172]	; (800f06c <floor+0x108>)
 800efbe:	4660      	mov	r0, ip
 800efc0:	0031      	movs	r1, r6
 800efc2:	f7f2 f911 	bl	80011e8 <__aeabi_dadd>
 800efc6:	2200      	movs	r2, #0
 800efc8:	2300      	movs	r3, #0
 800efca:	f7f1 fa6d 	bl	80004a8 <__aeabi_dcmpgt>
 800efce:	2800      	cmp	r0, #0
 800efd0:	d0ea      	beq.n	800efa8 <floor+0x44>
 800efd2:	2e00      	cmp	r6, #0
 800efd4:	da03      	bge.n	800efde <floor+0x7a>
 800efd6:	2380      	movs	r3, #128	; 0x80
 800efd8:	035b      	lsls	r3, r3, #13
 800efda:	413b      	asrs	r3, r7
 800efdc:	18f4      	adds	r4, r6, r3
 800efde:	9b00      	ldr	r3, [sp, #0]
 800efe0:	2500      	movs	r5, #0
 800efe2:	439c      	bics	r4, r3
 800efe4:	e7e0      	b.n	800efa8 <floor+0x44>
 800efe6:	2f33      	cmp	r7, #51	; 0x33
 800efe8:	dd0f      	ble.n	800f00a <floor+0xa6>
 800efea:	2380      	movs	r3, #128	; 0x80
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	429f      	cmp	r7, r3
 800eff0:	d107      	bne.n	800f002 <floor+0x9e>
 800eff2:	0002      	movs	r2, r0
 800eff4:	000b      	movs	r3, r1
 800eff6:	4660      	mov	r0, ip
 800eff8:	0031      	movs	r1, r6
 800effa:	f7f2 f8f5 	bl	80011e8 <__aeabi_dadd>
 800effe:	4684      	mov	ip, r0
 800f000:	000e      	movs	r6, r1
 800f002:	4660      	mov	r0, ip
 800f004:	0031      	movs	r1, r6
 800f006:	b003      	add	sp, #12
 800f008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f00a:	4a1b      	ldr	r2, [pc, #108]	; (800f078 <floor+0x114>)
 800f00c:	189b      	adds	r3, r3, r2
 800f00e:	2201      	movs	r2, #1
 800f010:	4252      	negs	r2, r2
 800f012:	40da      	lsrs	r2, r3
 800f014:	9200      	str	r2, [sp, #0]
 800f016:	4202      	tst	r2, r0
 800f018:	d0f3      	beq.n	800f002 <floor+0x9e>
 800f01a:	4a13      	ldr	r2, [pc, #76]	; (800f068 <floor+0x104>)
 800f01c:	4b13      	ldr	r3, [pc, #76]	; (800f06c <floor+0x108>)
 800f01e:	4660      	mov	r0, ip
 800f020:	0031      	movs	r1, r6
 800f022:	f7f2 f8e1 	bl	80011e8 <__aeabi_dadd>
 800f026:	2200      	movs	r2, #0
 800f028:	2300      	movs	r3, #0
 800f02a:	f7f1 fa3d 	bl	80004a8 <__aeabi_dcmpgt>
 800f02e:	2800      	cmp	r0, #0
 800f030:	d0ba      	beq.n	800efa8 <floor+0x44>
 800f032:	2e00      	cmp	r6, #0
 800f034:	da02      	bge.n	800f03c <floor+0xd8>
 800f036:	2f14      	cmp	r7, #20
 800f038:	d103      	bne.n	800f042 <floor+0xde>
 800f03a:	3401      	adds	r4, #1
 800f03c:	9b00      	ldr	r3, [sp, #0]
 800f03e:	439d      	bics	r5, r3
 800f040:	e7b2      	b.n	800efa8 <floor+0x44>
 800f042:	2234      	movs	r2, #52	; 0x34
 800f044:	2301      	movs	r3, #1
 800f046:	1bd2      	subs	r2, r2, r7
 800f048:	4093      	lsls	r3, r2
 800f04a:	18ed      	adds	r5, r5, r3
 800f04c:	9b01      	ldr	r3, [sp, #4]
 800f04e:	429d      	cmp	r5, r3
 800f050:	419b      	sbcs	r3, r3
 800f052:	425b      	negs	r3, r3
 800f054:	18f4      	adds	r4, r6, r3
 800f056:	e7f1      	b.n	800f03c <floor+0xd8>
 800f058:	2500      	movs	r5, #0
 800f05a:	002c      	movs	r4, r5
 800f05c:	e7a4      	b.n	800efa8 <floor+0x44>
 800f05e:	2480      	movs	r4, #128	; 0x80
 800f060:	0624      	lsls	r4, r4, #24
 800f062:	e7a1      	b.n	800efa8 <floor+0x44>
 800f064:	fffffc01 	.word	0xfffffc01
 800f068:	8800759c 	.word	0x8800759c
 800f06c:	7e37e43c 	.word	0x7e37e43c
 800f070:	bff00000 	.word	0xbff00000
 800f074:	000fffff 	.word	0x000fffff
 800f078:	fffffbed 	.word	0xfffffbed

0800f07c <_init>:
 800f07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f07e:	46c0      	nop			; (mov r8, r8)
 800f080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f082:	bc08      	pop	{r3}
 800f084:	469e      	mov	lr, r3
 800f086:	4770      	bx	lr

0800f088 <_fini>:
 800f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f08a:	46c0      	nop			; (mov r8, r8)
 800f08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f08e:	bc08      	pop	{r3}
 800f090:	469e      	mov	lr, r3
 800f092:	4770      	bx	lr
